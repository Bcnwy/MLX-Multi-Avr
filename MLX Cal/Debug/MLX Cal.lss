
MLX Cal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000082  00800100  00001dda  00001e6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001dda  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002c  00800182  00800182  00001ef0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001ef0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001f4c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b8  00000000  00000000  00001f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006527  00000000  00000000  00002244  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fa4  00000000  00000000  0000876b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000efd  00000000  00000000  0000970f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000aec  00000000  00000000  0000a60c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001aa7  00000000  00000000  0000b0f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000038d6  00000000  00000000  0000cb9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000590  00000000  00000000  00010475  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__ctors_end>
       4:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
       8:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
       c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      10:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      14:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      18:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      1c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      20:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      24:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      28:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      2c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      30:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      34:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__vector_13>
      38:	0c 94 9a 02 	jmp	0x534	; 0x534 <__vector_14>
      3c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      40:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      44:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      48:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      4c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      50:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      54:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      58:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      5c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      60:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      64:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	6e 61       	ori	r22, 0x1E	; 30
      6a:	6e 00       	.word	0x006e	; ????

0000006c <__c.2177>:
      6c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      7c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      8c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      9c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      ac:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      bc:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      cc:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      dc:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      ec:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      fc:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     10c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     11c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     12c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     13c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     14c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     15c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000016a <__ctors_start>:
     16a:	13 06       	cpc	r1, r19
     16c:	20 07       	cpc	r18, r16

0000016e <__ctors_end>:
     16e:	11 24       	eor	r1, r1
     170:	1f be       	out	0x3f, r1	; 63
     172:	cf ef       	ldi	r28, 0xFF	; 255
     174:	d8 e0       	ldi	r29, 0x08	; 8
     176:	de bf       	out	0x3e, r29	; 62
     178:	cd bf       	out	0x3d, r28	; 61

0000017a <__do_copy_data>:
     17a:	11 e0       	ldi	r17, 0x01	; 1
     17c:	a0 e0       	ldi	r26, 0x00	; 0
     17e:	b1 e0       	ldi	r27, 0x01	; 1
     180:	ea ed       	ldi	r30, 0xDA	; 218
     182:	fd e1       	ldi	r31, 0x1D	; 29
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x10>
     186:	05 90       	lpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	a2 38       	cpi	r26, 0x82	; 130
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0xc>

00000190 <__do_clear_bss>:
     190:	21 e0       	ldi	r18, 0x01	; 1
     192:	a2 e8       	ldi	r26, 0x82	; 130
     194:	b1 e0       	ldi	r27, 0x01	; 1
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	ae 3a       	cpi	r26, 0xAE	; 174
     19c:	b2 07       	cpc	r27, r18
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>

000001a0 <__do_global_ctors>:
     1a0:	10 e0       	ldi	r17, 0x00	; 0
     1a2:	c7 eb       	ldi	r28, 0xB7	; 183
     1a4:	d0 e0       	ldi	r29, 0x00	; 0
     1a6:	04 c0       	rjmp	.+8      	; 0x1b0 <__do_global_ctors+0x10>
     1a8:	21 97       	sbiw	r28, 0x01	; 1
     1aa:	fe 01       	movw	r30, r28
     1ac:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <__tablejump2__>
     1b0:	c5 3b       	cpi	r28, 0xB5	; 181
     1b2:	d1 07       	cpc	r29, r17
     1b4:	c9 f7       	brne	.-14     	; 0x1a8 <__do_global_ctors+0x8>
     1b6:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <main>
     1ba:	0c 94 eb 0e 	jmp	0x1dd6	; 0x1dd6 <_exit>

000001be <__bad_interrupt>:
     1be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001c2 <_ZN17Adafruit_MLX90614C1Eh>:
template<typename V>
inline V constrain(V x, V a, V b) {
	return((x < a)?a:(b<x)?b:x);
}
/*********************************************************************/ 
Adafruit_MLX90614::Adafruit_MLX90614(uint8_t i2caddr) {
     1c2:	1f 93       	push	r17
     1c4:	cf 93       	push	r28
     1c6:	df 93       	push	r29
     1c8:	ec 01       	movw	r28, r24
     1ca:	16 2f       	mov	r17, r22
	  }
 class I2c
 {
 public:
    I2c()
    {
     1cc:	18 86       	std	Y+8, r1	; 0x08
     1ce:	19 86       	std	Y+9, r1	; 0x09
	    i2c_init();
     1d0:	0e 94 1e 06 	call	0xc3c	; 0xc3c <i2c_init>
  _addr = i2caddr;
     1d4:	1a 87       	std	Y+10, r17	; 0x0a
}
     1d6:	df 91       	pop	r29
     1d8:	cf 91       	pop	r28
     1da:	1f 91       	pop	r17
     1dc:	08 95       	ret

000001de <_ZN17Adafruit_MLX906146read16EhPj>:
	return (((float)ke) / 65535.0);
}

/*********************************************************************/

uint8_t Adafruit_MLX90614::read16(uint8_t a , uint16_t * d) {
     1de:	ef 92       	push	r14
     1e0:	ff 92       	push	r15
     1e2:	0f 93       	push	r16
     1e4:	1f 93       	push	r17
     1e6:	cf 93       	push	r28
     1e8:	8c 01       	movw	r16, r24
     1ea:	c6 2f       	mov	r28, r22
     1ec:	7a 01       	movw	r14, r20
  uint16_t ret;
  Wire.beginTransmission(_addr); // start transmission to device 
     1ee:	fc 01       	movw	r30, r24
     1f0:	82 85       	ldd	r24, Z+10	; 0x0a
    }
     void beginTransmission(uint8_t address)
     {
         m_bufferIndex = 0;
     1f2:	10 86       	std	Z+8, r1	; 0x08

         i2c_start((address << 1) | I2C_WRITE);
     1f4:	88 0f       	add	r24, r24
     1f6:	0e 94 27 06 	call	0xc4e	; 0xc4e <i2c_start>
     }

     void write(uint8_t byte)
     {
         if (m_bufferIndex == c_bufferSize)
     1fa:	f8 01       	movw	r30, r16
     1fc:	80 85       	ldd	r24, Z+8	; 0x08
     1fe:	88 30       	cpi	r24, 0x08	; 8
     200:	59 f0       	breq	.+22     	; 0x218 <_ZN17Adafruit_MLX906146read16EhPj+0x3a>
             return;

         m_buffer[m_bufferIndex++] = byte;
     202:	91 e0       	ldi	r25, 0x01	; 1
     204:	98 0f       	add	r25, r24
     206:	90 87       	std	Z+8, r25	; 0x08
     208:	e8 0f       	add	r30, r24
     20a:	f1 1d       	adc	r31, r1
     20c:	c0 83       	st	Z, r28
    }

    uint8_t endTransmission(bool stop = true)
    {
         for (uint8_t index = 0; index < m_bufferIndex; ++index) {
     20e:	f8 01       	movw	r30, r16
     210:	80 85       	ldd	r24, Z+8	; 0x08
     212:	88 23       	and	r24, r24
     214:	09 f4       	brne	.+2      	; 0x218 <_ZN17Adafruit_MLX906146read16EhPj+0x3a>
     216:	4e c0       	rjmp	.+156    	; 0x2b4 <_ZN17Adafruit_MLX906146read16EhPj+0xd6>
	return (((float)ke) / 65535.0);
}

/*********************************************************************/

uint8_t Adafruit_MLX90614::read16(uint8_t a , uint16_t * d) {
     218:	c0 e0       	ldi	r28, 0x00	; 0
             if (i2c_write(m_buffer[index]) != 0)
     21a:	f8 01       	movw	r30, r16
     21c:	ec 0f       	add	r30, r28
     21e:	f1 1d       	adc	r31, r1
     220:	80 81       	ld	r24, Z
     222:	0e 94 52 06 	call	0xca4	; 0xca4 <i2c_write>
     226:	81 11       	cpse	r24, r1
     228:	45 c0       	rjmp	.+138    	; 0x2b4 <_ZN17Adafruit_MLX906146read16EhPj+0xd6>
         m_buffer[m_bufferIndex++] = byte;
    }

    uint8_t endTransmission(bool stop = true)
    {
         for (uint8_t index = 0; index < m_bufferIndex; ++index) {
     22a:	cf 5f       	subi	r28, 0xFF	; 255
     22c:	f8 01       	movw	r30, r16
     22e:	80 85       	ldd	r24, Z+8	; 0x08
     230:	c8 17       	cp	r28, r24
     232:	98 f3       	brcs	.-26     	; 0x21a <_ZN17Adafruit_MLX906146read16EhPj+0x3c>
     234:	3f c0       	rjmp	.+126    	; 0x2b4 <_ZN17Adafruit_MLX906146read16EhPj+0xd6>
         return m_bufferIndex;
     }

     uint8_t read()
     {
         if (m_bufferReadIndex == m_bufferIndex)
     236:	f8 01       	movw	r30, r16
     238:	81 85       	ldd	r24, Z+9	; 0x09
     23a:	90 85       	ldd	r25, Z+8	; 0x08
     23c:	89 17       	cp	r24, r25
     23e:	b1 f0       	breq	.+44     	; 0x26c <_ZN17Adafruit_MLX906146read16EhPj+0x8e>
             return 0;
        return m_buffer[m_bufferReadIndex++];
     240:	41 e0       	ldi	r20, 0x01	; 1
     242:	48 0f       	add	r20, r24
     244:	41 87       	std	Z+9, r20	; 0x09
     246:	e8 0f       	add	r30, r24
     248:	f1 1d       	adc	r31, r1
  Wire.beginTransmission(_addr); // start transmission to device 
  Wire.write(a); // sends register address to read from
  Wire.endTransmission(false); // end transmission
  
  Wire.requestFrom(_addr, (uint8_t)3);// send data n-bytes read
  ret = Wire.read(); // receive DATA
     24a:	20 81       	ld	r18, Z
     24c:	30 e0       	ldi	r19, 0x00	; 0
         return m_bufferIndex;
     }

     uint8_t read()
     {
         if (m_bufferReadIndex == m_bufferIndex)
     24e:	94 17       	cp	r25, r20
     250:	d1 f1       	breq	.+116    	; 0x2c6 <_ZN17Adafruit_MLX906146read16EhPj+0xe8>
             return 0;
        return m_buffer[m_bufferReadIndex++];
     252:	8e 5f       	subi	r24, 0xFE	; 254
     254:	f8 01       	movw	r30, r16
     256:	81 87       	std	Z+9, r24	; 0x09
     258:	e4 0f       	add	r30, r20
     25a:	f1 1d       	adc	r31, r1
  ret |= Wire.read() << 8; // receive DATA
     25c:	40 81       	ld	r20, Z
     25e:	34 2b       	or	r19, r20
         return m_bufferIndex;
     }

     uint8_t read()
     {
         if (m_bufferReadIndex == m_bufferIndex)
     260:	89 17       	cp	r24, r25
     262:	89 f1       	breq	.+98     	; 0x2c6 <_ZN17Adafruit_MLX906146read16EhPj+0xe8>
             return 0;
        return m_buffer[m_bufferReadIndex++];
     264:	8f 5f       	subi	r24, 0xFF	; 255
     266:	f8 01       	movw	r30, r16
     268:	81 87       	std	Z+9, r24	; 0x09
     26a:	2d c0       	rjmp	.+90     	; 0x2c6 <_ZN17Adafruit_MLX906146read16EhPj+0xe8>
     26c:	20 e0       	ldi	r18, 0x00	; 0
     26e:	30 e0       	ldi	r19, 0x00	; 0
     270:	2a c0       	rjmp	.+84     	; 0x2c6 <_ZN17Adafruit_MLX906146read16EhPj+0xe8>
         if (i2c_start((address << 1) | I2C_READ) != 0)
             return 0;

        m_bufferIndex = 0;
         while (--quantity > 0) {
             m_buffer[m_bufferIndex++] = i2c_readAck();
     272:	81 e0       	ldi	r24, 0x01	; 1
     274:	f8 01       	movw	r30, r16
     276:	80 87       	std	Z+8, r24	; 0x08
     278:	0e 94 64 06 	call	0xcc8	; 0xcc8 <i2c_readAck>
     27c:	f8 01       	movw	r30, r16
     27e:	80 83       	st	Z, r24
     280:	c0 85       	ldd	r28, Z+8	; 0x08
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	8c 0f       	add	r24, r28
     286:	80 87       	std	Z+8, r24	; 0x08
     288:	0e 94 64 06 	call	0xcc8	; 0xcc8 <i2c_readAck>
     28c:	f8 01       	movw	r30, r16
     28e:	ec 0f       	add	r30, r28
     290:	f1 1d       	adc	r31, r1
     292:	80 83       	st	Z, r24
         }
         m_buffer[m_bufferIndex++] = i2c_readNak();
     294:	f8 01       	movw	r30, r16
     296:	c0 85       	ldd	r28, Z+8	; 0x08
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	8c 0f       	add	r24, r28
     29c:	80 87       	std	Z+8, r24	; 0x08
     29e:	0e 94 6f 06 	call	0xcde	; 0xcde <i2c_readNak>
     2a2:	f8 01       	movw	r30, r16
     2a4:	ec 0f       	add	r30, r28
     2a6:	f1 1d       	adc	r31, r1
     2a8:	80 83       	st	Z, r24
         m_bufferReadIndex = 0;
     2aa:	f8 01       	movw	r30, r16
     2ac:	11 86       	std	Z+9, r1	; 0x09

         if (stop)
             i2c_stop();
     2ae:	0e 94 4e 06 	call	0xc9c	; 0xc9c <i2c_stop>
     2b2:	c1 cf       	rjmp	.-126    	; 0x236 <_ZN17Adafruit_MLX906146read16EhPj+0x58>
     {
        // quantity = Sensors::min(quantity, c_bufferSize);
         if (quantity == 0)
             return 0;

         if (i2c_start((address << 1) | I2C_READ) != 0)
     2b4:	f8 01       	movw	r30, r16
     2b6:	82 85       	ldd	r24, Z+10	; 0x0a
     2b8:	88 0f       	add	r24, r24
     2ba:	81 60       	ori	r24, 0x01	; 1
     2bc:	0e 94 27 06 	call	0xc4e	; 0xc4e <i2c_start>
     2c0:	88 23       	and	r24, r24
     2c2:	b9 f2       	breq	.-82     	; 0x272 <_ZN17Adafruit_MLX906146read16EhPj+0x94>
     2c4:	b8 cf       	rjmp	.-144    	; 0x236 <_ZN17Adafruit_MLX906146read16EhPj+0x58>

  uint8_t pec = Wire.read();
  *d = ret;
     2c6:	f7 01       	movw	r30, r14
     2c8:	31 83       	std	Z+1, r19	; 0x01
     2ca:	20 83       	st	Z, r18
  return 0;
}
     2cc:	80 e0       	ldi	r24, 0x00	; 0
     2ce:	cf 91       	pop	r28
     2d0:	1f 91       	pop	r17
     2d2:	0f 91       	pop	r16
     2d4:	ff 90       	pop	r15
     2d6:	ef 90       	pop	r14
     2d8:	08 95       	ret

000002da <_ZN17Adafruit_MLX906148readTempEh>:

double Adafruit_MLX90614::readAmbientTempC(void) {
  return readTemp(MLX90614_TA);
}

float Adafruit_MLX90614::readTemp(uint8_t reg) {
     2da:	cf 93       	push	r28
     2dc:	df 93       	push	r29
     2de:	00 d0       	rcall	.+0      	; 0x2e0 <_ZN17Adafruit_MLX906148readTempEh+0x6>
     2e0:	cd b7       	in	r28, 0x3d	; 61
     2e2:	de b7       	in	r29, 0x3e	; 62
  float temp;
  uint16_t t;
  read16(reg, &t);
     2e4:	ae 01       	movw	r20, r28
     2e6:	4f 5f       	subi	r20, 0xFF	; 255
     2e8:	5f 4f       	sbci	r21, 0xFF	; 255
     2ea:	0e 94 ef 00 	call	0x1de	; 0x1de <_ZN17Adafruit_MLX906146read16EhPj>
  temp = t * .02;
     2ee:	69 81       	ldd	r22, Y+1	; 0x01
     2f0:	7a 81       	ldd	r23, Y+2	; 0x02
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	0e 94 3a 08 	call	0x1074	; 0x1074 <__floatunsisf>
     2fa:	2a e0       	ldi	r18, 0x0A	; 10
     2fc:	37 ed       	ldi	r19, 0xD7	; 215
     2fe:	43 ea       	ldi	r20, 0xA3	; 163
     300:	5c e3       	ldi	r21, 0x3C	; 60
     302:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <__mulsf3>
  temp -= 273.15;
     306:	23 e3       	ldi	r18, 0x33	; 51
     308:	33 e9       	ldi	r19, 0x93	; 147
     30a:	48 e8       	ldi	r20, 0x88	; 136
     30c:	53 e4       	ldi	r21, 0x43	; 67
     30e:	0e 94 27 07 	call	0xe4e	; 0xe4e <__subsf3>
  return temp;
}
     312:	0f 90       	pop	r0
     314:	0f 90       	pop	r0
     316:	df 91       	pop	r29
     318:	cf 91       	pop	r28
     31a:	08 95       	ret

0000031c <_ZN17Adafruit_MLX9061415readObjectTempCEv>:
Adafruit_MLX90614::Adafruit_MLX90614(uint8_t i2caddr) {
  _addr = i2caddr;
}
/*********************************************************************/
double Adafruit_MLX90614::readObjectTempC(void) {
  return readTemp(MLX90614_TOBJ1);
     31c:	67 e0       	ldi	r22, 0x07	; 7
     31e:	0e 94 6d 01 	call	0x2da	; 0x2da <_ZN17Adafruit_MLX906148readTempEh>
}
     322:	08 95       	ret

00000324 <_ZN17Adafruit_MLX9061414readEmissivityEv>:
	// Write that value to the ke register
	return writeEEPROM(MLX90614_EMISS, (int16_t)ke);
}

float Adafruit_MLX90614::readEmissivity(void)
{
     324:	cf 93       	push	r28
     326:	df 93       	push	r29
     328:	00 d0       	rcall	.+0      	; 0x32a <_ZN17Adafruit_MLX9061414readEmissivityEv+0x6>
     32a:	cd b7       	in	r28, 0x3d	; 61
     32c:	de b7       	in	r29, 0x3e	; 62
	uint16_t ke;
	if (read16(MLX90614_EMISS, &ke)) return 1; //return fail
     32e:	ae 01       	movw	r20, r28
     330:	4f 5f       	subi	r20, 0xFF	; 255
     332:	5f 4f       	sbci	r21, 0xFF	; 255
     334:	64 e2       	ldi	r22, 0x24	; 36
     336:	0e 94 ef 00 	call	0x1de	; 0x1de <_ZN17Adafruit_MLX906146read16EhPj>
     33a:	81 11       	cpse	r24, r1
     33c:	0d c0       	rjmp	.+26     	; 0x358 <_ZN17Adafruit_MLX9061414readEmissivityEv+0x34>
	
	// If we successfully read from the ke register
	// calculate the emissivity between 0.1 and 1.0:
	return (((float)ke) / 65535.0);
     33e:	69 81       	ldd	r22, Y+1	; 0x01
     340:	7a 81       	ldd	r23, Y+2	; 0x02
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	0e 94 3a 08 	call	0x1074	; 0x1074 <__floatunsisf>
     34a:	20 e0       	ldi	r18, 0x00	; 0
     34c:	3f ef       	ldi	r19, 0xFF	; 255
     34e:	4f e7       	ldi	r20, 0x7F	; 127
     350:	57 e4       	ldi	r21, 0x47	; 71
     352:	0e 94 99 07 	call	0xf32	; 0xf32 <__divsf3>
     356:	04 c0       	rjmp	.+8      	; 0x360 <_ZN17Adafruit_MLX9061414readEmissivityEv+0x3c>
}

float Adafruit_MLX90614::readEmissivity(void)
{
	uint16_t ke;
	if (read16(MLX90614_EMISS, &ke)) return 1; //return fail
     358:	60 e0       	ldi	r22, 0x00	; 0
     35a:	70 e0       	ldi	r23, 0x00	; 0
     35c:	80 e8       	ldi	r24, 0x80	; 128
     35e:	9f e3       	ldi	r25, 0x3F	; 63
	
	// If we successfully read from the ke register
	// calculate the emissivity between 0.1 and 1.0:
	return (((float)ke) / 65535.0);
}
     360:	0f 90       	pop	r0
     362:	0f 90       	pop	r0
     364:	df 91       	pop	r29
     366:	cf 91       	pop	r28
     368:	08 95       	ret

0000036a <_ZN17Adafruit_MLX906144crc8Ehh>:

uint8_t Adafruit_MLX90614::crc8 (uint8_t inCrc, uint8_t inData)
{
	uint8_t i;
	uint8_t data;
	data = inCrc ^ inData;
     36a:	86 2f       	mov	r24, r22
     36c:	84 27       	eor	r24, r20
     36e:	98 e0       	ldi	r25, 0x08	; 8
	for ( i = 0; i < 8; i++ )
	{
		if (( data & 0x80 ) != 0 )
		{
			data <<= 1;
			data ^= 0x07;
     370:	27 e0       	ldi	r18, 0x07	; 7
	uint8_t i;
	uint8_t data;
	data = inCrc ^ inData;
	for ( i = 0; i < 8; i++ )
	{
		if (( data & 0x80 ) != 0 )
     372:	88 23       	and	r24, r24
     374:	1c f4       	brge	.+6      	; 0x37c <_ZN17Adafruit_MLX906144crc8Ehh+0x12>
		{
			data <<= 1;
     376:	88 0f       	add	r24, r24
			data ^= 0x07;
     378:	82 27       	eor	r24, r18
     37a:	01 c0       	rjmp	.+2      	; 0x37e <_ZN17Adafruit_MLX906144crc8Ehh+0x14>
		}
		else
		{
			data <<= 1;
     37c:	88 0f       	add	r24, r24
     37e:	91 50       	subi	r25, 0x01	; 1
uint8_t Adafruit_MLX90614::crc8 (uint8_t inCrc, uint8_t inData)
{
	uint8_t i;
	uint8_t data;
	data = inCrc ^ inData;
	for ( i = 0; i < 8; i++ )
     380:	c1 f7       	brne	.-16     	; 0x372 <_ZN17Adafruit_MLX906144crc8Ehh+0x8>
		{
			data <<= 1;
		}
	}
	return data;
}
     382:	08 95       	ret

00000384 <_ZN17Adafruit_MLX906147write16Ehi>:
  uint8_t pec = Wire.read();
  *d = ret;
  return 0;
}
uint8_t Adafruit_MLX90614::write16(uint8_t reg, int16_t data)
{
     384:	df 92       	push	r13
     386:	ef 92       	push	r14
     388:	ff 92       	push	r15
     38a:	0f 93       	push	r16
     38c:	1f 93       	push	r17
     38e:	cf 93       	push	r28
     390:	df 93       	push	r29
     392:	8c 01       	movw	r16, r24
     394:	e6 2e       	mov	r14, r22
     396:	f4 2e       	mov	r15, r20
     398:	d5 2f       	mov	r29, r21
	uint8_t crc;
	uint8_t lsb = data & 0x00FF;
	uint8_t msb = (data >> 8);
	
	crc = crc8(0, (_addr << 1));
     39a:	fc 01       	movw	r30, r24
     39c:	c2 85       	ldd	r28, Z+10	; 0x0a
     39e:	cc 0f       	add	r28, r28
     3a0:	4c 2f       	mov	r20, r28
     3a2:	60 e0       	ldi	r22, 0x00	; 0
     3a4:	0e 94 b5 01 	call	0x36a	; 0x36a <_ZN17Adafruit_MLX906144crc8Ehh>
	crc = crc8(crc, reg);
     3a8:	4e 2d       	mov	r20, r14
     3aa:	68 2f       	mov	r22, r24
     3ac:	c8 01       	movw	r24, r16
     3ae:	0e 94 b5 01 	call	0x36a	; 0x36a <_ZN17Adafruit_MLX906144crc8Ehh>
	crc = crc8(crc, lsb);
     3b2:	4f 2d       	mov	r20, r15
     3b4:	68 2f       	mov	r22, r24
     3b6:	c8 01       	movw	r24, r16
     3b8:	0e 94 b5 01 	call	0x36a	; 0x36a <_ZN17Adafruit_MLX906144crc8Ehh>
	crc = crc8(crc, msb);
     3bc:	4d 2f       	mov	r20, r29
     3be:	68 2f       	mov	r22, r24
     3c0:	c8 01       	movw	r24, r16
     3c2:	0e 94 b5 01 	call	0x36a	; 0x36a <_ZN17Adafruit_MLX906144crc8Ehh>
     3c6:	d8 2e       	mov	r13, r24
    {
	    i2c_init();
    }
     void beginTransmission(uint8_t address)
     {
         m_bufferIndex = 0;
     3c8:	f8 01       	movw	r30, r16
     3ca:	10 86       	std	Z+8, r1	; 0x08

         i2c_start((address << 1) | I2C_WRITE);
     3cc:	8c 2f       	mov	r24, r28
     3ce:	0e 94 27 06 	call	0xc4e	; 0xc4e <i2c_start>
     }

     void write(uint8_t byte)
     {
         if (m_bufferIndex == c_bufferSize)
     3d2:	f8 01       	movw	r30, r16
     3d4:	90 85       	ldd	r25, Z+8	; 0x08
     3d6:	98 30       	cpi	r25, 0x08	; 8
     3d8:	21 f1       	breq	.+72     	; 0x422 <_ZN17Adafruit_MLX906147write16Ehi+0x9e>
             return;

         m_buffer[m_bufferIndex++] = byte;
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	89 0f       	add	r24, r25
     3de:	80 87       	std	Z+8, r24	; 0x08
     3e0:	e9 0f       	add	r30, r25
     3e2:	f1 1d       	adc	r31, r1
     3e4:	e0 82       	st	Z, r14
         i2c_start((address << 1) | I2C_WRITE);
     }

     void write(uint8_t byte)
     {
         if (m_bufferIndex == c_bufferSize)
     3e6:	f8 01       	movw	r30, r16
     3e8:	90 85       	ldd	r25, Z+8	; 0x08
     3ea:	98 30       	cpi	r25, 0x08	; 8
     3ec:	f1 f0       	breq	.+60     	; 0x42a <_ZN17Adafruit_MLX906147write16Ehi+0xa6>
             return;

         m_buffer[m_bufferIndex++] = byte;
     3ee:	81 e0       	ldi	r24, 0x01	; 1
     3f0:	89 0f       	add	r24, r25
     3f2:	80 87       	std	Z+8, r24	; 0x08
     3f4:	e9 0f       	add	r30, r25
     3f6:	f1 1d       	adc	r31, r1
     3f8:	f0 82       	st	Z, r15
         i2c_start((address << 1) | I2C_WRITE);
     }

     void write(uint8_t byte)
     {
         if (m_bufferIndex == c_bufferSize)
     3fa:	f8 01       	movw	r30, r16
     3fc:	90 85       	ldd	r25, Z+8	; 0x08
     3fe:	98 30       	cpi	r25, 0x08	; 8
     400:	a1 f0       	breq	.+40     	; 0x42a <_ZN17Adafruit_MLX906147write16Ehi+0xa6>
             return;

         m_buffer[m_bufferIndex++] = byte;
     402:	81 e0       	ldi	r24, 0x01	; 1
     404:	89 0f       	add	r24, r25
     406:	80 87       	std	Z+8, r24	; 0x08
     408:	e9 0f       	add	r30, r25
     40a:	f1 1d       	adc	r31, r1
     40c:	d0 83       	st	Z, r29
         i2c_start((address << 1) | I2C_WRITE);
     }

     void write(uint8_t byte)
     {
         if (m_bufferIndex == c_bufferSize)
     40e:	f8 01       	movw	r30, r16
     410:	90 85       	ldd	r25, Z+8	; 0x08
     412:	98 30       	cpi	r25, 0x08	; 8
     414:	51 f0       	breq	.+20     	; 0x42a <_ZN17Adafruit_MLX906147write16Ehi+0xa6>
             return;

         m_buffer[m_bufferIndex++] = byte;
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	89 0f       	add	r24, r25
     41a:	80 87       	std	Z+8, r24	; 0x08
     41c:	e9 0f       	add	r30, r25
     41e:	f1 1d       	adc	r31, r1
     420:	d0 82       	st	Z, r13
    }

    uint8_t endTransmission(bool stop = true)
    {
         for (uint8_t index = 0; index < m_bufferIndex; ++index) {
     422:	f8 01       	movw	r30, r16
     424:	80 85       	ldd	r24, Z+8	; 0x08
     426:	88 23       	and	r24, r24
     428:	71 f0       	breq	.+28     	; 0x446 <_ZN17Adafruit_MLX906147write16Ehi+0xc2>
  uint8_t pec = Wire.read();
  *d = ret;
  return 0;
}
uint8_t Adafruit_MLX90614::write16(uint8_t reg, int16_t data)
{
     42a:	c0 e0       	ldi	r28, 0x00	; 0
             if (i2c_write(m_buffer[index]) != 0)
     42c:	f8 01       	movw	r30, r16
     42e:	ec 0f       	add	r30, r28
     430:	f1 1d       	adc	r31, r1
     432:	80 81       	ld	r24, Z
     434:	0e 94 52 06 	call	0xca4	; 0xca4 <i2c_write>
     438:	81 11       	cpse	r24, r1
     43a:	09 c0       	rjmp	.+18     	; 0x44e <_ZN17Adafruit_MLX906147write16Ehi+0xca>
         m_buffer[m_bufferIndex++] = byte;
    }

    uint8_t endTransmission(bool stop = true)
    {
         for (uint8_t index = 0; index < m_bufferIndex; ++index) {
     43c:	cf 5f       	subi	r28, 0xFF	; 255
     43e:	f8 01       	movw	r30, r16
     440:	80 85       	ldd	r24, Z+8	; 0x08
     442:	c8 17       	cp	r28, r24
     444:	98 f3       	brcs	.-26     	; 0x42c <_ZN17Adafruit_MLX906147write16Ehi+0xa8>
             if (i2c_write(m_buffer[index]) != 0)
                 return 1;
         }

        if (stop)i2c_stop();
     446:	0e 94 4e 06 	call	0xc9c	; 0xc9c <i2c_stop>
			 
		return 0;	
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	01 c0       	rjmp	.+2      	; 0x450 <_ZN17Adafruit_MLX906147write16Ehi+0xcc>

    uint8_t endTransmission(bool stop = true)
    {
         for (uint8_t index = 0; index < m_bufferIndex; ++index) {
             if (i2c_write(m_buffer[index]) != 0)
                 return 1;
     44e:	81 e0       	ldi	r24, 0x01	; 1
	Wire.write(reg);
	Wire.write(lsb);
	Wire.write(msb);
	Wire.write(crc);
	return Wire.endTransmission(true);
}
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	1f 91       	pop	r17
     456:	0f 91       	pop	r16
     458:	ff 90       	pop	r15
     45a:	ef 90       	pop	r14
     45c:	df 90       	pop	r13
     45e:	08 95       	ret

00000460 <_ZN17Adafruit_MLX9061411writeEEPROMEhi>:
uint8_t Adafruit_MLX90614::writeEEPROM(uint8_t reg, int16_t data)
{
     460:	ef 92       	push	r14
     462:	ff 92       	push	r15
     464:	1f 93       	push	r17
     466:	cf 93       	push	r28
     468:	df 93       	push	r29
     46a:	ec 01       	movw	r28, r24
     46c:	16 2f       	mov	r17, r22
     46e:	7a 01       	movw	r14, r20
	// Clear out EEPROM first:
	if (write16(reg, 0) != 0)
     470:	40 e0       	ldi	r20, 0x00	; 0
     472:	50 e0       	ldi	r21, 0x00	; 0
     474:	0e 94 c2 01 	call	0x384	; 0x384 <_ZN17Adafruit_MLX906147write16Ehi>
     478:	81 11       	cpse	r24, r1
     47a:	17 c0       	rjmp	.+46     	; 0x4aa <_ZN17Adafruit_MLX9061411writeEEPROMEhi+0x4a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     47c:	8f e1       	ldi	r24, 0x1F	; 31
     47e:	9e e4       	ldi	r25, 0x4E	; 78
     480:	01 97       	sbiw	r24, 0x01	; 1
     482:	f1 f7       	brne	.-4      	; 0x480 <_ZN17Adafruit_MLX9061411writeEEPROMEhi+0x20>
     484:	00 c0       	rjmp	.+0      	; 0x486 <_ZN17Adafruit_MLX9061411writeEEPROMEhi+0x26>
     486:	00 00       	nop
	return 1; // If the write failed, return 1
	_delay_ms(5); // Delay tErase
	
	uint8_t i2cRet = write16(reg, data);
     488:	a7 01       	movw	r20, r14
     48a:	61 2f       	mov	r22, r17
     48c:	ce 01       	movw	r24, r28
     48e:	0e 94 c2 01 	call	0x384	; 0x384 <_ZN17Adafruit_MLX906147write16Ehi>
     492:	98 2f       	mov	r25, r24
     494:	ef e1       	ldi	r30, 0x1F	; 31
     496:	fe e4       	ldi	r31, 0x4E	; 78
     498:	31 97       	sbiw	r30, 0x01	; 1
     49a:	f1 f7       	brne	.-4      	; 0x498 <_ZN17Adafruit_MLX9061411writeEEPROMEhi+0x38>
     49c:	00 c0       	rjmp	.+0      	; 0x49e <_ZN17Adafruit_MLX9061411writeEEPROMEhi+0x3e>
     49e:	00 00       	nop
	_delay_ms(5); // Delay tWrite
	
	if (i2cRet == 0)
     4a0:	81 e0       	ldi	r24, 0x01	; 1
     4a2:	91 11       	cpse	r25, r1
     4a4:	03 c0       	rjmp	.+6      	; 0x4ac <_ZN17Adafruit_MLX9061411writeEEPROMEhi+0x4c>
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	01 c0       	rjmp	.+2      	; 0x4ac <_ZN17Adafruit_MLX9061411writeEEPROMEhi+0x4c>
}
uint8_t Adafruit_MLX90614::writeEEPROM(uint8_t reg, int16_t data)
{
	// Clear out EEPROM first:
	if (write16(reg, 0) != 0)
	return 1; // If the write failed, return 1
     4aa:	81 e0       	ldi	r24, 0x01	; 1
	
	if (i2cRet == 0)
	return 0;
	else
	return 1;
}
     4ac:	df 91       	pop	r29
     4ae:	cf 91       	pop	r28
     4b0:	1f 91       	pop	r17
     4b2:	ff 90       	pop	r15
     4b4:	ef 90       	pop	r14
     4b6:	08 95       	ret

000004b8 <_ZN17Adafruit_MLX9061413setEmissivityEf>:
  temp -= 273.15;
  return temp;
}
/*********************************************************************/
uint8_t Adafruit_MLX90614::setEmissivity(float emis)
{
     4b8:	cf 92       	push	r12
     4ba:	df 92       	push	r13
     4bc:	ef 92       	push	r14
     4be:	ff 92       	push	r15
     4c0:	cf 93       	push	r28
     4c2:	df 93       	push	r29
     4c4:	ec 01       	movw	r28, r24
     4c6:	6a 01       	movw	r12, r20
     4c8:	7b 01       	movw	r14, r22
	// Make sure emissivity is between 0.1 and 1.0
	if ((emis > 1.0) || (emis < 0.1)) return 0; // Return fail if not
     4ca:	20 e0       	ldi	r18, 0x00	; 0
     4cc:	30 e0       	ldi	r19, 0x00	; 0
     4ce:	40 e8       	ldi	r20, 0x80	; 128
     4d0:	5f e3       	ldi	r21, 0x3F	; 63
     4d2:	c7 01       	movw	r24, r14
     4d4:	b6 01       	movw	r22, r12
     4d6:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__gesf2>
     4da:	18 16       	cp	r1, r24
     4dc:	0c f1       	brlt	.+66     	; 0x520 <_ZN17Adafruit_MLX9061413setEmissivityEf+0x68>
     4de:	2d ec       	ldi	r18, 0xCD	; 205
     4e0:	3c ec       	ldi	r19, 0xCC	; 204
     4e2:	4c ec       	ldi	r20, 0xCC	; 204
     4e4:	5d e3       	ldi	r21, 0x3D	; 61
     4e6:	c7 01       	movw	r24, r14
     4e8:	b6 01       	movw	r22, r12
     4ea:	0e 94 94 07 	call	0xf28	; 0xf28 <__cmpsf2>
     4ee:	88 23       	and	r24, r24
     4f0:	cc f0       	brlt	.+50     	; 0x524 <_ZN17Adafruit_MLX9061413setEmissivityEf+0x6c>
	
	// Calculate the raw 16-bit value:
	uint16_t ke = uint16_t(65535.0 * emis);
     4f2:	20 e0       	ldi	r18, 0x00	; 0
     4f4:	3f ef       	ldi	r19, 0xFF	; 255
     4f6:	4f e7       	ldi	r20, 0x7F	; 127
     4f8:	57 e4       	ldi	r21, 0x47	; 71
     4fa:	c7 01       	movw	r24, r14
     4fc:	b6 01       	movw	r22, r12
     4fe:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <__mulsf3>
     502:	0e 94 0b 08 	call	0x1016	; 0x1016 <__fixunssfsi>
#include "util/delay.h"

/*********************************************************************/
template<typename V>
inline V constrain(V x, V a, V b) {
	return((x < a)?a:(b<x)?b:x);
     506:	61 15       	cp	r22, r1
     508:	20 e2       	ldi	r18, 0x20	; 32
     50a:	72 07       	cpc	r23, r18
     50c:	10 f0       	brcs	.+4      	; 0x512 <_ZN17Adafruit_MLX9061413setEmissivityEf+0x5a>
     50e:	ab 01       	movw	r20, r22
     510:	02 c0       	rjmp	.+4      	; 0x516 <_ZN17Adafruit_MLX9061413setEmissivityEf+0x5e>
     512:	40 e0       	ldi	r20, 0x00	; 0
     514:	50 e2       	ldi	r21, 0x20	; 32
	// Calculate the raw 16-bit value:
	uint16_t ke = uint16_t(65535.0 * emis);
	ke = constrain<uint16_t>(ke, 0x2000, 0xFFFF);

	// Write that value to the ke register
	return writeEEPROM(MLX90614_EMISS, (int16_t)ke);
     516:	64 e2       	ldi	r22, 0x24	; 36
     518:	ce 01       	movw	r24, r28
     51a:	0e 94 30 02 	call	0x460	; 0x460 <_ZN17Adafruit_MLX9061411writeEEPROMEhi>
     51e:	03 c0       	rjmp	.+6      	; 0x526 <_ZN17Adafruit_MLX9061413setEmissivityEf+0x6e>
}
/*********************************************************************/
uint8_t Adafruit_MLX90614::setEmissivity(float emis)
{
	// Make sure emissivity is between 0.1 and 1.0
	if ((emis > 1.0) || (emis < 0.1)) return 0; // Return fail if not
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	01 c0       	rjmp	.+2      	; 0x526 <_ZN17Adafruit_MLX9061413setEmissivityEf+0x6e>
     524:	80 e0       	ldi	r24, 0x00	; 0
	uint16_t ke = uint16_t(65535.0 * emis);
	ke = constrain<uint16_t>(ke, 0x2000, 0xFFFF);

	// Write that value to the ke register
	return writeEEPROM(MLX90614_EMISS, (int16_t)ke);
}
     526:	df 91       	pop	r29
     528:	cf 91       	pop	r28
     52a:	ff 90       	pop	r15
     52c:	ef 90       	pop	r14
     52e:	df 90       	pop	r13
     530:	cf 90       	pop	r12
     532:	08 95       	ret

00000534 <__vector_14>:
//Adafruit_MLX90614 MLX_5d(0x5D);
Adafruit_MLX90614 MLX[m_sensorsCount] = {0x5A,0x5B};

volatile unsigned long int count = 0; 
float tol = 1; 
ISR(TIMER0_COMPA_vect){
     534:	1f 92       	push	r1
     536:	0f 92       	push	r0
     538:	0f b6       	in	r0, 0x3f	; 63
     53a:	0f 92       	push	r0
     53c:	11 24       	eor	r1, r1
     53e:	8f 93       	push	r24
     540:	9f 93       	push	r25
     542:	af 93       	push	r26
     544:	bf 93       	push	r27
	count++;
     546:	80 91 82 01 	lds	r24, 0x0182
     54a:	90 91 83 01 	lds	r25, 0x0183
     54e:	a0 91 84 01 	lds	r26, 0x0184
     552:	b0 91 85 01 	lds	r27, 0x0185
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	a1 1d       	adc	r26, r1
     55a:	b1 1d       	adc	r27, r1
     55c:	80 93 82 01 	sts	0x0182, r24
     560:	90 93 83 01 	sts	0x0183, r25
     564:	a0 93 84 01 	sts	0x0184, r26
     568:	b0 93 85 01 	sts	0x0185, r27
}
     56c:	bf 91       	pop	r27
     56e:	af 91       	pop	r26
     570:	9f 91       	pop	r25
     572:	8f 91       	pop	r24
     574:	0f 90       	pop	r0
     576:	0f be       	out	0x3f, r0	; 63
     578:	0f 90       	pop	r0
     57a:	1f 90       	pop	r1
     57c:	18 95       	reti

0000057e <__vector_13>:
ISR(TIMER1_OVF_vect){}
     57e:	1f 92       	push	r1
     580:	0f 92       	push	r0
     582:	0f b6       	in	r0, 0x3f	; 63
     584:	0f 92       	push	r0
     586:	11 24       	eor	r1, r1
     588:	0f 90       	pop	r0
     58a:	0f be       	out	0x3f, r0	; 63
     58c:	0f 90       	pop	r0
     58e:	1f 90       	pop	r1
     590:	18 95       	reti

00000592 <_Z5setupv>:
{
	return count;
}
/*********************************************************************/
void setup(void)
{		
     592:	cf 93       	push	r28
	cli();
     594:	f8 94       	cli
	#ifdef _DEBUG
		uint8_t rflag = MCUSR;
     596:	c4 b7       	in	r28, 0x34	; 52
		MCUSR = 0;
     598:	14 be       	out	0x34, r1	; 52
	#endif // _DEBUG
	
	//DDRB |= _BV(PORTB5);
	//PORTB &= ~_BV(PORTB5);
	
	TCNT0 = 0;
     59a:	16 bc       	out	0x26, r1	; 38
	TCNT1 = 0;
     59c:	10 92 85 00 	sts	0x0085, r1
     5a0:	10 92 84 00 	sts	0x0084, r1
	TCCR0A |= (1<<WGM01);
     5a4:	84 b5       	in	r24, 0x24	; 36
     5a6:	82 60       	ori	r24, 0x02	; 2
     5a8:	84 bd       	out	0x24, r24	; 36
	OCR0A = 249;
     5aa:	89 ef       	ldi	r24, 0xF9	; 249
     5ac:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1 << OCIE0A);
     5ae:	ee e6       	ldi	r30, 0x6E	; 110
     5b0:	f0 e0       	ldi	r31, 0x00	; 0
     5b2:	80 81       	ld	r24, Z
     5b4:	82 60       	ori	r24, 0x02	; 2
     5b6:	80 83       	st	Z, r24
	TIMSK1 |= _BV(TOIE1);
     5b8:	ef e6       	ldi	r30, 0x6F	; 111
     5ba:	f0 e0       	ldi	r31, 0x00	; 0
     5bc:	80 81       	ld	r24, Z
     5be:	81 60       	ori	r24, 0x01	; 1
     5c0:	80 83       	st	Z, r24
	TCCR0B |= (1<<CS01) | (1<<CS00);
     5c2:	85 b5       	in	r24, 0x25	; 37
     5c4:	83 60       	ori	r24, 0x03	; 3
     5c6:	85 bd       	out	0x25, r24	; 37
	TCCR1B |= (1<<CS11);
     5c8:	e1 e8       	ldi	r30, 0x81	; 129
     5ca:	f0 e0       	ldi	r31, 0x00	; 0
     5cc:	80 81       	ld	r24, Z
     5ce:	82 60       	ori	r24, 0x02	; 2
     5d0:	80 83       	st	Z, r24
	sei();
     5d2:	78 94       	sei
	Serial.init(9600);
     5d4:	60 e8       	ldi	r22, 0x80	; 128
     5d6:	75 e2       	ldi	r23, 0x25	; 37
     5d8:	8c e9       	ldi	r24, 0x9C	; 156
     5da:	91 e0       	ldi	r25, 0x01	; 1
     5dc:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <_ZN5USART4initEi>
	#ifdef _DEBUG
		Serial.send( rflag ,HEX);
     5e0:	40 e1       	ldi	r20, 0x10	; 16
     5e2:	50 e0       	ldi	r21, 0x00	; 0
     5e4:	6c 2f       	mov	r22, r28
     5e6:	8c e9       	ldi	r24, 0x9C	; 156
     5e8:	91 e0       	ldi	r25, 0x01	; 1
     5ea:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN5USART4sendEhi>
		//void send_int(int d);
		void send(double data, int base);
		//void send(uint32_t str);
			
		void sendln(void) {send("\r\n");};
		void sendln(const char* c) {send(c);send("\r\n");};
     5ee:	64 e1       	ldi	r22, 0x14	; 20
     5f0:	71 e0       	ldi	r23, 0x01	; 1
     5f2:	8c e9       	ldi	r24, 0x9C	; 156
     5f4:	91 e0       	ldi	r25, 0x01	; 1
     5f6:	0e 94 cc 06 	call	0xd98	; 0xd98 <_ZN5USART4sendEPKc>
     5fa:	62 e4       	ldi	r22, 0x42	; 66
     5fc:	71 e0       	ldi	r23, 0x01	; 1
     5fe:	8c e9       	ldi	r24, 0x9C	; 156
     600:	91 e0       	ldi	r25, 0x01	; 1
     602:	0e 94 cc 06 	call	0xd98	; 0xd98 <_ZN5USART4sendEPKc>
		Serial.sendln("> Booting...");	
	#endif // _DEBUG
}
     606:	cf 91       	pop	r28
     608:	08 95       	ret

0000060a <_Z11displayTempPd>:
/*********************************************************************/
/*********************************************************************/
uint8_t displayTemp(double * t){	
     60a:	cf 92       	push	r12
     60c:	df 92       	push	r13
     60e:	ef 92       	push	r14
     610:	ff 92       	push	r15
     612:	0f 93       	push	r16
     614:	1f 93       	push	r17
     616:	cf 93       	push	r28
     618:	df 93       	push	r29
     61a:	cd b7       	in	r28, 0x3d	; 61
     61c:	de b7       	in	r29, 0x3e	; 62
     61e:	cd 57       	subi	r28, 0x7D	; 125
     620:	d1 09       	sbc	r29, r1
     622:	0f b6       	in	r0, 0x3f	; 63
     624:	f8 94       	cli
     626:	de bf       	out	0x3e, r29	; 62
     628:	0f be       	out	0x3f, r0	; 63
     62a:	cd bf       	out	0x3d, r28	; 61
     62c:	8c 01       	movw	r16, r24
	char str[25], str_out[100]= "";
     62e:	19 82       	std	Y+1, r1	; 0x01
     630:	1a 82       	std	Y+2, r1	; 0x02
     632:	1b 82       	std	Y+3, r1	; 0x03
     634:	1c 82       	std	Y+4, r1	; 0x04
     636:	fe 01       	movw	r30, r28
     638:	35 96       	adiw	r30, 0x05	; 5
     63a:	80 e6       	ldi	r24, 0x60	; 96
     63c:	df 01       	movw	r26, r30
     63e:	1d 92       	st	X+, r1
     640:	8a 95       	dec	r24
     642:	e9 f7       	brne	.-6      	; 0x63e <_Z11displayTempPd+0x34>
	
	sprintf(str, "T%d,%0.1f\r\n", 1, t[0]);
     644:	f8 01       	movw	r30, r16
     646:	83 81       	ldd	r24, Z+3	; 0x03
     648:	8f 93       	push	r24
     64a:	82 81       	ldd	r24, Z+2	; 0x02
     64c:	8f 93       	push	r24
     64e:	81 81       	ldd	r24, Z+1	; 0x01
     650:	8f 93       	push	r24
     652:	80 81       	ld	r24, Z
     654:	8f 93       	push	r24
     656:	1f 92       	push	r1
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	8f 93       	push	r24
     65c:	0f 2e       	mov	r0, r31
     65e:	f1 e2       	ldi	r31, 0x21	; 33
     660:	cf 2e       	mov	r12, r31
     662:	f1 e0       	ldi	r31, 0x01	; 1
     664:	df 2e       	mov	r13, r31
     666:	f0 2d       	mov	r31, r0
     668:	df 92       	push	r13
     66a:	cf 92       	push	r12
     66c:	7e 01       	movw	r14, r28
     66e:	f5 e6       	ldi	r31, 0x65	; 101
     670:	ef 0e       	add	r14, r31
     672:	f1 1c       	adc	r15, r1
     674:	ff 92       	push	r15
     676:	ef 92       	push	r14
     678:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <sprintf>
	strcat(str_out,str);
     67c:	b7 01       	movw	r22, r14
     67e:	ce 01       	movw	r24, r28
     680:	01 96       	adiw	r24, 0x01	; 1
     682:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <strcat>

	sprintf(str, "T%d,%0.1f\r\n", 2, t[1]);
     686:	d8 01       	movw	r26, r16
     688:	17 96       	adiw	r26, 0x07	; 7
     68a:	8c 91       	ld	r24, X
     68c:	17 97       	sbiw	r26, 0x07	; 7
     68e:	8f 93       	push	r24
     690:	16 96       	adiw	r26, 0x06	; 6
     692:	8c 91       	ld	r24, X
     694:	16 97       	sbiw	r26, 0x06	; 6
     696:	8f 93       	push	r24
     698:	15 96       	adiw	r26, 0x05	; 5
     69a:	8c 91       	ld	r24, X
     69c:	15 97       	sbiw	r26, 0x05	; 5
     69e:	8f 93       	push	r24
     6a0:	14 96       	adiw	r26, 0x04	; 4
     6a2:	8c 91       	ld	r24, X
     6a4:	8f 93       	push	r24
     6a6:	1f 92       	push	r1
     6a8:	82 e0       	ldi	r24, 0x02	; 2
     6aa:	8f 93       	push	r24
     6ac:	df 92       	push	r13
     6ae:	cf 92       	push	r12
     6b0:	ff 92       	push	r15
     6b2:	ef 92       	push	r14
     6b4:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <sprintf>
	strcat(str_out,str);
     6b8:	b7 01       	movw	r22, r14
     6ba:	ce 01       	movw	r24, r28
     6bc:	01 96       	adiw	r24, 0x01	; 1
     6be:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <strcat>
	strcat(str_out,str);
	
	sprintf(str, "T%d,%0.1f\r\n", 4, t[3]);
	strcat(str_out,str);*/
	
	Serial.send(str_out);
     6c2:	be 01       	movw	r22, r28
     6c4:	6f 5f       	subi	r22, 0xFF	; 255
     6c6:	7f 4f       	sbci	r23, 0xFF	; 255
     6c8:	8c e9       	ldi	r24, 0x9C	; 156
     6ca:	91 e0       	ldi	r25, 0x01	; 1
     6cc:	0e 94 cc 06 	call	0xd98	; 0xd98 <_ZN5USART4sendEPKc>
	return 0;
     6d0:	0f b6       	in	r0, 0x3f	; 63
     6d2:	f8 94       	cli
     6d4:	de bf       	out	0x3e, r29	; 62
     6d6:	0f be       	out	0x3f, r0	; 63
     6d8:	cd bf       	out	0x3d, r28	; 61
}
     6da:	80 e0       	ldi	r24, 0x00	; 0
     6dc:	c3 58       	subi	r28, 0x83	; 131
     6de:	df 4f       	sbci	r29, 0xFF	; 255
     6e0:	0f b6       	in	r0, 0x3f	; 63
     6e2:	f8 94       	cli
     6e4:	de bf       	out	0x3e, r29	; 62
     6e6:	0f be       	out	0x3f, r0	; 63
     6e8:	cd bf       	out	0x3d, r28	; 61
     6ea:	df 91       	pop	r29
     6ec:	cf 91       	pop	r28
     6ee:	1f 91       	pop	r17
     6f0:	0f 91       	pop	r16
     6f2:	ff 90       	pop	r15
     6f4:	ef 90       	pop	r14
     6f6:	df 90       	pop	r13
     6f8:	cf 90       	pop	r12
     6fa:	08 95       	ret

000006fc <_Z12displayEmissPf>:
/*********************************************************************/
uint8_t displayEmiss(float * e){
     6fc:	ef 92       	push	r14
     6fe:	ff 92       	push	r15
     700:	0f 93       	push	r16
     702:	1f 93       	push	r17
     704:	cf 93       	push	r28
     706:	df 93       	push	r29
     708:	cd b7       	in	r28, 0x3d	; 61
     70a:	de b7       	in	r29, 0x3e	; 62
     70c:	c4 56       	subi	r28, 0x64	; 100
     70e:	d1 09       	sbc	r29, r1
     710:	0f b6       	in	r0, 0x3f	; 63
     712:	f8 94       	cli
     714:	de bf       	out	0x3e, r29	; 62
     716:	0f be       	out	0x3f, r0	; 63
     718:	cd bf       	out	0x3d, r28	; 61
     71a:	8c 01       	movw	r16, r24
	char str[20], str_out[80] = "";
     71c:	19 82       	std	Y+1, r1	; 0x01
     71e:	1a 82       	std	Y+2, r1	; 0x02
     720:	1b 82       	std	Y+3, r1	; 0x03
     722:	1c 82       	std	Y+4, r1	; 0x04
     724:	fe 01       	movw	r30, r28
     726:	35 96       	adiw	r30, 0x05	; 5
     728:	8c e4       	ldi	r24, 0x4C	; 76
     72a:	df 01       	movw	r26, r30
     72c:	1d 92       	st	X+, r1
     72e:	8a 95       	dec	r24
     730:	e9 f7       	brne	.-6      	; 0x72c <_Z12displayEmissPf+0x30>
	
	sprintf(str, "E%d,%1.1f\r\n", 1, e[0]);
     732:	f8 01       	movw	r30, r16
     734:	83 81       	ldd	r24, Z+3	; 0x03
     736:	8f 93       	push	r24
     738:	82 81       	ldd	r24, Z+2	; 0x02
     73a:	8f 93       	push	r24
     73c:	81 81       	ldd	r24, Z+1	; 0x01
     73e:	8f 93       	push	r24
     740:	80 81       	ld	r24, Z
     742:	8f 93       	push	r24
     744:	1f 92       	push	r1
     746:	81 e0       	ldi	r24, 0x01	; 1
     748:	8f 93       	push	r24
     74a:	8d e2       	ldi	r24, 0x2D	; 45
     74c:	91 e0       	ldi	r25, 0x01	; 1
     74e:	9f 93       	push	r25
     750:	8f 93       	push	r24
     752:	7e 01       	movw	r14, r28
     754:	f1 e5       	ldi	r31, 0x51	; 81
     756:	ef 0e       	add	r14, r31
     758:	f1 1c       	adc	r15, r1
     75a:	ff 92       	push	r15
     75c:	ef 92       	push	r14
     75e:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <sprintf>
	strcat(str_out,str);
     762:	b7 01       	movw	r22, r14
     764:	ce 01       	movw	r24, r28
     766:	01 96       	adiw	r24, 0x01	; 1
     768:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <strcat>

	sprintf(str, "E%d,%0.1f\r\n", 2, e[1]);
     76c:	d8 01       	movw	r26, r16
     76e:	17 96       	adiw	r26, 0x07	; 7
     770:	8c 91       	ld	r24, X
     772:	17 97       	sbiw	r26, 0x07	; 7
     774:	8f 93       	push	r24
     776:	16 96       	adiw	r26, 0x06	; 6
     778:	8c 91       	ld	r24, X
     77a:	16 97       	sbiw	r26, 0x06	; 6
     77c:	8f 93       	push	r24
     77e:	15 96       	adiw	r26, 0x05	; 5
     780:	8c 91       	ld	r24, X
     782:	15 97       	sbiw	r26, 0x05	; 5
     784:	8f 93       	push	r24
     786:	14 96       	adiw	r26, 0x04	; 4
     788:	8c 91       	ld	r24, X
     78a:	8f 93       	push	r24
     78c:	1f 92       	push	r1
     78e:	82 e0       	ldi	r24, 0x02	; 2
     790:	8f 93       	push	r24
     792:	89 e3       	ldi	r24, 0x39	; 57
     794:	91 e0       	ldi	r25, 0x01	; 1
     796:	9f 93       	push	r25
     798:	8f 93       	push	r24
     79a:	ff 92       	push	r15
     79c:	ef 92       	push	r14
     79e:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <sprintf>
	strcat(str_out,str);
     7a2:	b7 01       	movw	r22, r14
     7a4:	ce 01       	movw	r24, r28
     7a6:	01 96       	adiw	r24, 0x01	; 1
     7a8:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <strcat>
	strcat(str_out,str);
	
	sprintf(str, "E%d,%0.1f\r\n", 4, e[3]);
	strcat(str_out,str);*/
	
	Serial.send(str_out);
     7ac:	be 01       	movw	r22, r28
     7ae:	6f 5f       	subi	r22, 0xFF	; 255
     7b0:	7f 4f       	sbci	r23, 0xFF	; 255
     7b2:	8c e9       	ldi	r24, 0x9C	; 156
     7b4:	91 e0       	ldi	r25, 0x01	; 1
     7b6:	0e 94 cc 06 	call	0xd98	; 0xd98 <_ZN5USART4sendEPKc>
	return 0;
     7ba:	0f b6       	in	r0, 0x3f	; 63
     7bc:	f8 94       	cli
     7be:	de bf       	out	0x3e, r29	; 62
     7c0:	0f be       	out	0x3f, r0	; 63
     7c2:	cd bf       	out	0x3d, r28	; 61
}
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	cc 59       	subi	r28, 0x9C	; 156
     7c8:	df 4f       	sbci	r29, 0xFF	; 255
     7ca:	0f b6       	in	r0, 0x3f	; 63
     7cc:	f8 94       	cli
     7ce:	de bf       	out	0x3e, r29	; 62
     7d0:	0f be       	out	0x3f, r0	; 63
     7d2:	cd bf       	out	0x3d, r28	; 61
     7d4:	df 91       	pop	r29
     7d6:	cf 91       	pop	r28
     7d8:	1f 91       	pop	r17
     7da:	0f 91       	pop	r16
     7dc:	ff 90       	pop	r15
     7de:	ef 90       	pop	r14
     7e0:	08 95       	ret

000007e2 <_Z14IR_sensorReadsPd>:
/*********************************************************************/
void IR_sensorReads(double * t){
     7e2:	cf 93       	push	r28
     7e4:	df 93       	push	r29
     7e6:	ec 01       	movw	r28, r24
	for(int i=0;i<m_sensorsCount; i++){
		t[i] = MLX[i].readObjectTempC();
     7e8:	86 e8       	ldi	r24, 0x86	; 134
     7ea:	91 e0       	ldi	r25, 0x01	; 1
     7ec:	0e 94 8e 01 	call	0x31c	; 0x31c <_ZN17Adafruit_MLX9061415readObjectTempCEv>
     7f0:	68 83       	st	Y, r22
     7f2:	79 83       	std	Y+1, r23	; 0x01
     7f4:	8a 83       	std	Y+2, r24	; 0x02
     7f6:	9b 83       	std	Y+3, r25	; 0x03
     7f8:	81 e9       	ldi	r24, 0x91	; 145
     7fa:	91 e0       	ldi	r25, 0x01	; 1
     7fc:	0e 94 8e 01 	call	0x31c	; 0x31c <_ZN17Adafruit_MLX9061415readObjectTempCEv>
     800:	6c 83       	std	Y+4, r22	; 0x04
     802:	7d 83       	std	Y+5, r23	; 0x05
     804:	8e 83       	std	Y+6, r24	; 0x06
     806:	9f 83       	std	Y+7, r25	; 0x07
	}
}
     808:	df 91       	pop	r29
     80a:	cf 91       	pop	r28
     80c:	08 95       	ret

0000080e <_Z11changeEmissP17Adafruit_MLX90614dd>:
/*********************************************************************/
float changeEmiss(Adafruit_MLX90614 * device, double caltemp, double currenttemp){
     80e:	4f 92       	push	r4
     810:	5f 92       	push	r5
     812:	6f 92       	push	r6
     814:	7f 92       	push	r7
     816:	8f 92       	push	r8
     818:	9f 92       	push	r9
     81a:	af 92       	push	r10
     81c:	bf 92       	push	r11
     81e:	cf 92       	push	r12
     820:	df 92       	push	r13
     822:	ef 92       	push	r14
     824:	ff 92       	push	r15
     826:	0f 93       	push	r16
     828:	1f 93       	push	r17
     82a:	cf 93       	push	r28
     82c:	df 93       	push	r29
     82e:	ec 01       	movw	r28, r24
     830:	4a 01       	movw	r8, r20
     832:	5b 01       	movw	r10, r22
     834:	28 01       	movw	r4, r16
     836:	39 01       	movw	r6, r18
	float emiss = device->readEmissivity();
     838:	0e 94 92 01 	call	0x324	; 0x324 <_ZN17Adafruit_MLX9061414readEmissivityEv>
     83c:	6b 01       	movw	r12, r22
     83e:	7c 01       	movw	r14, r24
	if (caltemp < currenttemp) emiss += .05;
     840:	a3 01       	movw	r20, r6
     842:	92 01       	movw	r18, r4
     844:	c5 01       	movw	r24, r10
     846:	b4 01       	movw	r22, r8
     848:	0e 94 94 07 	call	0xf28	; 0xf28 <__cmpsf2>
     84c:	88 23       	and	r24, r24
     84e:	5c f4       	brge	.+22     	; 0x866 <_Z11changeEmissP17Adafruit_MLX90614dd+0x58>
     850:	2d ec       	ldi	r18, 0xCD	; 205
     852:	3c ec       	ldi	r19, 0xCC	; 204
     854:	4c e4       	ldi	r20, 0x4C	; 76
     856:	5d e3       	ldi	r21, 0x3D	; 61
     858:	c7 01       	movw	r24, r14
     85a:	b6 01       	movw	r22, r12
     85c:	0e 94 28 07 	call	0xe50	; 0xe50 <__addsf3>
     860:	6b 01       	movw	r12, r22
     862:	7c 01       	movw	r14, r24
     864:	12 c0       	rjmp	.+36     	; 0x88a <_Z11changeEmissP17Adafruit_MLX90614dd+0x7c>
	else if (caltemp> currenttemp) emiss -= .05;
     866:	a3 01       	movw	r20, r6
     868:	92 01       	movw	r18, r4
     86a:	c5 01       	movw	r24, r10
     86c:	b4 01       	movw	r22, r8
     86e:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__gesf2>
     872:	18 16       	cp	r1, r24
     874:	54 f4       	brge	.+20     	; 0x88a <_Z11changeEmissP17Adafruit_MLX90614dd+0x7c>
     876:	2d ec       	ldi	r18, 0xCD	; 205
     878:	3c ec       	ldi	r19, 0xCC	; 204
     87a:	4c e4       	ldi	r20, 0x4C	; 76
     87c:	5d e3       	ldi	r21, 0x3D	; 61
     87e:	c7 01       	movw	r24, r14
     880:	b6 01       	movw	r22, r12
     882:	0e 94 27 07 	call	0xe4e	; 0xe4e <__subsf3>
     886:	6b 01       	movw	r12, r22
     888:	7c 01       	movw	r14, r24
	
	device->setEmissivity(emiss);	
     88a:	b7 01       	movw	r22, r14
     88c:	a6 01       	movw	r20, r12
     88e:	ce 01       	movw	r24, r28
     890:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <_ZN17Adafruit_MLX9061413setEmissivityEf>
	return emiss;
}
     894:	c7 01       	movw	r24, r14
     896:	b6 01       	movw	r22, r12
     898:	df 91       	pop	r29
     89a:	cf 91       	pop	r28
     89c:	1f 91       	pop	r17
     89e:	0f 91       	pop	r16
     8a0:	ff 90       	pop	r15
     8a2:	ef 90       	pop	r14
     8a4:	df 90       	pop	r13
     8a6:	cf 90       	pop	r12
     8a8:	bf 90       	pop	r11
     8aa:	af 90       	pop	r10
     8ac:	9f 90       	pop	r9
     8ae:	8f 90       	pop	r8
     8b0:	7f 90       	pop	r7
     8b2:	6f 90       	pop	r6
     8b4:	5f 90       	pop	r5
     8b6:	4f 90       	pop	r4
     8b8:	08 95       	ret

000008ba <_Z19calibrateEmissivityPf>:

uint8_t calibrateEmissivity(float * emissivity){
     8ba:	2f 92       	push	r2
     8bc:	3f 92       	push	r3
     8be:	4f 92       	push	r4
     8c0:	5f 92       	push	r5
     8c2:	6f 92       	push	r6
     8c4:	7f 92       	push	r7
     8c6:	8f 92       	push	r8
     8c8:	9f 92       	push	r9
     8ca:	af 92       	push	r10
     8cc:	bf 92       	push	r11
     8ce:	cf 92       	push	r12
     8d0:	df 92       	push	r13
     8d2:	ef 92       	push	r14
     8d4:	ff 92       	push	r15
     8d6:	0f 93       	push	r16
     8d8:	1f 93       	push	r17
     8da:	cf 93       	push	r28
     8dc:	df 93       	push	r29
     8de:	cd b7       	in	r28, 0x3d	; 61
     8e0:	de b7       	in	r29, 0x3e	; 62
     8e2:	e9 97       	sbiw	r28, 0x39	; 57
     8e4:	0f b6       	in	r0, 0x3f	; 63
     8e6:	f8 94       	cli
     8e8:	de bf       	out	0x3e, r29	; 62
     8ea:	0f be       	out	0x3f, r0	; 63
     8ec:	cd bf       	out	0x3d, r28	; 61
     8ee:	99 af       	std	Y+57, r25	; 0x39
     8f0:	88 af       	std	Y+56, r24	; 0x38
	const char instr[5] = {'3','5','.','0'};
     8f2:	7e 01       	movw	r14, r28
     8f4:	26 e2       	ldi	r18, 0x26	; 38
     8f6:	e2 0e       	add	r14, r18
     8f8:	f1 1c       	adc	r15, r1
     8fa:	85 e0       	ldi	r24, 0x05	; 5
     8fc:	d7 01       	movw	r26, r14
     8fe:	1d 92       	st	X+, r1
     900:	8a 95       	dec	r24
     902:	e9 f7       	brne	.-6      	; 0x8fe <_Z19calibrateEmissivityPf+0x44>
     904:	83 e3       	ldi	r24, 0x33	; 51
     906:	8e a3       	std	Y+38, r24	; 0x26
     908:	85 e3       	ldi	r24, 0x35	; 53
     90a:	8f a3       	std	Y+39, r24	; 0x27
     90c:	8e e2       	ldi	r24, 0x2E	; 46
     90e:	88 a7       	std	Y+40, r24	; 0x28
     910:	80 e3       	ldi	r24, 0x30	; 48
     912:	89 a7       	std	Y+41, r24	; 0x29
	uint8_t ptr=0, loop=0;
	double usrtemp = 0, t[4];
	float E[4] = {1,1,1,1},prevE[4];
     914:	80 e1       	ldi	r24, 0x10	; 16
     916:	e4 e0       	ldi	r30, 0x04	; 4
     918:	f1 e0       	ldi	r31, 0x01	; 1
     91a:	de 01       	movw	r26, r28
     91c:	11 96       	adiw	r26, 0x01	; 1
     91e:	01 90       	ld	r0, Z+
     920:	0d 92       	st	X+, r0
     922:	8a 95       	dec	r24
     924:	e1 f7       	brne	.-8      	; 0x91e <__stack+0x1f>
	
	Serial.send("> Temperature to calibrate to: ");
     926:	65 e4       	ldi	r22, 0x45	; 69
     928:	71 e0       	ldi	r23, 0x01	; 1
     92a:	8c e9       	ldi	r24, 0x9C	; 156
     92c:	91 e0       	ldi	r25, 0x01	; 1
     92e:	0e 94 cc 06 	call	0xd98	; 0xd98 <_ZN5USART4sendEPKc>
	Serial.send(instr);
     932:	b7 01       	movw	r22, r14
     934:	8c e9       	ldi	r24, 0x9C	; 156
     936:	91 e0       	ldi	r25, 0x01	; 1
     938:	0e 94 cc 06 	call	0xd98	; 0xd98 <_ZN5USART4sendEPKc>
		//instr[ptr++] = tempbyte; 
	}
	Serial.sendln(instr);*/
	
	//if (sizeof(instr) <= 2){instr[3] = '0';}
	usrtemp += double(instr[0] - '0') * 10;
     93c:	6e a1       	ldd	r22, Y+38	; 0x26
     93e:	70 e0       	ldi	r23, 0x00	; 0
     940:	60 53       	subi	r22, 0x30	; 48
     942:	71 09       	sbc	r23, r1
     944:	07 2e       	mov	r0, r23
     946:	00 0c       	add	r0, r0
     948:	88 0b       	sbc	r24, r24
     94a:	99 0b       	sbc	r25, r25
     94c:	0e 94 3c 08 	call	0x1078	; 0x1078 <__floatsisf>
     950:	20 e0       	ldi	r18, 0x00	; 0
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e2       	ldi	r20, 0x20	; 32
     956:	51 e4       	ldi	r21, 0x41	; 65
     958:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <__mulsf3>
     95c:	20 e0       	ldi	r18, 0x00	; 0
     95e:	30 e0       	ldi	r19, 0x00	; 0
     960:	a9 01       	movw	r20, r18
     962:	0e 94 28 07 	call	0xe50	; 0xe50 <__addsf3>
     966:	6b 01       	movw	r12, r22
     968:	7c 01       	movw	r14, r24
	usrtemp += double(instr[1] - '0');
     96a:	8f a1       	ldd	r24, Y+39	; 0x27
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	c0 97       	sbiw	r24, 0x30	; 48
     970:	bc 01       	movw	r22, r24
     972:	99 0f       	add	r25, r25
     974:	88 0b       	sbc	r24, r24
     976:	99 0b       	sbc	r25, r25
     978:	0e 94 3c 08 	call	0x1078	; 0x1078 <__floatsisf>
     97c:	a7 01       	movw	r20, r14
     97e:	96 01       	movw	r18, r12
     980:	0e 94 28 07 	call	0xe50	; 0xe50 <__addsf3>
     984:	6b 01       	movw	r12, r22
     986:	7c 01       	movw	r14, r24
	usrtemp += double(instr[3] - '0') / 10;
     988:	89 a5       	ldd	r24, Y+41	; 0x29
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	c0 97       	sbiw	r24, 0x30	; 48
     98e:	bc 01       	movw	r22, r24
     990:	99 0f       	add	r25, r25
     992:	88 0b       	sbc	r24, r24
     994:	99 0b       	sbc	r25, r25
     996:	0e 94 3c 08 	call	0x1078	; 0x1078 <__floatsisf>
     99a:	20 e0       	ldi	r18, 0x00	; 0
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	40 e2       	ldi	r20, 0x20	; 32
     9a0:	51 e4       	ldi	r21, 0x41	; 65
     9a2:	0e 94 99 07 	call	0xf32	; 0xf32 <__divsf3>
     9a6:	a7 01       	movw	r20, r14
     9a8:	96 01       	movw	r18, r12
     9aa:	0e 94 28 07 	call	0xe50	; 0xe50 <__addsf3>
     9ae:	86 2e       	mov	r8, r22
     9b0:	d7 2e       	mov	r13, r23
     9b2:	98 2e       	mov	r9, r24
     9b4:	a9 2e       	mov	r10, r25
	char str[5];
	sprintf(str, ", %0.1f", usrtemp);
     9b6:	9f 93       	push	r25
     9b8:	8f 93       	push	r24
     9ba:	7f 93       	push	r23
     9bc:	6f 93       	push	r22
     9be:	85 e6       	ldi	r24, 0x65	; 101
     9c0:	91 e0       	ldi	r25, 0x01	; 1
     9c2:	9f 93       	push	r25
     9c4:	8f 93       	push	r24
     9c6:	7e 01       	movw	r14, r28
     9c8:	b1 e2       	ldi	r27, 0x21	; 33
     9ca:	eb 0e       	add	r14, r27
     9cc:	f1 1c       	adc	r15, r1
     9ce:	ff 92       	push	r15
     9d0:	ef 92       	push	r14
     9d2:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <sprintf>
     9d6:	b7 01       	movw	r22, r14
     9d8:	8c e9       	ldi	r24, 0x9C	; 156
     9da:	91 e0       	ldi	r25, 0x01	; 1
     9dc:	0e 94 cc 06 	call	0xd98	; 0xd98 <_ZN5USART4sendEPKc>
     9e0:	62 e4       	ldi	r22, 0x42	; 66
     9e2:	71 e0       	ldi	r23, 0x01	; 1
     9e4:	8c e9       	ldi	r24, 0x9C	; 156
     9e6:	91 e0       	ldi	r25, 0x01	; 1
     9e8:	0e 94 cc 06 	call	0xd98	; 0xd98 <_ZN5USART4sendEPKc>
     9ec:	e6 e8       	ldi	r30, 0x86	; 134
     9ee:	f1 e0       	ldi	r31, 0x01	; 1
     9f0:	fb ab       	std	Y+51, r31	; 0x33
     9f2:	ea ab       	std	Y+50, r30	; 0x32
     9f4:	9e 01       	movw	r18, r28
     9f6:	2f 5e       	subi	r18, 0xEF	; 239
     9f8:	3f 4f       	sbci	r19, 0xFF	; 255
     9fa:	3d ab       	std	Y+53, r19	; 0x35
     9fc:	2c ab       	std	Y+52, r18	; 0x34
     9fe:	ce 01       	movw	r24, r28
     a00:	01 96       	adiw	r24, 0x01	; 1
     a02:	9f ab       	std	Y+55, r25	; 0x37
     a04:	8e ab       	std	Y+54, r24	; 0x36
     a06:	de 01       	movw	r26, r28
     a08:	59 96       	adiw	r26, 0x19	; 25
     a0a:	bc a7       	std	Y+44, r27	; 0x2c
     a0c:	ab a7       	std	Y+43, r26	; 0x2b
     a0e:	0f b6       	in	r0, 0x3f	; 63
     a10:	f8 94       	cli
     a12:	de bf       	out	0x3e, r29	; 62
     a14:	0f be       	out	0x3f, r0	; 63
     a16:	cd bf       	out	0x3d, r28	; 61
			E[i] = prevE[i];
			loop = 0;
			while(t[i] > (usrtemp+tol)||t[i] < (usrtemp-tol)){
				loop++;
				if (loop>18){
					E[i] = -1;
     a18:	28 2c       	mov	r2, r8
     a1a:	39 2c       	mov	r3, r9
     a1c:	8a 2c       	mov	r8, r10
     a1e:	ad 2c       	mov	r10, r13
	char str[5];
	sprintf(str, ", %0.1f", usrtemp);
	Serial.sendln(str);

	for (int i=0;i<m_sensorsCount;i++){
		MLX[i].setEmissivity(1);
     a20:	fa a9       	ldd	r31, Y+50	; 0x32
     a22:	ff a7       	std	Y+47, r31	; 0x2f
     a24:	9b a8       	ldd	r9, Y+51	; 0x33
     a26:	40 e0       	ldi	r20, 0x00	; 0
     a28:	50 e0       	ldi	r21, 0x00	; 0
     a2a:	60 e8       	ldi	r22, 0x80	; 128
     a2c:	7f e3       	ldi	r23, 0x3F	; 63
     a2e:	8a a9       	ldd	r24, Y+50	; 0x32
     a30:	9b a9       	ldd	r25, Y+51	; 0x33
     a32:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <_ZN17Adafruit_MLX9061413setEmissivityEf>
		t[i] = MLX[i].readObjectTempC();	
     a36:	8a a9       	ldd	r24, Y+50	; 0x32
     a38:	9b a9       	ldd	r25, Y+51	; 0x33
     a3a:	0e 94 8e 01 	call	0x31c	; 0x31c <_ZN17Adafruit_MLX9061415readObjectTempCEv>
     a3e:	2c a9       	ldd	r18, Y+52	; 0x34
     a40:	3d a9       	ldd	r19, Y+53	; 0x35
     a42:	3e a7       	std	Y+46, r19	; 0x2e
     a44:	2d a7       	std	Y+45, r18	; 0x2d
     a46:	d9 01       	movw	r26, r18
     a48:	6d 93       	st	X+, r22
     a4a:	7d 93       	st	X+, r23
     a4c:	8d 93       	st	X+, r24
     a4e:	9c 93       	st	X, r25
     a50:	13 97       	sbiw	r26, 0x03	; 3
		
			prevE[i] = MLX[i].readEmissivity();
     a52:	8a a9       	ldd	r24, Y+50	; 0x32
     a54:	9b a9       	ldd	r25, Y+51	; 0x33
     a56:	0e 94 92 01 	call	0x324	; 0x324 <_ZN17Adafruit_MLX9061414readEmissivityEv>
     a5a:	ee a9       	ldd	r30, Y+54	; 0x36
     a5c:	ff a9       	ldd	r31, Y+55	; 0x37
     a5e:	f9 ab       	std	Y+49, r31	; 0x31
     a60:	e8 ab       	std	Y+48, r30	; 0x30
			E[i] = prevE[i];
     a62:	60 83       	st	Z, r22
     a64:	71 83       	std	Z+1, r23	; 0x01
     a66:	82 83       	std	Z+2, r24	; 0x02
     a68:	93 83       	std	Z+3, r25	; 0x03
			loop = 0;
			while(t[i] > (usrtemp+tol)||t[i] < (usrtemp-tol)){
     a6a:	0f 2e       	mov	r0, r31
     a6c:	f3 e1       	ldi	r31, 0x13	; 19
     a6e:	bf 2e       	mov	r11, r31
     a70:	f0 2d       	mov	r31, r0
     a72:	38 c0       	rjmp	.+112    	; 0xae4 <__stack+0x1e5>
     a74:	ba 94       	dec	r11
				loop++;
				if (loop>18){
     a76:	b1 10       	cpse	r11, r1
     a78:	13 c0       	rjmp	.+38     	; 0xaa0 <__stack+0x1a1>
					E[i] = -1;
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e8       	ldi	r26, 0x80	; 128
     a80:	bf eb       	ldi	r27, 0xBF	; 191
     a82:	e8 a9       	ldd	r30, Y+48	; 0x30
     a84:	f9 a9       	ldd	r31, Y+49	; 0x31
     a86:	80 83       	st	Z, r24
     a88:	91 83       	std	Z+1, r25	; 0x01
     a8a:	a2 83       	std	Z+2, r26	; 0x02
     a8c:	b3 83       	std	Z+3, r27	; 0x03
					MLX[i].setEmissivity(1);
     a8e:	40 e0       	ldi	r20, 0x00	; 0
     a90:	50 e0       	ldi	r21, 0x00	; 0
     a92:	60 e8       	ldi	r22, 0x80	; 128
     a94:	7f e3       	ldi	r23, 0x3F	; 63
     a96:	8f a5       	ldd	r24, Y+47	; 0x2f
     a98:	99 2d       	mov	r25, r9
     a9a:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <_ZN17Adafruit_MLX9061413setEmissivityEf>
					break;
     a9e:	52 c0       	rjmp	.+164    	; 0xb44 <__stack+0x245>
				}
				else{
					E[i] = changeEmiss(&MLX[i], usrtemp, t[i]);
     aa0:	97 01       	movw	r18, r14
     aa2:	86 01       	movw	r16, r12
     aa4:	42 2d       	mov	r20, r2
     aa6:	5a 2d       	mov	r21, r10
     aa8:	63 2d       	mov	r22, r3
     aaa:	78 2d       	mov	r23, r8
     aac:	8f a5       	ldd	r24, Y+47	; 0x2f
     aae:	99 2d       	mov	r25, r9
     ab0:	0e 94 07 04 	call	0x80e	; 0x80e <_Z11changeEmissP17Adafruit_MLX90614dd>
     ab4:	a8 a9       	ldd	r26, Y+48	; 0x30
     ab6:	b9 a9       	ldd	r27, Y+49	; 0x31
     ab8:	6d 93       	st	X+, r22
     aba:	7d 93       	st	X+, r23
     abc:	8d 93       	st	X+, r24
     abe:	9c 93       	st	X, r25
     ac0:	13 97       	sbiw	r26, 0x03	; 3
     ac2:	ef e3       	ldi	r30, 0x3F	; 63
     ac4:	fc e9       	ldi	r31, 0x9C	; 156
     ac6:	31 97       	sbiw	r30, 0x01	; 1
     ac8:	f1 f7       	brne	.-4      	; 0xac6 <__stack+0x1c7>
     aca:	00 c0       	rjmp	.+0      	; 0xacc <__stack+0x1cd>
     acc:	00 00       	nop
					_delay_ms(10);
					t[i] = MLX[i].readObjectTempC();	
     ace:	8f a5       	ldd	r24, Y+47	; 0x2f
     ad0:	99 2d       	mov	r25, r9
     ad2:	0e 94 8e 01 	call	0x31c	; 0x31c <_ZN17Adafruit_MLX9061415readObjectTempCEv>
     ad6:	ad a5       	ldd	r26, Y+45	; 0x2d
     ad8:	be a5       	ldd	r27, Y+46	; 0x2e
     ada:	6d 93       	st	X+, r22
     adc:	7d 93       	st	X+, r23
     ade:	8d 93       	st	X+, r24
     ae0:	9c 93       	st	X, r25
     ae2:	13 97       	sbiw	r26, 0x03	; 3
		t[i] = MLX[i].readObjectTempC();	
		
			prevE[i] = MLX[i].readEmissivity();
			E[i] = prevE[i];
			loop = 0;
			while(t[i] > (usrtemp+tol)||t[i] < (usrtemp-tol)){
     ae4:	ed a5       	ldd	r30, Y+45	; 0x2d
     ae6:	fe a5       	ldd	r31, Y+46	; 0x2e
     ae8:	c0 80       	ld	r12, Z
     aea:	d1 80       	ldd	r13, Z+1	; 0x01
     aec:	e2 80       	ldd	r14, Z+2	; 0x02
     aee:	f3 80       	ldd	r15, Z+3	; 0x03
     af0:	40 90 00 01 	lds	r4, 0x0100
     af4:	50 90 01 01 	lds	r5, 0x0101
     af8:	60 90 02 01 	lds	r6, 0x0102
     afc:	70 90 03 01 	lds	r7, 0x0103
     b00:	a3 01       	movw	r20, r6
     b02:	92 01       	movw	r18, r4
     b04:	62 2d       	mov	r22, r2
     b06:	7a 2d       	mov	r23, r10
     b08:	83 2d       	mov	r24, r3
     b0a:	98 2d       	mov	r25, r8
     b0c:	0e 94 28 07 	call	0xe50	; 0xe50 <__addsf3>
     b10:	9b 01       	movw	r18, r22
     b12:	ac 01       	movw	r20, r24
     b14:	c7 01       	movw	r24, r14
     b16:	b6 01       	movw	r22, r12
     b18:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__gesf2>
     b1c:	18 16       	cp	r1, r24
     b1e:	0c f4       	brge	.+2      	; 0xb22 <__stack+0x223>
     b20:	a9 cf       	rjmp	.-174    	; 0xa74 <__stack+0x175>
     b22:	a3 01       	movw	r20, r6
     b24:	92 01       	movw	r18, r4
     b26:	62 2d       	mov	r22, r2
     b28:	7a 2d       	mov	r23, r10
     b2a:	83 2d       	mov	r24, r3
     b2c:	98 2d       	mov	r25, r8
     b2e:	0e 94 27 07 	call	0xe4e	; 0xe4e <__subsf3>
     b32:	9b 01       	movw	r18, r22
     b34:	ac 01       	movw	r20, r24
     b36:	c7 01       	movw	r24, r14
     b38:	b6 01       	movw	r22, r12
     b3a:	0e 94 94 07 	call	0xf28	; 0xf28 <__cmpsf2>
     b3e:	88 23       	and	r24, r24
     b40:	0c f4       	brge	.+2      	; 0xb44 <__stack+0x245>
     b42:	98 cf       	rjmp	.-208    	; 0xa74 <__stack+0x175>
     b44:	2a a9       	ldd	r18, Y+50	; 0x32
     b46:	3b a9       	ldd	r19, Y+51	; 0x33
     b48:	25 5f       	subi	r18, 0xF5	; 245
     b4a:	3f 4f       	sbci	r19, 0xFF	; 255
     b4c:	3b ab       	std	Y+51, r19	; 0x33
     b4e:	2a ab       	std	Y+50, r18	; 0x32
     b50:	8c a9       	ldd	r24, Y+52	; 0x34
     b52:	9d a9       	ldd	r25, Y+53	; 0x35
     b54:	04 96       	adiw	r24, 0x04	; 4
     b56:	9d ab       	std	Y+53, r25	; 0x35
     b58:	8c ab       	std	Y+52, r24	; 0x34
     b5a:	ae a9       	ldd	r26, Y+54	; 0x36
     b5c:	bf a9       	ldd	r27, Y+55	; 0x37
     b5e:	14 96       	adiw	r26, 0x04	; 4
     b60:	bf ab       	std	Y+55, r27	; 0x37
     b62:	ae ab       	std	Y+54, r26	; 0x36
	usrtemp += double(instr[3] - '0') / 10;
	char str[5];
	sprintf(str, ", %0.1f", usrtemp);
	Serial.sendln(str);

	for (int i=0;i<m_sensorsCount;i++){
     b64:	eb a5       	ldd	r30, Y+43	; 0x2b
     b66:	fc a5       	ldd	r31, Y+44	; 0x2c
     b68:	8e 17       	cp	r24, r30
     b6a:	9f 07       	cpc	r25, r31
     b6c:	09 f0       	breq	.+2      	; 0xb70 <__stack+0x271>
     b6e:	58 cf       	rjmp	.-336    	; 0xa20 <__stack+0x121>
				}
			}
	}
	//displayEmiss(prevE);
	for (int i=0;i<m_sensorsCount;i++){
		emissivity[i] = E[i];
     b70:	89 81       	ldd	r24, Y+1	; 0x01
     b72:	9a 81       	ldd	r25, Y+2	; 0x02
     b74:	ab 81       	ldd	r26, Y+3	; 0x03
     b76:	bc 81       	ldd	r27, Y+4	; 0x04
     b78:	e8 ad       	ldd	r30, Y+56	; 0x38
     b7a:	f9 ad       	ldd	r31, Y+57	; 0x39
     b7c:	80 83       	st	Z, r24
     b7e:	91 83       	std	Z+1, r25	; 0x01
     b80:	a2 83       	std	Z+2, r26	; 0x02
     b82:	b3 83       	std	Z+3, r27	; 0x03
     b84:	8d 81       	ldd	r24, Y+5	; 0x05
     b86:	9e 81       	ldd	r25, Y+6	; 0x06
     b88:	af 81       	ldd	r26, Y+7	; 0x07
     b8a:	b8 85       	ldd	r27, Y+8	; 0x08
     b8c:	84 83       	std	Z+4, r24	; 0x04
     b8e:	95 83       	std	Z+5, r25	; 0x05
     b90:	a6 83       	std	Z+6, r26	; 0x06
     b92:	b7 83       	std	Z+7, r27	; 0x07
	}
	return 0;
}
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	e9 96       	adiw	r28, 0x39	; 57
     b98:	0f b6       	in	r0, 0x3f	; 63
     b9a:	f8 94       	cli
     b9c:	de bf       	out	0x3e, r29	; 62
     b9e:	0f be       	out	0x3f, r0	; 63
     ba0:	cd bf       	out	0x3d, r28	; 61
     ba2:	df 91       	pop	r29
     ba4:	cf 91       	pop	r28
     ba6:	1f 91       	pop	r17
     ba8:	0f 91       	pop	r16
     baa:	ff 90       	pop	r15
     bac:	ef 90       	pop	r14
     bae:	df 90       	pop	r13
     bb0:	cf 90       	pop	r12
     bb2:	bf 90       	pop	r11
     bb4:	af 90       	pop	r10
     bb6:	9f 90       	pop	r9
     bb8:	8f 90       	pop	r8
     bba:	7f 90       	pop	r7
     bbc:	6f 90       	pop	r6
     bbe:	5f 90       	pop	r5
     bc0:	4f 90       	pop	r4
     bc2:	3f 90       	pop	r3
     bc4:	2f 90       	pop	r2
     bc6:	08 95       	ret

00000bc8 <main>:

/*********************************************************************/
int main(void)
{	
     bc8:	cf 93       	push	r28
     bca:	df 93       	push	r29
     bcc:	cd b7       	in	r28, 0x3d	; 61
     bce:	de b7       	in	r29, 0x3e	; 62
     bd0:	a0 97       	sbiw	r28, 0x20	; 32
     bd2:	0f b6       	in	r0, 0x3f	; 63
     bd4:	f8 94       	cli
     bd6:	de bf       	out	0x3e, r29	; 62
     bd8:	0f be       	out	0x3f, r0	; 63
     bda:	cd bf       	out	0x3d, r28	; 61
	double  temps[4];
	float emiss[4];
	setup();
     bdc:	0e 94 c9 02 	call	0x592	; 0x592 <_Z5setupv>
	//Serial.send(Serial.read());
	IR_sensorReads(temps);
     be0:	ce 01       	movw	r24, r28
     be2:	41 96       	adiw	r24, 0x11	; 17
     be4:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <_Z14IR_sensorReadsPd>
	displayTemp(temps);
     be8:	ce 01       	movw	r24, r28
     bea:	41 96       	adiw	r24, 0x11	; 17
     bec:	0e 94 05 03 	call	0x60a	; 0x60a <_Z11displayTempPd>
	
	calibrateEmissivity(emiss);	
     bf0:	ce 01       	movw	r24, r28
     bf2:	01 96       	adiw	r24, 0x01	; 1
     bf4:	0e 94 5d 04 	call	0x8ba	; 0x8ba <_Z19calibrateEmissivityPf>
	displayEmiss(emiss);
     bf8:	ce 01       	movw	r24, r28
     bfa:	01 96       	adiw	r24, 0x01	; 1
     bfc:	0e 94 7e 03 	call	0x6fc	; 0x6fc <_Z12displayEmissPf>
	
	IR_sensorReads(temps);
     c00:	ce 01       	movw	r24, r28
     c02:	41 96       	adiw	r24, 0x11	; 17
     c04:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <_Z14IR_sensorReadsPd>
	displayTemp(temps);
     c08:	ce 01       	movw	r24, r28
     c0a:	41 96       	adiw	r24, 0x11	; 17
     c0c:	0e 94 05 03 	call	0x60a	; 0x60a <_Z11displayTempPd>
}
     c10:	80 e0       	ldi	r24, 0x00	; 0
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	a0 96       	adiw	r28, 0x20	; 32
     c16:	0f b6       	in	r0, 0x3f	; 63
     c18:	f8 94       	cli
     c1a:	de bf       	out	0x3e, r29	; 62
     c1c:	0f be       	out	0x3f, r0	; 63
     c1e:	cd bf       	out	0x3d, r28	; 61
     c20:	df 91       	pop	r29
     c22:	cf 91       	pop	r28
     c24:	08 95       	ret

00000c26 <_GLOBAL__sub_I_MLX>:
const int m_sensorsCount = 2;
//Adafruit_MLX90614 MLX_5a(0x5A);
//Adafruit_MLX90614 MLX_5b(0x5B);
//Adafruit_MLX90614 MLX_5c(0x5C);
//Adafruit_MLX90614 MLX_5d(0x5D);
Adafruit_MLX90614 MLX[m_sensorsCount] = {0x5A,0x5B};
     c26:	6a e5       	ldi	r22, 0x5A	; 90
     c28:	86 e8       	ldi	r24, 0x86	; 134
     c2a:	91 e0       	ldi	r25, 0x01	; 1
     c2c:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_ZN17Adafruit_MLX90614C1Eh>
     c30:	6b e5       	ldi	r22, 0x5B	; 91
     c32:	81 e9       	ldi	r24, 0x91	; 145
     c34:	91 e0       	ldi	r25, 0x01	; 1
     c36:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_ZN17Adafruit_MLX90614C1Eh>
     c3a:	08 95       	ret

00000c3c <i2c_init>:
 Initialization of the I2C bus interface. Need to be called only once
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  DDRC = 0;
     c3c:	17 b8       	out	0x07, r1	; 7
  PORTC = (1 << PORTC4) | (1 << PORTC5);//enable pull up
     c3e:	80 e3       	ldi	r24, 0x30	; 48
     c40:	88 b9       	out	0x08, r24	; 8
  TWSR = 0;                         /* no prescaler */
     c42:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
     c46:	88 e4       	ldi	r24, 0x48	; 72
     c48:	80 93 b8 00 	sts	0x00B8, r24
     c4c:	08 95       	ret

00000c4e <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     c4e:	94 ea       	ldi	r25, 0xA4	; 164
     c50:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     c54:	ec eb       	ldi	r30, 0xBC	; 188
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	90 81       	ld	r25, Z
     c5a:	99 23       	and	r25, r25
     c5c:	ec f7       	brge	.-6      	; 0xc58 <i2c_start+0xa>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     c5e:	90 91 b9 00 	lds	r25, 0x00B9
     c62:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     c64:	98 30       	cpi	r25, 0x08	; 8
     c66:	11 f0       	breq	.+4      	; 0xc6c <i2c_start+0x1e>
     c68:	90 31       	cpi	r25, 0x10	; 16
     c6a:	a1 f4       	brne	.+40     	; 0xc94 <i2c_start+0x46>

	// send device address
	TWDR = address;
     c6c:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     c70:	84 e8       	ldi	r24, 0x84	; 132
     c72:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
     c76:	ec eb       	ldi	r30, 0xBC	; 188
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	80 81       	ld	r24, Z
     c7c:	88 23       	and	r24, r24
     c7e:	ec f7       	brge	.-6      	; 0xc7a <i2c_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     c80:	90 91 b9 00 	lds	r25, 0x00B9
     c84:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     c86:	98 31       	cpi	r25, 0x18	; 24
     c88:	39 f0       	breq	.+14     	; 0xc98 <i2c_start+0x4a>
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	90 34       	cpi	r25, 0x40	; 64
     c8e:	29 f4       	brne	.+10     	; 0xc9a <i2c_start+0x4c>
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
     c98:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
     c9a:	08 95       	ret

00000c9c <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     c9c:	84 e9       	ldi	r24, 0x94	; 148
     c9e:	80 93 bc 00 	sts	0x00BC, r24
     ca2:	08 95       	ret

00000ca4 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     ca4:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     ca8:	84 e8       	ldi	r24, 0x84	; 132
     caa:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     cae:	ec eb       	ldi	r30, 0xBC	; 188
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	88 23       	and	r24, r24
     cb6:	ec f7       	brge	.-6      	; 0xcb2 <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     cb8:	90 91 b9 00 	lds	r25, 0x00B9
     cbc:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	98 32       	cpi	r25, 0x28	; 40
     cc2:	09 f4       	brne	.+2      	; 0xcc6 <i2c_write+0x22>
     cc4:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
     cc6:	08 95       	ret

00000cc8 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     cc8:	84 ec       	ldi	r24, 0xC4	; 196
     cca:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
     cce:	ec eb       	ldi	r30, 0xBC	; 188
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	88 23       	and	r24, r24
     cd6:	ec f7       	brge	.-6      	; 0xcd2 <i2c_readAck+0xa>
    return TWDR;
     cd8:	80 91 bb 00 	lds	r24, 0x00BB
}/* i2c_readAck */
     cdc:	08 95       	ret

00000cde <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     cde:	84 e8       	ldi	r24, 0x84	; 132
     ce0:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
     ce4:	ec eb       	ldi	r30, 0xBC	; 188
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	88 23       	and	r24, r24
     cec:	ec f7       	brge	.-6      	; 0xce8 <i2c_readNak+0xa>
    return TWDR;
     cee:	80 91 bb 00 	lds	r24, 0x00BB
}/* i2c_readNak */
     cf2:	08 95       	ret

00000cf4 <_ZN5USART4initEi>:
USART Serial; //Initialize new instance of the serial class
//Setup Baud rate in header file
//set to 8 bits, no stop bit, no parity

/*********************************************************************/
void USART::init(int BAUDRATE = 9600){
     cf4:	0f 93       	push	r16
     cf6:	1f 93       	push	r17
	
	UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);
     cf8:	8b 01       	movw	r16, r22
     cfa:	77 0f       	add	r23, r23
     cfc:	22 0b       	sbc	r18, r18
     cfe:	33 0b       	sbc	r19, r19
     d00:	d9 01       	movw	r26, r18
     d02:	c8 01       	movw	r24, r16
     d04:	80 58       	subi	r24, 0x80	; 128
     d06:	9b 47       	sbci	r25, 0x7B	; 123
     d08:	a1 4e       	sbci	r26, 0xE1	; 225
     d0a:	bf 4f       	sbci	r27, 0xFF	; 255
     d0c:	88 0f       	add	r24, r24
     d0e:	99 1f       	adc	r25, r25
     d10:	aa 1f       	adc	r26, r26
     d12:	bb 1f       	adc	r27, r27
     d14:	88 0f       	add	r24, r24
     d16:	99 1f       	adc	r25, r25
     d18:	aa 1f       	adc	r26, r26
     d1a:	bb 1f       	adc	r27, r27
     d1c:	bc 01       	movw	r22, r24
     d1e:	cd 01       	movw	r24, r26
     d20:	66 0f       	add	r22, r22
     d22:	77 1f       	adc	r23, r23
     d24:	88 1f       	adc	r24, r24
     d26:	99 1f       	adc	r25, r25
     d28:	00 0f       	add	r16, r16
     d2a:	11 1f       	adc	r17, r17
     d2c:	22 1f       	adc	r18, r18
     d2e:	33 1f       	adc	r19, r19
     d30:	00 0f       	add	r16, r16
     d32:	11 1f       	adc	r17, r17
     d34:	22 1f       	adc	r18, r18
     d36:	33 1f       	adc	r19, r19
     d38:	a9 01       	movw	r20, r18
     d3a:	98 01       	movw	r18, r16
     d3c:	22 0f       	add	r18, r18
     d3e:	33 1f       	adc	r19, r19
     d40:	44 1f       	adc	r20, r20
     d42:	55 1f       	adc	r21, r21
     d44:	22 0f       	add	r18, r18
     d46:	33 1f       	adc	r19, r19
     d48:	44 1f       	adc	r20, r20
     d4a:	55 1f       	adc	r21, r21
     d4c:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <__udivmodsi4>
     d50:	da 01       	movw	r26, r20
     d52:	c9 01       	movw	r24, r18
     d54:	01 97       	sbiw	r24, 0x01	; 1
     d56:	a1 09       	sbc	r26, r1
     d58:	b1 09       	sbc	r27, r1
     d5a:	89 2f       	mov	r24, r25
     d5c:	9a 2f       	mov	r25, r26
     d5e:	ab 2f       	mov	r26, r27
     d60:	bb 27       	eor	r27, r27
     d62:	80 93 c5 00 	sts	0x00C5, r24
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);
     d66:	21 50       	subi	r18, 0x01	; 1
     d68:	20 93 c4 00 	sts	0x00C4, r18
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     d6c:	e1 ec       	ldi	r30, 0xC1	; 193
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	88 e1       	ldi	r24, 0x18	; 24
     d72:	80 83       	st	Z, r24
	UCSR0C = (1<<UCSZ00)|(1<<UCSZ01);
     d74:	86 e0       	ldi	r24, 0x06	; 6
     d76:	80 93 c2 00 	sts	0x00C2, r24

	UCSR0B |= (1 << RXCIE0); // Enable the USART Receive Complete interrupt (USART_RXC)
     d7a:	80 81       	ld	r24, Z
     d7c:	80 68       	ori	r24, 0x80	; 128
     d7e:	80 83       	st	Z, r24
	sei();
     d80:	78 94       	sei
}
     d82:	1f 91       	pop	r17
     d84:	0f 91       	pop	r16
     d86:	08 95       	ret

00000d88 <_ZN5USART4sendEh>:
 return UDR0;// read buffer
}
/*********************************************************************/
void USART::send(uint8_t data){

	while(!(UCSR0A & (1<<UDRE0))); //wait until buffer is empty
     d88:	e0 ec       	ldi	r30, 0xC0	; 192
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	80 81       	ld	r24, Z
     d8e:	85 ff       	sbrs	r24, 5
     d90:	fd cf       	rjmp	.-6      	; 0xd8c <_ZN5USART4sendEh+0x4>
	UDR0 = data; //Load data into buffer
     d92:	60 93 c6 00 	sts	0x00C6, r22
     d96:	08 95       	ret

00000d98 <_ZN5USART4sendEPKc>:
}
/*********************************************************************/
//send one char at a time
void USART::send(const char* StringPtr)
{
     d98:	0f 93       	push	r16
     d9a:	1f 93       	push	r17
     d9c:	cf 93       	push	r28
     d9e:	df 93       	push	r29
     da0:	eb 01       	movw	r28, r22
	//st = millis();
	while(*StringPtr != 0x00)
     da2:	68 81       	ld	r22, Y
     da4:	66 23       	and	r22, r22
     da6:	41 f0       	breq	.+16     	; 0xdb8 <_ZN5USART4sendEPKc+0x20>
     da8:	8c 01       	movw	r16, r24
     daa:	21 96       	adiw	r28, 0x01	; 1
		void init(int BAUDRATE); 
		bool available(void);
		char read(void);
		bool flush(void);
		void send(uint8_t data);
		void send(char data) {send((uint8_t)data); };
     dac:	c8 01       	movw	r24, r16
     dae:	0e 94 c4 06 	call	0xd88	; 0xd88 <_ZN5USART4sendEh>
     db2:	69 91       	ld	r22, Y+
     db4:	61 11       	cpse	r22, r1
     db6:	fa cf       	rjmp	.-12     	; 0xdac <_ZN5USART4sendEPKc+0x14>
	{
		send(*StringPtr++);
	}
	//ft = millis();
}
     db8:	df 91       	pop	r29
     dba:	cf 91       	pop	r28
     dbc:	1f 91       	pop	r17
     dbe:	0f 91       	pop	r16
     dc0:	08 95       	ret

00000dc2 <_ZN5USART4sendEhi>:
	send(str);
}
/*********************************************************************/
//convert int to ASCII number, display in decimal or hex
void USART::send(uint8_t data, int base)
{
     dc2:	0f 93       	push	r16
     dc4:	1f 93       	push	r17
     dc6:	cf 93       	push	r28
     dc8:	df 93       	push	r29
     dca:	00 d0       	rcall	.+0      	; 0xdcc <_ZN5USART4sendEhi+0xa>
     dcc:	1f 92       	push	r1
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
     dd2:	8c 01       	movw	r16, r24
	char str[3];
	if (base == DEC){
     dd4:	4a 30       	cpi	r20, 0x0A	; 10
     dd6:	51 05       	cpc	r21, r1
     dd8:	99 f4       	brne	.+38     	; 0xe00 <_ZN5USART4sendEhi+0x3e>
		sprintf(str,"%d",data);
     dda:	1f 92       	push	r1
     ddc:	6f 93       	push	r22
     dde:	8c e7       	ldi	r24, 0x7C	; 124
     de0:	91 e0       	ldi	r25, 0x01	; 1
     de2:	9f 93       	push	r25
     de4:	8f 93       	push	r24
     de6:	ce 01       	movw	r24, r28
     de8:	01 96       	adiw	r24, 0x01	; 1
     dea:	9f 93       	push	r25
     dec:	8f 93       	push	r24
     dee:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <sprintf>
     df2:	0f 90       	pop	r0
     df4:	0f 90       	pop	r0
     df6:	0f 90       	pop	r0
     df8:	0f 90       	pop	r0
     dfa:	0f 90       	pop	r0
     dfc:	0f 90       	pop	r0
     dfe:	12 c0       	rjmp	.+36     	; 0xe24 <_ZN5USART4sendEhi+0x62>
	}else{
		sprintf(str,"%x",data);	
     e00:	1f 92       	push	r1
     e02:	6f 93       	push	r22
     e04:	2f e7       	ldi	r18, 0x7F	; 127
     e06:	31 e0       	ldi	r19, 0x01	; 1
     e08:	3f 93       	push	r19
     e0a:	2f 93       	push	r18
     e0c:	ce 01       	movw	r24, r28
     e0e:	01 96       	adiw	r24, 0x01	; 1
     e10:	9f 93       	push	r25
     e12:	8f 93       	push	r24
     e14:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <sprintf>
     e18:	0f 90       	pop	r0
     e1a:	0f 90       	pop	r0
     e1c:	0f 90       	pop	r0
     e1e:	0f 90       	pop	r0
     e20:	0f 90       	pop	r0
     e22:	0f 90       	pop	r0
	}
	send(str);
     e24:	be 01       	movw	r22, r28
     e26:	6f 5f       	subi	r22, 0xFF	; 255
     e28:	7f 4f       	sbci	r23, 0xFF	; 255
     e2a:	c8 01       	movw	r24, r16
     e2c:	0e 94 cc 06 	call	0xd98	; 0xd98 <_ZN5USART4sendEPKc>
		else
		{
			send(Output_unit+48);
		}
	}*/
}
     e30:	0f 90       	pop	r0
     e32:	0f 90       	pop	r0
     e34:	0f 90       	pop	r0
     e36:	df 91       	pop	r29
     e38:	cf 91       	pop	r28
     e3a:	1f 91       	pop	r17
     e3c:	0f 91       	pop	r16
     e3e:	08 95       	ret

00000e40 <_GLOBAL__sub_I_Wire>:
	  }
 class I2c
 {
 public:
    I2c()
    {
     e40:	e4 ea       	ldi	r30, 0xA4	; 164
     e42:	f1 e0       	ldi	r31, 0x01	; 1
     e44:	10 86       	std	Z+8, r1	; 0x08
     e46:	11 86       	std	Z+9, r1	; 0x09
	    i2c_init();
     e48:	0e 94 1e 06 	call	0xc3c	; 0xc3c <i2c_init>
     e4c:	08 95       	ret

00000e4e <__subsf3>:
     e4e:	50 58       	subi	r21, 0x80	; 128

00000e50 <__addsf3>:
     e50:	bb 27       	eor	r27, r27
     e52:	aa 27       	eor	r26, r26
     e54:	0e 94 3f 07 	call	0xe7e	; 0xe7e <__addsf3x>
     e58:	0c 94 b2 08 	jmp	0x1164	; 0x1164 <__fp_round>
     e5c:	0e 94 a4 08 	call	0x1148	; 0x1148 <__fp_pscA>
     e60:	38 f0       	brcs	.+14     	; 0xe70 <__addsf3+0x20>
     e62:	0e 94 ab 08 	call	0x1156	; 0x1156 <__fp_pscB>
     e66:	20 f0       	brcs	.+8      	; 0xe70 <__addsf3+0x20>
     e68:	39 f4       	brne	.+14     	; 0xe78 <__addsf3+0x28>
     e6a:	9f 3f       	cpi	r25, 0xFF	; 255
     e6c:	19 f4       	brne	.+6      	; 0xe74 <__addsf3+0x24>
     e6e:	26 f4       	brtc	.+8      	; 0xe78 <__addsf3+0x28>
     e70:	0c 94 a1 08 	jmp	0x1142	; 0x1142 <__fp_nan>
     e74:	0e f4       	brtc	.+2      	; 0xe78 <__addsf3+0x28>
     e76:	e0 95       	com	r30
     e78:	e7 fb       	bst	r30, 7
     e7a:	0c 94 9b 08 	jmp	0x1136	; 0x1136 <__fp_inf>

00000e7e <__addsf3x>:
     e7e:	e9 2f       	mov	r30, r25
     e80:	0e 94 c3 08 	call	0x1186	; 0x1186 <__fp_split3>
     e84:	58 f3       	brcs	.-42     	; 0xe5c <__addsf3+0xc>
     e86:	ba 17       	cp	r27, r26
     e88:	62 07       	cpc	r22, r18
     e8a:	73 07       	cpc	r23, r19
     e8c:	84 07       	cpc	r24, r20
     e8e:	95 07       	cpc	r25, r21
     e90:	20 f0       	brcs	.+8      	; 0xe9a <__addsf3x+0x1c>
     e92:	79 f4       	brne	.+30     	; 0xeb2 <__addsf3x+0x34>
     e94:	a6 f5       	brtc	.+104    	; 0xefe <__addsf3x+0x80>
     e96:	0c 94 e5 08 	jmp	0x11ca	; 0x11ca <__fp_zero>
     e9a:	0e f4       	brtc	.+2      	; 0xe9e <__addsf3x+0x20>
     e9c:	e0 95       	com	r30
     e9e:	0b 2e       	mov	r0, r27
     ea0:	ba 2f       	mov	r27, r26
     ea2:	a0 2d       	mov	r26, r0
     ea4:	0b 01       	movw	r0, r22
     ea6:	b9 01       	movw	r22, r18
     ea8:	90 01       	movw	r18, r0
     eaa:	0c 01       	movw	r0, r24
     eac:	ca 01       	movw	r24, r20
     eae:	a0 01       	movw	r20, r0
     eb0:	11 24       	eor	r1, r1
     eb2:	ff 27       	eor	r31, r31
     eb4:	59 1b       	sub	r21, r25
     eb6:	99 f0       	breq	.+38     	; 0xede <__addsf3x+0x60>
     eb8:	59 3f       	cpi	r21, 0xF9	; 249
     eba:	50 f4       	brcc	.+20     	; 0xed0 <__addsf3x+0x52>
     ebc:	50 3e       	cpi	r21, 0xE0	; 224
     ebe:	68 f1       	brcs	.+90     	; 0xf1a <__addsf3x+0x9c>
     ec0:	1a 16       	cp	r1, r26
     ec2:	f0 40       	sbci	r31, 0x00	; 0
     ec4:	a2 2f       	mov	r26, r18
     ec6:	23 2f       	mov	r18, r19
     ec8:	34 2f       	mov	r19, r20
     eca:	44 27       	eor	r20, r20
     ecc:	58 5f       	subi	r21, 0xF8	; 248
     ece:	f3 cf       	rjmp	.-26     	; 0xeb6 <__addsf3x+0x38>
     ed0:	46 95       	lsr	r20
     ed2:	37 95       	ror	r19
     ed4:	27 95       	ror	r18
     ed6:	a7 95       	ror	r26
     ed8:	f0 40       	sbci	r31, 0x00	; 0
     eda:	53 95       	inc	r21
     edc:	c9 f7       	brne	.-14     	; 0xed0 <__addsf3x+0x52>
     ede:	7e f4       	brtc	.+30     	; 0xefe <__addsf3x+0x80>
     ee0:	1f 16       	cp	r1, r31
     ee2:	ba 0b       	sbc	r27, r26
     ee4:	62 0b       	sbc	r22, r18
     ee6:	73 0b       	sbc	r23, r19
     ee8:	84 0b       	sbc	r24, r20
     eea:	ba f0       	brmi	.+46     	; 0xf1a <__addsf3x+0x9c>
     eec:	91 50       	subi	r25, 0x01	; 1
     eee:	a1 f0       	breq	.+40     	; 0xf18 <__addsf3x+0x9a>
     ef0:	ff 0f       	add	r31, r31
     ef2:	bb 1f       	adc	r27, r27
     ef4:	66 1f       	adc	r22, r22
     ef6:	77 1f       	adc	r23, r23
     ef8:	88 1f       	adc	r24, r24
     efa:	c2 f7       	brpl	.-16     	; 0xeec <__addsf3x+0x6e>
     efc:	0e c0       	rjmp	.+28     	; 0xf1a <__addsf3x+0x9c>
     efe:	ba 0f       	add	r27, r26
     f00:	62 1f       	adc	r22, r18
     f02:	73 1f       	adc	r23, r19
     f04:	84 1f       	adc	r24, r20
     f06:	48 f4       	brcc	.+18     	; 0xf1a <__addsf3x+0x9c>
     f08:	87 95       	ror	r24
     f0a:	77 95       	ror	r23
     f0c:	67 95       	ror	r22
     f0e:	b7 95       	ror	r27
     f10:	f7 95       	ror	r31
     f12:	9e 3f       	cpi	r25, 0xFE	; 254
     f14:	08 f0       	brcs	.+2      	; 0xf18 <__addsf3x+0x9a>
     f16:	b0 cf       	rjmp	.-160    	; 0xe78 <__addsf3+0x28>
     f18:	93 95       	inc	r25
     f1a:	88 0f       	add	r24, r24
     f1c:	08 f0       	brcs	.+2      	; 0xf20 <__addsf3x+0xa2>
     f1e:	99 27       	eor	r25, r25
     f20:	ee 0f       	add	r30, r30
     f22:	97 95       	ror	r25
     f24:	87 95       	ror	r24
     f26:	08 95       	ret

00000f28 <__cmpsf2>:
     f28:	0e 94 77 08 	call	0x10ee	; 0x10ee <__fp_cmp>
     f2c:	08 f4       	brcc	.+2      	; 0xf30 <__cmpsf2+0x8>
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	08 95       	ret

00000f32 <__divsf3>:
     f32:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__divsf3x>
     f36:	0c 94 b2 08 	jmp	0x1164	; 0x1164 <__fp_round>
     f3a:	0e 94 ab 08 	call	0x1156	; 0x1156 <__fp_pscB>
     f3e:	58 f0       	brcs	.+22     	; 0xf56 <__divsf3+0x24>
     f40:	0e 94 a4 08 	call	0x1148	; 0x1148 <__fp_pscA>
     f44:	40 f0       	brcs	.+16     	; 0xf56 <__divsf3+0x24>
     f46:	29 f4       	brne	.+10     	; 0xf52 <__divsf3+0x20>
     f48:	5f 3f       	cpi	r21, 0xFF	; 255
     f4a:	29 f0       	breq	.+10     	; 0xf56 <__divsf3+0x24>
     f4c:	0c 94 9b 08 	jmp	0x1136	; 0x1136 <__fp_inf>
     f50:	51 11       	cpse	r21, r1
     f52:	0c 94 e6 08 	jmp	0x11cc	; 0x11cc <__fp_szero>
     f56:	0c 94 a1 08 	jmp	0x1142	; 0x1142 <__fp_nan>

00000f5a <__divsf3x>:
     f5a:	0e 94 c3 08 	call	0x1186	; 0x1186 <__fp_split3>
     f5e:	68 f3       	brcs	.-38     	; 0xf3a <__divsf3+0x8>

00000f60 <__divsf3_pse>:
     f60:	99 23       	and	r25, r25
     f62:	b1 f3       	breq	.-20     	; 0xf50 <__divsf3+0x1e>
     f64:	55 23       	and	r21, r21
     f66:	91 f3       	breq	.-28     	; 0xf4c <__divsf3+0x1a>
     f68:	95 1b       	sub	r25, r21
     f6a:	55 0b       	sbc	r21, r21
     f6c:	bb 27       	eor	r27, r27
     f6e:	aa 27       	eor	r26, r26
     f70:	62 17       	cp	r22, r18
     f72:	73 07       	cpc	r23, r19
     f74:	84 07       	cpc	r24, r20
     f76:	38 f0       	brcs	.+14     	; 0xf86 <__divsf3_pse+0x26>
     f78:	9f 5f       	subi	r25, 0xFF	; 255
     f7a:	5f 4f       	sbci	r21, 0xFF	; 255
     f7c:	22 0f       	add	r18, r18
     f7e:	33 1f       	adc	r19, r19
     f80:	44 1f       	adc	r20, r20
     f82:	aa 1f       	adc	r26, r26
     f84:	a9 f3       	breq	.-22     	; 0xf70 <__divsf3_pse+0x10>
     f86:	35 d0       	rcall	.+106    	; 0xff2 <__divsf3_pse+0x92>
     f88:	0e 2e       	mov	r0, r30
     f8a:	3a f0       	brmi	.+14     	; 0xf9a <__divsf3_pse+0x3a>
     f8c:	e0 e8       	ldi	r30, 0x80	; 128
     f8e:	32 d0       	rcall	.+100    	; 0xff4 <__divsf3_pse+0x94>
     f90:	91 50       	subi	r25, 0x01	; 1
     f92:	50 40       	sbci	r21, 0x00	; 0
     f94:	e6 95       	lsr	r30
     f96:	00 1c       	adc	r0, r0
     f98:	ca f7       	brpl	.-14     	; 0xf8c <__divsf3_pse+0x2c>
     f9a:	2b d0       	rcall	.+86     	; 0xff2 <__divsf3_pse+0x92>
     f9c:	fe 2f       	mov	r31, r30
     f9e:	29 d0       	rcall	.+82     	; 0xff2 <__divsf3_pse+0x92>
     fa0:	66 0f       	add	r22, r22
     fa2:	77 1f       	adc	r23, r23
     fa4:	88 1f       	adc	r24, r24
     fa6:	bb 1f       	adc	r27, r27
     fa8:	26 17       	cp	r18, r22
     faa:	37 07       	cpc	r19, r23
     fac:	48 07       	cpc	r20, r24
     fae:	ab 07       	cpc	r26, r27
     fb0:	b0 e8       	ldi	r27, 0x80	; 128
     fb2:	09 f0       	breq	.+2      	; 0xfb6 <__divsf3_pse+0x56>
     fb4:	bb 0b       	sbc	r27, r27
     fb6:	80 2d       	mov	r24, r0
     fb8:	bf 01       	movw	r22, r30
     fba:	ff 27       	eor	r31, r31
     fbc:	93 58       	subi	r25, 0x83	; 131
     fbe:	5f 4f       	sbci	r21, 0xFF	; 255
     fc0:	3a f0       	brmi	.+14     	; 0xfd0 <__divsf3_pse+0x70>
     fc2:	9e 3f       	cpi	r25, 0xFE	; 254
     fc4:	51 05       	cpc	r21, r1
     fc6:	78 f0       	brcs	.+30     	; 0xfe6 <__divsf3_pse+0x86>
     fc8:	0c 94 9b 08 	jmp	0x1136	; 0x1136 <__fp_inf>
     fcc:	0c 94 e6 08 	jmp	0x11cc	; 0x11cc <__fp_szero>
     fd0:	5f 3f       	cpi	r21, 0xFF	; 255
     fd2:	e4 f3       	brlt	.-8      	; 0xfcc <__divsf3_pse+0x6c>
     fd4:	98 3e       	cpi	r25, 0xE8	; 232
     fd6:	d4 f3       	brlt	.-12     	; 0xfcc <__divsf3_pse+0x6c>
     fd8:	86 95       	lsr	r24
     fda:	77 95       	ror	r23
     fdc:	67 95       	ror	r22
     fde:	b7 95       	ror	r27
     fe0:	f7 95       	ror	r31
     fe2:	9f 5f       	subi	r25, 0xFF	; 255
     fe4:	c9 f7       	brne	.-14     	; 0xfd8 <__divsf3_pse+0x78>
     fe6:	88 0f       	add	r24, r24
     fe8:	91 1d       	adc	r25, r1
     fea:	96 95       	lsr	r25
     fec:	87 95       	ror	r24
     fee:	97 f9       	bld	r25, 7
     ff0:	08 95       	ret
     ff2:	e1 e0       	ldi	r30, 0x01	; 1
     ff4:	66 0f       	add	r22, r22
     ff6:	77 1f       	adc	r23, r23
     ff8:	88 1f       	adc	r24, r24
     ffa:	bb 1f       	adc	r27, r27
     ffc:	62 17       	cp	r22, r18
     ffe:	73 07       	cpc	r23, r19
    1000:	84 07       	cpc	r24, r20
    1002:	ba 07       	cpc	r27, r26
    1004:	20 f0       	brcs	.+8      	; 0x100e <__divsf3_pse+0xae>
    1006:	62 1b       	sub	r22, r18
    1008:	73 0b       	sbc	r23, r19
    100a:	84 0b       	sbc	r24, r20
    100c:	ba 0b       	sbc	r27, r26
    100e:	ee 1f       	adc	r30, r30
    1010:	88 f7       	brcc	.-30     	; 0xff4 <__divsf3_pse+0x94>
    1012:	e0 95       	com	r30
    1014:	08 95       	ret

00001016 <__fixunssfsi>:
    1016:	0e 94 cb 08 	call	0x1196	; 0x1196 <__fp_splitA>
    101a:	88 f0       	brcs	.+34     	; 0x103e <__fixunssfsi+0x28>
    101c:	9f 57       	subi	r25, 0x7F	; 127
    101e:	98 f0       	brcs	.+38     	; 0x1046 <__fixunssfsi+0x30>
    1020:	b9 2f       	mov	r27, r25
    1022:	99 27       	eor	r25, r25
    1024:	b7 51       	subi	r27, 0x17	; 23
    1026:	b0 f0       	brcs	.+44     	; 0x1054 <__fixunssfsi+0x3e>
    1028:	e1 f0       	breq	.+56     	; 0x1062 <__fixunssfsi+0x4c>
    102a:	66 0f       	add	r22, r22
    102c:	77 1f       	adc	r23, r23
    102e:	88 1f       	adc	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	1a f0       	brmi	.+6      	; 0x103a <__fixunssfsi+0x24>
    1034:	ba 95       	dec	r27
    1036:	c9 f7       	brne	.-14     	; 0x102a <__fixunssfsi+0x14>
    1038:	14 c0       	rjmp	.+40     	; 0x1062 <__fixunssfsi+0x4c>
    103a:	b1 30       	cpi	r27, 0x01	; 1
    103c:	91 f0       	breq	.+36     	; 0x1062 <__fixunssfsi+0x4c>
    103e:	0e 94 e5 08 	call	0x11ca	; 0x11ca <__fp_zero>
    1042:	b1 e0       	ldi	r27, 0x01	; 1
    1044:	08 95       	ret
    1046:	0c 94 e5 08 	jmp	0x11ca	; 0x11ca <__fp_zero>
    104a:	67 2f       	mov	r22, r23
    104c:	78 2f       	mov	r23, r24
    104e:	88 27       	eor	r24, r24
    1050:	b8 5f       	subi	r27, 0xF8	; 248
    1052:	39 f0       	breq	.+14     	; 0x1062 <__fixunssfsi+0x4c>
    1054:	b9 3f       	cpi	r27, 0xF9	; 249
    1056:	cc f3       	brlt	.-14     	; 0x104a <__fixunssfsi+0x34>
    1058:	86 95       	lsr	r24
    105a:	77 95       	ror	r23
    105c:	67 95       	ror	r22
    105e:	b3 95       	inc	r27
    1060:	d9 f7       	brne	.-10     	; 0x1058 <__fixunssfsi+0x42>
    1062:	3e f4       	brtc	.+14     	; 0x1072 <__fixunssfsi+0x5c>
    1064:	90 95       	com	r25
    1066:	80 95       	com	r24
    1068:	70 95       	com	r23
    106a:	61 95       	neg	r22
    106c:	7f 4f       	sbci	r23, 0xFF	; 255
    106e:	8f 4f       	sbci	r24, 0xFF	; 255
    1070:	9f 4f       	sbci	r25, 0xFF	; 255
    1072:	08 95       	ret

00001074 <__floatunsisf>:
    1074:	e8 94       	clt
    1076:	09 c0       	rjmp	.+18     	; 0x108a <__floatsisf+0x12>

00001078 <__floatsisf>:
    1078:	97 fb       	bst	r25, 7
    107a:	3e f4       	brtc	.+14     	; 0x108a <__floatsisf+0x12>
    107c:	90 95       	com	r25
    107e:	80 95       	com	r24
    1080:	70 95       	com	r23
    1082:	61 95       	neg	r22
    1084:	7f 4f       	sbci	r23, 0xFF	; 255
    1086:	8f 4f       	sbci	r24, 0xFF	; 255
    1088:	9f 4f       	sbci	r25, 0xFF	; 255
    108a:	99 23       	and	r25, r25
    108c:	a9 f0       	breq	.+42     	; 0x10b8 <__floatsisf+0x40>
    108e:	f9 2f       	mov	r31, r25
    1090:	96 e9       	ldi	r25, 0x96	; 150
    1092:	bb 27       	eor	r27, r27
    1094:	93 95       	inc	r25
    1096:	f6 95       	lsr	r31
    1098:	87 95       	ror	r24
    109a:	77 95       	ror	r23
    109c:	67 95       	ror	r22
    109e:	b7 95       	ror	r27
    10a0:	f1 11       	cpse	r31, r1
    10a2:	f8 cf       	rjmp	.-16     	; 0x1094 <__floatsisf+0x1c>
    10a4:	fa f4       	brpl	.+62     	; 0x10e4 <__floatsisf+0x6c>
    10a6:	bb 0f       	add	r27, r27
    10a8:	11 f4       	brne	.+4      	; 0x10ae <__floatsisf+0x36>
    10aa:	60 ff       	sbrs	r22, 0
    10ac:	1b c0       	rjmp	.+54     	; 0x10e4 <__floatsisf+0x6c>
    10ae:	6f 5f       	subi	r22, 0xFF	; 255
    10b0:	7f 4f       	sbci	r23, 0xFF	; 255
    10b2:	8f 4f       	sbci	r24, 0xFF	; 255
    10b4:	9f 4f       	sbci	r25, 0xFF	; 255
    10b6:	16 c0       	rjmp	.+44     	; 0x10e4 <__floatsisf+0x6c>
    10b8:	88 23       	and	r24, r24
    10ba:	11 f0       	breq	.+4      	; 0x10c0 <__floatsisf+0x48>
    10bc:	96 e9       	ldi	r25, 0x96	; 150
    10be:	11 c0       	rjmp	.+34     	; 0x10e2 <__floatsisf+0x6a>
    10c0:	77 23       	and	r23, r23
    10c2:	21 f0       	breq	.+8      	; 0x10cc <__floatsisf+0x54>
    10c4:	9e e8       	ldi	r25, 0x8E	; 142
    10c6:	87 2f       	mov	r24, r23
    10c8:	76 2f       	mov	r23, r22
    10ca:	05 c0       	rjmp	.+10     	; 0x10d6 <__floatsisf+0x5e>
    10cc:	66 23       	and	r22, r22
    10ce:	71 f0       	breq	.+28     	; 0x10ec <__floatsisf+0x74>
    10d0:	96 e8       	ldi	r25, 0x86	; 134
    10d2:	86 2f       	mov	r24, r22
    10d4:	70 e0       	ldi	r23, 0x00	; 0
    10d6:	60 e0       	ldi	r22, 0x00	; 0
    10d8:	2a f0       	brmi	.+10     	; 0x10e4 <__floatsisf+0x6c>
    10da:	9a 95       	dec	r25
    10dc:	66 0f       	add	r22, r22
    10de:	77 1f       	adc	r23, r23
    10e0:	88 1f       	adc	r24, r24
    10e2:	da f7       	brpl	.-10     	; 0x10da <__floatsisf+0x62>
    10e4:	88 0f       	add	r24, r24
    10e6:	96 95       	lsr	r25
    10e8:	87 95       	ror	r24
    10ea:	97 f9       	bld	r25, 7
    10ec:	08 95       	ret

000010ee <__fp_cmp>:
    10ee:	99 0f       	add	r25, r25
    10f0:	00 08       	sbc	r0, r0
    10f2:	55 0f       	add	r21, r21
    10f4:	aa 0b       	sbc	r26, r26
    10f6:	e0 e8       	ldi	r30, 0x80	; 128
    10f8:	fe ef       	ldi	r31, 0xFE	; 254
    10fa:	16 16       	cp	r1, r22
    10fc:	17 06       	cpc	r1, r23
    10fe:	e8 07       	cpc	r30, r24
    1100:	f9 07       	cpc	r31, r25
    1102:	c0 f0       	brcs	.+48     	; 0x1134 <__fp_cmp+0x46>
    1104:	12 16       	cp	r1, r18
    1106:	13 06       	cpc	r1, r19
    1108:	e4 07       	cpc	r30, r20
    110a:	f5 07       	cpc	r31, r21
    110c:	98 f0       	brcs	.+38     	; 0x1134 <__fp_cmp+0x46>
    110e:	62 1b       	sub	r22, r18
    1110:	73 0b       	sbc	r23, r19
    1112:	84 0b       	sbc	r24, r20
    1114:	95 0b       	sbc	r25, r21
    1116:	39 f4       	brne	.+14     	; 0x1126 <__fp_cmp+0x38>
    1118:	0a 26       	eor	r0, r26
    111a:	61 f0       	breq	.+24     	; 0x1134 <__fp_cmp+0x46>
    111c:	23 2b       	or	r18, r19
    111e:	24 2b       	or	r18, r20
    1120:	25 2b       	or	r18, r21
    1122:	21 f4       	brne	.+8      	; 0x112c <__fp_cmp+0x3e>
    1124:	08 95       	ret
    1126:	0a 26       	eor	r0, r26
    1128:	09 f4       	brne	.+2      	; 0x112c <__fp_cmp+0x3e>
    112a:	a1 40       	sbci	r26, 0x01	; 1
    112c:	a6 95       	lsr	r26
    112e:	8f ef       	ldi	r24, 0xFF	; 255
    1130:	81 1d       	adc	r24, r1
    1132:	81 1d       	adc	r24, r1
    1134:	08 95       	ret

00001136 <__fp_inf>:
    1136:	97 f9       	bld	r25, 7
    1138:	9f 67       	ori	r25, 0x7F	; 127
    113a:	80 e8       	ldi	r24, 0x80	; 128
    113c:	70 e0       	ldi	r23, 0x00	; 0
    113e:	60 e0       	ldi	r22, 0x00	; 0
    1140:	08 95       	ret

00001142 <__fp_nan>:
    1142:	9f ef       	ldi	r25, 0xFF	; 255
    1144:	80 ec       	ldi	r24, 0xC0	; 192
    1146:	08 95       	ret

00001148 <__fp_pscA>:
    1148:	00 24       	eor	r0, r0
    114a:	0a 94       	dec	r0
    114c:	16 16       	cp	r1, r22
    114e:	17 06       	cpc	r1, r23
    1150:	18 06       	cpc	r1, r24
    1152:	09 06       	cpc	r0, r25
    1154:	08 95       	ret

00001156 <__fp_pscB>:
    1156:	00 24       	eor	r0, r0
    1158:	0a 94       	dec	r0
    115a:	12 16       	cp	r1, r18
    115c:	13 06       	cpc	r1, r19
    115e:	14 06       	cpc	r1, r20
    1160:	05 06       	cpc	r0, r21
    1162:	08 95       	ret

00001164 <__fp_round>:
    1164:	09 2e       	mov	r0, r25
    1166:	03 94       	inc	r0
    1168:	00 0c       	add	r0, r0
    116a:	11 f4       	brne	.+4      	; 0x1170 <__fp_round+0xc>
    116c:	88 23       	and	r24, r24
    116e:	52 f0       	brmi	.+20     	; 0x1184 <__fp_round+0x20>
    1170:	bb 0f       	add	r27, r27
    1172:	40 f4       	brcc	.+16     	; 0x1184 <__fp_round+0x20>
    1174:	bf 2b       	or	r27, r31
    1176:	11 f4       	brne	.+4      	; 0x117c <__fp_round+0x18>
    1178:	60 ff       	sbrs	r22, 0
    117a:	04 c0       	rjmp	.+8      	; 0x1184 <__fp_round+0x20>
    117c:	6f 5f       	subi	r22, 0xFF	; 255
    117e:	7f 4f       	sbci	r23, 0xFF	; 255
    1180:	8f 4f       	sbci	r24, 0xFF	; 255
    1182:	9f 4f       	sbci	r25, 0xFF	; 255
    1184:	08 95       	ret

00001186 <__fp_split3>:
    1186:	57 fd       	sbrc	r21, 7
    1188:	90 58       	subi	r25, 0x80	; 128
    118a:	44 0f       	add	r20, r20
    118c:	55 1f       	adc	r21, r21
    118e:	59 f0       	breq	.+22     	; 0x11a6 <__fp_splitA+0x10>
    1190:	5f 3f       	cpi	r21, 0xFF	; 255
    1192:	71 f0       	breq	.+28     	; 0x11b0 <__fp_splitA+0x1a>
    1194:	47 95       	ror	r20

00001196 <__fp_splitA>:
    1196:	88 0f       	add	r24, r24
    1198:	97 fb       	bst	r25, 7
    119a:	99 1f       	adc	r25, r25
    119c:	61 f0       	breq	.+24     	; 0x11b6 <__fp_splitA+0x20>
    119e:	9f 3f       	cpi	r25, 0xFF	; 255
    11a0:	79 f0       	breq	.+30     	; 0x11c0 <__fp_splitA+0x2a>
    11a2:	87 95       	ror	r24
    11a4:	08 95       	ret
    11a6:	12 16       	cp	r1, r18
    11a8:	13 06       	cpc	r1, r19
    11aa:	14 06       	cpc	r1, r20
    11ac:	55 1f       	adc	r21, r21
    11ae:	f2 cf       	rjmp	.-28     	; 0x1194 <__fp_split3+0xe>
    11b0:	46 95       	lsr	r20
    11b2:	f1 df       	rcall	.-30     	; 0x1196 <__fp_splitA>
    11b4:	08 c0       	rjmp	.+16     	; 0x11c6 <__fp_splitA+0x30>
    11b6:	16 16       	cp	r1, r22
    11b8:	17 06       	cpc	r1, r23
    11ba:	18 06       	cpc	r1, r24
    11bc:	99 1f       	adc	r25, r25
    11be:	f1 cf       	rjmp	.-30     	; 0x11a2 <__fp_splitA+0xc>
    11c0:	86 95       	lsr	r24
    11c2:	71 05       	cpc	r23, r1
    11c4:	61 05       	cpc	r22, r1
    11c6:	08 94       	sec
    11c8:	08 95       	ret

000011ca <__fp_zero>:
    11ca:	e8 94       	clt

000011cc <__fp_szero>:
    11cc:	bb 27       	eor	r27, r27
    11ce:	66 27       	eor	r22, r22
    11d0:	77 27       	eor	r23, r23
    11d2:	cb 01       	movw	r24, r22
    11d4:	97 f9       	bld	r25, 7
    11d6:	08 95       	ret

000011d8 <__gesf2>:
    11d8:	0e 94 77 08 	call	0x10ee	; 0x10ee <__fp_cmp>
    11dc:	08 f4       	brcc	.+2      	; 0x11e0 <__gesf2+0x8>
    11de:	8f ef       	ldi	r24, 0xFF	; 255
    11e0:	08 95       	ret

000011e2 <__mulsf3>:
    11e2:	0e 94 04 09 	call	0x1208	; 0x1208 <__mulsf3x>
    11e6:	0c 94 b2 08 	jmp	0x1164	; 0x1164 <__fp_round>
    11ea:	0e 94 a4 08 	call	0x1148	; 0x1148 <__fp_pscA>
    11ee:	38 f0       	brcs	.+14     	; 0x11fe <__mulsf3+0x1c>
    11f0:	0e 94 ab 08 	call	0x1156	; 0x1156 <__fp_pscB>
    11f4:	20 f0       	brcs	.+8      	; 0x11fe <__mulsf3+0x1c>
    11f6:	95 23       	and	r25, r21
    11f8:	11 f0       	breq	.+4      	; 0x11fe <__mulsf3+0x1c>
    11fa:	0c 94 9b 08 	jmp	0x1136	; 0x1136 <__fp_inf>
    11fe:	0c 94 a1 08 	jmp	0x1142	; 0x1142 <__fp_nan>
    1202:	11 24       	eor	r1, r1
    1204:	0c 94 e6 08 	jmp	0x11cc	; 0x11cc <__fp_szero>

00001208 <__mulsf3x>:
    1208:	0e 94 c3 08 	call	0x1186	; 0x1186 <__fp_split3>
    120c:	70 f3       	brcs	.-36     	; 0x11ea <__mulsf3+0x8>

0000120e <__mulsf3_pse>:
    120e:	95 9f       	mul	r25, r21
    1210:	c1 f3       	breq	.-16     	; 0x1202 <__mulsf3+0x20>
    1212:	95 0f       	add	r25, r21
    1214:	50 e0       	ldi	r21, 0x00	; 0
    1216:	55 1f       	adc	r21, r21
    1218:	62 9f       	mul	r22, r18
    121a:	f0 01       	movw	r30, r0
    121c:	72 9f       	mul	r23, r18
    121e:	bb 27       	eor	r27, r27
    1220:	f0 0d       	add	r31, r0
    1222:	b1 1d       	adc	r27, r1
    1224:	63 9f       	mul	r22, r19
    1226:	aa 27       	eor	r26, r26
    1228:	f0 0d       	add	r31, r0
    122a:	b1 1d       	adc	r27, r1
    122c:	aa 1f       	adc	r26, r26
    122e:	64 9f       	mul	r22, r20
    1230:	66 27       	eor	r22, r22
    1232:	b0 0d       	add	r27, r0
    1234:	a1 1d       	adc	r26, r1
    1236:	66 1f       	adc	r22, r22
    1238:	82 9f       	mul	r24, r18
    123a:	22 27       	eor	r18, r18
    123c:	b0 0d       	add	r27, r0
    123e:	a1 1d       	adc	r26, r1
    1240:	62 1f       	adc	r22, r18
    1242:	73 9f       	mul	r23, r19
    1244:	b0 0d       	add	r27, r0
    1246:	a1 1d       	adc	r26, r1
    1248:	62 1f       	adc	r22, r18
    124a:	83 9f       	mul	r24, r19
    124c:	a0 0d       	add	r26, r0
    124e:	61 1d       	adc	r22, r1
    1250:	22 1f       	adc	r18, r18
    1252:	74 9f       	mul	r23, r20
    1254:	33 27       	eor	r19, r19
    1256:	a0 0d       	add	r26, r0
    1258:	61 1d       	adc	r22, r1
    125a:	23 1f       	adc	r18, r19
    125c:	84 9f       	mul	r24, r20
    125e:	60 0d       	add	r22, r0
    1260:	21 1d       	adc	r18, r1
    1262:	82 2f       	mov	r24, r18
    1264:	76 2f       	mov	r23, r22
    1266:	6a 2f       	mov	r22, r26
    1268:	11 24       	eor	r1, r1
    126a:	9f 57       	subi	r25, 0x7F	; 127
    126c:	50 40       	sbci	r21, 0x00	; 0
    126e:	9a f0       	brmi	.+38     	; 0x1296 <__mulsf3_pse+0x88>
    1270:	f1 f0       	breq	.+60     	; 0x12ae <__mulsf3_pse+0xa0>
    1272:	88 23       	and	r24, r24
    1274:	4a f0       	brmi	.+18     	; 0x1288 <__mulsf3_pse+0x7a>
    1276:	ee 0f       	add	r30, r30
    1278:	ff 1f       	adc	r31, r31
    127a:	bb 1f       	adc	r27, r27
    127c:	66 1f       	adc	r22, r22
    127e:	77 1f       	adc	r23, r23
    1280:	88 1f       	adc	r24, r24
    1282:	91 50       	subi	r25, 0x01	; 1
    1284:	50 40       	sbci	r21, 0x00	; 0
    1286:	a9 f7       	brne	.-22     	; 0x1272 <__mulsf3_pse+0x64>
    1288:	9e 3f       	cpi	r25, 0xFE	; 254
    128a:	51 05       	cpc	r21, r1
    128c:	80 f0       	brcs	.+32     	; 0x12ae <__mulsf3_pse+0xa0>
    128e:	0c 94 9b 08 	jmp	0x1136	; 0x1136 <__fp_inf>
    1292:	0c 94 e6 08 	jmp	0x11cc	; 0x11cc <__fp_szero>
    1296:	5f 3f       	cpi	r21, 0xFF	; 255
    1298:	e4 f3       	brlt	.-8      	; 0x1292 <__mulsf3_pse+0x84>
    129a:	98 3e       	cpi	r25, 0xE8	; 232
    129c:	d4 f3       	brlt	.-12     	; 0x1292 <__mulsf3_pse+0x84>
    129e:	86 95       	lsr	r24
    12a0:	77 95       	ror	r23
    12a2:	67 95       	ror	r22
    12a4:	b7 95       	ror	r27
    12a6:	f7 95       	ror	r31
    12a8:	e7 95       	ror	r30
    12aa:	9f 5f       	subi	r25, 0xFF	; 255
    12ac:	c1 f7       	brne	.-16     	; 0x129e <__mulsf3_pse+0x90>
    12ae:	fe 2b       	or	r31, r30
    12b0:	88 0f       	add	r24, r24
    12b2:	91 1d       	adc	r25, r1
    12b4:	96 95       	lsr	r25
    12b6:	87 95       	ror	r24
    12b8:	97 f9       	bld	r25, 7
    12ba:	08 95       	ret

000012bc <vfprintf>:
    12bc:	a3 e1       	ldi	r26, 0x13	; 19
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	e4 e6       	ldi	r30, 0x64	; 100
    12c2:	f9 e0       	ldi	r31, 0x09	; 9
    12c4:	0c 94 fc 0c 	jmp	0x19f8	; 0x19f8 <__prologue_saves__>
    12c8:	6c 01       	movw	r12, r24
    12ca:	4b 01       	movw	r8, r22
    12cc:	2a 01       	movw	r4, r20
    12ce:	fc 01       	movw	r30, r24
    12d0:	17 82       	std	Z+7, r1	; 0x07
    12d2:	16 82       	std	Z+6, r1	; 0x06
    12d4:	83 81       	ldd	r24, Z+3	; 0x03
    12d6:	81 ff       	sbrs	r24, 1
    12d8:	43 c3       	rjmp	.+1670   	; 0x1960 <vfprintf+0x6a4>
    12da:	ae 01       	movw	r20, r28
    12dc:	4f 5f       	subi	r20, 0xFF	; 255
    12de:	5f 4f       	sbci	r21, 0xFF	; 255
    12e0:	3a 01       	movw	r6, r20
    12e2:	f6 01       	movw	r30, r12
    12e4:	93 81       	ldd	r25, Z+3	; 0x03
    12e6:	f4 01       	movw	r30, r8
    12e8:	93 fd       	sbrc	r25, 3
    12ea:	85 91       	lpm	r24, Z+
    12ec:	93 ff       	sbrs	r25, 3
    12ee:	81 91       	ld	r24, Z+
    12f0:	4f 01       	movw	r8, r30
    12f2:	88 23       	and	r24, r24
    12f4:	09 f4       	brne	.+2      	; 0x12f8 <vfprintf+0x3c>
    12f6:	30 c3       	rjmp	.+1632   	; 0x1958 <vfprintf+0x69c>
    12f8:	85 32       	cpi	r24, 0x25	; 37
    12fa:	39 f4       	brne	.+14     	; 0x130a <vfprintf+0x4e>
    12fc:	93 fd       	sbrc	r25, 3
    12fe:	85 91       	lpm	r24, Z+
    1300:	93 ff       	sbrs	r25, 3
    1302:	81 91       	ld	r24, Z+
    1304:	4f 01       	movw	r8, r30
    1306:	85 32       	cpi	r24, 0x25	; 37
    1308:	39 f4       	brne	.+14     	; 0x1318 <vfprintf+0x5c>
    130a:	b6 01       	movw	r22, r12
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <fputc>
    1312:	52 01       	movw	r10, r4
    1314:	25 01       	movw	r4, r10
    1316:	e5 cf       	rjmp	.-54     	; 0x12e2 <vfprintf+0x26>
    1318:	10 e0       	ldi	r17, 0x00	; 0
    131a:	f1 2c       	mov	r15, r1
    131c:	20 e0       	ldi	r18, 0x00	; 0
    131e:	20 32       	cpi	r18, 0x20	; 32
    1320:	a0 f4       	brcc	.+40     	; 0x134a <vfprintf+0x8e>
    1322:	8b 32       	cpi	r24, 0x2B	; 43
    1324:	69 f0       	breq	.+26     	; 0x1340 <vfprintf+0x84>
    1326:	30 f4       	brcc	.+12     	; 0x1334 <vfprintf+0x78>
    1328:	80 32       	cpi	r24, 0x20	; 32
    132a:	59 f0       	breq	.+22     	; 0x1342 <vfprintf+0x86>
    132c:	83 32       	cpi	r24, 0x23	; 35
    132e:	69 f4       	brne	.+26     	; 0x134a <vfprintf+0x8e>
    1330:	20 61       	ori	r18, 0x10	; 16
    1332:	2c c0       	rjmp	.+88     	; 0x138c <vfprintf+0xd0>
    1334:	8d 32       	cpi	r24, 0x2D	; 45
    1336:	39 f0       	breq	.+14     	; 0x1346 <vfprintf+0x8a>
    1338:	80 33       	cpi	r24, 0x30	; 48
    133a:	39 f4       	brne	.+14     	; 0x134a <vfprintf+0x8e>
    133c:	21 60       	ori	r18, 0x01	; 1
    133e:	26 c0       	rjmp	.+76     	; 0x138c <vfprintf+0xd0>
    1340:	22 60       	ori	r18, 0x02	; 2
    1342:	24 60       	ori	r18, 0x04	; 4
    1344:	23 c0       	rjmp	.+70     	; 0x138c <vfprintf+0xd0>
    1346:	28 60       	ori	r18, 0x08	; 8
    1348:	21 c0       	rjmp	.+66     	; 0x138c <vfprintf+0xd0>
    134a:	27 fd       	sbrc	r18, 7
    134c:	27 c0       	rjmp	.+78     	; 0x139c <vfprintf+0xe0>
    134e:	30 ed       	ldi	r19, 0xD0	; 208
    1350:	38 0f       	add	r19, r24
    1352:	3a 30       	cpi	r19, 0x0A	; 10
    1354:	78 f4       	brcc	.+30     	; 0x1374 <vfprintf+0xb8>
    1356:	26 ff       	sbrs	r18, 6
    1358:	06 c0       	rjmp	.+12     	; 0x1366 <vfprintf+0xaa>
    135a:	fa e0       	ldi	r31, 0x0A	; 10
    135c:	1f 9f       	mul	r17, r31
    135e:	30 0d       	add	r19, r0
    1360:	11 24       	eor	r1, r1
    1362:	13 2f       	mov	r17, r19
    1364:	13 c0       	rjmp	.+38     	; 0x138c <vfprintf+0xd0>
    1366:	4a e0       	ldi	r20, 0x0A	; 10
    1368:	f4 9e       	mul	r15, r20
    136a:	30 0d       	add	r19, r0
    136c:	11 24       	eor	r1, r1
    136e:	f3 2e       	mov	r15, r19
    1370:	20 62       	ori	r18, 0x20	; 32
    1372:	0c c0       	rjmp	.+24     	; 0x138c <vfprintf+0xd0>
    1374:	8e 32       	cpi	r24, 0x2E	; 46
    1376:	21 f4       	brne	.+8      	; 0x1380 <vfprintf+0xc4>
    1378:	26 fd       	sbrc	r18, 6
    137a:	ee c2       	rjmp	.+1500   	; 0x1958 <vfprintf+0x69c>
    137c:	20 64       	ori	r18, 0x40	; 64
    137e:	06 c0       	rjmp	.+12     	; 0x138c <vfprintf+0xd0>
    1380:	8c 36       	cpi	r24, 0x6C	; 108
    1382:	11 f4       	brne	.+4      	; 0x1388 <vfprintf+0xcc>
    1384:	20 68       	ori	r18, 0x80	; 128
    1386:	02 c0       	rjmp	.+4      	; 0x138c <vfprintf+0xd0>
    1388:	88 36       	cpi	r24, 0x68	; 104
    138a:	41 f4       	brne	.+16     	; 0x139c <vfprintf+0xe0>
    138c:	f4 01       	movw	r30, r8
    138e:	93 fd       	sbrc	r25, 3
    1390:	85 91       	lpm	r24, Z+
    1392:	93 ff       	sbrs	r25, 3
    1394:	81 91       	ld	r24, Z+
    1396:	4f 01       	movw	r8, r30
    1398:	81 11       	cpse	r24, r1
    139a:	c1 cf       	rjmp	.-126    	; 0x131e <vfprintf+0x62>
    139c:	9b eb       	ldi	r25, 0xBB	; 187
    139e:	98 0f       	add	r25, r24
    13a0:	93 30       	cpi	r25, 0x03	; 3
    13a2:	18 f4       	brcc	.+6      	; 0x13aa <vfprintf+0xee>
    13a4:	20 61       	ori	r18, 0x10	; 16
    13a6:	80 5e       	subi	r24, 0xE0	; 224
    13a8:	06 c0       	rjmp	.+12     	; 0x13b6 <vfprintf+0xfa>
    13aa:	9b e9       	ldi	r25, 0x9B	; 155
    13ac:	98 0f       	add	r25, r24
    13ae:	93 30       	cpi	r25, 0x03	; 3
    13b0:	08 f0       	brcs	.+2      	; 0x13b4 <vfprintf+0xf8>
    13b2:	71 c1       	rjmp	.+738    	; 0x1696 <vfprintf+0x3da>
    13b4:	2f 7e       	andi	r18, 0xEF	; 239
    13b6:	26 ff       	sbrs	r18, 6
    13b8:	16 e0       	ldi	r17, 0x06	; 6
    13ba:	2f 73       	andi	r18, 0x3F	; 63
    13bc:	32 2e       	mov	r3, r18
    13be:	85 36       	cpi	r24, 0x65	; 101
    13c0:	19 f4       	brne	.+6      	; 0x13c8 <vfprintf+0x10c>
    13c2:	20 64       	ori	r18, 0x40	; 64
    13c4:	32 2e       	mov	r3, r18
    13c6:	08 c0       	rjmp	.+16     	; 0x13d8 <vfprintf+0x11c>
    13c8:	86 36       	cpi	r24, 0x66	; 102
    13ca:	21 f4       	brne	.+8      	; 0x13d4 <vfprintf+0x118>
    13cc:	f2 2f       	mov	r31, r18
    13ce:	f0 68       	ori	r31, 0x80	; 128
    13d0:	3f 2e       	mov	r3, r31
    13d2:	02 c0       	rjmp	.+4      	; 0x13d8 <vfprintf+0x11c>
    13d4:	11 11       	cpse	r17, r1
    13d6:	11 50       	subi	r17, 0x01	; 1
    13d8:	37 fe       	sbrs	r3, 7
    13da:	07 c0       	rjmp	.+14     	; 0x13ea <vfprintf+0x12e>
    13dc:	1c 33       	cpi	r17, 0x3C	; 60
    13de:	50 f4       	brcc	.+20     	; 0x13f4 <vfprintf+0x138>
    13e0:	ee 24       	eor	r14, r14
    13e2:	e3 94       	inc	r14
    13e4:	e1 0e       	add	r14, r17
    13e6:	27 e0       	ldi	r18, 0x07	; 7
    13e8:	0b c0       	rjmp	.+22     	; 0x1400 <vfprintf+0x144>
    13ea:	18 30       	cpi	r17, 0x08	; 8
    13ec:	38 f0       	brcs	.+14     	; 0x13fc <vfprintf+0x140>
    13ee:	27 e0       	ldi	r18, 0x07	; 7
    13f0:	17 e0       	ldi	r17, 0x07	; 7
    13f2:	05 c0       	rjmp	.+10     	; 0x13fe <vfprintf+0x142>
    13f4:	27 e0       	ldi	r18, 0x07	; 7
    13f6:	4c e3       	ldi	r20, 0x3C	; 60
    13f8:	e4 2e       	mov	r14, r20
    13fa:	02 c0       	rjmp	.+4      	; 0x1400 <vfprintf+0x144>
    13fc:	21 2f       	mov	r18, r17
    13fe:	e1 2c       	mov	r14, r1
    1400:	52 01       	movw	r10, r4
    1402:	44 e0       	ldi	r20, 0x04	; 4
    1404:	a4 0e       	add	r10, r20
    1406:	b1 1c       	adc	r11, r1
    1408:	f2 01       	movw	r30, r4
    140a:	60 81       	ld	r22, Z
    140c:	71 81       	ldd	r23, Z+1	; 0x01
    140e:	82 81       	ldd	r24, Z+2	; 0x02
    1410:	93 81       	ldd	r25, Z+3	; 0x03
    1412:	0e 2d       	mov	r16, r14
    1414:	a3 01       	movw	r20, r6
    1416:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <__ftoa_engine>
    141a:	2c 01       	movw	r4, r24
    141c:	09 81       	ldd	r16, Y+1	; 0x01
    141e:	00 ff       	sbrs	r16, 0
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <vfprintf+0x16a>
    1422:	03 ff       	sbrs	r16, 3
    1424:	07 c0       	rjmp	.+14     	; 0x1434 <vfprintf+0x178>
    1426:	31 fc       	sbrc	r3, 1
    1428:	08 c0       	rjmp	.+16     	; 0x143a <vfprintf+0x17e>
    142a:	32 fe       	sbrs	r3, 2
    142c:	09 c0       	rjmp	.+18     	; 0x1440 <vfprintf+0x184>
    142e:	30 e2       	ldi	r19, 0x20	; 32
    1430:	23 2e       	mov	r2, r19
    1432:	07 c0       	rjmp	.+14     	; 0x1442 <vfprintf+0x186>
    1434:	2d e2       	ldi	r18, 0x2D	; 45
    1436:	22 2e       	mov	r2, r18
    1438:	04 c0       	rjmp	.+8      	; 0x1442 <vfprintf+0x186>
    143a:	9b e2       	ldi	r25, 0x2B	; 43
    143c:	29 2e       	mov	r2, r25
    143e:	01 c0       	rjmp	.+2      	; 0x1442 <vfprintf+0x186>
    1440:	21 2c       	mov	r2, r1
    1442:	80 2f       	mov	r24, r16
    1444:	8c 70       	andi	r24, 0x0C	; 12
    1446:	19 f0       	breq	.+6      	; 0x144e <vfprintf+0x192>
    1448:	21 10       	cpse	r2, r1
    144a:	68 c2       	rjmp	.+1232   	; 0x191c <vfprintf+0x660>
    144c:	a8 c2       	rjmp	.+1360   	; 0x199e <vfprintf+0x6e2>
    144e:	37 fe       	sbrs	r3, 7
    1450:	0f c0       	rjmp	.+30     	; 0x1470 <vfprintf+0x1b4>
    1452:	e4 0c       	add	r14, r4
    1454:	04 ff       	sbrs	r16, 4
    1456:	04 c0       	rjmp	.+8      	; 0x1460 <vfprintf+0x1a4>
    1458:	8a 81       	ldd	r24, Y+2	; 0x02
    145a:	81 33       	cpi	r24, 0x31	; 49
    145c:	09 f4       	brne	.+2      	; 0x1460 <vfprintf+0x1a4>
    145e:	ea 94       	dec	r14
    1460:	1e 14       	cp	r1, r14
    1462:	74 f5       	brge	.+92     	; 0x14c0 <vfprintf+0x204>
    1464:	f8 e0       	ldi	r31, 0x08	; 8
    1466:	fe 15       	cp	r31, r14
    1468:	78 f5       	brcc	.+94     	; 0x14c8 <vfprintf+0x20c>
    146a:	88 e0       	ldi	r24, 0x08	; 8
    146c:	e8 2e       	mov	r14, r24
    146e:	2c c0       	rjmp	.+88     	; 0x14c8 <vfprintf+0x20c>
    1470:	36 fc       	sbrc	r3, 6
    1472:	2a c0       	rjmp	.+84     	; 0x14c8 <vfprintf+0x20c>
    1474:	81 2f       	mov	r24, r17
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	84 15       	cp	r24, r4
    147a:	95 05       	cpc	r25, r5
    147c:	9c f0       	brlt	.+38     	; 0x14a4 <vfprintf+0x1e8>
    147e:	2c ef       	ldi	r18, 0xFC	; 252
    1480:	42 16       	cp	r4, r18
    1482:	2f ef       	ldi	r18, 0xFF	; 255
    1484:	52 06       	cpc	r5, r18
    1486:	74 f0       	brlt	.+28     	; 0x14a4 <vfprintf+0x1e8>
    1488:	43 2d       	mov	r20, r3
    148a:	40 68       	ori	r20, 0x80	; 128
    148c:	34 2e       	mov	r3, r20
    148e:	0a c0       	rjmp	.+20     	; 0x14a4 <vfprintf+0x1e8>
    1490:	e2 e0       	ldi	r30, 0x02	; 2
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	ec 0f       	add	r30, r28
    1496:	fd 1f       	adc	r31, r29
    1498:	e1 0f       	add	r30, r17
    149a:	f1 1d       	adc	r31, r1
    149c:	80 81       	ld	r24, Z
    149e:	80 33       	cpi	r24, 0x30	; 48
    14a0:	19 f4       	brne	.+6      	; 0x14a8 <vfprintf+0x1ec>
    14a2:	11 50       	subi	r17, 0x01	; 1
    14a4:	11 11       	cpse	r17, r1
    14a6:	f4 cf       	rjmp	.-24     	; 0x1490 <vfprintf+0x1d4>
    14a8:	37 fe       	sbrs	r3, 7
    14aa:	0e c0       	rjmp	.+28     	; 0x14c8 <vfprintf+0x20c>
    14ac:	ee 24       	eor	r14, r14
    14ae:	e3 94       	inc	r14
    14b0:	e1 0e       	add	r14, r17
    14b2:	81 2f       	mov	r24, r17
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	48 16       	cp	r4, r24
    14b8:	59 06       	cpc	r5, r25
    14ba:	2c f4       	brge	.+10     	; 0x14c6 <vfprintf+0x20a>
    14bc:	14 19       	sub	r17, r4
    14be:	04 c0       	rjmp	.+8      	; 0x14c8 <vfprintf+0x20c>
    14c0:	ee 24       	eor	r14, r14
    14c2:	e3 94       	inc	r14
    14c4:	01 c0       	rjmp	.+2      	; 0x14c8 <vfprintf+0x20c>
    14c6:	10 e0       	ldi	r17, 0x00	; 0
    14c8:	37 fe       	sbrs	r3, 7
    14ca:	06 c0       	rjmp	.+12     	; 0x14d8 <vfprintf+0x21c>
    14cc:	14 14       	cp	r1, r4
    14ce:	15 04       	cpc	r1, r5
    14d0:	34 f4       	brge	.+12     	; 0x14de <vfprintf+0x222>
    14d2:	c2 01       	movw	r24, r4
    14d4:	01 96       	adiw	r24, 0x01	; 1
    14d6:	05 c0       	rjmp	.+10     	; 0x14e2 <vfprintf+0x226>
    14d8:	85 e0       	ldi	r24, 0x05	; 5
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	02 c0       	rjmp	.+4      	; 0x14e2 <vfprintf+0x226>
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	21 10       	cpse	r2, r1
    14e4:	01 96       	adiw	r24, 0x01	; 1
    14e6:	11 23       	and	r17, r17
    14e8:	31 f0       	breq	.+12     	; 0x14f6 <vfprintf+0x23a>
    14ea:	21 2f       	mov	r18, r17
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	2f 5f       	subi	r18, 0xFF	; 255
    14f0:	3f 4f       	sbci	r19, 0xFF	; 255
    14f2:	82 0f       	add	r24, r18
    14f4:	93 1f       	adc	r25, r19
    14f6:	2f 2d       	mov	r18, r15
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	82 17       	cp	r24, r18
    14fc:	93 07       	cpc	r25, r19
    14fe:	14 f4       	brge	.+4      	; 0x1504 <vfprintf+0x248>
    1500:	f8 1a       	sub	r15, r24
    1502:	01 c0       	rjmp	.+2      	; 0x1506 <vfprintf+0x24a>
    1504:	f1 2c       	mov	r15, r1
    1506:	83 2d       	mov	r24, r3
    1508:	89 70       	andi	r24, 0x09	; 9
    150a:	49 f4       	brne	.+18     	; 0x151e <vfprintf+0x262>
    150c:	ff 20       	and	r15, r15
    150e:	39 f0       	breq	.+14     	; 0x151e <vfprintf+0x262>
    1510:	b6 01       	movw	r22, r12
    1512:	80 e2       	ldi	r24, 0x20	; 32
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <fputc>
    151a:	fa 94       	dec	r15
    151c:	f7 cf       	rjmp	.-18     	; 0x150c <vfprintf+0x250>
    151e:	22 20       	and	r2, r2
    1520:	29 f0       	breq	.+10     	; 0x152c <vfprintf+0x270>
    1522:	b6 01       	movw	r22, r12
    1524:	82 2d       	mov	r24, r2
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <fputc>
    152c:	33 fc       	sbrc	r3, 3
    152e:	09 c0       	rjmp	.+18     	; 0x1542 <vfprintf+0x286>
    1530:	ff 20       	and	r15, r15
    1532:	39 f0       	breq	.+14     	; 0x1542 <vfprintf+0x286>
    1534:	b6 01       	movw	r22, r12
    1536:	80 e3       	ldi	r24, 0x30	; 48
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <fputc>
    153e:	fa 94       	dec	r15
    1540:	f7 cf       	rjmp	.-18     	; 0x1530 <vfprintf+0x274>
    1542:	37 fe       	sbrs	r3, 7
    1544:	5a c0       	rjmp	.+180    	; 0x15fa <vfprintf+0x33e>
    1546:	94 2d       	mov	r25, r4
    1548:	85 2d       	mov	r24, r5
    154a:	57 fe       	sbrs	r5, 7
    154c:	02 c0       	rjmp	.+4      	; 0x1552 <vfprintf+0x296>
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	80 e0       	ldi	r24, 0x00	; 0
    1552:	29 2e       	mov	r2, r25
    1554:	38 2e       	mov	r3, r24
    1556:	20 e0       	ldi	r18, 0x00	; 0
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	a2 01       	movw	r20, r4
    155c:	4e 19       	sub	r20, r14
    155e:	51 09       	sbc	r21, r1
    1560:	5d 87       	std	Y+13, r21	; 0x0d
    1562:	4c 87       	std	Y+12, r20	; 0x0c
    1564:	a2 01       	movw	r20, r4
    1566:	42 19       	sub	r20, r2
    1568:	53 09       	sbc	r21, r3
    156a:	5f 87       	std	Y+15, r21	; 0x0f
    156c:	4e 87       	std	Y+14, r20	; 0x0e
    156e:	61 2f       	mov	r22, r17
    1570:	70 e0       	ldi	r23, 0x00	; 0
    1572:	44 27       	eor	r20, r20
    1574:	55 27       	eor	r21, r21
    1576:	46 1b       	sub	r20, r22
    1578:	57 0b       	sbc	r21, r23
    157a:	59 8b       	std	Y+17, r21	; 0x11
    157c:	48 8b       	std	Y+16, r20	; 0x10
    157e:	5f ef       	ldi	r21, 0xFF	; 255
    1580:	25 16       	cp	r2, r21
    1582:	35 06       	cpc	r3, r21
    1584:	49 f4       	brne	.+18     	; 0x1598 <vfprintf+0x2dc>
    1586:	b6 01       	movw	r22, r12
    1588:	8e e2       	ldi	r24, 0x2E	; 46
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	2a 8b       	std	Y+18, r18	; 0x12
    158e:	3b 8b       	std	Y+19, r19	; 0x13
    1590:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <fputc>
    1594:	3b 89       	ldd	r19, Y+19	; 0x13
    1596:	2a 89       	ldd	r18, Y+18	; 0x12
    1598:	42 14       	cp	r4, r2
    159a:	53 04       	cpc	r5, r3
    159c:	6c f0       	brlt	.+26     	; 0x15b8 <vfprintf+0x2fc>
    159e:	4c 85       	ldd	r20, Y+12	; 0x0c
    15a0:	5d 85       	ldd	r21, Y+13	; 0x0d
    15a2:	42 15       	cp	r20, r2
    15a4:	53 05       	cpc	r21, r3
    15a6:	44 f4       	brge	.+16     	; 0x15b8 <vfprintf+0x2fc>
    15a8:	ee 85       	ldd	r30, Y+14	; 0x0e
    15aa:	ff 85       	ldd	r31, Y+15	; 0x0f
    15ac:	e2 0f       	add	r30, r18
    15ae:	f3 1f       	adc	r31, r19
    15b0:	e6 0d       	add	r30, r6
    15b2:	f7 1d       	adc	r31, r7
    15b4:	81 81       	ldd	r24, Z+1	; 0x01
    15b6:	01 c0       	rjmp	.+2      	; 0x15ba <vfprintf+0x2fe>
    15b8:	80 e3       	ldi	r24, 0x30	; 48
    15ba:	51 e0       	ldi	r21, 0x01	; 1
    15bc:	25 1a       	sub	r2, r21
    15be:	31 08       	sbc	r3, r1
    15c0:	2f 5f       	subi	r18, 0xFF	; 255
    15c2:	3f 4f       	sbci	r19, 0xFF	; 255
    15c4:	48 89       	ldd	r20, Y+16	; 0x10
    15c6:	59 89       	ldd	r21, Y+17	; 0x11
    15c8:	24 16       	cp	r2, r20
    15ca:	35 06       	cpc	r3, r21
    15cc:	4c f0       	brlt	.+18     	; 0x15e0 <vfprintf+0x324>
    15ce:	b6 01       	movw	r22, r12
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	2a 8b       	std	Y+18, r18	; 0x12
    15d4:	3b 8b       	std	Y+19, r19	; 0x13
    15d6:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <fputc>
    15da:	2a 89       	ldd	r18, Y+18	; 0x12
    15dc:	3b 89       	ldd	r19, Y+19	; 0x13
    15de:	cf cf       	rjmp	.-98     	; 0x157e <vfprintf+0x2c2>
    15e0:	24 14       	cp	r2, r4
    15e2:	35 04       	cpc	r3, r5
    15e4:	39 f4       	brne	.+14     	; 0x15f4 <vfprintf+0x338>
    15e6:	9a 81       	ldd	r25, Y+2	; 0x02
    15e8:	96 33       	cpi	r25, 0x36	; 54
    15ea:	18 f4       	brcc	.+6      	; 0x15f2 <vfprintf+0x336>
    15ec:	95 33       	cpi	r25, 0x35	; 53
    15ee:	11 f4       	brne	.+4      	; 0x15f4 <vfprintf+0x338>
    15f0:	04 ff       	sbrs	r16, 4
    15f2:	81 e3       	ldi	r24, 0x31	; 49
    15f4:	b6 01       	movw	r22, r12
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	4b c0       	rjmp	.+150    	; 0x1690 <vfprintf+0x3d4>
    15fa:	8a 81       	ldd	r24, Y+2	; 0x02
    15fc:	81 33       	cpi	r24, 0x31	; 49
    15fe:	09 f0       	breq	.+2      	; 0x1602 <vfprintf+0x346>
    1600:	0f 7e       	andi	r16, 0xEF	; 239
    1602:	b6 01       	movw	r22, r12
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <fputc>
    160a:	11 11       	cpse	r17, r1
    160c:	05 c0       	rjmp	.+10     	; 0x1618 <vfprintf+0x35c>
    160e:	34 fc       	sbrc	r3, 4
    1610:	18 c0       	rjmp	.+48     	; 0x1642 <vfprintf+0x386>
    1612:	85 e6       	ldi	r24, 0x65	; 101
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	17 c0       	rjmp	.+46     	; 0x1646 <vfprintf+0x38a>
    1618:	b6 01       	movw	r22, r12
    161a:	8e e2       	ldi	r24, 0x2E	; 46
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <fputc>
    1622:	82 e0       	ldi	r24, 0x02	; 2
    1624:	ee 24       	eor	r14, r14
    1626:	e3 94       	inc	r14
    1628:	e8 0e       	add	r14, r24
    162a:	f3 01       	movw	r30, r6
    162c:	e8 0f       	add	r30, r24
    162e:	f1 1d       	adc	r31, r1
    1630:	80 81       	ld	r24, Z
    1632:	b6 01       	movw	r22, r12
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <fputc>
    163a:	11 50       	subi	r17, 0x01	; 1
    163c:	8e 2d       	mov	r24, r14
    163e:	91 f7       	brne	.-28     	; 0x1624 <vfprintf+0x368>
    1640:	e6 cf       	rjmp	.-52     	; 0x160e <vfprintf+0x352>
    1642:	85 e4       	ldi	r24, 0x45	; 69
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	b6 01       	movw	r22, r12
    1648:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <fputc>
    164c:	57 fc       	sbrc	r5, 7
    164e:	05 c0       	rjmp	.+10     	; 0x165a <vfprintf+0x39e>
    1650:	41 14       	cp	r4, r1
    1652:	51 04       	cpc	r5, r1
    1654:	39 f4       	brne	.+14     	; 0x1664 <vfprintf+0x3a8>
    1656:	04 ff       	sbrs	r16, 4
    1658:	05 c0       	rjmp	.+10     	; 0x1664 <vfprintf+0x3a8>
    165a:	51 94       	neg	r5
    165c:	41 94       	neg	r4
    165e:	51 08       	sbc	r5, r1
    1660:	8d e2       	ldi	r24, 0x2D	; 45
    1662:	01 c0       	rjmp	.+2      	; 0x1666 <vfprintf+0x3aa>
    1664:	8b e2       	ldi	r24, 0x2B	; 43
    1666:	b6 01       	movw	r22, r12
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <fputc>
    166e:	80 e3       	ldi	r24, 0x30	; 48
    1670:	9a e0       	ldi	r25, 0x0A	; 10
    1672:	49 16       	cp	r4, r25
    1674:	51 04       	cpc	r5, r1
    1676:	2c f0       	brlt	.+10     	; 0x1682 <vfprintf+0x3c6>
    1678:	8f 5f       	subi	r24, 0xFF	; 255
    167a:	5a e0       	ldi	r21, 0x0A	; 10
    167c:	45 1a       	sub	r4, r21
    167e:	51 08       	sbc	r5, r1
    1680:	f7 cf       	rjmp	.-18     	; 0x1670 <vfprintf+0x3b4>
    1682:	b6 01       	movw	r22, r12
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <fputc>
    168a:	b6 01       	movw	r22, r12
    168c:	c2 01       	movw	r24, r4
    168e:	c0 96       	adiw	r24, 0x30	; 48
    1690:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <fputc>
    1694:	57 c1       	rjmp	.+686    	; 0x1944 <vfprintf+0x688>
    1696:	83 36       	cpi	r24, 0x63	; 99
    1698:	31 f0       	breq	.+12     	; 0x16a6 <vfprintf+0x3ea>
    169a:	83 37       	cpi	r24, 0x73	; 115
    169c:	79 f0       	breq	.+30     	; 0x16bc <vfprintf+0x400>
    169e:	83 35       	cpi	r24, 0x53	; 83
    16a0:	09 f0       	breq	.+2      	; 0x16a4 <vfprintf+0x3e8>
    16a2:	58 c0       	rjmp	.+176    	; 0x1754 <vfprintf+0x498>
    16a4:	21 c0       	rjmp	.+66     	; 0x16e8 <vfprintf+0x42c>
    16a6:	52 01       	movw	r10, r4
    16a8:	e2 e0       	ldi	r30, 0x02	; 2
    16aa:	ae 0e       	add	r10, r30
    16ac:	b1 1c       	adc	r11, r1
    16ae:	f2 01       	movw	r30, r4
    16b0:	80 81       	ld	r24, Z
    16b2:	89 83       	std	Y+1, r24	; 0x01
    16b4:	01 e0       	ldi	r16, 0x01	; 1
    16b6:	10 e0       	ldi	r17, 0x00	; 0
    16b8:	23 01       	movw	r4, r6
    16ba:	14 c0       	rjmp	.+40     	; 0x16e4 <vfprintf+0x428>
    16bc:	52 01       	movw	r10, r4
    16be:	f2 e0       	ldi	r31, 0x02	; 2
    16c0:	af 0e       	add	r10, r31
    16c2:	b1 1c       	adc	r11, r1
    16c4:	f2 01       	movw	r30, r4
    16c6:	40 80       	ld	r4, Z
    16c8:	51 80       	ldd	r5, Z+1	; 0x01
    16ca:	26 ff       	sbrs	r18, 6
    16cc:	03 c0       	rjmp	.+6      	; 0x16d4 <vfprintf+0x418>
    16ce:	61 2f       	mov	r22, r17
    16d0:	70 e0       	ldi	r23, 0x00	; 0
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <vfprintf+0x41c>
    16d4:	6f ef       	ldi	r22, 0xFF	; 255
    16d6:	7f ef       	ldi	r23, 0xFF	; 255
    16d8:	c2 01       	movw	r24, r4
    16da:	2a 8b       	std	Y+18, r18	; 0x12
    16dc:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <strnlen>
    16e0:	8c 01       	movw	r16, r24
    16e2:	2a 89       	ldd	r18, Y+18	; 0x12
    16e4:	2f 77       	andi	r18, 0x7F	; 127
    16e6:	15 c0       	rjmp	.+42     	; 0x1712 <vfprintf+0x456>
    16e8:	52 01       	movw	r10, r4
    16ea:	f2 e0       	ldi	r31, 0x02	; 2
    16ec:	af 0e       	add	r10, r31
    16ee:	b1 1c       	adc	r11, r1
    16f0:	f2 01       	movw	r30, r4
    16f2:	40 80       	ld	r4, Z
    16f4:	51 80       	ldd	r5, Z+1	; 0x01
    16f6:	26 ff       	sbrs	r18, 6
    16f8:	03 c0       	rjmp	.+6      	; 0x1700 <vfprintf+0x444>
    16fa:	61 2f       	mov	r22, r17
    16fc:	70 e0       	ldi	r23, 0x00	; 0
    16fe:	02 c0       	rjmp	.+4      	; 0x1704 <vfprintf+0x448>
    1700:	6f ef       	ldi	r22, 0xFF	; 255
    1702:	7f ef       	ldi	r23, 0xFF	; 255
    1704:	c2 01       	movw	r24, r4
    1706:	2a 8b       	std	Y+18, r18	; 0x12
    1708:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <strnlen_P>
    170c:	8c 01       	movw	r16, r24
    170e:	2a 89       	ldd	r18, Y+18	; 0x12
    1710:	20 68       	ori	r18, 0x80	; 128
    1712:	32 2e       	mov	r3, r18
    1714:	23 fd       	sbrc	r18, 3
    1716:	1a c0       	rjmp	.+52     	; 0x174c <vfprintf+0x490>
    1718:	8f 2d       	mov	r24, r15
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	08 17       	cp	r16, r24
    171e:	19 07       	cpc	r17, r25
    1720:	a8 f4       	brcc	.+42     	; 0x174c <vfprintf+0x490>
    1722:	b6 01       	movw	r22, r12
    1724:	80 e2       	ldi	r24, 0x20	; 32
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <fputc>
    172c:	fa 94       	dec	r15
    172e:	f4 cf       	rjmp	.-24     	; 0x1718 <vfprintf+0x45c>
    1730:	f2 01       	movw	r30, r4
    1732:	37 fc       	sbrc	r3, 7
    1734:	85 91       	lpm	r24, Z+
    1736:	37 fe       	sbrs	r3, 7
    1738:	81 91       	ld	r24, Z+
    173a:	2f 01       	movw	r4, r30
    173c:	b6 01       	movw	r22, r12
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <fputc>
    1744:	f1 10       	cpse	r15, r1
    1746:	fa 94       	dec	r15
    1748:	01 50       	subi	r16, 0x01	; 1
    174a:	11 09       	sbc	r17, r1
    174c:	01 15       	cp	r16, r1
    174e:	11 05       	cpc	r17, r1
    1750:	79 f7       	brne	.-34     	; 0x1730 <vfprintf+0x474>
    1752:	f8 c0       	rjmp	.+496    	; 0x1944 <vfprintf+0x688>
    1754:	84 36       	cpi	r24, 0x64	; 100
    1756:	11 f0       	breq	.+4      	; 0x175c <vfprintf+0x4a0>
    1758:	89 36       	cpi	r24, 0x69	; 105
    175a:	59 f5       	brne	.+86     	; 0x17b2 <vfprintf+0x4f6>
    175c:	52 01       	movw	r10, r4
    175e:	27 ff       	sbrs	r18, 7
    1760:	09 c0       	rjmp	.+18     	; 0x1774 <vfprintf+0x4b8>
    1762:	f4 e0       	ldi	r31, 0x04	; 4
    1764:	af 0e       	add	r10, r31
    1766:	b1 1c       	adc	r11, r1
    1768:	f2 01       	movw	r30, r4
    176a:	60 81       	ld	r22, Z
    176c:	71 81       	ldd	r23, Z+1	; 0x01
    176e:	82 81       	ldd	r24, Z+2	; 0x02
    1770:	93 81       	ldd	r25, Z+3	; 0x03
    1772:	0a c0       	rjmp	.+20     	; 0x1788 <vfprintf+0x4cc>
    1774:	f2 e0       	ldi	r31, 0x02	; 2
    1776:	af 0e       	add	r10, r31
    1778:	b1 1c       	adc	r11, r1
    177a:	f2 01       	movw	r30, r4
    177c:	60 81       	ld	r22, Z
    177e:	71 81       	ldd	r23, Z+1	; 0x01
    1780:	07 2e       	mov	r0, r23
    1782:	00 0c       	add	r0, r0
    1784:	88 0b       	sbc	r24, r24
    1786:	99 0b       	sbc	r25, r25
    1788:	2f 76       	andi	r18, 0x6F	; 111
    178a:	32 2e       	mov	r3, r18
    178c:	97 ff       	sbrs	r25, 7
    178e:	09 c0       	rjmp	.+18     	; 0x17a2 <vfprintf+0x4e6>
    1790:	90 95       	com	r25
    1792:	80 95       	com	r24
    1794:	70 95       	com	r23
    1796:	61 95       	neg	r22
    1798:	7f 4f       	sbci	r23, 0xFF	; 255
    179a:	8f 4f       	sbci	r24, 0xFF	; 255
    179c:	9f 4f       	sbci	r25, 0xFF	; 255
    179e:	20 68       	ori	r18, 0x80	; 128
    17a0:	32 2e       	mov	r3, r18
    17a2:	2a e0       	ldi	r18, 0x0A	; 10
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	a3 01       	movw	r20, r6
    17a8:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <__ultoa_invert>
    17ac:	e8 2e       	mov	r14, r24
    17ae:	e6 18       	sub	r14, r6
    17b0:	3f c0       	rjmp	.+126    	; 0x1830 <vfprintf+0x574>
    17b2:	02 2f       	mov	r16, r18
    17b4:	85 37       	cpi	r24, 0x75	; 117
    17b6:	21 f4       	brne	.+8      	; 0x17c0 <vfprintf+0x504>
    17b8:	0f 7e       	andi	r16, 0xEF	; 239
    17ba:	2a e0       	ldi	r18, 0x0A	; 10
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	1d c0       	rjmp	.+58     	; 0x17fa <vfprintf+0x53e>
    17c0:	09 7f       	andi	r16, 0xF9	; 249
    17c2:	8f 36       	cpi	r24, 0x6F	; 111
    17c4:	91 f0       	breq	.+36     	; 0x17ea <vfprintf+0x52e>
    17c6:	18 f4       	brcc	.+6      	; 0x17ce <vfprintf+0x512>
    17c8:	88 35       	cpi	r24, 0x58	; 88
    17ca:	59 f0       	breq	.+22     	; 0x17e2 <vfprintf+0x526>
    17cc:	c5 c0       	rjmp	.+394    	; 0x1958 <vfprintf+0x69c>
    17ce:	80 37       	cpi	r24, 0x70	; 112
    17d0:	19 f0       	breq	.+6      	; 0x17d8 <vfprintf+0x51c>
    17d2:	88 37       	cpi	r24, 0x78	; 120
    17d4:	11 f0       	breq	.+4      	; 0x17da <vfprintf+0x51e>
    17d6:	c0 c0       	rjmp	.+384    	; 0x1958 <vfprintf+0x69c>
    17d8:	00 61       	ori	r16, 0x10	; 16
    17da:	04 ff       	sbrs	r16, 4
    17dc:	09 c0       	rjmp	.+18     	; 0x17f0 <vfprintf+0x534>
    17de:	04 60       	ori	r16, 0x04	; 4
    17e0:	07 c0       	rjmp	.+14     	; 0x17f0 <vfprintf+0x534>
    17e2:	24 ff       	sbrs	r18, 4
    17e4:	08 c0       	rjmp	.+16     	; 0x17f6 <vfprintf+0x53a>
    17e6:	06 60       	ori	r16, 0x06	; 6
    17e8:	06 c0       	rjmp	.+12     	; 0x17f6 <vfprintf+0x53a>
    17ea:	28 e0       	ldi	r18, 0x08	; 8
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	05 c0       	rjmp	.+10     	; 0x17fa <vfprintf+0x53e>
    17f0:	20 e1       	ldi	r18, 0x10	; 16
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	02 c0       	rjmp	.+4      	; 0x17fa <vfprintf+0x53e>
    17f6:	20 e1       	ldi	r18, 0x10	; 16
    17f8:	32 e0       	ldi	r19, 0x02	; 2
    17fa:	52 01       	movw	r10, r4
    17fc:	07 ff       	sbrs	r16, 7
    17fe:	09 c0       	rjmp	.+18     	; 0x1812 <vfprintf+0x556>
    1800:	f4 e0       	ldi	r31, 0x04	; 4
    1802:	af 0e       	add	r10, r31
    1804:	b1 1c       	adc	r11, r1
    1806:	f2 01       	movw	r30, r4
    1808:	60 81       	ld	r22, Z
    180a:	71 81       	ldd	r23, Z+1	; 0x01
    180c:	82 81       	ldd	r24, Z+2	; 0x02
    180e:	93 81       	ldd	r25, Z+3	; 0x03
    1810:	08 c0       	rjmp	.+16     	; 0x1822 <vfprintf+0x566>
    1812:	f2 e0       	ldi	r31, 0x02	; 2
    1814:	af 0e       	add	r10, r31
    1816:	b1 1c       	adc	r11, r1
    1818:	f2 01       	movw	r30, r4
    181a:	60 81       	ld	r22, Z
    181c:	71 81       	ldd	r23, Z+1	; 0x01
    181e:	80 e0       	ldi	r24, 0x00	; 0
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	a3 01       	movw	r20, r6
    1824:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <__ultoa_invert>
    1828:	e8 2e       	mov	r14, r24
    182a:	e6 18       	sub	r14, r6
    182c:	0f 77       	andi	r16, 0x7F	; 127
    182e:	30 2e       	mov	r3, r16
    1830:	36 fe       	sbrs	r3, 6
    1832:	0b c0       	rjmp	.+22     	; 0x184a <vfprintf+0x58e>
    1834:	33 2d       	mov	r19, r3
    1836:	3e 7f       	andi	r19, 0xFE	; 254
    1838:	e1 16       	cp	r14, r17
    183a:	50 f4       	brcc	.+20     	; 0x1850 <vfprintf+0x594>
    183c:	34 fe       	sbrs	r3, 4
    183e:	0a c0       	rjmp	.+20     	; 0x1854 <vfprintf+0x598>
    1840:	32 fc       	sbrc	r3, 2
    1842:	08 c0       	rjmp	.+16     	; 0x1854 <vfprintf+0x598>
    1844:	33 2d       	mov	r19, r3
    1846:	3e 7e       	andi	r19, 0xEE	; 238
    1848:	05 c0       	rjmp	.+10     	; 0x1854 <vfprintf+0x598>
    184a:	0e 2d       	mov	r16, r14
    184c:	33 2d       	mov	r19, r3
    184e:	03 c0       	rjmp	.+6      	; 0x1856 <vfprintf+0x59a>
    1850:	0e 2d       	mov	r16, r14
    1852:	01 c0       	rjmp	.+2      	; 0x1856 <vfprintf+0x59a>
    1854:	01 2f       	mov	r16, r17
    1856:	34 ff       	sbrs	r19, 4
    1858:	0c c0       	rjmp	.+24     	; 0x1872 <vfprintf+0x5b6>
    185a:	fe 01       	movw	r30, r28
    185c:	ee 0d       	add	r30, r14
    185e:	f1 1d       	adc	r31, r1
    1860:	80 81       	ld	r24, Z
    1862:	80 33       	cpi	r24, 0x30	; 48
    1864:	11 f4       	brne	.+4      	; 0x186a <vfprintf+0x5ae>
    1866:	39 7e       	andi	r19, 0xE9	; 233
    1868:	08 c0       	rjmp	.+16     	; 0x187a <vfprintf+0x5be>
    186a:	32 ff       	sbrs	r19, 2
    186c:	05 c0       	rjmp	.+10     	; 0x1878 <vfprintf+0x5bc>
    186e:	0e 5f       	subi	r16, 0xFE	; 254
    1870:	04 c0       	rjmp	.+8      	; 0x187a <vfprintf+0x5be>
    1872:	83 2f       	mov	r24, r19
    1874:	86 78       	andi	r24, 0x86	; 134
    1876:	09 f0       	breq	.+2      	; 0x187a <vfprintf+0x5be>
    1878:	0f 5f       	subi	r16, 0xFF	; 255
    187a:	33 fd       	sbrc	r19, 3
    187c:	13 c0       	rjmp	.+38     	; 0x18a4 <vfprintf+0x5e8>
    187e:	30 ff       	sbrs	r19, 0
    1880:	06 c0       	rjmp	.+12     	; 0x188e <vfprintf+0x5d2>
    1882:	1e 2d       	mov	r17, r14
    1884:	0f 15       	cp	r16, r15
    1886:	18 f4       	brcc	.+6      	; 0x188e <vfprintf+0x5d2>
    1888:	1f 0d       	add	r17, r15
    188a:	10 1b       	sub	r17, r16
    188c:	0f 2d       	mov	r16, r15
    188e:	0f 15       	cp	r16, r15
    1890:	68 f4       	brcc	.+26     	; 0x18ac <vfprintf+0x5f0>
    1892:	b6 01       	movw	r22, r12
    1894:	80 e2       	ldi	r24, 0x20	; 32
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	3b 8b       	std	Y+19, r19	; 0x13
    189a:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <fputc>
    189e:	0f 5f       	subi	r16, 0xFF	; 255
    18a0:	3b 89       	ldd	r19, Y+19	; 0x13
    18a2:	f5 cf       	rjmp	.-22     	; 0x188e <vfprintf+0x5d2>
    18a4:	0f 15       	cp	r16, r15
    18a6:	10 f4       	brcc	.+4      	; 0x18ac <vfprintf+0x5f0>
    18a8:	f0 1a       	sub	r15, r16
    18aa:	01 c0       	rjmp	.+2      	; 0x18ae <vfprintf+0x5f2>
    18ac:	f1 2c       	mov	r15, r1
    18ae:	34 ff       	sbrs	r19, 4
    18b0:	12 c0       	rjmp	.+36     	; 0x18d6 <vfprintf+0x61a>
    18b2:	b6 01       	movw	r22, r12
    18b4:	80 e3       	ldi	r24, 0x30	; 48
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	3b 8b       	std	Y+19, r19	; 0x13
    18ba:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <fputc>
    18be:	3b 89       	ldd	r19, Y+19	; 0x13
    18c0:	32 ff       	sbrs	r19, 2
    18c2:	17 c0       	rjmp	.+46     	; 0x18f2 <vfprintf+0x636>
    18c4:	31 fd       	sbrc	r19, 1
    18c6:	03 c0       	rjmp	.+6      	; 0x18ce <vfprintf+0x612>
    18c8:	88 e7       	ldi	r24, 0x78	; 120
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	02 c0       	rjmp	.+4      	; 0x18d2 <vfprintf+0x616>
    18ce:	88 e5       	ldi	r24, 0x58	; 88
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	b6 01       	movw	r22, r12
    18d4:	0c c0       	rjmp	.+24     	; 0x18ee <vfprintf+0x632>
    18d6:	83 2f       	mov	r24, r19
    18d8:	86 78       	andi	r24, 0x86	; 134
    18da:	59 f0       	breq	.+22     	; 0x18f2 <vfprintf+0x636>
    18dc:	31 ff       	sbrs	r19, 1
    18de:	02 c0       	rjmp	.+4      	; 0x18e4 <vfprintf+0x628>
    18e0:	8b e2       	ldi	r24, 0x2B	; 43
    18e2:	01 c0       	rjmp	.+2      	; 0x18e6 <vfprintf+0x62a>
    18e4:	80 e2       	ldi	r24, 0x20	; 32
    18e6:	37 fd       	sbrc	r19, 7
    18e8:	8d e2       	ldi	r24, 0x2D	; 45
    18ea:	b6 01       	movw	r22, r12
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <fputc>
    18f2:	e1 16       	cp	r14, r17
    18f4:	38 f4       	brcc	.+14     	; 0x1904 <vfprintf+0x648>
    18f6:	b6 01       	movw	r22, r12
    18f8:	80 e3       	ldi	r24, 0x30	; 48
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <fputc>
    1900:	11 50       	subi	r17, 0x01	; 1
    1902:	f7 cf       	rjmp	.-18     	; 0x18f2 <vfprintf+0x636>
    1904:	ea 94       	dec	r14
    1906:	f3 01       	movw	r30, r6
    1908:	ee 0d       	add	r30, r14
    190a:	f1 1d       	adc	r31, r1
    190c:	80 81       	ld	r24, Z
    190e:	b6 01       	movw	r22, r12
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <fputc>
    1916:	e1 10       	cpse	r14, r1
    1918:	f5 cf       	rjmp	.-22     	; 0x1904 <vfprintf+0x648>
    191a:	14 c0       	rjmp	.+40     	; 0x1944 <vfprintf+0x688>
    191c:	f4 e0       	ldi	r31, 0x04	; 4
    191e:	ff 15       	cp	r31, r15
    1920:	58 f5       	brcc	.+86     	; 0x1978 <vfprintf+0x6bc>
    1922:	84 e0       	ldi	r24, 0x04	; 4
    1924:	f8 1a       	sub	r15, r24
    1926:	33 fe       	sbrs	r3, 3
    1928:	1e c0       	rjmp	.+60     	; 0x1966 <vfprintf+0x6aa>
    192a:	21 10       	cpse	r2, r1
    192c:	26 c0       	rjmp	.+76     	; 0x197a <vfprintf+0x6be>
    192e:	03 ff       	sbrs	r16, 3
    1930:	2a c0       	rjmp	.+84     	; 0x1986 <vfprintf+0x6ca>
    1932:	08 e6       	ldi	r16, 0x68	; 104
    1934:	10 e0       	ldi	r17, 0x00	; 0
    1936:	f3 2d       	mov	r31, r3
    1938:	f0 71       	andi	r31, 0x10	; 16
    193a:	3f 2e       	mov	r3, r31
    193c:	f8 01       	movw	r30, r16
    193e:	84 91       	lpm	r24, Z
    1940:	81 11       	cpse	r24, r1
    1942:	24 c0       	rjmp	.+72     	; 0x198c <vfprintf+0x6d0>
    1944:	ff 20       	and	r15, r15
    1946:	09 f4       	brne	.+2      	; 0x194a <vfprintf+0x68e>
    1948:	e5 cc       	rjmp	.-1590   	; 0x1314 <vfprintf+0x58>
    194a:	b6 01       	movw	r22, r12
    194c:	80 e2       	ldi	r24, 0x20	; 32
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <fputc>
    1954:	fa 94       	dec	r15
    1956:	f6 cf       	rjmp	.-20     	; 0x1944 <vfprintf+0x688>
    1958:	f6 01       	movw	r30, r12
    195a:	86 81       	ldd	r24, Z+6	; 0x06
    195c:	97 81       	ldd	r25, Z+7	; 0x07
    195e:	26 c0       	rjmp	.+76     	; 0x19ac <vfprintf+0x6f0>
    1960:	8f ef       	ldi	r24, 0xFF	; 255
    1962:	9f ef       	ldi	r25, 0xFF	; 255
    1964:	23 c0       	rjmp	.+70     	; 0x19ac <vfprintf+0x6f0>
    1966:	b6 01       	movw	r22, r12
    1968:	80 e2       	ldi	r24, 0x20	; 32
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <fputc>
    1970:	fa 94       	dec	r15
    1972:	f1 10       	cpse	r15, r1
    1974:	f8 cf       	rjmp	.-16     	; 0x1966 <vfprintf+0x6aa>
    1976:	d9 cf       	rjmp	.-78     	; 0x192a <vfprintf+0x66e>
    1978:	f1 2c       	mov	r15, r1
    197a:	b6 01       	movw	r22, r12
    197c:	82 2d       	mov	r24, r2
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <fputc>
    1984:	d4 cf       	rjmp	.-88     	; 0x192e <vfprintf+0x672>
    1986:	0c e6       	ldi	r16, 0x6C	; 108
    1988:	10 e0       	ldi	r17, 0x00	; 0
    198a:	d5 cf       	rjmp	.-86     	; 0x1936 <vfprintf+0x67a>
    198c:	31 10       	cpse	r3, r1
    198e:	80 52       	subi	r24, 0x20	; 32
    1990:	b6 01       	movw	r22, r12
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <fputc>
    1998:	0f 5f       	subi	r16, 0xFF	; 255
    199a:	1f 4f       	sbci	r17, 0xFF	; 255
    199c:	cf cf       	rjmp	.-98     	; 0x193c <vfprintf+0x680>
    199e:	23 e0       	ldi	r18, 0x03	; 3
    19a0:	2f 15       	cp	r18, r15
    19a2:	10 f4       	brcc	.+4      	; 0x19a8 <vfprintf+0x6ec>
    19a4:	83 e0       	ldi	r24, 0x03	; 3
    19a6:	be cf       	rjmp	.-132    	; 0x1924 <vfprintf+0x668>
    19a8:	f1 2c       	mov	r15, r1
    19aa:	c1 cf       	rjmp	.-126    	; 0x192e <vfprintf+0x672>
    19ac:	63 96       	adiw	r28, 0x13	; 19
    19ae:	e2 e1       	ldi	r30, 0x12	; 18
    19b0:	0c 94 18 0d 	jmp	0x1a30	; 0x1a30 <__epilogue_restores__>

000019b4 <__udivmodsi4>:
    19b4:	a1 e2       	ldi	r26, 0x21	; 33
    19b6:	1a 2e       	mov	r1, r26
    19b8:	aa 1b       	sub	r26, r26
    19ba:	bb 1b       	sub	r27, r27
    19bc:	fd 01       	movw	r30, r26
    19be:	0d c0       	rjmp	.+26     	; 0x19da <__udivmodsi4_ep>

000019c0 <__udivmodsi4_loop>:
    19c0:	aa 1f       	adc	r26, r26
    19c2:	bb 1f       	adc	r27, r27
    19c4:	ee 1f       	adc	r30, r30
    19c6:	ff 1f       	adc	r31, r31
    19c8:	a2 17       	cp	r26, r18
    19ca:	b3 07       	cpc	r27, r19
    19cc:	e4 07       	cpc	r30, r20
    19ce:	f5 07       	cpc	r31, r21
    19d0:	20 f0       	brcs	.+8      	; 0x19da <__udivmodsi4_ep>
    19d2:	a2 1b       	sub	r26, r18
    19d4:	b3 0b       	sbc	r27, r19
    19d6:	e4 0b       	sbc	r30, r20
    19d8:	f5 0b       	sbc	r31, r21

000019da <__udivmodsi4_ep>:
    19da:	66 1f       	adc	r22, r22
    19dc:	77 1f       	adc	r23, r23
    19de:	88 1f       	adc	r24, r24
    19e0:	99 1f       	adc	r25, r25
    19e2:	1a 94       	dec	r1
    19e4:	69 f7       	brne	.-38     	; 0x19c0 <__udivmodsi4_loop>
    19e6:	60 95       	com	r22
    19e8:	70 95       	com	r23
    19ea:	80 95       	com	r24
    19ec:	90 95       	com	r25
    19ee:	9b 01       	movw	r18, r22
    19f0:	ac 01       	movw	r20, r24
    19f2:	bd 01       	movw	r22, r26
    19f4:	cf 01       	movw	r24, r30
    19f6:	08 95       	ret

000019f8 <__prologue_saves__>:
    19f8:	2f 92       	push	r2
    19fa:	3f 92       	push	r3
    19fc:	4f 92       	push	r4
    19fe:	5f 92       	push	r5
    1a00:	6f 92       	push	r6
    1a02:	7f 92       	push	r7
    1a04:	8f 92       	push	r8
    1a06:	9f 92       	push	r9
    1a08:	af 92       	push	r10
    1a0a:	bf 92       	push	r11
    1a0c:	cf 92       	push	r12
    1a0e:	df 92       	push	r13
    1a10:	ef 92       	push	r14
    1a12:	ff 92       	push	r15
    1a14:	0f 93       	push	r16
    1a16:	1f 93       	push	r17
    1a18:	cf 93       	push	r28
    1a1a:	df 93       	push	r29
    1a1c:	cd b7       	in	r28, 0x3d	; 61
    1a1e:	de b7       	in	r29, 0x3e	; 62
    1a20:	ca 1b       	sub	r28, r26
    1a22:	db 0b       	sbc	r29, r27
    1a24:	0f b6       	in	r0, 0x3f	; 63
    1a26:	f8 94       	cli
    1a28:	de bf       	out	0x3e, r29	; 62
    1a2a:	0f be       	out	0x3f, r0	; 63
    1a2c:	cd bf       	out	0x3d, r28	; 61
    1a2e:	09 94       	ijmp

00001a30 <__epilogue_restores__>:
    1a30:	2a 88       	ldd	r2, Y+18	; 0x12
    1a32:	39 88       	ldd	r3, Y+17	; 0x11
    1a34:	48 88       	ldd	r4, Y+16	; 0x10
    1a36:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a38:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a3a:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a3c:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a3e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a40:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a42:	b9 84       	ldd	r11, Y+9	; 0x09
    1a44:	c8 84       	ldd	r12, Y+8	; 0x08
    1a46:	df 80       	ldd	r13, Y+7	; 0x07
    1a48:	ee 80       	ldd	r14, Y+6	; 0x06
    1a4a:	fd 80       	ldd	r15, Y+5	; 0x05
    1a4c:	0c 81       	ldd	r16, Y+4	; 0x04
    1a4e:	1b 81       	ldd	r17, Y+3	; 0x03
    1a50:	aa 81       	ldd	r26, Y+2	; 0x02
    1a52:	b9 81       	ldd	r27, Y+1	; 0x01
    1a54:	ce 0f       	add	r28, r30
    1a56:	d1 1d       	adc	r29, r1
    1a58:	0f b6       	in	r0, 0x3f	; 63
    1a5a:	f8 94       	cli
    1a5c:	de bf       	out	0x3e, r29	; 62
    1a5e:	0f be       	out	0x3f, r0	; 63
    1a60:	cd bf       	out	0x3d, r28	; 61
    1a62:	ed 01       	movw	r28, r26
    1a64:	08 95       	ret

00001a66 <__tablejump2__>:
    1a66:	ee 0f       	add	r30, r30
    1a68:	ff 1f       	adc	r31, r31
    1a6a:	05 90       	lpm	r0, Z+
    1a6c:	f4 91       	lpm	r31, Z
    1a6e:	e0 2d       	mov	r30, r0
    1a70:	09 94       	ijmp

00001a72 <__ftoa_engine>:
    1a72:	28 30       	cpi	r18, 0x08	; 8
    1a74:	08 f0       	brcs	.+2      	; 0x1a78 <__ftoa_engine+0x6>
    1a76:	27 e0       	ldi	r18, 0x07	; 7
    1a78:	33 27       	eor	r19, r19
    1a7a:	da 01       	movw	r26, r20
    1a7c:	99 0f       	add	r25, r25
    1a7e:	31 1d       	adc	r19, r1
    1a80:	87 fd       	sbrc	r24, 7
    1a82:	91 60       	ori	r25, 0x01	; 1
    1a84:	00 96       	adiw	r24, 0x00	; 0
    1a86:	61 05       	cpc	r22, r1
    1a88:	71 05       	cpc	r23, r1
    1a8a:	39 f4       	brne	.+14     	; 0x1a9a <__ftoa_engine+0x28>
    1a8c:	32 60       	ori	r19, 0x02	; 2
    1a8e:	2e 5f       	subi	r18, 0xFE	; 254
    1a90:	3d 93       	st	X+, r19
    1a92:	30 e3       	ldi	r19, 0x30	; 48
    1a94:	2a 95       	dec	r18
    1a96:	e1 f7       	brne	.-8      	; 0x1a90 <__ftoa_engine+0x1e>
    1a98:	08 95       	ret
    1a9a:	9f 3f       	cpi	r25, 0xFF	; 255
    1a9c:	30 f0       	brcs	.+12     	; 0x1aaa <__ftoa_engine+0x38>
    1a9e:	80 38       	cpi	r24, 0x80	; 128
    1aa0:	71 05       	cpc	r23, r1
    1aa2:	61 05       	cpc	r22, r1
    1aa4:	09 f0       	breq	.+2      	; 0x1aa8 <__ftoa_engine+0x36>
    1aa6:	3c 5f       	subi	r19, 0xFC	; 252
    1aa8:	3c 5f       	subi	r19, 0xFC	; 252
    1aaa:	3d 93       	st	X+, r19
    1aac:	91 30       	cpi	r25, 0x01	; 1
    1aae:	08 f0       	brcs	.+2      	; 0x1ab2 <__ftoa_engine+0x40>
    1ab0:	80 68       	ori	r24, 0x80	; 128
    1ab2:	91 1d       	adc	r25, r1
    1ab4:	df 93       	push	r29
    1ab6:	cf 93       	push	r28
    1ab8:	1f 93       	push	r17
    1aba:	0f 93       	push	r16
    1abc:	ff 92       	push	r15
    1abe:	ef 92       	push	r14
    1ac0:	19 2f       	mov	r17, r25
    1ac2:	98 7f       	andi	r25, 0xF8	; 248
    1ac4:	96 95       	lsr	r25
    1ac6:	e9 2f       	mov	r30, r25
    1ac8:	96 95       	lsr	r25
    1aca:	96 95       	lsr	r25
    1acc:	e9 0f       	add	r30, r25
    1ace:	ff 27       	eor	r31, r31
    1ad0:	e6 53       	subi	r30, 0x36	; 54
    1ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad4:	99 27       	eor	r25, r25
    1ad6:	33 27       	eor	r19, r19
    1ad8:	ee 24       	eor	r14, r14
    1ada:	ff 24       	eor	r15, r15
    1adc:	a7 01       	movw	r20, r14
    1ade:	e7 01       	movw	r28, r14
    1ae0:	05 90       	lpm	r0, Z+
    1ae2:	08 94       	sec
    1ae4:	07 94       	ror	r0
    1ae6:	28 f4       	brcc	.+10     	; 0x1af2 <__ftoa_engine+0x80>
    1ae8:	36 0f       	add	r19, r22
    1aea:	e7 1e       	adc	r14, r23
    1aec:	f8 1e       	adc	r15, r24
    1aee:	49 1f       	adc	r20, r25
    1af0:	51 1d       	adc	r21, r1
    1af2:	66 0f       	add	r22, r22
    1af4:	77 1f       	adc	r23, r23
    1af6:	88 1f       	adc	r24, r24
    1af8:	99 1f       	adc	r25, r25
    1afa:	06 94       	lsr	r0
    1afc:	a1 f7       	brne	.-24     	; 0x1ae6 <__ftoa_engine+0x74>
    1afe:	05 90       	lpm	r0, Z+
    1b00:	07 94       	ror	r0
    1b02:	28 f4       	brcc	.+10     	; 0x1b0e <__ftoa_engine+0x9c>
    1b04:	e7 0e       	add	r14, r23
    1b06:	f8 1e       	adc	r15, r24
    1b08:	49 1f       	adc	r20, r25
    1b0a:	56 1f       	adc	r21, r22
    1b0c:	c1 1d       	adc	r28, r1
    1b0e:	77 0f       	add	r23, r23
    1b10:	88 1f       	adc	r24, r24
    1b12:	99 1f       	adc	r25, r25
    1b14:	66 1f       	adc	r22, r22
    1b16:	06 94       	lsr	r0
    1b18:	a1 f7       	brne	.-24     	; 0x1b02 <__ftoa_engine+0x90>
    1b1a:	05 90       	lpm	r0, Z+
    1b1c:	07 94       	ror	r0
    1b1e:	28 f4       	brcc	.+10     	; 0x1b2a <__ftoa_engine+0xb8>
    1b20:	f8 0e       	add	r15, r24
    1b22:	49 1f       	adc	r20, r25
    1b24:	56 1f       	adc	r21, r22
    1b26:	c7 1f       	adc	r28, r23
    1b28:	d1 1d       	adc	r29, r1
    1b2a:	88 0f       	add	r24, r24
    1b2c:	99 1f       	adc	r25, r25
    1b2e:	66 1f       	adc	r22, r22
    1b30:	77 1f       	adc	r23, r23
    1b32:	06 94       	lsr	r0
    1b34:	a1 f7       	brne	.-24     	; 0x1b1e <__ftoa_engine+0xac>
    1b36:	05 90       	lpm	r0, Z+
    1b38:	07 94       	ror	r0
    1b3a:	20 f4       	brcc	.+8      	; 0x1b44 <__ftoa_engine+0xd2>
    1b3c:	49 0f       	add	r20, r25
    1b3e:	56 1f       	adc	r21, r22
    1b40:	c7 1f       	adc	r28, r23
    1b42:	d8 1f       	adc	r29, r24
    1b44:	99 0f       	add	r25, r25
    1b46:	66 1f       	adc	r22, r22
    1b48:	77 1f       	adc	r23, r23
    1b4a:	88 1f       	adc	r24, r24
    1b4c:	06 94       	lsr	r0
    1b4e:	a9 f7       	brne	.-22     	; 0x1b3a <__ftoa_engine+0xc8>
    1b50:	84 91       	lpm	r24, Z
    1b52:	10 95       	com	r17
    1b54:	17 70       	andi	r17, 0x07	; 7
    1b56:	41 f0       	breq	.+16     	; 0x1b68 <__ftoa_engine+0xf6>
    1b58:	d6 95       	lsr	r29
    1b5a:	c7 95       	ror	r28
    1b5c:	57 95       	ror	r21
    1b5e:	47 95       	ror	r20
    1b60:	f7 94       	ror	r15
    1b62:	e7 94       	ror	r14
    1b64:	1a 95       	dec	r17
    1b66:	c1 f7       	brne	.-16     	; 0x1b58 <__ftoa_engine+0xe6>
    1b68:	e0 e7       	ldi	r30, 0x70	; 112
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	68 94       	set
    1b6e:	15 90       	lpm	r1, Z+
    1b70:	15 91       	lpm	r17, Z+
    1b72:	35 91       	lpm	r19, Z+
    1b74:	65 91       	lpm	r22, Z+
    1b76:	95 91       	lpm	r25, Z+
    1b78:	05 90       	lpm	r0, Z+
    1b7a:	7f e2       	ldi	r23, 0x2F	; 47
    1b7c:	73 95       	inc	r23
    1b7e:	e1 18       	sub	r14, r1
    1b80:	f1 0a       	sbc	r15, r17
    1b82:	43 0b       	sbc	r20, r19
    1b84:	56 0b       	sbc	r21, r22
    1b86:	c9 0b       	sbc	r28, r25
    1b88:	d0 09       	sbc	r29, r0
    1b8a:	c0 f7       	brcc	.-16     	; 0x1b7c <__ftoa_engine+0x10a>
    1b8c:	e1 0c       	add	r14, r1
    1b8e:	f1 1e       	adc	r15, r17
    1b90:	43 1f       	adc	r20, r19
    1b92:	56 1f       	adc	r21, r22
    1b94:	c9 1f       	adc	r28, r25
    1b96:	d0 1d       	adc	r29, r0
    1b98:	7e f4       	brtc	.+30     	; 0x1bb8 <__ftoa_engine+0x146>
    1b9a:	70 33       	cpi	r23, 0x30	; 48
    1b9c:	11 f4       	brne	.+4      	; 0x1ba2 <__ftoa_engine+0x130>
    1b9e:	8a 95       	dec	r24
    1ba0:	e6 cf       	rjmp	.-52     	; 0x1b6e <__ftoa_engine+0xfc>
    1ba2:	e8 94       	clt
    1ba4:	01 50       	subi	r16, 0x01	; 1
    1ba6:	30 f0       	brcs	.+12     	; 0x1bb4 <__ftoa_engine+0x142>
    1ba8:	08 0f       	add	r16, r24
    1baa:	0a f4       	brpl	.+2      	; 0x1bae <__ftoa_engine+0x13c>
    1bac:	00 27       	eor	r16, r16
    1bae:	02 17       	cp	r16, r18
    1bb0:	08 f4       	brcc	.+2      	; 0x1bb4 <__ftoa_engine+0x142>
    1bb2:	20 2f       	mov	r18, r16
    1bb4:	23 95       	inc	r18
    1bb6:	02 2f       	mov	r16, r18
    1bb8:	7a 33       	cpi	r23, 0x3A	; 58
    1bba:	28 f0       	brcs	.+10     	; 0x1bc6 <__ftoa_engine+0x154>
    1bbc:	79 e3       	ldi	r23, 0x39	; 57
    1bbe:	7d 93       	st	X+, r23
    1bc0:	2a 95       	dec	r18
    1bc2:	e9 f7       	brne	.-6      	; 0x1bbe <__ftoa_engine+0x14c>
    1bc4:	10 c0       	rjmp	.+32     	; 0x1be6 <__ftoa_engine+0x174>
    1bc6:	7d 93       	st	X+, r23
    1bc8:	2a 95       	dec	r18
    1bca:	89 f6       	brne	.-94     	; 0x1b6e <__ftoa_engine+0xfc>
    1bcc:	06 94       	lsr	r0
    1bce:	97 95       	ror	r25
    1bd0:	67 95       	ror	r22
    1bd2:	37 95       	ror	r19
    1bd4:	17 95       	ror	r17
    1bd6:	17 94       	ror	r1
    1bd8:	e1 18       	sub	r14, r1
    1bda:	f1 0a       	sbc	r15, r17
    1bdc:	43 0b       	sbc	r20, r19
    1bde:	56 0b       	sbc	r21, r22
    1be0:	c9 0b       	sbc	r28, r25
    1be2:	d0 09       	sbc	r29, r0
    1be4:	98 f0       	brcs	.+38     	; 0x1c0c <__ftoa_engine+0x19a>
    1be6:	23 95       	inc	r18
    1be8:	7e 91       	ld	r23, -X
    1bea:	73 95       	inc	r23
    1bec:	7a 33       	cpi	r23, 0x3A	; 58
    1bee:	08 f0       	brcs	.+2      	; 0x1bf2 <__ftoa_engine+0x180>
    1bf0:	70 e3       	ldi	r23, 0x30	; 48
    1bf2:	7c 93       	st	X, r23
    1bf4:	20 13       	cpse	r18, r16
    1bf6:	b8 f7       	brcc	.-18     	; 0x1be6 <__ftoa_engine+0x174>
    1bf8:	7e 91       	ld	r23, -X
    1bfa:	70 61       	ori	r23, 0x10	; 16
    1bfc:	7d 93       	st	X+, r23
    1bfe:	30 f0       	brcs	.+12     	; 0x1c0c <__ftoa_engine+0x19a>
    1c00:	83 95       	inc	r24
    1c02:	71 e3       	ldi	r23, 0x31	; 49
    1c04:	7d 93       	st	X+, r23
    1c06:	70 e3       	ldi	r23, 0x30	; 48
    1c08:	2a 95       	dec	r18
    1c0a:	e1 f7       	brne	.-8      	; 0x1c04 <__ftoa_engine+0x192>
    1c0c:	11 24       	eor	r1, r1
    1c0e:	ef 90       	pop	r14
    1c10:	ff 90       	pop	r15
    1c12:	0f 91       	pop	r16
    1c14:	1f 91       	pop	r17
    1c16:	cf 91       	pop	r28
    1c18:	df 91       	pop	r29
    1c1a:	99 27       	eor	r25, r25
    1c1c:	87 fd       	sbrc	r24, 7
    1c1e:	90 95       	com	r25
    1c20:	08 95       	ret

00001c22 <strnlen_P>:
    1c22:	fc 01       	movw	r30, r24
    1c24:	05 90       	lpm	r0, Z+
    1c26:	61 50       	subi	r22, 0x01	; 1
    1c28:	70 40       	sbci	r23, 0x00	; 0
    1c2a:	01 10       	cpse	r0, r1
    1c2c:	d8 f7       	brcc	.-10     	; 0x1c24 <strnlen_P+0x2>
    1c2e:	80 95       	com	r24
    1c30:	90 95       	com	r25
    1c32:	8e 0f       	add	r24, r30
    1c34:	9f 1f       	adc	r25, r31
    1c36:	08 95       	ret

00001c38 <strcat>:
    1c38:	fb 01       	movw	r30, r22
    1c3a:	dc 01       	movw	r26, r24
    1c3c:	0d 90       	ld	r0, X+
    1c3e:	00 20       	and	r0, r0
    1c40:	e9 f7       	brne	.-6      	; 0x1c3c <strcat+0x4>
    1c42:	11 97       	sbiw	r26, 0x01	; 1
    1c44:	01 90       	ld	r0, Z+
    1c46:	0d 92       	st	X+, r0
    1c48:	00 20       	and	r0, r0
    1c4a:	e1 f7       	brne	.-8      	; 0x1c44 <strcat+0xc>
    1c4c:	08 95       	ret

00001c4e <strnlen>:
    1c4e:	fc 01       	movw	r30, r24
    1c50:	61 50       	subi	r22, 0x01	; 1
    1c52:	70 40       	sbci	r23, 0x00	; 0
    1c54:	01 90       	ld	r0, Z+
    1c56:	01 10       	cpse	r0, r1
    1c58:	d8 f7       	brcc	.-10     	; 0x1c50 <strnlen+0x2>
    1c5a:	80 95       	com	r24
    1c5c:	90 95       	com	r25
    1c5e:	8e 0f       	add	r24, r30
    1c60:	9f 1f       	adc	r25, r31
    1c62:	08 95       	ret

00001c64 <fputc>:
    1c64:	0f 93       	push	r16
    1c66:	1f 93       	push	r17
    1c68:	cf 93       	push	r28
    1c6a:	df 93       	push	r29
    1c6c:	fb 01       	movw	r30, r22
    1c6e:	23 81       	ldd	r18, Z+3	; 0x03
    1c70:	21 fd       	sbrc	r18, 1
    1c72:	03 c0       	rjmp	.+6      	; 0x1c7a <fputc+0x16>
    1c74:	8f ef       	ldi	r24, 0xFF	; 255
    1c76:	9f ef       	ldi	r25, 0xFF	; 255
    1c78:	28 c0       	rjmp	.+80     	; 0x1cca <fputc+0x66>
    1c7a:	22 ff       	sbrs	r18, 2
    1c7c:	16 c0       	rjmp	.+44     	; 0x1caa <fputc+0x46>
    1c7e:	46 81       	ldd	r20, Z+6	; 0x06
    1c80:	57 81       	ldd	r21, Z+7	; 0x07
    1c82:	24 81       	ldd	r18, Z+4	; 0x04
    1c84:	35 81       	ldd	r19, Z+5	; 0x05
    1c86:	42 17       	cp	r20, r18
    1c88:	53 07       	cpc	r21, r19
    1c8a:	44 f4       	brge	.+16     	; 0x1c9c <fputc+0x38>
    1c8c:	a0 81       	ld	r26, Z
    1c8e:	b1 81       	ldd	r27, Z+1	; 0x01
    1c90:	9d 01       	movw	r18, r26
    1c92:	2f 5f       	subi	r18, 0xFF	; 255
    1c94:	3f 4f       	sbci	r19, 0xFF	; 255
    1c96:	31 83       	std	Z+1, r19	; 0x01
    1c98:	20 83       	st	Z, r18
    1c9a:	8c 93       	st	X, r24
    1c9c:	26 81       	ldd	r18, Z+6	; 0x06
    1c9e:	37 81       	ldd	r19, Z+7	; 0x07
    1ca0:	2f 5f       	subi	r18, 0xFF	; 255
    1ca2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ca4:	37 83       	std	Z+7, r19	; 0x07
    1ca6:	26 83       	std	Z+6, r18	; 0x06
    1ca8:	10 c0       	rjmp	.+32     	; 0x1cca <fputc+0x66>
    1caa:	eb 01       	movw	r28, r22
    1cac:	09 2f       	mov	r16, r25
    1cae:	18 2f       	mov	r17, r24
    1cb0:	00 84       	ldd	r0, Z+8	; 0x08
    1cb2:	f1 85       	ldd	r31, Z+9	; 0x09
    1cb4:	e0 2d       	mov	r30, r0
    1cb6:	09 95       	icall
    1cb8:	89 2b       	or	r24, r25
    1cba:	e1 f6       	brne	.-72     	; 0x1c74 <fputc+0x10>
    1cbc:	8e 81       	ldd	r24, Y+6	; 0x06
    1cbe:	9f 81       	ldd	r25, Y+7	; 0x07
    1cc0:	01 96       	adiw	r24, 0x01	; 1
    1cc2:	9f 83       	std	Y+7, r25	; 0x07
    1cc4:	8e 83       	std	Y+6, r24	; 0x06
    1cc6:	81 2f       	mov	r24, r17
    1cc8:	90 2f       	mov	r25, r16
    1cca:	df 91       	pop	r29
    1ccc:	cf 91       	pop	r28
    1cce:	1f 91       	pop	r17
    1cd0:	0f 91       	pop	r16
    1cd2:	08 95       	ret

00001cd4 <sprintf>:
    1cd4:	ae e0       	ldi	r26, 0x0E	; 14
    1cd6:	b0 e0       	ldi	r27, 0x00	; 0
    1cd8:	e0 e7       	ldi	r30, 0x70	; 112
    1cda:	fe e0       	ldi	r31, 0x0E	; 14
    1cdc:	0c 94 0a 0d 	jmp	0x1a14	; 0x1a14 <__prologue_saves__+0x1c>
    1ce0:	0d 89       	ldd	r16, Y+21	; 0x15
    1ce2:	1e 89       	ldd	r17, Y+22	; 0x16
    1ce4:	86 e0       	ldi	r24, 0x06	; 6
    1ce6:	8c 83       	std	Y+4, r24	; 0x04
    1ce8:	1a 83       	std	Y+2, r17	; 0x02
    1cea:	09 83       	std	Y+1, r16	; 0x01
    1cec:	8f ef       	ldi	r24, 0xFF	; 255
    1cee:	9f e7       	ldi	r25, 0x7F	; 127
    1cf0:	9e 83       	std	Y+6, r25	; 0x06
    1cf2:	8d 83       	std	Y+5, r24	; 0x05
    1cf4:	ae 01       	movw	r20, r28
    1cf6:	47 5e       	subi	r20, 0xE7	; 231
    1cf8:	5f 4f       	sbci	r21, 0xFF	; 255
    1cfa:	6f 89       	ldd	r22, Y+23	; 0x17
    1cfc:	78 8d       	ldd	r23, Y+24	; 0x18
    1cfe:	ce 01       	movw	r24, r28
    1d00:	01 96       	adiw	r24, 0x01	; 1
    1d02:	0e 94 5e 09 	call	0x12bc	; 0x12bc <vfprintf>
    1d06:	2f 81       	ldd	r18, Y+7	; 0x07
    1d08:	38 85       	ldd	r19, Y+8	; 0x08
    1d0a:	f8 01       	movw	r30, r16
    1d0c:	e2 0f       	add	r30, r18
    1d0e:	f3 1f       	adc	r31, r19
    1d10:	10 82       	st	Z, r1
    1d12:	2e 96       	adiw	r28, 0x0e	; 14
    1d14:	e4 e0       	ldi	r30, 0x04	; 4
    1d16:	0c 94 26 0d 	jmp	0x1a4c	; 0x1a4c <__epilogue_restores__+0x1c>

00001d1a <__ultoa_invert>:
    1d1a:	fa 01       	movw	r30, r20
    1d1c:	aa 27       	eor	r26, r26
    1d1e:	28 30       	cpi	r18, 0x08	; 8
    1d20:	51 f1       	breq	.+84     	; 0x1d76 <__ultoa_invert+0x5c>
    1d22:	20 31       	cpi	r18, 0x10	; 16
    1d24:	81 f1       	breq	.+96     	; 0x1d86 <__ultoa_invert+0x6c>
    1d26:	e8 94       	clt
    1d28:	6f 93       	push	r22
    1d2a:	6e 7f       	andi	r22, 0xFE	; 254
    1d2c:	6e 5f       	subi	r22, 0xFE	; 254
    1d2e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d30:	8f 4f       	sbci	r24, 0xFF	; 255
    1d32:	9f 4f       	sbci	r25, 0xFF	; 255
    1d34:	af 4f       	sbci	r26, 0xFF	; 255
    1d36:	b1 e0       	ldi	r27, 0x01	; 1
    1d38:	3e d0       	rcall	.+124    	; 0x1db6 <__ultoa_invert+0x9c>
    1d3a:	b4 e0       	ldi	r27, 0x04	; 4
    1d3c:	3c d0       	rcall	.+120    	; 0x1db6 <__ultoa_invert+0x9c>
    1d3e:	67 0f       	add	r22, r23
    1d40:	78 1f       	adc	r23, r24
    1d42:	89 1f       	adc	r24, r25
    1d44:	9a 1f       	adc	r25, r26
    1d46:	a1 1d       	adc	r26, r1
    1d48:	68 0f       	add	r22, r24
    1d4a:	79 1f       	adc	r23, r25
    1d4c:	8a 1f       	adc	r24, r26
    1d4e:	91 1d       	adc	r25, r1
    1d50:	a1 1d       	adc	r26, r1
    1d52:	6a 0f       	add	r22, r26
    1d54:	71 1d       	adc	r23, r1
    1d56:	81 1d       	adc	r24, r1
    1d58:	91 1d       	adc	r25, r1
    1d5a:	a1 1d       	adc	r26, r1
    1d5c:	20 d0       	rcall	.+64     	; 0x1d9e <__ultoa_invert+0x84>
    1d5e:	09 f4       	brne	.+2      	; 0x1d62 <__ultoa_invert+0x48>
    1d60:	68 94       	set
    1d62:	3f 91       	pop	r19
    1d64:	2a e0       	ldi	r18, 0x0A	; 10
    1d66:	26 9f       	mul	r18, r22
    1d68:	11 24       	eor	r1, r1
    1d6a:	30 19       	sub	r19, r0
    1d6c:	30 5d       	subi	r19, 0xD0	; 208
    1d6e:	31 93       	st	Z+, r19
    1d70:	de f6       	brtc	.-74     	; 0x1d28 <__ultoa_invert+0xe>
    1d72:	cf 01       	movw	r24, r30
    1d74:	08 95       	ret
    1d76:	46 2f       	mov	r20, r22
    1d78:	47 70       	andi	r20, 0x07	; 7
    1d7a:	40 5d       	subi	r20, 0xD0	; 208
    1d7c:	41 93       	st	Z+, r20
    1d7e:	b3 e0       	ldi	r27, 0x03	; 3
    1d80:	0f d0       	rcall	.+30     	; 0x1da0 <__ultoa_invert+0x86>
    1d82:	c9 f7       	brne	.-14     	; 0x1d76 <__ultoa_invert+0x5c>
    1d84:	f6 cf       	rjmp	.-20     	; 0x1d72 <__ultoa_invert+0x58>
    1d86:	46 2f       	mov	r20, r22
    1d88:	4f 70       	andi	r20, 0x0F	; 15
    1d8a:	40 5d       	subi	r20, 0xD0	; 208
    1d8c:	4a 33       	cpi	r20, 0x3A	; 58
    1d8e:	18 f0       	brcs	.+6      	; 0x1d96 <__ultoa_invert+0x7c>
    1d90:	49 5d       	subi	r20, 0xD9	; 217
    1d92:	31 fd       	sbrc	r19, 1
    1d94:	40 52       	subi	r20, 0x20	; 32
    1d96:	41 93       	st	Z+, r20
    1d98:	02 d0       	rcall	.+4      	; 0x1d9e <__ultoa_invert+0x84>
    1d9a:	a9 f7       	brne	.-22     	; 0x1d86 <__ultoa_invert+0x6c>
    1d9c:	ea cf       	rjmp	.-44     	; 0x1d72 <__ultoa_invert+0x58>
    1d9e:	b4 e0       	ldi	r27, 0x04	; 4
    1da0:	a6 95       	lsr	r26
    1da2:	97 95       	ror	r25
    1da4:	87 95       	ror	r24
    1da6:	77 95       	ror	r23
    1da8:	67 95       	ror	r22
    1daa:	ba 95       	dec	r27
    1dac:	c9 f7       	brne	.-14     	; 0x1da0 <__ultoa_invert+0x86>
    1dae:	00 97       	sbiw	r24, 0x00	; 0
    1db0:	61 05       	cpc	r22, r1
    1db2:	71 05       	cpc	r23, r1
    1db4:	08 95       	ret
    1db6:	9b 01       	movw	r18, r22
    1db8:	ac 01       	movw	r20, r24
    1dba:	0a 2e       	mov	r0, r26
    1dbc:	06 94       	lsr	r0
    1dbe:	57 95       	ror	r21
    1dc0:	47 95       	ror	r20
    1dc2:	37 95       	ror	r19
    1dc4:	27 95       	ror	r18
    1dc6:	ba 95       	dec	r27
    1dc8:	c9 f7       	brne	.-14     	; 0x1dbc <__ultoa_invert+0xa2>
    1dca:	62 0f       	add	r22, r18
    1dcc:	73 1f       	adc	r23, r19
    1dce:	84 1f       	adc	r24, r20
    1dd0:	95 1f       	adc	r25, r21
    1dd2:	a0 1d       	adc	r26, r0
    1dd4:	08 95       	ret

00001dd6 <_exit>:
    1dd6:	f8 94       	cli

00001dd8 <__stop_program>:
    1dd8:	ff cf       	rjmp	.-2      	; 0x1dd8 <__stop_program>
