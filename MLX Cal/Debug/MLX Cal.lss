
MLX Cal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000066  00800100  00001d4c  00001de0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d4c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002c  00800166  00800166  00001e46  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001e46  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ea4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b8  00000000  00000000  00001ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006446  00000000  00000000  0000219c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f3b  00000000  00000000  000085e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e89  00000000  00000000  0000951d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000af0  00000000  00000000  0000a3a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001a9b  00000000  00000000  0000ae98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003795  00000000  00000000  0000c933  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000590  00000000  00000000  000100c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__ctors_end>
       4:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
       8:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
       c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      10:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      14:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      18:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      1c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      20:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      24:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      28:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      2c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      30:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      34:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__vector_13>
      38:	0c 94 9a 02 	jmp	0x534	; 0x534 <__vector_14>
      3c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      40:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      44:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      48:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      4c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      50:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      54:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      58:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      5c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      60:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      64:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	6e 61       	ori	r22, 0x1E	; 30
      6a:	6e 00       	.word	0x006e	; ????

0000006c <__c.2177>:
      6c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      7c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      8c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      9c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      ac:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      bc:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      cc:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      dc:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      ec:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      fc:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     10c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     11c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     12c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     13c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     14c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     15c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000016a <__ctors_start>:
     16a:	cc 05       	cpc	r28, r12
     16c:	d9 06       	cpc	r13, r25

0000016e <__ctors_end>:
     16e:	11 24       	eor	r1, r1
     170:	1f be       	out	0x3f, r1	; 63
     172:	cf ef       	ldi	r28, 0xFF	; 255
     174:	d8 e0       	ldi	r29, 0x08	; 8
     176:	de bf       	out	0x3e, r29	; 62
     178:	cd bf       	out	0x3d, r28	; 61

0000017a <__do_copy_data>:
     17a:	11 e0       	ldi	r17, 0x01	; 1
     17c:	a0 e0       	ldi	r26, 0x00	; 0
     17e:	b1 e0       	ldi	r27, 0x01	; 1
     180:	ec e4       	ldi	r30, 0x4C	; 76
     182:	fd e1       	ldi	r31, 0x1D	; 29
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x10>
     186:	05 90       	lpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	a6 36       	cpi	r26, 0x66	; 102
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0xc>

00000190 <__do_clear_bss>:
     190:	21 e0       	ldi	r18, 0x01	; 1
     192:	a6 e6       	ldi	r26, 0x66	; 102
     194:	b1 e0       	ldi	r27, 0x01	; 1
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	a2 39       	cpi	r26, 0x92	; 146
     19c:	b2 07       	cpc	r27, r18
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>

000001a0 <__do_global_ctors>:
     1a0:	10 e0       	ldi	r17, 0x00	; 0
     1a2:	c7 eb       	ldi	r28, 0xB7	; 183
     1a4:	d0 e0       	ldi	r29, 0x00	; 0
     1a6:	04 c0       	rjmp	.+8      	; 0x1b0 <__do_global_ctors+0x10>
     1a8:	21 97       	sbiw	r28, 0x01	; 1
     1aa:	fe 01       	movw	r30, r28
     1ac:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__tablejump2__>
     1b0:	c5 3b       	cpi	r28, 0xB5	; 181
     1b2:	d1 07       	cpc	r29, r17
     1b4:	c9 f7       	brne	.-14     	; 0x1a8 <__do_global_ctors+0x8>
     1b6:	0e 94 9d 05 	call	0xb3a	; 0xb3a <main>
     1ba:	0c 94 a4 0e 	jmp	0x1d48	; 0x1d48 <_exit>

000001be <__bad_interrupt>:
     1be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001c2 <_ZN17Adafruit_MLX90614C1Eh>:
template<typename V>
inline V constrain(V x, V a, V b) {
	return((x < a)?a:(b<x)?b:x);
}
/*********************************************************************/ 
Adafruit_MLX90614::Adafruit_MLX90614(uint8_t i2caddr) {
     1c2:	1f 93       	push	r17
     1c4:	cf 93       	push	r28
     1c6:	df 93       	push	r29
     1c8:	ec 01       	movw	r28, r24
     1ca:	16 2f       	mov	r17, r22
	  }
 class I2c
 {
 public:
    I2c()
    {
     1cc:	18 86       	std	Y+8, r1	; 0x08
     1ce:	19 86       	std	Y+9, r1	; 0x09
	    i2c_init();
     1d0:	0e 94 d7 05 	call	0xbae	; 0xbae <i2c_init>
  _addr = i2caddr;
     1d4:	1a 87       	std	Y+10, r17	; 0x0a
}
     1d6:	df 91       	pop	r29
     1d8:	cf 91       	pop	r28
     1da:	1f 91       	pop	r17
     1dc:	08 95       	ret

000001de <_ZN17Adafruit_MLX906146read16EhPj>:
	return (((float)ke) / 65535.0);
}

/*********************************************************************/

uint8_t Adafruit_MLX90614::read16(uint8_t a , uint16_t * d) {
     1de:	ef 92       	push	r14
     1e0:	ff 92       	push	r15
     1e2:	0f 93       	push	r16
     1e4:	1f 93       	push	r17
     1e6:	cf 93       	push	r28
     1e8:	8c 01       	movw	r16, r24
     1ea:	c6 2f       	mov	r28, r22
     1ec:	7a 01       	movw	r14, r20
  uint16_t ret;
  Wire.beginTransmission(_addr); // start transmission to device 
     1ee:	fc 01       	movw	r30, r24
     1f0:	82 85       	ldd	r24, Z+10	; 0x0a
    }
     void beginTransmission(uint8_t address)
     {
         m_bufferIndex = 0;
     1f2:	10 86       	std	Z+8, r1	; 0x08

         i2c_start((address << 1) | I2C_WRITE);
     1f4:	88 0f       	add	r24, r24
     1f6:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <i2c_start>
     }

     void write(uint8_t byte)
     {
         if (m_bufferIndex == c_bufferSize)
     1fa:	f8 01       	movw	r30, r16
     1fc:	80 85       	ldd	r24, Z+8	; 0x08
     1fe:	88 30       	cpi	r24, 0x08	; 8
     200:	59 f0       	breq	.+22     	; 0x218 <_ZN17Adafruit_MLX906146read16EhPj+0x3a>
             return;

         m_buffer[m_bufferIndex++] = byte;
     202:	91 e0       	ldi	r25, 0x01	; 1
     204:	98 0f       	add	r25, r24
     206:	90 87       	std	Z+8, r25	; 0x08
     208:	e8 0f       	add	r30, r24
     20a:	f1 1d       	adc	r31, r1
     20c:	c0 83       	st	Z, r28
    }

    uint8_t endTransmission(bool stop = true)
    {
         for (uint8_t index = 0; index < m_bufferIndex; ++index) {
     20e:	f8 01       	movw	r30, r16
     210:	80 85       	ldd	r24, Z+8	; 0x08
     212:	88 23       	and	r24, r24
     214:	09 f4       	brne	.+2      	; 0x218 <_ZN17Adafruit_MLX906146read16EhPj+0x3a>
     216:	4e c0       	rjmp	.+156    	; 0x2b4 <_ZN17Adafruit_MLX906146read16EhPj+0xd6>
	return (((float)ke) / 65535.0);
}

/*********************************************************************/

uint8_t Adafruit_MLX90614::read16(uint8_t a , uint16_t * d) {
     218:	c0 e0       	ldi	r28, 0x00	; 0
             if (i2c_write(m_buffer[index]) != 0)
     21a:	f8 01       	movw	r30, r16
     21c:	ec 0f       	add	r30, r28
     21e:	f1 1d       	adc	r31, r1
     220:	80 81       	ld	r24, Z
     222:	0e 94 0b 06 	call	0xc16	; 0xc16 <i2c_write>
     226:	81 11       	cpse	r24, r1
     228:	45 c0       	rjmp	.+138    	; 0x2b4 <_ZN17Adafruit_MLX906146read16EhPj+0xd6>
         m_buffer[m_bufferIndex++] = byte;
    }

    uint8_t endTransmission(bool stop = true)
    {
         for (uint8_t index = 0; index < m_bufferIndex; ++index) {
     22a:	cf 5f       	subi	r28, 0xFF	; 255
     22c:	f8 01       	movw	r30, r16
     22e:	80 85       	ldd	r24, Z+8	; 0x08
     230:	c8 17       	cp	r28, r24
     232:	98 f3       	brcs	.-26     	; 0x21a <_ZN17Adafruit_MLX906146read16EhPj+0x3c>
     234:	3f c0       	rjmp	.+126    	; 0x2b4 <_ZN17Adafruit_MLX906146read16EhPj+0xd6>
         return m_bufferIndex;
     }

     uint8_t read()
     {
         if (m_bufferReadIndex == m_bufferIndex)
     236:	f8 01       	movw	r30, r16
     238:	81 85       	ldd	r24, Z+9	; 0x09
     23a:	90 85       	ldd	r25, Z+8	; 0x08
     23c:	89 17       	cp	r24, r25
     23e:	b1 f0       	breq	.+44     	; 0x26c <_ZN17Adafruit_MLX906146read16EhPj+0x8e>
             return 0;
        return m_buffer[m_bufferReadIndex++];
     240:	41 e0       	ldi	r20, 0x01	; 1
     242:	48 0f       	add	r20, r24
     244:	41 87       	std	Z+9, r20	; 0x09
     246:	e8 0f       	add	r30, r24
     248:	f1 1d       	adc	r31, r1
  Wire.beginTransmission(_addr); // start transmission to device 
  Wire.write(a); // sends register address to read from
  Wire.endTransmission(false); // end transmission
  
  Wire.requestFrom(_addr, (uint8_t)3);// send data n-bytes read
  ret = Wire.read(); // receive DATA
     24a:	20 81       	ld	r18, Z
     24c:	30 e0       	ldi	r19, 0x00	; 0
         return m_bufferIndex;
     }

     uint8_t read()
     {
         if (m_bufferReadIndex == m_bufferIndex)
     24e:	94 17       	cp	r25, r20
     250:	d1 f1       	breq	.+116    	; 0x2c6 <_ZN17Adafruit_MLX906146read16EhPj+0xe8>
             return 0;
        return m_buffer[m_bufferReadIndex++];
     252:	8e 5f       	subi	r24, 0xFE	; 254
     254:	f8 01       	movw	r30, r16
     256:	81 87       	std	Z+9, r24	; 0x09
     258:	e4 0f       	add	r30, r20
     25a:	f1 1d       	adc	r31, r1
  ret |= Wire.read() << 8; // receive DATA
     25c:	40 81       	ld	r20, Z
     25e:	34 2b       	or	r19, r20
         return m_bufferIndex;
     }

     uint8_t read()
     {
         if (m_bufferReadIndex == m_bufferIndex)
     260:	89 17       	cp	r24, r25
     262:	89 f1       	breq	.+98     	; 0x2c6 <_ZN17Adafruit_MLX906146read16EhPj+0xe8>
             return 0;
        return m_buffer[m_bufferReadIndex++];
     264:	8f 5f       	subi	r24, 0xFF	; 255
     266:	f8 01       	movw	r30, r16
     268:	81 87       	std	Z+9, r24	; 0x09
     26a:	2d c0       	rjmp	.+90     	; 0x2c6 <_ZN17Adafruit_MLX906146read16EhPj+0xe8>
     26c:	20 e0       	ldi	r18, 0x00	; 0
     26e:	30 e0       	ldi	r19, 0x00	; 0
     270:	2a c0       	rjmp	.+84     	; 0x2c6 <_ZN17Adafruit_MLX906146read16EhPj+0xe8>
         if (i2c_start((address << 1) | I2C_READ) != 0)
             return 0;

        m_bufferIndex = 0;
         while (--quantity > 0) {
             m_buffer[m_bufferIndex++] = i2c_readAck();
     272:	81 e0       	ldi	r24, 0x01	; 1
     274:	f8 01       	movw	r30, r16
     276:	80 87       	std	Z+8, r24	; 0x08
     278:	0e 94 1d 06 	call	0xc3a	; 0xc3a <i2c_readAck>
     27c:	f8 01       	movw	r30, r16
     27e:	80 83       	st	Z, r24
     280:	c0 85       	ldd	r28, Z+8	; 0x08
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	8c 0f       	add	r24, r28
     286:	80 87       	std	Z+8, r24	; 0x08
     288:	0e 94 1d 06 	call	0xc3a	; 0xc3a <i2c_readAck>
     28c:	f8 01       	movw	r30, r16
     28e:	ec 0f       	add	r30, r28
     290:	f1 1d       	adc	r31, r1
     292:	80 83       	st	Z, r24
         }
         m_buffer[m_bufferIndex++] = i2c_readNak();
     294:	f8 01       	movw	r30, r16
     296:	c0 85       	ldd	r28, Z+8	; 0x08
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	8c 0f       	add	r24, r28
     29c:	80 87       	std	Z+8, r24	; 0x08
     29e:	0e 94 28 06 	call	0xc50	; 0xc50 <i2c_readNak>
     2a2:	f8 01       	movw	r30, r16
     2a4:	ec 0f       	add	r30, r28
     2a6:	f1 1d       	adc	r31, r1
     2a8:	80 83       	st	Z, r24
         m_bufferReadIndex = 0;
     2aa:	f8 01       	movw	r30, r16
     2ac:	11 86       	std	Z+9, r1	; 0x09

         if (stop)
             i2c_stop();
     2ae:	0e 94 07 06 	call	0xc0e	; 0xc0e <i2c_stop>
     2b2:	c1 cf       	rjmp	.-126    	; 0x236 <_ZN17Adafruit_MLX906146read16EhPj+0x58>
     {
        // quantity = Sensors::min(quantity, c_bufferSize);
         if (quantity == 0)
             return 0;

         if (i2c_start((address << 1) | I2C_READ) != 0)
     2b4:	f8 01       	movw	r30, r16
     2b6:	82 85       	ldd	r24, Z+10	; 0x0a
     2b8:	88 0f       	add	r24, r24
     2ba:	81 60       	ori	r24, 0x01	; 1
     2bc:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <i2c_start>
     2c0:	88 23       	and	r24, r24
     2c2:	b9 f2       	breq	.-82     	; 0x272 <_ZN17Adafruit_MLX906146read16EhPj+0x94>
     2c4:	b8 cf       	rjmp	.-144    	; 0x236 <_ZN17Adafruit_MLX906146read16EhPj+0x58>

  uint8_t pec = Wire.read();
  *d = ret;
     2c6:	f7 01       	movw	r30, r14
     2c8:	31 83       	std	Z+1, r19	; 0x01
     2ca:	20 83       	st	Z, r18
  return 0;
}
     2cc:	80 e0       	ldi	r24, 0x00	; 0
     2ce:	cf 91       	pop	r28
     2d0:	1f 91       	pop	r17
     2d2:	0f 91       	pop	r16
     2d4:	ff 90       	pop	r15
     2d6:	ef 90       	pop	r14
     2d8:	08 95       	ret

000002da <_ZN17Adafruit_MLX906148readTempEh>:

double Adafruit_MLX90614::readAmbientTempC(void) {
  return readTemp(MLX90614_TA);
}

float Adafruit_MLX90614::readTemp(uint8_t reg) {
     2da:	cf 93       	push	r28
     2dc:	df 93       	push	r29
     2de:	00 d0       	rcall	.+0      	; 0x2e0 <_ZN17Adafruit_MLX906148readTempEh+0x6>
     2e0:	cd b7       	in	r28, 0x3d	; 61
     2e2:	de b7       	in	r29, 0x3e	; 62
  float temp;
  uint16_t t;
  read16(reg, &t);
     2e4:	ae 01       	movw	r20, r28
     2e6:	4f 5f       	subi	r20, 0xFF	; 255
     2e8:	5f 4f       	sbci	r21, 0xFF	; 255
     2ea:	0e 94 ef 00 	call	0x1de	; 0x1de <_ZN17Adafruit_MLX906146read16EhPj>
  temp = t * .02;
     2ee:	69 81       	ldd	r22, Y+1	; 0x01
     2f0:	7a 81       	ldd	r23, Y+2	; 0x02
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <__floatunsisf>
     2fa:	2a e0       	ldi	r18, 0x0A	; 10
     2fc:	37 ed       	ldi	r19, 0xD7	; 215
     2fe:	43 ea       	ldi	r20, 0xA3	; 163
     300:	5c e3       	ldi	r21, 0x3C	; 60
     302:	0e 94 aa 08 	call	0x1154	; 0x1154 <__mulsf3>
  temp -= 273.15;
     306:	23 e3       	ldi	r18, 0x33	; 51
     308:	33 e9       	ldi	r19, 0x93	; 147
     30a:	48 e8       	ldi	r20, 0x88	; 136
     30c:	53 e4       	ldi	r21, 0x43	; 67
     30e:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <__subsf3>
  return temp;
}
     312:	0f 90       	pop	r0
     314:	0f 90       	pop	r0
     316:	df 91       	pop	r29
     318:	cf 91       	pop	r28
     31a:	08 95       	ret

0000031c <_ZN17Adafruit_MLX9061415readObjectTempCEv>:
Adafruit_MLX90614::Adafruit_MLX90614(uint8_t i2caddr) {
  _addr = i2caddr;
}
/*********************************************************************/
double Adafruit_MLX90614::readObjectTempC(void) {
  return readTemp(MLX90614_TOBJ1);
     31c:	67 e0       	ldi	r22, 0x07	; 7
     31e:	0e 94 6d 01 	call	0x2da	; 0x2da <_ZN17Adafruit_MLX906148readTempEh>
}
     322:	08 95       	ret

00000324 <_ZN17Adafruit_MLX9061414readEmissivityEv>:
	// Write that value to the ke register
	return writeEEPROM(MLX90614_EMISS, (int16_t)ke);
}

float Adafruit_MLX90614::readEmissivity(void)
{
     324:	cf 93       	push	r28
     326:	df 93       	push	r29
     328:	00 d0       	rcall	.+0      	; 0x32a <_ZN17Adafruit_MLX9061414readEmissivityEv+0x6>
     32a:	cd b7       	in	r28, 0x3d	; 61
     32c:	de b7       	in	r29, 0x3e	; 62
	uint16_t ke;
	if (read16(MLX90614_EMISS, &ke)) return 1; //return fail
     32e:	ae 01       	movw	r20, r28
     330:	4f 5f       	subi	r20, 0xFF	; 255
     332:	5f 4f       	sbci	r21, 0xFF	; 255
     334:	64 e2       	ldi	r22, 0x24	; 36
     336:	0e 94 ef 00 	call	0x1de	; 0x1de <_ZN17Adafruit_MLX906146read16EhPj>
     33a:	81 11       	cpse	r24, r1
     33c:	0d c0       	rjmp	.+26     	; 0x358 <_ZN17Adafruit_MLX9061414readEmissivityEv+0x34>
	
	// If we successfully read from the ke register
	// calculate the emissivity between 0.1 and 1.0:
	return (((float)ke) / 65535.0);
     33e:	69 81       	ldd	r22, Y+1	; 0x01
     340:	7a 81       	ldd	r23, Y+2	; 0x02
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <__floatunsisf>
     34a:	20 e0       	ldi	r18, 0x00	; 0
     34c:	3f ef       	ldi	r19, 0xFF	; 255
     34e:	4f e7       	ldi	r20, 0x7F	; 127
     350:	57 e4       	ldi	r21, 0x47	; 71
     352:	0e 94 52 07 	call	0xea4	; 0xea4 <__divsf3>
     356:	04 c0       	rjmp	.+8      	; 0x360 <_ZN17Adafruit_MLX9061414readEmissivityEv+0x3c>
}

float Adafruit_MLX90614::readEmissivity(void)
{
	uint16_t ke;
	if (read16(MLX90614_EMISS, &ke)) return 1; //return fail
     358:	60 e0       	ldi	r22, 0x00	; 0
     35a:	70 e0       	ldi	r23, 0x00	; 0
     35c:	80 e8       	ldi	r24, 0x80	; 128
     35e:	9f e3       	ldi	r25, 0x3F	; 63
	
	// If we successfully read from the ke register
	// calculate the emissivity between 0.1 and 1.0:
	return (((float)ke) / 65535.0);
}
     360:	0f 90       	pop	r0
     362:	0f 90       	pop	r0
     364:	df 91       	pop	r29
     366:	cf 91       	pop	r28
     368:	08 95       	ret

0000036a <_ZN17Adafruit_MLX906144crc8Ehh>:

uint8_t Adafruit_MLX90614::crc8 (uint8_t inCrc, uint8_t inData)
{
	uint8_t i;
	uint8_t data;
	data = inCrc ^ inData;
     36a:	86 2f       	mov	r24, r22
     36c:	84 27       	eor	r24, r20
     36e:	98 e0       	ldi	r25, 0x08	; 8
	for ( i = 0; i < 8; i++ )
	{
		if (( data & 0x80 ) != 0 )
		{
			data <<= 1;
			data ^= 0x07;
     370:	27 e0       	ldi	r18, 0x07	; 7
	uint8_t i;
	uint8_t data;
	data = inCrc ^ inData;
	for ( i = 0; i < 8; i++ )
	{
		if (( data & 0x80 ) != 0 )
     372:	88 23       	and	r24, r24
     374:	1c f4       	brge	.+6      	; 0x37c <_ZN17Adafruit_MLX906144crc8Ehh+0x12>
		{
			data <<= 1;
     376:	88 0f       	add	r24, r24
			data ^= 0x07;
     378:	82 27       	eor	r24, r18
     37a:	01 c0       	rjmp	.+2      	; 0x37e <_ZN17Adafruit_MLX906144crc8Ehh+0x14>
		}
		else
		{
			data <<= 1;
     37c:	88 0f       	add	r24, r24
     37e:	91 50       	subi	r25, 0x01	; 1
uint8_t Adafruit_MLX90614::crc8 (uint8_t inCrc, uint8_t inData)
{
	uint8_t i;
	uint8_t data;
	data = inCrc ^ inData;
	for ( i = 0; i < 8; i++ )
     380:	c1 f7       	brne	.-16     	; 0x372 <_ZN17Adafruit_MLX906144crc8Ehh+0x8>
		{
			data <<= 1;
		}
	}
	return data;
}
     382:	08 95       	ret

00000384 <_ZN17Adafruit_MLX906147write16Ehi>:
  uint8_t pec = Wire.read();
  *d = ret;
  return 0;
}
uint8_t Adafruit_MLX90614::write16(uint8_t reg, int16_t data)
{
     384:	df 92       	push	r13
     386:	ef 92       	push	r14
     388:	ff 92       	push	r15
     38a:	0f 93       	push	r16
     38c:	1f 93       	push	r17
     38e:	cf 93       	push	r28
     390:	df 93       	push	r29
     392:	8c 01       	movw	r16, r24
     394:	e6 2e       	mov	r14, r22
     396:	f4 2e       	mov	r15, r20
     398:	d5 2f       	mov	r29, r21
	uint8_t crc;
	uint8_t lsb = data & 0x00FF;
	uint8_t msb = (data >> 8);
	
	crc = crc8(0, (_addr << 1));
     39a:	fc 01       	movw	r30, r24
     39c:	c2 85       	ldd	r28, Z+10	; 0x0a
     39e:	cc 0f       	add	r28, r28
     3a0:	4c 2f       	mov	r20, r28
     3a2:	60 e0       	ldi	r22, 0x00	; 0
     3a4:	0e 94 b5 01 	call	0x36a	; 0x36a <_ZN17Adafruit_MLX906144crc8Ehh>
	crc = crc8(crc, reg);
     3a8:	4e 2d       	mov	r20, r14
     3aa:	68 2f       	mov	r22, r24
     3ac:	c8 01       	movw	r24, r16
     3ae:	0e 94 b5 01 	call	0x36a	; 0x36a <_ZN17Adafruit_MLX906144crc8Ehh>
	crc = crc8(crc, lsb);
     3b2:	4f 2d       	mov	r20, r15
     3b4:	68 2f       	mov	r22, r24
     3b6:	c8 01       	movw	r24, r16
     3b8:	0e 94 b5 01 	call	0x36a	; 0x36a <_ZN17Adafruit_MLX906144crc8Ehh>
	crc = crc8(crc, msb);
     3bc:	4d 2f       	mov	r20, r29
     3be:	68 2f       	mov	r22, r24
     3c0:	c8 01       	movw	r24, r16
     3c2:	0e 94 b5 01 	call	0x36a	; 0x36a <_ZN17Adafruit_MLX906144crc8Ehh>
     3c6:	d8 2e       	mov	r13, r24
    {
	    i2c_init();
    }
     void beginTransmission(uint8_t address)
     {
         m_bufferIndex = 0;
     3c8:	f8 01       	movw	r30, r16
     3ca:	10 86       	std	Z+8, r1	; 0x08

         i2c_start((address << 1) | I2C_WRITE);
     3cc:	8c 2f       	mov	r24, r28
     3ce:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <i2c_start>
     }

     void write(uint8_t byte)
     {
         if (m_bufferIndex == c_bufferSize)
     3d2:	f8 01       	movw	r30, r16
     3d4:	90 85       	ldd	r25, Z+8	; 0x08
     3d6:	98 30       	cpi	r25, 0x08	; 8
     3d8:	21 f1       	breq	.+72     	; 0x422 <_ZN17Adafruit_MLX906147write16Ehi+0x9e>
             return;

         m_buffer[m_bufferIndex++] = byte;
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	89 0f       	add	r24, r25
     3de:	80 87       	std	Z+8, r24	; 0x08
     3e0:	e9 0f       	add	r30, r25
     3e2:	f1 1d       	adc	r31, r1
     3e4:	e0 82       	st	Z, r14
         i2c_start((address << 1) | I2C_WRITE);
     }

     void write(uint8_t byte)
     {
         if (m_bufferIndex == c_bufferSize)
     3e6:	f8 01       	movw	r30, r16
     3e8:	90 85       	ldd	r25, Z+8	; 0x08
     3ea:	98 30       	cpi	r25, 0x08	; 8
     3ec:	f1 f0       	breq	.+60     	; 0x42a <_ZN17Adafruit_MLX906147write16Ehi+0xa6>
             return;

         m_buffer[m_bufferIndex++] = byte;
     3ee:	81 e0       	ldi	r24, 0x01	; 1
     3f0:	89 0f       	add	r24, r25
     3f2:	80 87       	std	Z+8, r24	; 0x08
     3f4:	e9 0f       	add	r30, r25
     3f6:	f1 1d       	adc	r31, r1
     3f8:	f0 82       	st	Z, r15
         i2c_start((address << 1) | I2C_WRITE);
     }

     void write(uint8_t byte)
     {
         if (m_bufferIndex == c_bufferSize)
     3fa:	f8 01       	movw	r30, r16
     3fc:	90 85       	ldd	r25, Z+8	; 0x08
     3fe:	98 30       	cpi	r25, 0x08	; 8
     400:	a1 f0       	breq	.+40     	; 0x42a <_ZN17Adafruit_MLX906147write16Ehi+0xa6>
             return;

         m_buffer[m_bufferIndex++] = byte;
     402:	81 e0       	ldi	r24, 0x01	; 1
     404:	89 0f       	add	r24, r25
     406:	80 87       	std	Z+8, r24	; 0x08
     408:	e9 0f       	add	r30, r25
     40a:	f1 1d       	adc	r31, r1
     40c:	d0 83       	st	Z, r29
         i2c_start((address << 1) | I2C_WRITE);
     }

     void write(uint8_t byte)
     {
         if (m_bufferIndex == c_bufferSize)
     40e:	f8 01       	movw	r30, r16
     410:	90 85       	ldd	r25, Z+8	; 0x08
     412:	98 30       	cpi	r25, 0x08	; 8
     414:	51 f0       	breq	.+20     	; 0x42a <_ZN17Adafruit_MLX906147write16Ehi+0xa6>
             return;

         m_buffer[m_bufferIndex++] = byte;
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	89 0f       	add	r24, r25
     41a:	80 87       	std	Z+8, r24	; 0x08
     41c:	e9 0f       	add	r30, r25
     41e:	f1 1d       	adc	r31, r1
     420:	d0 82       	st	Z, r13
    }

    uint8_t endTransmission(bool stop = true)
    {
         for (uint8_t index = 0; index < m_bufferIndex; ++index) {
     422:	f8 01       	movw	r30, r16
     424:	80 85       	ldd	r24, Z+8	; 0x08
     426:	88 23       	and	r24, r24
     428:	71 f0       	breq	.+28     	; 0x446 <_ZN17Adafruit_MLX906147write16Ehi+0xc2>
  uint8_t pec = Wire.read();
  *d = ret;
  return 0;
}
uint8_t Adafruit_MLX90614::write16(uint8_t reg, int16_t data)
{
     42a:	c0 e0       	ldi	r28, 0x00	; 0
             if (i2c_write(m_buffer[index]) != 0)
     42c:	f8 01       	movw	r30, r16
     42e:	ec 0f       	add	r30, r28
     430:	f1 1d       	adc	r31, r1
     432:	80 81       	ld	r24, Z
     434:	0e 94 0b 06 	call	0xc16	; 0xc16 <i2c_write>
     438:	81 11       	cpse	r24, r1
     43a:	09 c0       	rjmp	.+18     	; 0x44e <_ZN17Adafruit_MLX906147write16Ehi+0xca>
         m_buffer[m_bufferIndex++] = byte;
    }

    uint8_t endTransmission(bool stop = true)
    {
         for (uint8_t index = 0; index < m_bufferIndex; ++index) {
     43c:	cf 5f       	subi	r28, 0xFF	; 255
     43e:	f8 01       	movw	r30, r16
     440:	80 85       	ldd	r24, Z+8	; 0x08
     442:	c8 17       	cp	r28, r24
     444:	98 f3       	brcs	.-26     	; 0x42c <_ZN17Adafruit_MLX906147write16Ehi+0xa8>
             if (i2c_write(m_buffer[index]) != 0)
                 return 1;
         }

        if (stop)i2c_stop();
     446:	0e 94 07 06 	call	0xc0e	; 0xc0e <i2c_stop>
			 
		return 0;	
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	01 c0       	rjmp	.+2      	; 0x450 <_ZN17Adafruit_MLX906147write16Ehi+0xcc>

    uint8_t endTransmission(bool stop = true)
    {
         for (uint8_t index = 0; index < m_bufferIndex; ++index) {
             if (i2c_write(m_buffer[index]) != 0)
                 return 1;
     44e:	81 e0       	ldi	r24, 0x01	; 1
	Wire.write(reg);
	Wire.write(lsb);
	Wire.write(msb);
	Wire.write(crc);
	return Wire.endTransmission(true);
}
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	1f 91       	pop	r17
     456:	0f 91       	pop	r16
     458:	ff 90       	pop	r15
     45a:	ef 90       	pop	r14
     45c:	df 90       	pop	r13
     45e:	08 95       	ret

00000460 <_ZN17Adafruit_MLX9061411writeEEPROMEhi>:
uint8_t Adafruit_MLX90614::writeEEPROM(uint8_t reg, int16_t data)
{
     460:	ef 92       	push	r14
     462:	ff 92       	push	r15
     464:	1f 93       	push	r17
     466:	cf 93       	push	r28
     468:	df 93       	push	r29
     46a:	ec 01       	movw	r28, r24
     46c:	16 2f       	mov	r17, r22
     46e:	7a 01       	movw	r14, r20
	// Clear out EEPROM first:
	if (write16(reg, 0) != 0)
     470:	40 e0       	ldi	r20, 0x00	; 0
     472:	50 e0       	ldi	r21, 0x00	; 0
     474:	0e 94 c2 01 	call	0x384	; 0x384 <_ZN17Adafruit_MLX906147write16Ehi>
     478:	81 11       	cpse	r24, r1
     47a:	17 c0       	rjmp	.+46     	; 0x4aa <_ZN17Adafruit_MLX9061411writeEEPROMEhi+0x4a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     47c:	8f e1       	ldi	r24, 0x1F	; 31
     47e:	9e e4       	ldi	r25, 0x4E	; 78
     480:	01 97       	sbiw	r24, 0x01	; 1
     482:	f1 f7       	brne	.-4      	; 0x480 <_ZN17Adafruit_MLX9061411writeEEPROMEhi+0x20>
     484:	00 c0       	rjmp	.+0      	; 0x486 <_ZN17Adafruit_MLX9061411writeEEPROMEhi+0x26>
     486:	00 00       	nop
	return 1; // If the write failed, return 1
	_delay_ms(5); // Delay tErase
	
	uint8_t i2cRet = write16(reg, data);
     488:	a7 01       	movw	r20, r14
     48a:	61 2f       	mov	r22, r17
     48c:	ce 01       	movw	r24, r28
     48e:	0e 94 c2 01 	call	0x384	; 0x384 <_ZN17Adafruit_MLX906147write16Ehi>
     492:	98 2f       	mov	r25, r24
     494:	ef e1       	ldi	r30, 0x1F	; 31
     496:	fe e4       	ldi	r31, 0x4E	; 78
     498:	31 97       	sbiw	r30, 0x01	; 1
     49a:	f1 f7       	brne	.-4      	; 0x498 <_ZN17Adafruit_MLX9061411writeEEPROMEhi+0x38>
     49c:	00 c0       	rjmp	.+0      	; 0x49e <_ZN17Adafruit_MLX9061411writeEEPROMEhi+0x3e>
     49e:	00 00       	nop
	_delay_ms(5); // Delay tWrite
	
	if (i2cRet == 0)
     4a0:	81 e0       	ldi	r24, 0x01	; 1
     4a2:	91 11       	cpse	r25, r1
     4a4:	03 c0       	rjmp	.+6      	; 0x4ac <_ZN17Adafruit_MLX9061411writeEEPROMEhi+0x4c>
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	01 c0       	rjmp	.+2      	; 0x4ac <_ZN17Adafruit_MLX9061411writeEEPROMEhi+0x4c>
}
uint8_t Adafruit_MLX90614::writeEEPROM(uint8_t reg, int16_t data)
{
	// Clear out EEPROM first:
	if (write16(reg, 0) != 0)
	return 1; // If the write failed, return 1
     4aa:	81 e0       	ldi	r24, 0x01	; 1
	
	if (i2cRet == 0)
	return 0;
	else
	return 1;
}
     4ac:	df 91       	pop	r29
     4ae:	cf 91       	pop	r28
     4b0:	1f 91       	pop	r17
     4b2:	ff 90       	pop	r15
     4b4:	ef 90       	pop	r14
     4b6:	08 95       	ret

000004b8 <_ZN17Adafruit_MLX9061413setEmissivityEf>:
  temp -= 273.15;
  return temp;
}
/*********************************************************************/
uint8_t Adafruit_MLX90614::setEmissivity(float emis)
{
     4b8:	cf 92       	push	r12
     4ba:	df 92       	push	r13
     4bc:	ef 92       	push	r14
     4be:	ff 92       	push	r15
     4c0:	cf 93       	push	r28
     4c2:	df 93       	push	r29
     4c4:	ec 01       	movw	r28, r24
     4c6:	6a 01       	movw	r12, r20
     4c8:	7b 01       	movw	r14, r22
	// Make sure emissivity is between 0.1 and 1.0
	if ((emis > 1.0) || (emis < 0.1)) return 0; // Return fail if not
     4ca:	20 e0       	ldi	r18, 0x00	; 0
     4cc:	30 e0       	ldi	r19, 0x00	; 0
     4ce:	40 e8       	ldi	r20, 0x80	; 128
     4d0:	5f e3       	ldi	r21, 0x3F	; 63
     4d2:	c7 01       	movw	r24, r14
     4d4:	b6 01       	movw	r22, r12
     4d6:	0e 94 a5 08 	call	0x114a	; 0x114a <__gesf2>
     4da:	18 16       	cp	r1, r24
     4dc:	0c f1       	brlt	.+66     	; 0x520 <_ZN17Adafruit_MLX9061413setEmissivityEf+0x68>
     4de:	2d ec       	ldi	r18, 0xCD	; 205
     4e0:	3c ec       	ldi	r19, 0xCC	; 204
     4e2:	4c ec       	ldi	r20, 0xCC	; 204
     4e4:	5d e3       	ldi	r21, 0x3D	; 61
     4e6:	c7 01       	movw	r24, r14
     4e8:	b6 01       	movw	r22, r12
     4ea:	0e 94 4d 07 	call	0xe9a	; 0xe9a <__cmpsf2>
     4ee:	88 23       	and	r24, r24
     4f0:	cc f0       	brlt	.+50     	; 0x524 <_ZN17Adafruit_MLX9061413setEmissivityEf+0x6c>
	
	// Calculate the raw 16-bit value:
	uint16_t ke = uint16_t(65535.0 * emis);
     4f2:	20 e0       	ldi	r18, 0x00	; 0
     4f4:	3f ef       	ldi	r19, 0xFF	; 255
     4f6:	4f e7       	ldi	r20, 0x7F	; 127
     4f8:	57 e4       	ldi	r21, 0x47	; 71
     4fa:	c7 01       	movw	r24, r14
     4fc:	b6 01       	movw	r22, r12
     4fe:	0e 94 aa 08 	call	0x1154	; 0x1154 <__mulsf3>
     502:	0e 94 c4 07 	call	0xf88	; 0xf88 <__fixunssfsi>
#include "util/delay.h"

/*********************************************************************/
template<typename V>
inline V constrain(V x, V a, V b) {
	return((x < a)?a:(b<x)?b:x);
     506:	61 15       	cp	r22, r1
     508:	20 e2       	ldi	r18, 0x20	; 32
     50a:	72 07       	cpc	r23, r18
     50c:	10 f0       	brcs	.+4      	; 0x512 <_ZN17Adafruit_MLX9061413setEmissivityEf+0x5a>
     50e:	ab 01       	movw	r20, r22
     510:	02 c0       	rjmp	.+4      	; 0x516 <_ZN17Adafruit_MLX9061413setEmissivityEf+0x5e>
     512:	40 e0       	ldi	r20, 0x00	; 0
     514:	50 e2       	ldi	r21, 0x20	; 32
	// Calculate the raw 16-bit value:
	uint16_t ke = uint16_t(65535.0 * emis);
	ke = constrain<uint16_t>(ke, 0x2000, 0xFFFF);

	// Write that value to the ke register
	return writeEEPROM(MLX90614_EMISS, (int16_t)ke);
     516:	64 e2       	ldi	r22, 0x24	; 36
     518:	ce 01       	movw	r24, r28
     51a:	0e 94 30 02 	call	0x460	; 0x460 <_ZN17Adafruit_MLX9061411writeEEPROMEhi>
     51e:	03 c0       	rjmp	.+6      	; 0x526 <_ZN17Adafruit_MLX9061413setEmissivityEf+0x6e>
}
/*********************************************************************/
uint8_t Adafruit_MLX90614::setEmissivity(float emis)
{
	// Make sure emissivity is between 0.1 and 1.0
	if ((emis > 1.0) || (emis < 0.1)) return 0; // Return fail if not
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	01 c0       	rjmp	.+2      	; 0x526 <_ZN17Adafruit_MLX9061413setEmissivityEf+0x6e>
     524:	80 e0       	ldi	r24, 0x00	; 0
	uint16_t ke = uint16_t(65535.0 * emis);
	ke = constrain<uint16_t>(ke, 0x2000, 0xFFFF);

	// Write that value to the ke register
	return writeEEPROM(MLX90614_EMISS, (int16_t)ke);
}
     526:	df 91       	pop	r29
     528:	cf 91       	pop	r28
     52a:	ff 90       	pop	r15
     52c:	ef 90       	pop	r14
     52e:	df 90       	pop	r13
     530:	cf 90       	pop	r12
     532:	08 95       	ret

00000534 <__vector_14>:
//Adafruit_MLX90614 MLX_5d(0x5D);

volatile unsigned long int count = 0; 
float tol = 1; 
ISR(TIMER0_COMPA_vect)
{
     534:	1f 92       	push	r1
     536:	0f 92       	push	r0
     538:	0f b6       	in	r0, 0x3f	; 63
     53a:	0f 92       	push	r0
     53c:	11 24       	eor	r1, r1
     53e:	8f 93       	push	r24
     540:	9f 93       	push	r25
     542:	af 93       	push	r26
     544:	bf 93       	push	r27
	count++;
     546:	80 91 66 01 	lds	r24, 0x0166
     54a:	90 91 67 01 	lds	r25, 0x0167
     54e:	a0 91 68 01 	lds	r26, 0x0168
     552:	b0 91 69 01 	lds	r27, 0x0169
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	a1 1d       	adc	r26, r1
     55a:	b1 1d       	adc	r27, r1
     55c:	80 93 66 01 	sts	0x0166, r24
     560:	90 93 67 01 	sts	0x0167, r25
     564:	a0 93 68 01 	sts	0x0168, r26
     568:	b0 93 69 01 	sts	0x0169, r27
}
     56c:	bf 91       	pop	r27
     56e:	af 91       	pop	r26
     570:	9f 91       	pop	r25
     572:	8f 91       	pop	r24
     574:	0f 90       	pop	r0
     576:	0f be       	out	0x3f, r0	; 63
     578:	0f 90       	pop	r0
     57a:	1f 90       	pop	r1
     57c:	18 95       	reti

0000057e <__vector_13>:

ISR(TIMER1_OVF_vect){
     57e:	1f 92       	push	r1
     580:	0f 92       	push	r0
     582:	0f b6       	in	r0, 0x3f	; 63
     584:	0f 92       	push	r0
     586:	11 24       	eor	r1, r1
	//PORTB ^= _BV(PORTB5);
	//TIFR1 = 0;
}
     588:	0f 90       	pop	r0
     58a:	0f be       	out	0x3f, r0	; 63
     58c:	0f 90       	pop	r0
     58e:	1f 90       	pop	r1
     590:	18 95       	reti

00000592 <_Z5setupv>:
{
	return count;
}
/*********************************************************************/
void setup(void)
{		
     592:	cf 93       	push	r28
	cli();
     594:	f8 94       	cli
	#ifdef _DEBUG
		uint8_t rflag = MCUSR;
     596:	c4 b7       	in	r28, 0x34	; 52
		MCUSR = 0;
     598:	14 be       	out	0x34, r1	; 52
	#endif // _DEBUG
	
	//DDRB |= _BV(PORTB5);
	//PORTB &= ~_BV(PORTB5);
	
	TCNT0 = 0;
     59a:	16 bc       	out	0x26, r1	; 38
	TCNT1 = 0;
     59c:	10 92 85 00 	sts	0x0085, r1
     5a0:	10 92 84 00 	sts	0x0084, r1
	TCCR0A |= (1<<WGM01);
     5a4:	84 b5       	in	r24, 0x24	; 36
     5a6:	82 60       	ori	r24, 0x02	; 2
     5a8:	84 bd       	out	0x24, r24	; 36
	OCR0A = 249;
     5aa:	89 ef       	ldi	r24, 0xF9	; 249
     5ac:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1 << OCIE0A);
     5ae:	ee e6       	ldi	r30, 0x6E	; 110
     5b0:	f0 e0       	ldi	r31, 0x00	; 0
     5b2:	80 81       	ld	r24, Z
     5b4:	82 60       	ori	r24, 0x02	; 2
     5b6:	80 83       	st	Z, r24
	TIMSK1 |= _BV(TOIE1);
     5b8:	ef e6       	ldi	r30, 0x6F	; 111
     5ba:	f0 e0       	ldi	r31, 0x00	; 0
     5bc:	80 81       	ld	r24, Z
     5be:	81 60       	ori	r24, 0x01	; 1
     5c0:	80 83       	st	Z, r24
	TCCR0B |= (1<<CS01) | (1<<CS00);
     5c2:	85 b5       	in	r24, 0x25	; 37
     5c4:	83 60       	ori	r24, 0x03	; 3
     5c6:	85 bd       	out	0x25, r24	; 37
	TCCR1B |= (1<<CS11);
     5c8:	e1 e8       	ldi	r30, 0x81	; 129
     5ca:	f0 e0       	ldi	r31, 0x00	; 0
     5cc:	80 81       	ld	r24, Z
     5ce:	82 60       	ori	r24, 0x02	; 2
     5d0:	80 83       	st	Z, r24
	sei();
     5d2:	78 94       	sei
	Serial.init(9600);
     5d4:	60 e8       	ldi	r22, 0x80	; 128
     5d6:	75 e2       	ldi	r23, 0x25	; 37
     5d8:	80 e8       	ldi	r24, 0x80	; 128
     5da:	91 e0       	ldi	r25, 0x01	; 1
     5dc:	0e 94 33 06 	call	0xc66	; 0xc66 <_ZN5USART4initEi>
	#ifdef _DEBUG
		Serial.send( rflag ,HEX);
     5e0:	40 e1       	ldi	r20, 0x10	; 16
     5e2:	50 e0       	ldi	r21, 0x00	; 0
     5e4:	6c 2f       	mov	r22, r28
     5e6:	80 e8       	ldi	r24, 0x80	; 128
     5e8:	91 e0       	ldi	r25, 0x01	; 1
     5ea:	0e 94 9a 06 	call	0xd34	; 0xd34 <_ZN5USART4sendEhi>
		//void send_int(int d);
		void send(double data, int base);
		//void send(uint32_t str);
			
		void sendln(void) {send("\r\n");};
		void sendln(const char* c) {send(c);send("\r\n");};
     5ee:	64 e0       	ldi	r22, 0x04	; 4
     5f0:	71 e0       	ldi	r23, 0x01	; 1
     5f2:	80 e8       	ldi	r24, 0x80	; 128
     5f4:	91 e0       	ldi	r25, 0x01	; 1
     5f6:	0e 94 85 06 	call	0xd0a	; 0xd0a <_ZN5USART4sendEPKc>
     5fa:	66 e2       	ldi	r22, 0x26	; 38
     5fc:	71 e0       	ldi	r23, 0x01	; 1
     5fe:	80 e8       	ldi	r24, 0x80	; 128
     600:	91 e0       	ldi	r25, 0x01	; 1
     602:	0e 94 85 06 	call	0xd0a	; 0xd0a <_ZN5USART4sendEPKc>
		Serial.sendln("> Booting...");	
	#endif // _DEBUG
}
     606:	cf 91       	pop	r28
     608:	08 95       	ret

0000060a <_Z11displayTempPd>:
/*********************************************************************/
/*********************************************************************/
uint8_t displayTemp(double * t){	
     60a:	cf 92       	push	r12
     60c:	df 92       	push	r13
     60e:	ef 92       	push	r14
     610:	ff 92       	push	r15
     612:	0f 93       	push	r16
     614:	1f 93       	push	r17
     616:	cf 93       	push	r28
     618:	df 93       	push	r29
     61a:	cd b7       	in	r28, 0x3d	; 61
     61c:	de b7       	in	r29, 0x3e	; 62
     61e:	cd 57       	subi	r28, 0x7D	; 125
     620:	d1 09       	sbc	r29, r1
     622:	0f b6       	in	r0, 0x3f	; 63
     624:	f8 94       	cli
     626:	de bf       	out	0x3e, r29	; 62
     628:	0f be       	out	0x3f, r0	; 63
     62a:	cd bf       	out	0x3d, r28	; 61
     62c:	8c 01       	movw	r16, r24
	char str[25], str_out[100]= "";
     62e:	19 82       	std	Y+1, r1	; 0x01
     630:	1a 82       	std	Y+2, r1	; 0x02
     632:	1b 82       	std	Y+3, r1	; 0x03
     634:	1c 82       	std	Y+4, r1	; 0x04
     636:	fe 01       	movw	r30, r28
     638:	35 96       	adiw	r30, 0x05	; 5
     63a:	80 e6       	ldi	r24, 0x60	; 96
     63c:	df 01       	movw	r26, r30
     63e:	1d 92       	st	X+, r1
     640:	8a 95       	dec	r24
     642:	e9 f7       	brne	.-6      	; 0x63e <_Z11displayTempPd+0x34>
	
	sprintf(str, "T%d,%0.1f\r\n", 1, t[0]);
     644:	f8 01       	movw	r30, r16
     646:	83 81       	ldd	r24, Z+3	; 0x03
     648:	8f 93       	push	r24
     64a:	82 81       	ldd	r24, Z+2	; 0x02
     64c:	8f 93       	push	r24
     64e:	81 81       	ldd	r24, Z+1	; 0x01
     650:	8f 93       	push	r24
     652:	80 81       	ld	r24, Z
     654:	8f 93       	push	r24
     656:	1f 92       	push	r1
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	8f 93       	push	r24
     65c:	0f 2e       	mov	r0, r31
     65e:	f1 e1       	ldi	r31, 0x11	; 17
     660:	cf 2e       	mov	r12, r31
     662:	f1 e0       	ldi	r31, 0x01	; 1
     664:	df 2e       	mov	r13, r31
     666:	f0 2d       	mov	r31, r0
     668:	df 92       	push	r13
     66a:	cf 92       	push	r12
     66c:	7e 01       	movw	r14, r28
     66e:	f5 e6       	ldi	r31, 0x65	; 101
     670:	ef 0e       	add	r14, r31
     672:	f1 1c       	adc	r15, r1
     674:	ff 92       	push	r15
     676:	ef 92       	push	r14
     678:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <sprintf>
	strcat(str_out,str);
     67c:	b7 01       	movw	r22, r14
     67e:	ce 01       	movw	r24, r28
     680:	01 96       	adiw	r24, 0x01	; 1
     682:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <strcat>

	sprintf(str, "T%d,%0.1f\r\n", 2, t[1]);
     686:	d8 01       	movw	r26, r16
     688:	17 96       	adiw	r26, 0x07	; 7
     68a:	8c 91       	ld	r24, X
     68c:	17 97       	sbiw	r26, 0x07	; 7
     68e:	8f 93       	push	r24
     690:	16 96       	adiw	r26, 0x06	; 6
     692:	8c 91       	ld	r24, X
     694:	16 97       	sbiw	r26, 0x06	; 6
     696:	8f 93       	push	r24
     698:	15 96       	adiw	r26, 0x05	; 5
     69a:	8c 91       	ld	r24, X
     69c:	15 97       	sbiw	r26, 0x05	; 5
     69e:	8f 93       	push	r24
     6a0:	14 96       	adiw	r26, 0x04	; 4
     6a2:	8c 91       	ld	r24, X
     6a4:	8f 93       	push	r24
     6a6:	1f 92       	push	r1
     6a8:	82 e0       	ldi	r24, 0x02	; 2
     6aa:	8f 93       	push	r24
     6ac:	df 92       	push	r13
     6ae:	cf 92       	push	r12
     6b0:	ff 92       	push	r15
     6b2:	ef 92       	push	r14
     6b4:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <sprintf>
	strcat(str_out,str);
     6b8:	b7 01       	movw	r22, r14
     6ba:	ce 01       	movw	r24, r28
     6bc:	01 96       	adiw	r24, 0x01	; 1
     6be:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <strcat>
	strcat(str_out,str);
	
	sprintf(str, "T%d,%0.1f\r\n", 4, t[3]);
	strcat(str_out,str);*/
	
	Serial.send(str_out);
     6c2:	be 01       	movw	r22, r28
     6c4:	6f 5f       	subi	r22, 0xFF	; 255
     6c6:	7f 4f       	sbci	r23, 0xFF	; 255
     6c8:	80 e8       	ldi	r24, 0x80	; 128
     6ca:	91 e0       	ldi	r25, 0x01	; 1
     6cc:	0e 94 85 06 	call	0xd0a	; 0xd0a <_ZN5USART4sendEPKc>
	return 0;
     6d0:	0f b6       	in	r0, 0x3f	; 63
     6d2:	f8 94       	cli
     6d4:	de bf       	out	0x3e, r29	; 62
     6d6:	0f be       	out	0x3f, r0	; 63
     6d8:	cd bf       	out	0x3d, r28	; 61
}
     6da:	80 e0       	ldi	r24, 0x00	; 0
     6dc:	c3 58       	subi	r28, 0x83	; 131
     6de:	df 4f       	sbci	r29, 0xFF	; 255
     6e0:	0f b6       	in	r0, 0x3f	; 63
     6e2:	f8 94       	cli
     6e4:	de bf       	out	0x3e, r29	; 62
     6e6:	0f be       	out	0x3f, r0	; 63
     6e8:	cd bf       	out	0x3d, r28	; 61
     6ea:	df 91       	pop	r29
     6ec:	cf 91       	pop	r28
     6ee:	1f 91       	pop	r17
     6f0:	0f 91       	pop	r16
     6f2:	ff 90       	pop	r15
     6f4:	ef 90       	pop	r14
     6f6:	df 90       	pop	r13
     6f8:	cf 90       	pop	r12
     6fa:	08 95       	ret

000006fc <_Z12displayEmissPd>:
/*********************************************************************/
uint8_t displayEmiss(double * e){
     6fc:	cf 92       	push	r12
     6fe:	df 92       	push	r13
     700:	ef 92       	push	r14
     702:	ff 92       	push	r15
     704:	0f 93       	push	r16
     706:	1f 93       	push	r17
     708:	cf 93       	push	r28
     70a:	df 93       	push	r29
     70c:	cd b7       	in	r28, 0x3d	; 61
     70e:	de b7       	in	r29, 0x3e	; 62
     710:	cd 57       	subi	r28, 0x7D	; 125
     712:	d1 09       	sbc	r29, r1
     714:	0f b6       	in	r0, 0x3f	; 63
     716:	f8 94       	cli
     718:	de bf       	out	0x3e, r29	; 62
     71a:	0f be       	out	0x3f, r0	; 63
     71c:	cd bf       	out	0x3d, r28	; 61
     71e:	8c 01       	movw	r16, r24
	char str[25], str_out[100] = "";
     720:	19 82       	std	Y+1, r1	; 0x01
     722:	1a 82       	std	Y+2, r1	; 0x02
     724:	1b 82       	std	Y+3, r1	; 0x03
     726:	1c 82       	std	Y+4, r1	; 0x04
     728:	fe 01       	movw	r30, r28
     72a:	35 96       	adiw	r30, 0x05	; 5
     72c:	80 e6       	ldi	r24, 0x60	; 96
     72e:	df 01       	movw	r26, r30
     730:	1d 92       	st	X+, r1
     732:	8a 95       	dec	r24
     734:	e9 f7       	brne	.-6      	; 0x730 <_Z12displayEmissPd+0x34>
	
	sprintf(str, "E%d,%0.1f\r\n", 1, e[0]);
     736:	f8 01       	movw	r30, r16
     738:	83 81       	ldd	r24, Z+3	; 0x03
     73a:	8f 93       	push	r24
     73c:	82 81       	ldd	r24, Z+2	; 0x02
     73e:	8f 93       	push	r24
     740:	81 81       	ldd	r24, Z+1	; 0x01
     742:	8f 93       	push	r24
     744:	80 81       	ld	r24, Z
     746:	8f 93       	push	r24
     748:	1f 92       	push	r1
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	8f 93       	push	r24
     74e:	0f 2e       	mov	r0, r31
     750:	fd e1       	ldi	r31, 0x1D	; 29
     752:	cf 2e       	mov	r12, r31
     754:	f1 e0       	ldi	r31, 0x01	; 1
     756:	df 2e       	mov	r13, r31
     758:	f0 2d       	mov	r31, r0
     75a:	df 92       	push	r13
     75c:	cf 92       	push	r12
     75e:	7e 01       	movw	r14, r28
     760:	f5 e6       	ldi	r31, 0x65	; 101
     762:	ef 0e       	add	r14, r31
     764:	f1 1c       	adc	r15, r1
     766:	ff 92       	push	r15
     768:	ef 92       	push	r14
     76a:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <sprintf>
	strcat(str_out,str);
     76e:	b7 01       	movw	r22, r14
     770:	ce 01       	movw	r24, r28
     772:	01 96       	adiw	r24, 0x01	; 1
     774:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <strcat>

	sprintf(str, "E%d,%0.1f\r\n", 2, e[1]);
     778:	d8 01       	movw	r26, r16
     77a:	17 96       	adiw	r26, 0x07	; 7
     77c:	8c 91       	ld	r24, X
     77e:	17 97       	sbiw	r26, 0x07	; 7
     780:	8f 93       	push	r24
     782:	16 96       	adiw	r26, 0x06	; 6
     784:	8c 91       	ld	r24, X
     786:	16 97       	sbiw	r26, 0x06	; 6
     788:	8f 93       	push	r24
     78a:	15 96       	adiw	r26, 0x05	; 5
     78c:	8c 91       	ld	r24, X
     78e:	15 97       	sbiw	r26, 0x05	; 5
     790:	8f 93       	push	r24
     792:	14 96       	adiw	r26, 0x04	; 4
     794:	8c 91       	ld	r24, X
     796:	8f 93       	push	r24
     798:	1f 92       	push	r1
     79a:	82 e0       	ldi	r24, 0x02	; 2
     79c:	8f 93       	push	r24
     79e:	df 92       	push	r13
     7a0:	cf 92       	push	r12
     7a2:	ff 92       	push	r15
     7a4:	ef 92       	push	r14
     7a6:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <sprintf>
	strcat(str_out,str);
     7aa:	b7 01       	movw	r22, r14
     7ac:	ce 01       	movw	r24, r28
     7ae:	01 96       	adiw	r24, 0x01	; 1
     7b0:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <strcat>
	strcat(str_out,str);
	
	sprintf(str, "E%d,%0.1f\r\n", 4, e[3]);
	strcat(str_out,str);*/
	
	Serial.send(str_out);
     7b4:	be 01       	movw	r22, r28
     7b6:	6f 5f       	subi	r22, 0xFF	; 255
     7b8:	7f 4f       	sbci	r23, 0xFF	; 255
     7ba:	80 e8       	ldi	r24, 0x80	; 128
     7bc:	91 e0       	ldi	r25, 0x01	; 1
     7be:	0e 94 85 06 	call	0xd0a	; 0xd0a <_ZN5USART4sendEPKc>
	return 0;
     7c2:	0f b6       	in	r0, 0x3f	; 63
     7c4:	f8 94       	cli
     7c6:	de bf       	out	0x3e, r29	; 62
     7c8:	0f be       	out	0x3f, r0	; 63
     7ca:	cd bf       	out	0x3d, r28	; 61
}
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	c3 58       	subi	r28, 0x83	; 131
     7d0:	df 4f       	sbci	r29, 0xFF	; 255
     7d2:	0f b6       	in	r0, 0x3f	; 63
     7d4:	f8 94       	cli
     7d6:	de bf       	out	0x3e, r29	; 62
     7d8:	0f be       	out	0x3f, r0	; 63
     7da:	cd bf       	out	0x3d, r28	; 61
     7dc:	df 91       	pop	r29
     7de:	cf 91       	pop	r28
     7e0:	1f 91       	pop	r17
     7e2:	0f 91       	pop	r16
     7e4:	ff 90       	pop	r15
     7e6:	ef 90       	pop	r14
     7e8:	df 90       	pop	r13
     7ea:	cf 90       	pop	r12
     7ec:	08 95       	ret

000007ee <_Z13IR_sensorReadPd>:
/*********************************************************************/
void IR_sensorRead(double * t){
     7ee:	cf 93       	push	r28
     7f0:	df 93       	push	r29
     7f2:	ec 01       	movw	r28, r24
	//Read 0x5A
	t[0] = MLX_5a.readObjectTempC();
     7f4:	85 e7       	ldi	r24, 0x75	; 117
     7f6:	91 e0       	ldi	r25, 0x01	; 1
     7f8:	0e 94 8e 01 	call	0x31c	; 0x31c <_ZN17Adafruit_MLX9061415readObjectTempCEv>
     7fc:	68 83       	st	Y, r22
     7fe:	79 83       	std	Y+1, r23	; 0x01
     800:	8a 83       	std	Y+2, r24	; 0x02
     802:	9b 83       	std	Y+3, r25	; 0x03
	//Read 0x5B
	t[1] = MLX_5b.readObjectTempC();
     804:	8a e6       	ldi	r24, 0x6A	; 106
     806:	91 e0       	ldi	r25, 0x01	; 1
     808:	0e 94 8e 01 	call	0x31c	; 0x31c <_ZN17Adafruit_MLX9061415readObjectTempCEv>
     80c:	6c 83       	std	Y+4, r22	; 0x04
     80e:	7d 83       	std	Y+5, r23	; 0x05
     810:	8e 83       	std	Y+6, r24	; 0x06
     812:	9f 83       	std	Y+7, r25	; 0x07
	//Read 0x5C
	//t[2] = MLX_5c.readObjectTempC();
	//Read 0x5D
	//t[3] = MLX_5d.readObjectTempC();
}
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	08 95       	ret

0000081a <_Z11changeEmissP17Adafruit_MLX90614dd>:
/*********************************************************************/
float changeEmiss(Adafruit_MLX90614 * device, double caltemp, double currenttemp){
     81a:	4f 92       	push	r4
     81c:	5f 92       	push	r5
     81e:	6f 92       	push	r6
     820:	7f 92       	push	r7
     822:	8f 92       	push	r8
     824:	9f 92       	push	r9
     826:	af 92       	push	r10
     828:	bf 92       	push	r11
     82a:	cf 92       	push	r12
     82c:	df 92       	push	r13
     82e:	ef 92       	push	r14
     830:	ff 92       	push	r15
     832:	0f 93       	push	r16
     834:	1f 93       	push	r17
     836:	cf 93       	push	r28
     838:	df 93       	push	r29
     83a:	ec 01       	movw	r28, r24
     83c:	4a 01       	movw	r8, r20
     83e:	5b 01       	movw	r10, r22
     840:	28 01       	movw	r4, r16
     842:	39 01       	movw	r6, r18
	float emiss = device->readEmissivity();
     844:	0e 94 92 01 	call	0x324	; 0x324 <_ZN17Adafruit_MLX9061414readEmissivityEv>
     848:	6b 01       	movw	r12, r22
     84a:	7c 01       	movw	r14, r24
	if (caltemp < currenttemp) emiss += .05;
     84c:	a3 01       	movw	r20, r6
     84e:	92 01       	movw	r18, r4
     850:	c5 01       	movw	r24, r10
     852:	b4 01       	movw	r22, r8
     854:	0e 94 4d 07 	call	0xe9a	; 0xe9a <__cmpsf2>
     858:	88 23       	and	r24, r24
     85a:	5c f4       	brge	.+22     	; 0x872 <_Z11changeEmissP17Adafruit_MLX90614dd+0x58>
     85c:	2d ec       	ldi	r18, 0xCD	; 205
     85e:	3c ec       	ldi	r19, 0xCC	; 204
     860:	4c e4       	ldi	r20, 0x4C	; 76
     862:	5d e3       	ldi	r21, 0x3D	; 61
     864:	c7 01       	movw	r24, r14
     866:	b6 01       	movw	r22, r12
     868:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__addsf3>
     86c:	6b 01       	movw	r12, r22
     86e:	7c 01       	movw	r14, r24
     870:	12 c0       	rjmp	.+36     	; 0x896 <_Z11changeEmissP17Adafruit_MLX90614dd+0x7c>
	else if (caltemp> currenttemp) emiss -= .05;
     872:	a3 01       	movw	r20, r6
     874:	92 01       	movw	r18, r4
     876:	c5 01       	movw	r24, r10
     878:	b4 01       	movw	r22, r8
     87a:	0e 94 a5 08 	call	0x114a	; 0x114a <__gesf2>
     87e:	18 16       	cp	r1, r24
     880:	54 f4       	brge	.+20     	; 0x896 <_Z11changeEmissP17Adafruit_MLX90614dd+0x7c>
     882:	2d ec       	ldi	r18, 0xCD	; 205
     884:	3c ec       	ldi	r19, 0xCC	; 204
     886:	4c e4       	ldi	r20, 0x4C	; 76
     888:	5d e3       	ldi	r21, 0x3D	; 61
     88a:	c7 01       	movw	r24, r14
     88c:	b6 01       	movw	r22, r12
     88e:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <__subsf3>
     892:	6b 01       	movw	r12, r22
     894:	7c 01       	movw	r14, r24
	device->setEmissivity((float)emiss);	
     896:	b7 01       	movw	r22, r14
     898:	a6 01       	movw	r20, r12
     89a:	ce 01       	movw	r24, r28
     89c:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <_ZN17Adafruit_MLX9061413setEmissivityEf>
	return emiss;
}
     8a0:	c7 01       	movw	r24, r14
     8a2:	b6 01       	movw	r22, r12
     8a4:	df 91       	pop	r29
     8a6:	cf 91       	pop	r28
     8a8:	1f 91       	pop	r17
     8aa:	0f 91       	pop	r16
     8ac:	ff 90       	pop	r15
     8ae:	ef 90       	pop	r14
     8b0:	df 90       	pop	r13
     8b2:	cf 90       	pop	r12
     8b4:	bf 90       	pop	r11
     8b6:	af 90       	pop	r10
     8b8:	9f 90       	pop	r9
     8ba:	8f 90       	pop	r8
     8bc:	7f 90       	pop	r7
     8be:	6f 90       	pop	r6
     8c0:	5f 90       	pop	r5
     8c2:	4f 90       	pop	r4
     8c4:	08 95       	ret

000008c6 <_Z19calibrateEmissivityPd>:

uint8_t calibrateEmissivity(double * emissivity){
     8c6:	4f 92       	push	r4
     8c8:	5f 92       	push	r5
     8ca:	6f 92       	push	r6
     8cc:	7f 92       	push	r7
     8ce:	8f 92       	push	r8
     8d0:	9f 92       	push	r9
     8d2:	af 92       	push	r10
     8d4:	bf 92       	push	r11
     8d6:	cf 92       	push	r12
     8d8:	df 92       	push	r13
     8da:	ef 92       	push	r14
     8dc:	ff 92       	push	r15
     8de:	0f 93       	push	r16
     8e0:	1f 93       	push	r17
     8e2:	cf 93       	push	r28
     8e4:	df 93       	push	r29
     8e6:	cd b7       	in	r28, 0x3d	; 61
     8e8:	de b7       	in	r29, 0x3e	; 62
     8ea:	aa 97       	sbiw	r28, 0x2a	; 42
     8ec:	0f b6       	in	r0, 0x3f	; 63
     8ee:	f8 94       	cli
     8f0:	de bf       	out	0x3e, r29	; 62
     8f2:	0f be       	out	0x3f, r0	; 63
     8f4:	cd bf       	out	0x3d, r28	; 61
	const char instr[5] = {'2','5','.','0'};
     8f6:	8e 01       	movw	r16, r28
     8f8:	0a 5d       	subi	r16, 0xDA	; 218
     8fa:	1f 4f       	sbci	r17, 0xFF	; 255
     8fc:	85 e0       	ldi	r24, 0x05	; 5
     8fe:	f8 01       	movw	r30, r16
     900:	11 92       	st	Z+, r1
     902:	8a 95       	dec	r24
     904:	e9 f7       	brne	.-6      	; 0x900 <__stack+0x1>
     906:	82 e3       	ldi	r24, 0x32	; 50
     908:	8e a3       	std	Y+38, r24	; 0x26
     90a:	85 e3       	ldi	r24, 0x35	; 53
     90c:	8f a3       	std	Y+39, r24	; 0x27
     90e:	8e e2       	ldi	r24, 0x2E	; 46
     910:	88 a7       	std	Y+40, r24	; 0x28
     912:	80 e3       	ldi	r24, 0x30	; 48
     914:	89 a7       	std	Y+41, r24	; 0x29
	uint8_t ptr=0;
	double usrtemp = 0, t[4];
	float E[4] ,prevE[4];
	
	Serial.send("> Temperature to calibrate to: ");
     916:	69 e2       	ldi	r22, 0x29	; 41
     918:	71 e0       	ldi	r23, 0x01	; 1
     91a:	80 e8       	ldi	r24, 0x80	; 128
     91c:	91 e0       	ldi	r25, 0x01	; 1
     91e:	0e 94 85 06 	call	0xd0a	; 0xd0a <_ZN5USART4sendEPKc>
	Serial.send(instr);
     922:	b8 01       	movw	r22, r16
     924:	80 e8       	ldi	r24, 0x80	; 128
     926:	91 e0       	ldi	r25, 0x01	; 1
     928:	0e 94 85 06 	call	0xd0a	; 0xd0a <_ZN5USART4sendEPKc>
		//instr[ptr++] = tempbyte; 
	}
	Serial.sendln(instr);*/
	
	//if (sizeof(instr) <= 2){instr[3] = '0';}
	usrtemp += double(instr[0] - '0') * 10;
     92c:	6e a1       	ldd	r22, Y+38	; 0x26
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	60 53       	subi	r22, 0x30	; 48
     932:	71 09       	sbc	r23, r1
     934:	07 2e       	mov	r0, r23
     936:	00 0c       	add	r0, r0
     938:	88 0b       	sbc	r24, r24
     93a:	99 0b       	sbc	r25, r25
     93c:	0e 94 f5 07 	call	0xfea	; 0xfea <__floatsisf>
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	40 e2       	ldi	r20, 0x20	; 32
     946:	51 e4       	ldi	r21, 0x41	; 65
     948:	0e 94 aa 08 	call	0x1154	; 0x1154 <__mulsf3>
     94c:	20 e0       	ldi	r18, 0x00	; 0
     94e:	30 e0       	ldi	r19, 0x00	; 0
     950:	a9 01       	movw	r20, r18
     952:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__addsf3>
     956:	6b 01       	movw	r12, r22
     958:	7c 01       	movw	r14, r24
	usrtemp += double(instr[1] - '0');
     95a:	8f a1       	ldd	r24, Y+39	; 0x27
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	c0 97       	sbiw	r24, 0x30	; 48
     960:	bc 01       	movw	r22, r24
     962:	99 0f       	add	r25, r25
     964:	88 0b       	sbc	r24, r24
     966:	99 0b       	sbc	r25, r25
     968:	0e 94 f5 07 	call	0xfea	; 0xfea <__floatsisf>
     96c:	a7 01       	movw	r20, r14
     96e:	96 01       	movw	r18, r12
     970:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__addsf3>
     974:	6b 01       	movw	r12, r22
     976:	7c 01       	movw	r14, r24
	usrtemp += double(instr[3] - '0') / 10;
     978:	89 a5       	ldd	r24, Y+41	; 0x29
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	c0 97       	sbiw	r24, 0x30	; 48
     97e:	bc 01       	movw	r22, r24
     980:	99 0f       	add	r25, r25
     982:	88 0b       	sbc	r24, r24
     984:	99 0b       	sbc	r25, r25
     986:	0e 94 f5 07 	call	0xfea	; 0xfea <__floatsisf>
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e2       	ldi	r20, 0x20	; 32
     990:	51 e4       	ldi	r21, 0x41	; 65
     992:	0e 94 52 07 	call	0xea4	; 0xea4 <__divsf3>
     996:	a7 01       	movw	r20, r14
     998:	96 01       	movw	r18, r12
     99a:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__addsf3>
     99e:	c6 2e       	mov	r12, r22
     9a0:	d7 2e       	mov	r13, r23
     9a2:	f8 2e       	mov	r15, r24
     9a4:	e9 2e       	mov	r14, r25
	char str[5];
	sprintf(str, ", %0.1f", usrtemp);
     9a6:	9f 93       	push	r25
     9a8:	8f 93       	push	r24
     9aa:	7f 93       	push	r23
     9ac:	6f 93       	push	r22
     9ae:	89 e4       	ldi	r24, 0x49	; 73
     9b0:	91 e0       	ldi	r25, 0x01	; 1
     9b2:	9f 93       	push	r25
     9b4:	8f 93       	push	r24
     9b6:	05 50       	subi	r16, 0x05	; 5
     9b8:	11 09       	sbc	r17, r1
     9ba:	1f 93       	push	r17
     9bc:	0f 93       	push	r16
     9be:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <sprintf>
     9c2:	b8 01       	movw	r22, r16
     9c4:	80 e8       	ldi	r24, 0x80	; 128
     9c6:	91 e0       	ldi	r25, 0x01	; 1
     9c8:	0e 94 85 06 	call	0xd0a	; 0xd0a <_ZN5USART4sendEPKc>
     9cc:	66 e2       	ldi	r22, 0x26	; 38
     9ce:	71 e0       	ldi	r23, 0x01	; 1
     9d0:	80 e8       	ldi	r24, 0x80	; 128
     9d2:	91 e0       	ldi	r25, 0x01	; 1
     9d4:	0e 94 85 06 	call	0xd0a	; 0xd0a <_ZN5USART4sendEPKc>
	Serial.sendln(str);
	
	IR_sensorRead(t);
     9d8:	ce 01       	movw	r24, r28
     9da:	41 96       	adiw	r24, 0x11	; 17
     9dc:	0e 94 f7 03 	call	0x7ee	; 0x7ee <_Z13IR_sensorReadPd>
	while(t[0]<(usrtemp-tol) || t[0] > (usrtemp+tol)){
     9e0:	0f b6       	in	r0, 0x3f	; 63
     9e2:	f8 94       	cli
     9e4:	de bf       	out	0x3e, r29	; 62
     9e6:	0f be       	out	0x3f, r0	; 63
     9e8:	cd bf       	out	0x3d, r28	; 61
     9ea:	18 c0       	rjmp	.+48     	; 0xa1c <__stack+0x11d>
		prevE[0] = MLX_5a.readEmissivity();
     9ec:	85 e7       	ldi	r24, 0x75	; 117
     9ee:	91 e0       	ldi	r25, 0x01	; 1
     9f0:	0e 94 92 01 	call	0x324	; 0x324 <_ZN17Adafruit_MLX9061414readEmissivityEv>
     9f4:	69 83       	std	Y+1, r22	; 0x01
     9f6:	7a 83       	std	Y+2, r23	; 0x02
     9f8:	8b 83       	std	Y+3, r24	; 0x03
     9fa:	9c 83       	std	Y+4, r25	; 0x04
		E[0] = changeEmiss(&MLX_5a, usrtemp, t[0]);
     9fc:	09 89       	ldd	r16, Y+17	; 0x11
     9fe:	1a 89       	ldd	r17, Y+18	; 0x12
     a00:	2b 89       	ldd	r18, Y+19	; 0x13
     a02:	3c 89       	ldd	r19, Y+20	; 0x14
     a04:	4c 2d       	mov	r20, r12
     a06:	5d 2d       	mov	r21, r13
     a08:	6f 2d       	mov	r22, r15
     a0a:	7e 2d       	mov	r23, r14
     a0c:	85 e7       	ldi	r24, 0x75	; 117
     a0e:	91 e0       	ldi	r25, 0x01	; 1
     a10:	0e 94 0d 04 	call	0x81a	; 0x81a <_Z11changeEmissP17Adafruit_MLX90614dd>
		IR_sensorRead(t);
     a14:	ce 01       	movw	r24, r28
     a16:	41 96       	adiw	r24, 0x11	; 17
     a18:	0e 94 f7 03 	call	0x7ee	; 0x7ee <_Z13IR_sensorReadPd>
	char str[5];
	sprintf(str, ", %0.1f", usrtemp);
	Serial.sendln(str);
	
	IR_sensorRead(t);
	while(t[0]<(usrtemp-tol) || t[0] > (usrtemp+tol)){
     a1c:	89 88       	ldd	r8, Y+17	; 0x11
     a1e:	9a 88       	ldd	r9, Y+18	; 0x12
     a20:	ab 88       	ldd	r10, Y+19	; 0x13
     a22:	bc 88       	ldd	r11, Y+20	; 0x14
     a24:	40 90 00 01 	lds	r4, 0x0100
     a28:	50 90 01 01 	lds	r5, 0x0101
     a2c:	60 90 02 01 	lds	r6, 0x0102
     a30:	70 90 03 01 	lds	r7, 0x0103
     a34:	a3 01       	movw	r20, r6
     a36:	92 01       	movw	r18, r4
     a38:	6c 2d       	mov	r22, r12
     a3a:	7d 2d       	mov	r23, r13
     a3c:	8f 2d       	mov	r24, r15
     a3e:	9e 2d       	mov	r25, r14
     a40:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <__subsf3>
     a44:	9b 01       	movw	r18, r22
     a46:	ac 01       	movw	r20, r24
     a48:	c5 01       	movw	r24, r10
     a4a:	b4 01       	movw	r22, r8
     a4c:	0e 94 4d 07 	call	0xe9a	; 0xe9a <__cmpsf2>
     a50:	88 23       	and	r24, r24
     a52:	64 f2       	brlt	.-104    	; 0x9ec <__stack+0xed>
     a54:	a3 01       	movw	r20, r6
     a56:	92 01       	movw	r18, r4
     a58:	6c 2d       	mov	r22, r12
     a5a:	7d 2d       	mov	r23, r13
     a5c:	8f 2d       	mov	r24, r15
     a5e:	9e 2d       	mov	r25, r14
     a60:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__addsf3>
     a64:	9b 01       	movw	r18, r22
     a66:	ac 01       	movw	r20, r24
     a68:	c5 01       	movw	r24, r10
     a6a:	b4 01       	movw	r22, r8
     a6c:	0e 94 a5 08 	call	0x114a	; 0x114a <__gesf2>
     a70:	18 16       	cp	r1, r24
     a72:	0c f4       	brge	.+2      	; 0xa76 <__stack+0x177>
     a74:	bb cf       	rjmp	.-138    	; 0x9ec <__stack+0xed>
     a76:	18 c0       	rjmp	.+48     	; 0xaa8 <__stack+0x1a9>
		prevE[0] = MLX_5a.readEmissivity();
		E[0] = changeEmiss(&MLX_5a, usrtemp, t[0]);
		IR_sensorRead(t);
	}
	while(t[1]<(usrtemp-tol) || t[1] > (usrtemp+tol)){
		prevE[1] = MLX_5b.readEmissivity();
     a78:	8a e6       	ldi	r24, 0x6A	; 106
     a7a:	91 e0       	ldi	r25, 0x01	; 1
     a7c:	0e 94 92 01 	call	0x324	; 0x324 <_ZN17Adafruit_MLX9061414readEmissivityEv>
     a80:	6d 83       	std	Y+5, r22	; 0x05
     a82:	7e 83       	std	Y+6, r23	; 0x06
     a84:	8f 83       	std	Y+7, r24	; 0x07
     a86:	98 87       	std	Y+8, r25	; 0x08
		E[1] = changeEmiss(&MLX_5b, usrtemp, t[1]);
     a88:	0d 89       	ldd	r16, Y+21	; 0x15
     a8a:	1e 89       	ldd	r17, Y+22	; 0x16
     a8c:	2f 89       	ldd	r18, Y+23	; 0x17
     a8e:	38 8d       	ldd	r19, Y+24	; 0x18
     a90:	4c 2d       	mov	r20, r12
     a92:	5d 2d       	mov	r21, r13
     a94:	6f 2d       	mov	r22, r15
     a96:	7e 2d       	mov	r23, r14
     a98:	8a e6       	ldi	r24, 0x6A	; 106
     a9a:	91 e0       	ldi	r25, 0x01	; 1
     a9c:	0e 94 0d 04 	call	0x81a	; 0x81a <_Z11changeEmissP17Adafruit_MLX90614dd>
		IR_sensorRead(t);
     aa0:	ce 01       	movw	r24, r28
     aa2:	41 96       	adiw	r24, 0x11	; 17
     aa4:	0e 94 f7 03 	call	0x7ee	; 0x7ee <_Z13IR_sensorReadPd>
	while(t[0]<(usrtemp-tol) || t[0] > (usrtemp+tol)){
		prevE[0] = MLX_5a.readEmissivity();
		E[0] = changeEmiss(&MLX_5a, usrtemp, t[0]);
		IR_sensorRead(t);
	}
	while(t[1]<(usrtemp-tol) || t[1] > (usrtemp+tol)){
     aa8:	8d 88       	ldd	r8, Y+21	; 0x15
     aaa:	9e 88       	ldd	r9, Y+22	; 0x16
     aac:	af 88       	ldd	r10, Y+23	; 0x17
     aae:	b8 8c       	ldd	r11, Y+24	; 0x18
     ab0:	40 90 00 01 	lds	r4, 0x0100
     ab4:	50 90 01 01 	lds	r5, 0x0101
     ab8:	60 90 02 01 	lds	r6, 0x0102
     abc:	70 90 03 01 	lds	r7, 0x0103
     ac0:	a3 01       	movw	r20, r6
     ac2:	92 01       	movw	r18, r4
     ac4:	6c 2d       	mov	r22, r12
     ac6:	7d 2d       	mov	r23, r13
     ac8:	8f 2d       	mov	r24, r15
     aca:	9e 2d       	mov	r25, r14
     acc:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <__subsf3>
     ad0:	9b 01       	movw	r18, r22
     ad2:	ac 01       	movw	r20, r24
     ad4:	c5 01       	movw	r24, r10
     ad6:	b4 01       	movw	r22, r8
     ad8:	0e 94 4d 07 	call	0xe9a	; 0xe9a <__cmpsf2>
     adc:	88 23       	and	r24, r24
     ade:	64 f2       	brlt	.-104    	; 0xa78 <__stack+0x179>
     ae0:	a3 01       	movw	r20, r6
     ae2:	92 01       	movw	r18, r4
     ae4:	6c 2d       	mov	r22, r12
     ae6:	7d 2d       	mov	r23, r13
     ae8:	8f 2d       	mov	r24, r15
     aea:	9e 2d       	mov	r25, r14
     aec:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__addsf3>
     af0:	9b 01       	movw	r18, r22
     af2:	ac 01       	movw	r20, r24
     af4:	c5 01       	movw	r24, r10
     af6:	b4 01       	movw	r22, r8
     af8:	0e 94 a5 08 	call	0x114a	; 0x114a <__gesf2>
     afc:	18 16       	cp	r1, r24
     afe:	0c f4       	brge	.+2      	; 0xb02 <__stack+0x203>
     b00:	bb cf       	rjmp	.-138    	; 0xa78 <__stack+0x179>
	}
	while(t[3]<(usrtemp-tol) || t[3] > (usrtemp+tol)){
		E[3] = changeEmiss(&MLX_5d, usrtemp, t[3]);
		IR_sensorRead(t);
	}*/
	displayEmiss((double*)prevE);
     b02:	ce 01       	movw	r24, r28
     b04:	01 96       	adiw	r24, 0x01	; 1
     b06:	0e 94 7e 03 	call	0x6fc	; 0x6fc <_Z12displayEmissPd>
	
	emissivity = (double*)E;
	return 0;
}
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	aa 96       	adiw	r28, 0x2a	; 42
     b0e:	0f b6       	in	r0, 0x3f	; 63
     b10:	f8 94       	cli
     b12:	de bf       	out	0x3e, r29	; 62
     b14:	0f be       	out	0x3f, r0	; 63
     b16:	cd bf       	out	0x3d, r28	; 61
     b18:	df 91       	pop	r29
     b1a:	cf 91       	pop	r28
     b1c:	1f 91       	pop	r17
     b1e:	0f 91       	pop	r16
     b20:	ff 90       	pop	r15
     b22:	ef 90       	pop	r14
     b24:	df 90       	pop	r13
     b26:	cf 90       	pop	r12
     b28:	bf 90       	pop	r11
     b2a:	af 90       	pop	r10
     b2c:	9f 90       	pop	r9
     b2e:	8f 90       	pop	r8
     b30:	7f 90       	pop	r7
     b32:	6f 90       	pop	r6
     b34:	5f 90       	pop	r5
     b36:	4f 90       	pop	r4
     b38:	08 95       	ret

00000b3a <main>:

/*********************************************************************/
int main(void)
{	
     b3a:	cf 93       	push	r28
     b3c:	df 93       	push	r29
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
     b42:	a0 97       	sbiw	r28, 0x20	; 32
     b44:	0f b6       	in	r0, 0x3f	; 63
     b46:	f8 94       	cli
     b48:	de bf       	out	0x3e, r29	; 62
     b4a:	0f be       	out	0x3f, r0	; 63
     b4c:	cd bf       	out	0x3d, r28	; 61
	double temps[4], emiss[4];
	
	setup();
     b4e:	0e 94 c9 02 	call	0x592	; 0x592 <_Z5setupv>
	//Serial.send(Serial.read());
	IR_sensorRead(temps);
     b52:	ce 01       	movw	r24, r28
     b54:	41 96       	adiw	r24, 0x11	; 17
     b56:	0e 94 f7 03 	call	0x7ee	; 0x7ee <_Z13IR_sensorReadPd>
	displayTemp(temps);
     b5a:	ce 01       	movw	r24, r28
     b5c:	41 96       	adiw	r24, 0x11	; 17
     b5e:	0e 94 05 03 	call	0x60a	; 0x60a <_Z11displayTempPd>
	
	calibrateEmissivity(emiss);	
     b62:	ce 01       	movw	r24, r28
     b64:	01 96       	adiw	r24, 0x01	; 1
     b66:	0e 94 63 04 	call	0x8c6	; 0x8c6 <_Z19calibrateEmissivityPd>
	displayEmiss(emiss);
     b6a:	ce 01       	movw	r24, r28
     b6c:	01 96       	adiw	r24, 0x01	; 1
     b6e:	0e 94 7e 03 	call	0x6fc	; 0x6fc <_Z12displayEmissPd>
	
	IR_sensorRead(temps);
     b72:	ce 01       	movw	r24, r28
     b74:	41 96       	adiw	r24, 0x11	; 17
     b76:	0e 94 f7 03 	call	0x7ee	; 0x7ee <_Z13IR_sensorReadPd>
	displayTemp(temps);
     b7a:	ce 01       	movw	r24, r28
     b7c:	41 96       	adiw	r24, 0x11	; 17
     b7e:	0e 94 05 03 	call	0x60a	; 0x60a <_Z11displayTempPd>
}
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	a0 96       	adiw	r28, 0x20	; 32
     b88:	0f b6       	in	r0, 0x3f	; 63
     b8a:	f8 94       	cli
     b8c:	de bf       	out	0x3e, r29	; 62
     b8e:	0f be       	out	0x3f, r0	; 63
     b90:	cd bf       	out	0x3d, r28	; 61
     b92:	df 91       	pop	r29
     b94:	cf 91       	pop	r28
     b96:	08 95       	ret

00000b98 <_GLOBAL__sub_I_MLX_5a>:
#include "uart.h"
#include "Adafruit_MLX90614.h"
#include "HCSR04.h"
#include "VL53L0X.h"

Adafruit_MLX90614 MLX_5a(0x5A);
     b98:	6a e5       	ldi	r22, 0x5A	; 90
     b9a:	85 e7       	ldi	r24, 0x75	; 117
     b9c:	91 e0       	ldi	r25, 0x01	; 1
     b9e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_ZN17Adafruit_MLX90614C1Eh>
Adafruit_MLX90614 MLX_5b(0x5B);
     ba2:	6b e5       	ldi	r22, 0x5B	; 91
     ba4:	8a e6       	ldi	r24, 0x6A	; 106
     ba6:	91 e0       	ldi	r25, 0x01	; 1
     ba8:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_ZN17Adafruit_MLX90614C1Eh>
     bac:	08 95       	ret

00000bae <i2c_init>:
 Initialization of the I2C bus interface. Need to be called only once
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  DDRC = 0;
     bae:	17 b8       	out	0x07, r1	; 7
  PORTC = (1 << PORTC4) | (1 << PORTC5);//enable pull up
     bb0:	80 e3       	ldi	r24, 0x30	; 48
     bb2:	88 b9       	out	0x08, r24	; 8
  TWSR = 0;                         /* no prescaler */
     bb4:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
     bb8:	88 e4       	ldi	r24, 0x48	; 72
     bba:	80 93 b8 00 	sts	0x00B8, r24
     bbe:	08 95       	ret

00000bc0 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     bc0:	94 ea       	ldi	r25, 0xA4	; 164
     bc2:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     bc6:	ec eb       	ldi	r30, 0xBC	; 188
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	90 81       	ld	r25, Z
     bcc:	99 23       	and	r25, r25
     bce:	ec f7       	brge	.-6      	; 0xbca <i2c_start+0xa>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     bd0:	90 91 b9 00 	lds	r25, 0x00B9
     bd4:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     bd6:	98 30       	cpi	r25, 0x08	; 8
     bd8:	11 f0       	breq	.+4      	; 0xbde <i2c_start+0x1e>
     bda:	90 31       	cpi	r25, 0x10	; 16
     bdc:	a1 f4       	brne	.+40     	; 0xc06 <i2c_start+0x46>

	// send device address
	TWDR = address;
     bde:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     be2:	84 e8       	ldi	r24, 0x84	; 132
     be4:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
     be8:	ec eb       	ldi	r30, 0xBC	; 188
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	80 81       	ld	r24, Z
     bee:	88 23       	and	r24, r24
     bf0:	ec f7       	brge	.-6      	; 0xbec <i2c_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     bf2:	90 91 b9 00 	lds	r25, 0x00B9
     bf6:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     bf8:	98 31       	cpi	r25, 0x18	; 24
     bfa:	39 f0       	breq	.+14     	; 0xc0a <i2c_start+0x4a>
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	90 34       	cpi	r25, 0x40	; 64
     c00:	29 f4       	brne	.+10     	; 0xc0c <i2c_start+0x4c>
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
     c0a:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
     c0c:	08 95       	ret

00000c0e <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     c0e:	84 e9       	ldi	r24, 0x94	; 148
     c10:	80 93 bc 00 	sts	0x00BC, r24
     c14:	08 95       	ret

00000c16 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     c16:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     c1a:	84 e8       	ldi	r24, 0x84	; 132
     c1c:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     c20:	ec eb       	ldi	r30, 0xBC	; 188
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	80 81       	ld	r24, Z
     c26:	88 23       	and	r24, r24
     c28:	ec f7       	brge	.-6      	; 0xc24 <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     c2a:	90 91 b9 00 	lds	r25, 0x00B9
     c2e:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	98 32       	cpi	r25, 0x28	; 40
     c34:	09 f4       	brne	.+2      	; 0xc38 <i2c_write+0x22>
     c36:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
     c38:	08 95       	ret

00000c3a <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     c3a:	84 ec       	ldi	r24, 0xC4	; 196
     c3c:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
     c40:	ec eb       	ldi	r30, 0xBC	; 188
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	80 81       	ld	r24, Z
     c46:	88 23       	and	r24, r24
     c48:	ec f7       	brge	.-6      	; 0xc44 <i2c_readAck+0xa>
    return TWDR;
     c4a:	80 91 bb 00 	lds	r24, 0x00BB
}/* i2c_readAck */
     c4e:	08 95       	ret

00000c50 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     c50:	84 e8       	ldi	r24, 0x84	; 132
     c52:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
     c56:	ec eb       	ldi	r30, 0xBC	; 188
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 81       	ld	r24, Z
     c5c:	88 23       	and	r24, r24
     c5e:	ec f7       	brge	.-6      	; 0xc5a <i2c_readNak+0xa>
    return TWDR;
     c60:	80 91 bb 00 	lds	r24, 0x00BB
}/* i2c_readNak */
     c64:	08 95       	ret

00000c66 <_ZN5USART4initEi>:
USART Serial; //Initialize new instance of the serial class
//Setup Baud rate in header file
//set to 8 bits, no stop bit, no parity

/*********************************************************************/
void USART::init(int BAUDRATE = 9600){
     c66:	0f 93       	push	r16
     c68:	1f 93       	push	r17
	
	UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);
     c6a:	8b 01       	movw	r16, r22
     c6c:	77 0f       	add	r23, r23
     c6e:	22 0b       	sbc	r18, r18
     c70:	33 0b       	sbc	r19, r19
     c72:	d9 01       	movw	r26, r18
     c74:	c8 01       	movw	r24, r16
     c76:	80 58       	subi	r24, 0x80	; 128
     c78:	9b 47       	sbci	r25, 0x7B	; 123
     c7a:	a1 4e       	sbci	r26, 0xE1	; 225
     c7c:	bf 4f       	sbci	r27, 0xFF	; 255
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	aa 1f       	adc	r26, r26
     c84:	bb 1f       	adc	r27, r27
     c86:	88 0f       	add	r24, r24
     c88:	99 1f       	adc	r25, r25
     c8a:	aa 1f       	adc	r26, r26
     c8c:	bb 1f       	adc	r27, r27
     c8e:	bc 01       	movw	r22, r24
     c90:	cd 01       	movw	r24, r26
     c92:	66 0f       	add	r22, r22
     c94:	77 1f       	adc	r23, r23
     c96:	88 1f       	adc	r24, r24
     c98:	99 1f       	adc	r25, r25
     c9a:	00 0f       	add	r16, r16
     c9c:	11 1f       	adc	r17, r17
     c9e:	22 1f       	adc	r18, r18
     ca0:	33 1f       	adc	r19, r19
     ca2:	00 0f       	add	r16, r16
     ca4:	11 1f       	adc	r17, r17
     ca6:	22 1f       	adc	r18, r18
     ca8:	33 1f       	adc	r19, r19
     caa:	a9 01       	movw	r20, r18
     cac:	98 01       	movw	r18, r16
     cae:	22 0f       	add	r18, r18
     cb0:	33 1f       	adc	r19, r19
     cb2:	44 1f       	adc	r20, r20
     cb4:	55 1f       	adc	r21, r21
     cb6:	22 0f       	add	r18, r18
     cb8:	33 1f       	adc	r19, r19
     cba:	44 1f       	adc	r20, r20
     cbc:	55 1f       	adc	r21, r21
     cbe:	0e 94 93 0c 	call	0x1926	; 0x1926 <__udivmodsi4>
     cc2:	da 01       	movw	r26, r20
     cc4:	c9 01       	movw	r24, r18
     cc6:	01 97       	sbiw	r24, 0x01	; 1
     cc8:	a1 09       	sbc	r26, r1
     cca:	b1 09       	sbc	r27, r1
     ccc:	89 2f       	mov	r24, r25
     cce:	9a 2f       	mov	r25, r26
     cd0:	ab 2f       	mov	r26, r27
     cd2:	bb 27       	eor	r27, r27
     cd4:	80 93 c5 00 	sts	0x00C5, r24
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);
     cd8:	21 50       	subi	r18, 0x01	; 1
     cda:	20 93 c4 00 	sts	0x00C4, r18
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     cde:	e1 ec       	ldi	r30, 0xC1	; 193
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	88 e1       	ldi	r24, 0x18	; 24
     ce4:	80 83       	st	Z, r24
	UCSR0C = (1<<UCSZ00)|(1<<UCSZ01);
     ce6:	86 e0       	ldi	r24, 0x06	; 6
     ce8:	80 93 c2 00 	sts	0x00C2, r24

	UCSR0B |= (1 << RXCIE0); // Enable the USART Receive Complete interrupt (USART_RXC)
     cec:	80 81       	ld	r24, Z
     cee:	80 68       	ori	r24, 0x80	; 128
     cf0:	80 83       	st	Z, r24
	sei();
     cf2:	78 94       	sei
}
     cf4:	1f 91       	pop	r17
     cf6:	0f 91       	pop	r16
     cf8:	08 95       	ret

00000cfa <_ZN5USART4sendEh>:
 return UDR0;// read buffer
}
/*********************************************************************/
void USART::send(uint8_t data){

	while(!(UCSR0A & (1<<UDRE0))); //wait until buffer is empty
     cfa:	e0 ec       	ldi	r30, 0xC0	; 192
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 81       	ld	r24, Z
     d00:	85 ff       	sbrs	r24, 5
     d02:	fd cf       	rjmp	.-6      	; 0xcfe <_ZN5USART4sendEh+0x4>
	UDR0 = data; //Load data into buffer
     d04:	60 93 c6 00 	sts	0x00C6, r22
     d08:	08 95       	ret

00000d0a <_ZN5USART4sendEPKc>:
}
/*********************************************************************/
//send one char at a time
void USART::send(const char* StringPtr)
{
     d0a:	0f 93       	push	r16
     d0c:	1f 93       	push	r17
     d0e:	cf 93       	push	r28
     d10:	df 93       	push	r29
     d12:	eb 01       	movw	r28, r22
	//st = millis();
	while(*StringPtr != 0x00)
     d14:	68 81       	ld	r22, Y
     d16:	66 23       	and	r22, r22
     d18:	41 f0       	breq	.+16     	; 0xd2a <_ZN5USART4sendEPKc+0x20>
     d1a:	8c 01       	movw	r16, r24
     d1c:	21 96       	adiw	r28, 0x01	; 1
		void init(int BAUDRATE); 
		bool available(void);
		char read(void);
		bool flush(void);
		void send(uint8_t data);
		void send(char data) {send((uint8_t)data); };
     d1e:	c8 01       	movw	r24, r16
     d20:	0e 94 7d 06 	call	0xcfa	; 0xcfa <_ZN5USART4sendEh>
     d24:	69 91       	ld	r22, Y+
     d26:	61 11       	cpse	r22, r1
     d28:	fa cf       	rjmp	.-12     	; 0xd1e <_ZN5USART4sendEPKc+0x14>
	{
		send(*StringPtr++);
	}
	//ft = millis();
}
     d2a:	df 91       	pop	r29
     d2c:	cf 91       	pop	r28
     d2e:	1f 91       	pop	r17
     d30:	0f 91       	pop	r16
     d32:	08 95       	ret

00000d34 <_ZN5USART4sendEhi>:
	send(str);
}
/*********************************************************************/
//convert int to ASCII number, display in decimal or hex
void USART::send(uint8_t data, int base)
{
     d34:	0f 93       	push	r16
     d36:	1f 93       	push	r17
     d38:	cf 93       	push	r28
     d3a:	df 93       	push	r29
     d3c:	00 d0       	rcall	.+0      	; 0xd3e <_ZN5USART4sendEhi+0xa>
     d3e:	1f 92       	push	r1
     d40:	cd b7       	in	r28, 0x3d	; 61
     d42:	de b7       	in	r29, 0x3e	; 62
     d44:	8c 01       	movw	r16, r24
	char str[3];
	if (base == DEC){
     d46:	4a 30       	cpi	r20, 0x0A	; 10
     d48:	51 05       	cpc	r21, r1
     d4a:	99 f4       	brne	.+38     	; 0xd72 <_ZN5USART4sendEhi+0x3e>
		sprintf(str,"%d",data);
     d4c:	1f 92       	push	r1
     d4e:	6f 93       	push	r22
     d50:	80 e6       	ldi	r24, 0x60	; 96
     d52:	91 e0       	ldi	r25, 0x01	; 1
     d54:	9f 93       	push	r25
     d56:	8f 93       	push	r24
     d58:	ce 01       	movw	r24, r28
     d5a:	01 96       	adiw	r24, 0x01	; 1
     d5c:	9f 93       	push	r25
     d5e:	8f 93       	push	r24
     d60:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <sprintf>
     d64:	0f 90       	pop	r0
     d66:	0f 90       	pop	r0
     d68:	0f 90       	pop	r0
     d6a:	0f 90       	pop	r0
     d6c:	0f 90       	pop	r0
     d6e:	0f 90       	pop	r0
     d70:	12 c0       	rjmp	.+36     	; 0xd96 <_ZN5USART4sendEhi+0x62>
	}else{
		sprintf(str,"%x",data);	
     d72:	1f 92       	push	r1
     d74:	6f 93       	push	r22
     d76:	23 e6       	ldi	r18, 0x63	; 99
     d78:	31 e0       	ldi	r19, 0x01	; 1
     d7a:	3f 93       	push	r19
     d7c:	2f 93       	push	r18
     d7e:	ce 01       	movw	r24, r28
     d80:	01 96       	adiw	r24, 0x01	; 1
     d82:	9f 93       	push	r25
     d84:	8f 93       	push	r24
     d86:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <sprintf>
     d8a:	0f 90       	pop	r0
     d8c:	0f 90       	pop	r0
     d8e:	0f 90       	pop	r0
     d90:	0f 90       	pop	r0
     d92:	0f 90       	pop	r0
     d94:	0f 90       	pop	r0
	}
	send(str);
     d96:	be 01       	movw	r22, r28
     d98:	6f 5f       	subi	r22, 0xFF	; 255
     d9a:	7f 4f       	sbci	r23, 0xFF	; 255
     d9c:	c8 01       	movw	r24, r16
     d9e:	0e 94 85 06 	call	0xd0a	; 0xd0a <_ZN5USART4sendEPKc>
		else
		{
			send(Output_unit+48);
		}
	}*/
}
     da2:	0f 90       	pop	r0
     da4:	0f 90       	pop	r0
     da6:	0f 90       	pop	r0
     da8:	df 91       	pop	r29
     daa:	cf 91       	pop	r28
     dac:	1f 91       	pop	r17
     dae:	0f 91       	pop	r16
     db0:	08 95       	ret

00000db2 <_GLOBAL__sub_I_Wire>:
	  }
 class I2c
 {
 public:
    I2c()
    {
     db2:	e8 e8       	ldi	r30, 0x88	; 136
     db4:	f1 e0       	ldi	r31, 0x01	; 1
     db6:	10 86       	std	Z+8, r1	; 0x08
     db8:	11 86       	std	Z+9, r1	; 0x09
	    i2c_init();
     dba:	0e 94 d7 05 	call	0xbae	; 0xbae <i2c_init>
     dbe:	08 95       	ret

00000dc0 <__subsf3>:
     dc0:	50 58       	subi	r21, 0x80	; 128

00000dc2 <__addsf3>:
     dc2:	bb 27       	eor	r27, r27
     dc4:	aa 27       	eor	r26, r26
     dc6:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__addsf3x>
     dca:	0c 94 6b 08 	jmp	0x10d6	; 0x10d6 <__fp_round>
     dce:	0e 94 5d 08 	call	0x10ba	; 0x10ba <__fp_pscA>
     dd2:	38 f0       	brcs	.+14     	; 0xde2 <__addsf3+0x20>
     dd4:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__fp_pscB>
     dd8:	20 f0       	brcs	.+8      	; 0xde2 <__addsf3+0x20>
     dda:	39 f4       	brne	.+14     	; 0xdea <__addsf3+0x28>
     ddc:	9f 3f       	cpi	r25, 0xFF	; 255
     dde:	19 f4       	brne	.+6      	; 0xde6 <__addsf3+0x24>
     de0:	26 f4       	brtc	.+8      	; 0xdea <__addsf3+0x28>
     de2:	0c 94 5a 08 	jmp	0x10b4	; 0x10b4 <__fp_nan>
     de6:	0e f4       	brtc	.+2      	; 0xdea <__addsf3+0x28>
     de8:	e0 95       	com	r30
     dea:	e7 fb       	bst	r30, 7
     dec:	0c 94 54 08 	jmp	0x10a8	; 0x10a8 <__fp_inf>

00000df0 <__addsf3x>:
     df0:	e9 2f       	mov	r30, r25
     df2:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <__fp_split3>
     df6:	58 f3       	brcs	.-42     	; 0xdce <__addsf3+0xc>
     df8:	ba 17       	cp	r27, r26
     dfa:	62 07       	cpc	r22, r18
     dfc:	73 07       	cpc	r23, r19
     dfe:	84 07       	cpc	r24, r20
     e00:	95 07       	cpc	r25, r21
     e02:	20 f0       	brcs	.+8      	; 0xe0c <__addsf3x+0x1c>
     e04:	79 f4       	brne	.+30     	; 0xe24 <__addsf3x+0x34>
     e06:	a6 f5       	brtc	.+104    	; 0xe70 <__addsf3x+0x80>
     e08:	0c 94 9e 08 	jmp	0x113c	; 0x113c <__fp_zero>
     e0c:	0e f4       	brtc	.+2      	; 0xe10 <__addsf3x+0x20>
     e0e:	e0 95       	com	r30
     e10:	0b 2e       	mov	r0, r27
     e12:	ba 2f       	mov	r27, r26
     e14:	a0 2d       	mov	r26, r0
     e16:	0b 01       	movw	r0, r22
     e18:	b9 01       	movw	r22, r18
     e1a:	90 01       	movw	r18, r0
     e1c:	0c 01       	movw	r0, r24
     e1e:	ca 01       	movw	r24, r20
     e20:	a0 01       	movw	r20, r0
     e22:	11 24       	eor	r1, r1
     e24:	ff 27       	eor	r31, r31
     e26:	59 1b       	sub	r21, r25
     e28:	99 f0       	breq	.+38     	; 0xe50 <__addsf3x+0x60>
     e2a:	59 3f       	cpi	r21, 0xF9	; 249
     e2c:	50 f4       	brcc	.+20     	; 0xe42 <__addsf3x+0x52>
     e2e:	50 3e       	cpi	r21, 0xE0	; 224
     e30:	68 f1       	brcs	.+90     	; 0xe8c <__addsf3x+0x9c>
     e32:	1a 16       	cp	r1, r26
     e34:	f0 40       	sbci	r31, 0x00	; 0
     e36:	a2 2f       	mov	r26, r18
     e38:	23 2f       	mov	r18, r19
     e3a:	34 2f       	mov	r19, r20
     e3c:	44 27       	eor	r20, r20
     e3e:	58 5f       	subi	r21, 0xF8	; 248
     e40:	f3 cf       	rjmp	.-26     	; 0xe28 <__addsf3x+0x38>
     e42:	46 95       	lsr	r20
     e44:	37 95       	ror	r19
     e46:	27 95       	ror	r18
     e48:	a7 95       	ror	r26
     e4a:	f0 40       	sbci	r31, 0x00	; 0
     e4c:	53 95       	inc	r21
     e4e:	c9 f7       	brne	.-14     	; 0xe42 <__addsf3x+0x52>
     e50:	7e f4       	brtc	.+30     	; 0xe70 <__addsf3x+0x80>
     e52:	1f 16       	cp	r1, r31
     e54:	ba 0b       	sbc	r27, r26
     e56:	62 0b       	sbc	r22, r18
     e58:	73 0b       	sbc	r23, r19
     e5a:	84 0b       	sbc	r24, r20
     e5c:	ba f0       	brmi	.+46     	; 0xe8c <__addsf3x+0x9c>
     e5e:	91 50       	subi	r25, 0x01	; 1
     e60:	a1 f0       	breq	.+40     	; 0xe8a <__addsf3x+0x9a>
     e62:	ff 0f       	add	r31, r31
     e64:	bb 1f       	adc	r27, r27
     e66:	66 1f       	adc	r22, r22
     e68:	77 1f       	adc	r23, r23
     e6a:	88 1f       	adc	r24, r24
     e6c:	c2 f7       	brpl	.-16     	; 0xe5e <__addsf3x+0x6e>
     e6e:	0e c0       	rjmp	.+28     	; 0xe8c <__addsf3x+0x9c>
     e70:	ba 0f       	add	r27, r26
     e72:	62 1f       	adc	r22, r18
     e74:	73 1f       	adc	r23, r19
     e76:	84 1f       	adc	r24, r20
     e78:	48 f4       	brcc	.+18     	; 0xe8c <__addsf3x+0x9c>
     e7a:	87 95       	ror	r24
     e7c:	77 95       	ror	r23
     e7e:	67 95       	ror	r22
     e80:	b7 95       	ror	r27
     e82:	f7 95       	ror	r31
     e84:	9e 3f       	cpi	r25, 0xFE	; 254
     e86:	08 f0       	brcs	.+2      	; 0xe8a <__addsf3x+0x9a>
     e88:	b0 cf       	rjmp	.-160    	; 0xdea <__addsf3+0x28>
     e8a:	93 95       	inc	r25
     e8c:	88 0f       	add	r24, r24
     e8e:	08 f0       	brcs	.+2      	; 0xe92 <__addsf3x+0xa2>
     e90:	99 27       	eor	r25, r25
     e92:	ee 0f       	add	r30, r30
     e94:	97 95       	ror	r25
     e96:	87 95       	ror	r24
     e98:	08 95       	ret

00000e9a <__cmpsf2>:
     e9a:	0e 94 30 08 	call	0x1060	; 0x1060 <__fp_cmp>
     e9e:	08 f4       	brcc	.+2      	; 0xea2 <__cmpsf2+0x8>
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	08 95       	ret

00000ea4 <__divsf3>:
     ea4:	0e 94 66 07 	call	0xecc	; 0xecc <__divsf3x>
     ea8:	0c 94 6b 08 	jmp	0x10d6	; 0x10d6 <__fp_round>
     eac:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__fp_pscB>
     eb0:	58 f0       	brcs	.+22     	; 0xec8 <__divsf3+0x24>
     eb2:	0e 94 5d 08 	call	0x10ba	; 0x10ba <__fp_pscA>
     eb6:	40 f0       	brcs	.+16     	; 0xec8 <__divsf3+0x24>
     eb8:	29 f4       	brne	.+10     	; 0xec4 <__divsf3+0x20>
     eba:	5f 3f       	cpi	r21, 0xFF	; 255
     ebc:	29 f0       	breq	.+10     	; 0xec8 <__divsf3+0x24>
     ebe:	0c 94 54 08 	jmp	0x10a8	; 0x10a8 <__fp_inf>
     ec2:	51 11       	cpse	r21, r1
     ec4:	0c 94 9f 08 	jmp	0x113e	; 0x113e <__fp_szero>
     ec8:	0c 94 5a 08 	jmp	0x10b4	; 0x10b4 <__fp_nan>

00000ecc <__divsf3x>:
     ecc:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <__fp_split3>
     ed0:	68 f3       	brcs	.-38     	; 0xeac <__divsf3+0x8>

00000ed2 <__divsf3_pse>:
     ed2:	99 23       	and	r25, r25
     ed4:	b1 f3       	breq	.-20     	; 0xec2 <__divsf3+0x1e>
     ed6:	55 23       	and	r21, r21
     ed8:	91 f3       	breq	.-28     	; 0xebe <__divsf3+0x1a>
     eda:	95 1b       	sub	r25, r21
     edc:	55 0b       	sbc	r21, r21
     ede:	bb 27       	eor	r27, r27
     ee0:	aa 27       	eor	r26, r26
     ee2:	62 17       	cp	r22, r18
     ee4:	73 07       	cpc	r23, r19
     ee6:	84 07       	cpc	r24, r20
     ee8:	38 f0       	brcs	.+14     	; 0xef8 <__divsf3_pse+0x26>
     eea:	9f 5f       	subi	r25, 0xFF	; 255
     eec:	5f 4f       	sbci	r21, 0xFF	; 255
     eee:	22 0f       	add	r18, r18
     ef0:	33 1f       	adc	r19, r19
     ef2:	44 1f       	adc	r20, r20
     ef4:	aa 1f       	adc	r26, r26
     ef6:	a9 f3       	breq	.-22     	; 0xee2 <__divsf3_pse+0x10>
     ef8:	35 d0       	rcall	.+106    	; 0xf64 <__divsf3_pse+0x92>
     efa:	0e 2e       	mov	r0, r30
     efc:	3a f0       	brmi	.+14     	; 0xf0c <__divsf3_pse+0x3a>
     efe:	e0 e8       	ldi	r30, 0x80	; 128
     f00:	32 d0       	rcall	.+100    	; 0xf66 <__divsf3_pse+0x94>
     f02:	91 50       	subi	r25, 0x01	; 1
     f04:	50 40       	sbci	r21, 0x00	; 0
     f06:	e6 95       	lsr	r30
     f08:	00 1c       	adc	r0, r0
     f0a:	ca f7       	brpl	.-14     	; 0xefe <__divsf3_pse+0x2c>
     f0c:	2b d0       	rcall	.+86     	; 0xf64 <__divsf3_pse+0x92>
     f0e:	fe 2f       	mov	r31, r30
     f10:	29 d0       	rcall	.+82     	; 0xf64 <__divsf3_pse+0x92>
     f12:	66 0f       	add	r22, r22
     f14:	77 1f       	adc	r23, r23
     f16:	88 1f       	adc	r24, r24
     f18:	bb 1f       	adc	r27, r27
     f1a:	26 17       	cp	r18, r22
     f1c:	37 07       	cpc	r19, r23
     f1e:	48 07       	cpc	r20, r24
     f20:	ab 07       	cpc	r26, r27
     f22:	b0 e8       	ldi	r27, 0x80	; 128
     f24:	09 f0       	breq	.+2      	; 0xf28 <__divsf3_pse+0x56>
     f26:	bb 0b       	sbc	r27, r27
     f28:	80 2d       	mov	r24, r0
     f2a:	bf 01       	movw	r22, r30
     f2c:	ff 27       	eor	r31, r31
     f2e:	93 58       	subi	r25, 0x83	; 131
     f30:	5f 4f       	sbci	r21, 0xFF	; 255
     f32:	3a f0       	brmi	.+14     	; 0xf42 <__divsf3_pse+0x70>
     f34:	9e 3f       	cpi	r25, 0xFE	; 254
     f36:	51 05       	cpc	r21, r1
     f38:	78 f0       	brcs	.+30     	; 0xf58 <__divsf3_pse+0x86>
     f3a:	0c 94 54 08 	jmp	0x10a8	; 0x10a8 <__fp_inf>
     f3e:	0c 94 9f 08 	jmp	0x113e	; 0x113e <__fp_szero>
     f42:	5f 3f       	cpi	r21, 0xFF	; 255
     f44:	e4 f3       	brlt	.-8      	; 0xf3e <__divsf3_pse+0x6c>
     f46:	98 3e       	cpi	r25, 0xE8	; 232
     f48:	d4 f3       	brlt	.-12     	; 0xf3e <__divsf3_pse+0x6c>
     f4a:	86 95       	lsr	r24
     f4c:	77 95       	ror	r23
     f4e:	67 95       	ror	r22
     f50:	b7 95       	ror	r27
     f52:	f7 95       	ror	r31
     f54:	9f 5f       	subi	r25, 0xFF	; 255
     f56:	c9 f7       	brne	.-14     	; 0xf4a <__divsf3_pse+0x78>
     f58:	88 0f       	add	r24, r24
     f5a:	91 1d       	adc	r25, r1
     f5c:	96 95       	lsr	r25
     f5e:	87 95       	ror	r24
     f60:	97 f9       	bld	r25, 7
     f62:	08 95       	ret
     f64:	e1 e0       	ldi	r30, 0x01	; 1
     f66:	66 0f       	add	r22, r22
     f68:	77 1f       	adc	r23, r23
     f6a:	88 1f       	adc	r24, r24
     f6c:	bb 1f       	adc	r27, r27
     f6e:	62 17       	cp	r22, r18
     f70:	73 07       	cpc	r23, r19
     f72:	84 07       	cpc	r24, r20
     f74:	ba 07       	cpc	r27, r26
     f76:	20 f0       	brcs	.+8      	; 0xf80 <__divsf3_pse+0xae>
     f78:	62 1b       	sub	r22, r18
     f7a:	73 0b       	sbc	r23, r19
     f7c:	84 0b       	sbc	r24, r20
     f7e:	ba 0b       	sbc	r27, r26
     f80:	ee 1f       	adc	r30, r30
     f82:	88 f7       	brcc	.-30     	; 0xf66 <__divsf3_pse+0x94>
     f84:	e0 95       	com	r30
     f86:	08 95       	ret

00000f88 <__fixunssfsi>:
     f88:	0e 94 84 08 	call	0x1108	; 0x1108 <__fp_splitA>
     f8c:	88 f0       	brcs	.+34     	; 0xfb0 <__fixunssfsi+0x28>
     f8e:	9f 57       	subi	r25, 0x7F	; 127
     f90:	98 f0       	brcs	.+38     	; 0xfb8 <__fixunssfsi+0x30>
     f92:	b9 2f       	mov	r27, r25
     f94:	99 27       	eor	r25, r25
     f96:	b7 51       	subi	r27, 0x17	; 23
     f98:	b0 f0       	brcs	.+44     	; 0xfc6 <__fixunssfsi+0x3e>
     f9a:	e1 f0       	breq	.+56     	; 0xfd4 <__fixunssfsi+0x4c>
     f9c:	66 0f       	add	r22, r22
     f9e:	77 1f       	adc	r23, r23
     fa0:	88 1f       	adc	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	1a f0       	brmi	.+6      	; 0xfac <__fixunssfsi+0x24>
     fa6:	ba 95       	dec	r27
     fa8:	c9 f7       	brne	.-14     	; 0xf9c <__fixunssfsi+0x14>
     faa:	14 c0       	rjmp	.+40     	; 0xfd4 <__fixunssfsi+0x4c>
     fac:	b1 30       	cpi	r27, 0x01	; 1
     fae:	91 f0       	breq	.+36     	; 0xfd4 <__fixunssfsi+0x4c>
     fb0:	0e 94 9e 08 	call	0x113c	; 0x113c <__fp_zero>
     fb4:	b1 e0       	ldi	r27, 0x01	; 1
     fb6:	08 95       	ret
     fb8:	0c 94 9e 08 	jmp	0x113c	; 0x113c <__fp_zero>
     fbc:	67 2f       	mov	r22, r23
     fbe:	78 2f       	mov	r23, r24
     fc0:	88 27       	eor	r24, r24
     fc2:	b8 5f       	subi	r27, 0xF8	; 248
     fc4:	39 f0       	breq	.+14     	; 0xfd4 <__fixunssfsi+0x4c>
     fc6:	b9 3f       	cpi	r27, 0xF9	; 249
     fc8:	cc f3       	brlt	.-14     	; 0xfbc <__fixunssfsi+0x34>
     fca:	86 95       	lsr	r24
     fcc:	77 95       	ror	r23
     fce:	67 95       	ror	r22
     fd0:	b3 95       	inc	r27
     fd2:	d9 f7       	brne	.-10     	; 0xfca <__fixunssfsi+0x42>
     fd4:	3e f4       	brtc	.+14     	; 0xfe4 <__fixunssfsi+0x5c>
     fd6:	90 95       	com	r25
     fd8:	80 95       	com	r24
     fda:	70 95       	com	r23
     fdc:	61 95       	neg	r22
     fde:	7f 4f       	sbci	r23, 0xFF	; 255
     fe0:	8f 4f       	sbci	r24, 0xFF	; 255
     fe2:	9f 4f       	sbci	r25, 0xFF	; 255
     fe4:	08 95       	ret

00000fe6 <__floatunsisf>:
     fe6:	e8 94       	clt
     fe8:	09 c0       	rjmp	.+18     	; 0xffc <__floatsisf+0x12>

00000fea <__floatsisf>:
     fea:	97 fb       	bst	r25, 7
     fec:	3e f4       	brtc	.+14     	; 0xffc <__floatsisf+0x12>
     fee:	90 95       	com	r25
     ff0:	80 95       	com	r24
     ff2:	70 95       	com	r23
     ff4:	61 95       	neg	r22
     ff6:	7f 4f       	sbci	r23, 0xFF	; 255
     ff8:	8f 4f       	sbci	r24, 0xFF	; 255
     ffa:	9f 4f       	sbci	r25, 0xFF	; 255
     ffc:	99 23       	and	r25, r25
     ffe:	a9 f0       	breq	.+42     	; 0x102a <__floatsisf+0x40>
    1000:	f9 2f       	mov	r31, r25
    1002:	96 e9       	ldi	r25, 0x96	; 150
    1004:	bb 27       	eor	r27, r27
    1006:	93 95       	inc	r25
    1008:	f6 95       	lsr	r31
    100a:	87 95       	ror	r24
    100c:	77 95       	ror	r23
    100e:	67 95       	ror	r22
    1010:	b7 95       	ror	r27
    1012:	f1 11       	cpse	r31, r1
    1014:	f8 cf       	rjmp	.-16     	; 0x1006 <__floatsisf+0x1c>
    1016:	fa f4       	brpl	.+62     	; 0x1056 <__floatsisf+0x6c>
    1018:	bb 0f       	add	r27, r27
    101a:	11 f4       	brne	.+4      	; 0x1020 <__floatsisf+0x36>
    101c:	60 ff       	sbrs	r22, 0
    101e:	1b c0       	rjmp	.+54     	; 0x1056 <__floatsisf+0x6c>
    1020:	6f 5f       	subi	r22, 0xFF	; 255
    1022:	7f 4f       	sbci	r23, 0xFF	; 255
    1024:	8f 4f       	sbci	r24, 0xFF	; 255
    1026:	9f 4f       	sbci	r25, 0xFF	; 255
    1028:	16 c0       	rjmp	.+44     	; 0x1056 <__floatsisf+0x6c>
    102a:	88 23       	and	r24, r24
    102c:	11 f0       	breq	.+4      	; 0x1032 <__floatsisf+0x48>
    102e:	96 e9       	ldi	r25, 0x96	; 150
    1030:	11 c0       	rjmp	.+34     	; 0x1054 <__floatsisf+0x6a>
    1032:	77 23       	and	r23, r23
    1034:	21 f0       	breq	.+8      	; 0x103e <__floatsisf+0x54>
    1036:	9e e8       	ldi	r25, 0x8E	; 142
    1038:	87 2f       	mov	r24, r23
    103a:	76 2f       	mov	r23, r22
    103c:	05 c0       	rjmp	.+10     	; 0x1048 <__floatsisf+0x5e>
    103e:	66 23       	and	r22, r22
    1040:	71 f0       	breq	.+28     	; 0x105e <__floatsisf+0x74>
    1042:	96 e8       	ldi	r25, 0x86	; 134
    1044:	86 2f       	mov	r24, r22
    1046:	70 e0       	ldi	r23, 0x00	; 0
    1048:	60 e0       	ldi	r22, 0x00	; 0
    104a:	2a f0       	brmi	.+10     	; 0x1056 <__floatsisf+0x6c>
    104c:	9a 95       	dec	r25
    104e:	66 0f       	add	r22, r22
    1050:	77 1f       	adc	r23, r23
    1052:	88 1f       	adc	r24, r24
    1054:	da f7       	brpl	.-10     	; 0x104c <__floatsisf+0x62>
    1056:	88 0f       	add	r24, r24
    1058:	96 95       	lsr	r25
    105a:	87 95       	ror	r24
    105c:	97 f9       	bld	r25, 7
    105e:	08 95       	ret

00001060 <__fp_cmp>:
    1060:	99 0f       	add	r25, r25
    1062:	00 08       	sbc	r0, r0
    1064:	55 0f       	add	r21, r21
    1066:	aa 0b       	sbc	r26, r26
    1068:	e0 e8       	ldi	r30, 0x80	; 128
    106a:	fe ef       	ldi	r31, 0xFE	; 254
    106c:	16 16       	cp	r1, r22
    106e:	17 06       	cpc	r1, r23
    1070:	e8 07       	cpc	r30, r24
    1072:	f9 07       	cpc	r31, r25
    1074:	c0 f0       	brcs	.+48     	; 0x10a6 <__fp_cmp+0x46>
    1076:	12 16       	cp	r1, r18
    1078:	13 06       	cpc	r1, r19
    107a:	e4 07       	cpc	r30, r20
    107c:	f5 07       	cpc	r31, r21
    107e:	98 f0       	brcs	.+38     	; 0x10a6 <__fp_cmp+0x46>
    1080:	62 1b       	sub	r22, r18
    1082:	73 0b       	sbc	r23, r19
    1084:	84 0b       	sbc	r24, r20
    1086:	95 0b       	sbc	r25, r21
    1088:	39 f4       	brne	.+14     	; 0x1098 <__fp_cmp+0x38>
    108a:	0a 26       	eor	r0, r26
    108c:	61 f0       	breq	.+24     	; 0x10a6 <__fp_cmp+0x46>
    108e:	23 2b       	or	r18, r19
    1090:	24 2b       	or	r18, r20
    1092:	25 2b       	or	r18, r21
    1094:	21 f4       	brne	.+8      	; 0x109e <__fp_cmp+0x3e>
    1096:	08 95       	ret
    1098:	0a 26       	eor	r0, r26
    109a:	09 f4       	brne	.+2      	; 0x109e <__fp_cmp+0x3e>
    109c:	a1 40       	sbci	r26, 0x01	; 1
    109e:	a6 95       	lsr	r26
    10a0:	8f ef       	ldi	r24, 0xFF	; 255
    10a2:	81 1d       	adc	r24, r1
    10a4:	81 1d       	adc	r24, r1
    10a6:	08 95       	ret

000010a8 <__fp_inf>:
    10a8:	97 f9       	bld	r25, 7
    10aa:	9f 67       	ori	r25, 0x7F	; 127
    10ac:	80 e8       	ldi	r24, 0x80	; 128
    10ae:	70 e0       	ldi	r23, 0x00	; 0
    10b0:	60 e0       	ldi	r22, 0x00	; 0
    10b2:	08 95       	ret

000010b4 <__fp_nan>:
    10b4:	9f ef       	ldi	r25, 0xFF	; 255
    10b6:	80 ec       	ldi	r24, 0xC0	; 192
    10b8:	08 95       	ret

000010ba <__fp_pscA>:
    10ba:	00 24       	eor	r0, r0
    10bc:	0a 94       	dec	r0
    10be:	16 16       	cp	r1, r22
    10c0:	17 06       	cpc	r1, r23
    10c2:	18 06       	cpc	r1, r24
    10c4:	09 06       	cpc	r0, r25
    10c6:	08 95       	ret

000010c8 <__fp_pscB>:
    10c8:	00 24       	eor	r0, r0
    10ca:	0a 94       	dec	r0
    10cc:	12 16       	cp	r1, r18
    10ce:	13 06       	cpc	r1, r19
    10d0:	14 06       	cpc	r1, r20
    10d2:	05 06       	cpc	r0, r21
    10d4:	08 95       	ret

000010d6 <__fp_round>:
    10d6:	09 2e       	mov	r0, r25
    10d8:	03 94       	inc	r0
    10da:	00 0c       	add	r0, r0
    10dc:	11 f4       	brne	.+4      	; 0x10e2 <__fp_round+0xc>
    10de:	88 23       	and	r24, r24
    10e0:	52 f0       	brmi	.+20     	; 0x10f6 <__fp_round+0x20>
    10e2:	bb 0f       	add	r27, r27
    10e4:	40 f4       	brcc	.+16     	; 0x10f6 <__fp_round+0x20>
    10e6:	bf 2b       	or	r27, r31
    10e8:	11 f4       	brne	.+4      	; 0x10ee <__fp_round+0x18>
    10ea:	60 ff       	sbrs	r22, 0
    10ec:	04 c0       	rjmp	.+8      	; 0x10f6 <__fp_round+0x20>
    10ee:	6f 5f       	subi	r22, 0xFF	; 255
    10f0:	7f 4f       	sbci	r23, 0xFF	; 255
    10f2:	8f 4f       	sbci	r24, 0xFF	; 255
    10f4:	9f 4f       	sbci	r25, 0xFF	; 255
    10f6:	08 95       	ret

000010f8 <__fp_split3>:
    10f8:	57 fd       	sbrc	r21, 7
    10fa:	90 58       	subi	r25, 0x80	; 128
    10fc:	44 0f       	add	r20, r20
    10fe:	55 1f       	adc	r21, r21
    1100:	59 f0       	breq	.+22     	; 0x1118 <__fp_splitA+0x10>
    1102:	5f 3f       	cpi	r21, 0xFF	; 255
    1104:	71 f0       	breq	.+28     	; 0x1122 <__fp_splitA+0x1a>
    1106:	47 95       	ror	r20

00001108 <__fp_splitA>:
    1108:	88 0f       	add	r24, r24
    110a:	97 fb       	bst	r25, 7
    110c:	99 1f       	adc	r25, r25
    110e:	61 f0       	breq	.+24     	; 0x1128 <__fp_splitA+0x20>
    1110:	9f 3f       	cpi	r25, 0xFF	; 255
    1112:	79 f0       	breq	.+30     	; 0x1132 <__fp_splitA+0x2a>
    1114:	87 95       	ror	r24
    1116:	08 95       	ret
    1118:	12 16       	cp	r1, r18
    111a:	13 06       	cpc	r1, r19
    111c:	14 06       	cpc	r1, r20
    111e:	55 1f       	adc	r21, r21
    1120:	f2 cf       	rjmp	.-28     	; 0x1106 <__fp_split3+0xe>
    1122:	46 95       	lsr	r20
    1124:	f1 df       	rcall	.-30     	; 0x1108 <__fp_splitA>
    1126:	08 c0       	rjmp	.+16     	; 0x1138 <__fp_splitA+0x30>
    1128:	16 16       	cp	r1, r22
    112a:	17 06       	cpc	r1, r23
    112c:	18 06       	cpc	r1, r24
    112e:	99 1f       	adc	r25, r25
    1130:	f1 cf       	rjmp	.-30     	; 0x1114 <__fp_splitA+0xc>
    1132:	86 95       	lsr	r24
    1134:	71 05       	cpc	r23, r1
    1136:	61 05       	cpc	r22, r1
    1138:	08 94       	sec
    113a:	08 95       	ret

0000113c <__fp_zero>:
    113c:	e8 94       	clt

0000113e <__fp_szero>:
    113e:	bb 27       	eor	r27, r27
    1140:	66 27       	eor	r22, r22
    1142:	77 27       	eor	r23, r23
    1144:	cb 01       	movw	r24, r22
    1146:	97 f9       	bld	r25, 7
    1148:	08 95       	ret

0000114a <__gesf2>:
    114a:	0e 94 30 08 	call	0x1060	; 0x1060 <__fp_cmp>
    114e:	08 f4       	brcc	.+2      	; 0x1152 <__gesf2+0x8>
    1150:	8f ef       	ldi	r24, 0xFF	; 255
    1152:	08 95       	ret

00001154 <__mulsf3>:
    1154:	0e 94 bd 08 	call	0x117a	; 0x117a <__mulsf3x>
    1158:	0c 94 6b 08 	jmp	0x10d6	; 0x10d6 <__fp_round>
    115c:	0e 94 5d 08 	call	0x10ba	; 0x10ba <__fp_pscA>
    1160:	38 f0       	brcs	.+14     	; 0x1170 <__mulsf3+0x1c>
    1162:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__fp_pscB>
    1166:	20 f0       	brcs	.+8      	; 0x1170 <__mulsf3+0x1c>
    1168:	95 23       	and	r25, r21
    116a:	11 f0       	breq	.+4      	; 0x1170 <__mulsf3+0x1c>
    116c:	0c 94 54 08 	jmp	0x10a8	; 0x10a8 <__fp_inf>
    1170:	0c 94 5a 08 	jmp	0x10b4	; 0x10b4 <__fp_nan>
    1174:	11 24       	eor	r1, r1
    1176:	0c 94 9f 08 	jmp	0x113e	; 0x113e <__fp_szero>

0000117a <__mulsf3x>:
    117a:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <__fp_split3>
    117e:	70 f3       	brcs	.-36     	; 0x115c <__mulsf3+0x8>

00001180 <__mulsf3_pse>:
    1180:	95 9f       	mul	r25, r21
    1182:	c1 f3       	breq	.-16     	; 0x1174 <__mulsf3+0x20>
    1184:	95 0f       	add	r25, r21
    1186:	50 e0       	ldi	r21, 0x00	; 0
    1188:	55 1f       	adc	r21, r21
    118a:	62 9f       	mul	r22, r18
    118c:	f0 01       	movw	r30, r0
    118e:	72 9f       	mul	r23, r18
    1190:	bb 27       	eor	r27, r27
    1192:	f0 0d       	add	r31, r0
    1194:	b1 1d       	adc	r27, r1
    1196:	63 9f       	mul	r22, r19
    1198:	aa 27       	eor	r26, r26
    119a:	f0 0d       	add	r31, r0
    119c:	b1 1d       	adc	r27, r1
    119e:	aa 1f       	adc	r26, r26
    11a0:	64 9f       	mul	r22, r20
    11a2:	66 27       	eor	r22, r22
    11a4:	b0 0d       	add	r27, r0
    11a6:	a1 1d       	adc	r26, r1
    11a8:	66 1f       	adc	r22, r22
    11aa:	82 9f       	mul	r24, r18
    11ac:	22 27       	eor	r18, r18
    11ae:	b0 0d       	add	r27, r0
    11b0:	a1 1d       	adc	r26, r1
    11b2:	62 1f       	adc	r22, r18
    11b4:	73 9f       	mul	r23, r19
    11b6:	b0 0d       	add	r27, r0
    11b8:	a1 1d       	adc	r26, r1
    11ba:	62 1f       	adc	r22, r18
    11bc:	83 9f       	mul	r24, r19
    11be:	a0 0d       	add	r26, r0
    11c0:	61 1d       	adc	r22, r1
    11c2:	22 1f       	adc	r18, r18
    11c4:	74 9f       	mul	r23, r20
    11c6:	33 27       	eor	r19, r19
    11c8:	a0 0d       	add	r26, r0
    11ca:	61 1d       	adc	r22, r1
    11cc:	23 1f       	adc	r18, r19
    11ce:	84 9f       	mul	r24, r20
    11d0:	60 0d       	add	r22, r0
    11d2:	21 1d       	adc	r18, r1
    11d4:	82 2f       	mov	r24, r18
    11d6:	76 2f       	mov	r23, r22
    11d8:	6a 2f       	mov	r22, r26
    11da:	11 24       	eor	r1, r1
    11dc:	9f 57       	subi	r25, 0x7F	; 127
    11de:	50 40       	sbci	r21, 0x00	; 0
    11e0:	9a f0       	brmi	.+38     	; 0x1208 <__mulsf3_pse+0x88>
    11e2:	f1 f0       	breq	.+60     	; 0x1220 <__mulsf3_pse+0xa0>
    11e4:	88 23       	and	r24, r24
    11e6:	4a f0       	brmi	.+18     	; 0x11fa <__mulsf3_pse+0x7a>
    11e8:	ee 0f       	add	r30, r30
    11ea:	ff 1f       	adc	r31, r31
    11ec:	bb 1f       	adc	r27, r27
    11ee:	66 1f       	adc	r22, r22
    11f0:	77 1f       	adc	r23, r23
    11f2:	88 1f       	adc	r24, r24
    11f4:	91 50       	subi	r25, 0x01	; 1
    11f6:	50 40       	sbci	r21, 0x00	; 0
    11f8:	a9 f7       	brne	.-22     	; 0x11e4 <__mulsf3_pse+0x64>
    11fa:	9e 3f       	cpi	r25, 0xFE	; 254
    11fc:	51 05       	cpc	r21, r1
    11fe:	80 f0       	brcs	.+32     	; 0x1220 <__mulsf3_pse+0xa0>
    1200:	0c 94 54 08 	jmp	0x10a8	; 0x10a8 <__fp_inf>
    1204:	0c 94 9f 08 	jmp	0x113e	; 0x113e <__fp_szero>
    1208:	5f 3f       	cpi	r21, 0xFF	; 255
    120a:	e4 f3       	brlt	.-8      	; 0x1204 <__mulsf3_pse+0x84>
    120c:	98 3e       	cpi	r25, 0xE8	; 232
    120e:	d4 f3       	brlt	.-12     	; 0x1204 <__mulsf3_pse+0x84>
    1210:	86 95       	lsr	r24
    1212:	77 95       	ror	r23
    1214:	67 95       	ror	r22
    1216:	b7 95       	ror	r27
    1218:	f7 95       	ror	r31
    121a:	e7 95       	ror	r30
    121c:	9f 5f       	subi	r25, 0xFF	; 255
    121e:	c1 f7       	brne	.-16     	; 0x1210 <__mulsf3_pse+0x90>
    1220:	fe 2b       	or	r31, r30
    1222:	88 0f       	add	r24, r24
    1224:	91 1d       	adc	r25, r1
    1226:	96 95       	lsr	r25
    1228:	87 95       	ror	r24
    122a:	97 f9       	bld	r25, 7
    122c:	08 95       	ret

0000122e <vfprintf>:
    122e:	a3 e1       	ldi	r26, 0x13	; 19
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	ed e1       	ldi	r30, 0x1D	; 29
    1234:	f9 e0       	ldi	r31, 0x09	; 9
    1236:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__prologue_saves__>
    123a:	6c 01       	movw	r12, r24
    123c:	4b 01       	movw	r8, r22
    123e:	2a 01       	movw	r4, r20
    1240:	fc 01       	movw	r30, r24
    1242:	17 82       	std	Z+7, r1	; 0x07
    1244:	16 82       	std	Z+6, r1	; 0x06
    1246:	83 81       	ldd	r24, Z+3	; 0x03
    1248:	81 ff       	sbrs	r24, 1
    124a:	43 c3       	rjmp	.+1670   	; 0x18d2 <vfprintf+0x6a4>
    124c:	ae 01       	movw	r20, r28
    124e:	4f 5f       	subi	r20, 0xFF	; 255
    1250:	5f 4f       	sbci	r21, 0xFF	; 255
    1252:	3a 01       	movw	r6, r20
    1254:	f6 01       	movw	r30, r12
    1256:	93 81       	ldd	r25, Z+3	; 0x03
    1258:	f4 01       	movw	r30, r8
    125a:	93 fd       	sbrc	r25, 3
    125c:	85 91       	lpm	r24, Z+
    125e:	93 ff       	sbrs	r25, 3
    1260:	81 91       	ld	r24, Z+
    1262:	4f 01       	movw	r8, r30
    1264:	88 23       	and	r24, r24
    1266:	09 f4       	brne	.+2      	; 0x126a <vfprintf+0x3c>
    1268:	30 c3       	rjmp	.+1632   	; 0x18ca <vfprintf+0x69c>
    126a:	85 32       	cpi	r24, 0x25	; 37
    126c:	39 f4       	brne	.+14     	; 0x127c <vfprintf+0x4e>
    126e:	93 fd       	sbrc	r25, 3
    1270:	85 91       	lpm	r24, Z+
    1272:	93 ff       	sbrs	r25, 3
    1274:	81 91       	ld	r24, Z+
    1276:	4f 01       	movw	r8, r30
    1278:	85 32       	cpi	r24, 0x25	; 37
    127a:	39 f4       	brne	.+14     	; 0x128a <vfprintf+0x5c>
    127c:	b6 01       	movw	r22, r12
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <fputc>
    1284:	52 01       	movw	r10, r4
    1286:	25 01       	movw	r4, r10
    1288:	e5 cf       	rjmp	.-54     	; 0x1254 <vfprintf+0x26>
    128a:	10 e0       	ldi	r17, 0x00	; 0
    128c:	f1 2c       	mov	r15, r1
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	20 32       	cpi	r18, 0x20	; 32
    1292:	a0 f4       	brcc	.+40     	; 0x12bc <vfprintf+0x8e>
    1294:	8b 32       	cpi	r24, 0x2B	; 43
    1296:	69 f0       	breq	.+26     	; 0x12b2 <vfprintf+0x84>
    1298:	30 f4       	brcc	.+12     	; 0x12a6 <vfprintf+0x78>
    129a:	80 32       	cpi	r24, 0x20	; 32
    129c:	59 f0       	breq	.+22     	; 0x12b4 <vfprintf+0x86>
    129e:	83 32       	cpi	r24, 0x23	; 35
    12a0:	69 f4       	brne	.+26     	; 0x12bc <vfprintf+0x8e>
    12a2:	20 61       	ori	r18, 0x10	; 16
    12a4:	2c c0       	rjmp	.+88     	; 0x12fe <vfprintf+0xd0>
    12a6:	8d 32       	cpi	r24, 0x2D	; 45
    12a8:	39 f0       	breq	.+14     	; 0x12b8 <vfprintf+0x8a>
    12aa:	80 33       	cpi	r24, 0x30	; 48
    12ac:	39 f4       	brne	.+14     	; 0x12bc <vfprintf+0x8e>
    12ae:	21 60       	ori	r18, 0x01	; 1
    12b0:	26 c0       	rjmp	.+76     	; 0x12fe <vfprintf+0xd0>
    12b2:	22 60       	ori	r18, 0x02	; 2
    12b4:	24 60       	ori	r18, 0x04	; 4
    12b6:	23 c0       	rjmp	.+70     	; 0x12fe <vfprintf+0xd0>
    12b8:	28 60       	ori	r18, 0x08	; 8
    12ba:	21 c0       	rjmp	.+66     	; 0x12fe <vfprintf+0xd0>
    12bc:	27 fd       	sbrc	r18, 7
    12be:	27 c0       	rjmp	.+78     	; 0x130e <vfprintf+0xe0>
    12c0:	30 ed       	ldi	r19, 0xD0	; 208
    12c2:	38 0f       	add	r19, r24
    12c4:	3a 30       	cpi	r19, 0x0A	; 10
    12c6:	78 f4       	brcc	.+30     	; 0x12e6 <vfprintf+0xb8>
    12c8:	26 ff       	sbrs	r18, 6
    12ca:	06 c0       	rjmp	.+12     	; 0x12d8 <vfprintf+0xaa>
    12cc:	fa e0       	ldi	r31, 0x0A	; 10
    12ce:	1f 9f       	mul	r17, r31
    12d0:	30 0d       	add	r19, r0
    12d2:	11 24       	eor	r1, r1
    12d4:	13 2f       	mov	r17, r19
    12d6:	13 c0       	rjmp	.+38     	; 0x12fe <vfprintf+0xd0>
    12d8:	4a e0       	ldi	r20, 0x0A	; 10
    12da:	f4 9e       	mul	r15, r20
    12dc:	30 0d       	add	r19, r0
    12de:	11 24       	eor	r1, r1
    12e0:	f3 2e       	mov	r15, r19
    12e2:	20 62       	ori	r18, 0x20	; 32
    12e4:	0c c0       	rjmp	.+24     	; 0x12fe <vfprintf+0xd0>
    12e6:	8e 32       	cpi	r24, 0x2E	; 46
    12e8:	21 f4       	brne	.+8      	; 0x12f2 <vfprintf+0xc4>
    12ea:	26 fd       	sbrc	r18, 6
    12ec:	ee c2       	rjmp	.+1500   	; 0x18ca <vfprintf+0x69c>
    12ee:	20 64       	ori	r18, 0x40	; 64
    12f0:	06 c0       	rjmp	.+12     	; 0x12fe <vfprintf+0xd0>
    12f2:	8c 36       	cpi	r24, 0x6C	; 108
    12f4:	11 f4       	brne	.+4      	; 0x12fa <vfprintf+0xcc>
    12f6:	20 68       	ori	r18, 0x80	; 128
    12f8:	02 c0       	rjmp	.+4      	; 0x12fe <vfprintf+0xd0>
    12fa:	88 36       	cpi	r24, 0x68	; 104
    12fc:	41 f4       	brne	.+16     	; 0x130e <vfprintf+0xe0>
    12fe:	f4 01       	movw	r30, r8
    1300:	93 fd       	sbrc	r25, 3
    1302:	85 91       	lpm	r24, Z+
    1304:	93 ff       	sbrs	r25, 3
    1306:	81 91       	ld	r24, Z+
    1308:	4f 01       	movw	r8, r30
    130a:	81 11       	cpse	r24, r1
    130c:	c1 cf       	rjmp	.-126    	; 0x1290 <vfprintf+0x62>
    130e:	9b eb       	ldi	r25, 0xBB	; 187
    1310:	98 0f       	add	r25, r24
    1312:	93 30       	cpi	r25, 0x03	; 3
    1314:	18 f4       	brcc	.+6      	; 0x131c <vfprintf+0xee>
    1316:	20 61       	ori	r18, 0x10	; 16
    1318:	80 5e       	subi	r24, 0xE0	; 224
    131a:	06 c0       	rjmp	.+12     	; 0x1328 <vfprintf+0xfa>
    131c:	9b e9       	ldi	r25, 0x9B	; 155
    131e:	98 0f       	add	r25, r24
    1320:	93 30       	cpi	r25, 0x03	; 3
    1322:	08 f0       	brcs	.+2      	; 0x1326 <vfprintf+0xf8>
    1324:	71 c1       	rjmp	.+738    	; 0x1608 <vfprintf+0x3da>
    1326:	2f 7e       	andi	r18, 0xEF	; 239
    1328:	26 ff       	sbrs	r18, 6
    132a:	16 e0       	ldi	r17, 0x06	; 6
    132c:	2f 73       	andi	r18, 0x3F	; 63
    132e:	32 2e       	mov	r3, r18
    1330:	85 36       	cpi	r24, 0x65	; 101
    1332:	19 f4       	brne	.+6      	; 0x133a <vfprintf+0x10c>
    1334:	20 64       	ori	r18, 0x40	; 64
    1336:	32 2e       	mov	r3, r18
    1338:	08 c0       	rjmp	.+16     	; 0x134a <vfprintf+0x11c>
    133a:	86 36       	cpi	r24, 0x66	; 102
    133c:	21 f4       	brne	.+8      	; 0x1346 <vfprintf+0x118>
    133e:	f2 2f       	mov	r31, r18
    1340:	f0 68       	ori	r31, 0x80	; 128
    1342:	3f 2e       	mov	r3, r31
    1344:	02 c0       	rjmp	.+4      	; 0x134a <vfprintf+0x11c>
    1346:	11 11       	cpse	r17, r1
    1348:	11 50       	subi	r17, 0x01	; 1
    134a:	37 fe       	sbrs	r3, 7
    134c:	07 c0       	rjmp	.+14     	; 0x135c <vfprintf+0x12e>
    134e:	1c 33       	cpi	r17, 0x3C	; 60
    1350:	50 f4       	brcc	.+20     	; 0x1366 <vfprintf+0x138>
    1352:	ee 24       	eor	r14, r14
    1354:	e3 94       	inc	r14
    1356:	e1 0e       	add	r14, r17
    1358:	27 e0       	ldi	r18, 0x07	; 7
    135a:	0b c0       	rjmp	.+22     	; 0x1372 <vfprintf+0x144>
    135c:	18 30       	cpi	r17, 0x08	; 8
    135e:	38 f0       	brcs	.+14     	; 0x136e <vfprintf+0x140>
    1360:	27 e0       	ldi	r18, 0x07	; 7
    1362:	17 e0       	ldi	r17, 0x07	; 7
    1364:	05 c0       	rjmp	.+10     	; 0x1370 <vfprintf+0x142>
    1366:	27 e0       	ldi	r18, 0x07	; 7
    1368:	4c e3       	ldi	r20, 0x3C	; 60
    136a:	e4 2e       	mov	r14, r20
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <vfprintf+0x144>
    136e:	21 2f       	mov	r18, r17
    1370:	e1 2c       	mov	r14, r1
    1372:	52 01       	movw	r10, r4
    1374:	44 e0       	ldi	r20, 0x04	; 4
    1376:	a4 0e       	add	r10, r20
    1378:	b1 1c       	adc	r11, r1
    137a:	f2 01       	movw	r30, r4
    137c:	60 81       	ld	r22, Z
    137e:	71 81       	ldd	r23, Z+1	; 0x01
    1380:	82 81       	ldd	r24, Z+2	; 0x02
    1382:	93 81       	ldd	r25, Z+3	; 0x03
    1384:	0e 2d       	mov	r16, r14
    1386:	a3 01       	movw	r20, r6
    1388:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <__ftoa_engine>
    138c:	2c 01       	movw	r4, r24
    138e:	09 81       	ldd	r16, Y+1	; 0x01
    1390:	00 ff       	sbrs	r16, 0
    1392:	02 c0       	rjmp	.+4      	; 0x1398 <vfprintf+0x16a>
    1394:	03 ff       	sbrs	r16, 3
    1396:	07 c0       	rjmp	.+14     	; 0x13a6 <vfprintf+0x178>
    1398:	31 fc       	sbrc	r3, 1
    139a:	08 c0       	rjmp	.+16     	; 0x13ac <vfprintf+0x17e>
    139c:	32 fe       	sbrs	r3, 2
    139e:	09 c0       	rjmp	.+18     	; 0x13b2 <vfprintf+0x184>
    13a0:	30 e2       	ldi	r19, 0x20	; 32
    13a2:	23 2e       	mov	r2, r19
    13a4:	07 c0       	rjmp	.+14     	; 0x13b4 <vfprintf+0x186>
    13a6:	2d e2       	ldi	r18, 0x2D	; 45
    13a8:	22 2e       	mov	r2, r18
    13aa:	04 c0       	rjmp	.+8      	; 0x13b4 <vfprintf+0x186>
    13ac:	9b e2       	ldi	r25, 0x2B	; 43
    13ae:	29 2e       	mov	r2, r25
    13b0:	01 c0       	rjmp	.+2      	; 0x13b4 <vfprintf+0x186>
    13b2:	21 2c       	mov	r2, r1
    13b4:	80 2f       	mov	r24, r16
    13b6:	8c 70       	andi	r24, 0x0C	; 12
    13b8:	19 f0       	breq	.+6      	; 0x13c0 <vfprintf+0x192>
    13ba:	21 10       	cpse	r2, r1
    13bc:	68 c2       	rjmp	.+1232   	; 0x188e <vfprintf+0x660>
    13be:	a8 c2       	rjmp	.+1360   	; 0x1910 <vfprintf+0x6e2>
    13c0:	37 fe       	sbrs	r3, 7
    13c2:	0f c0       	rjmp	.+30     	; 0x13e2 <vfprintf+0x1b4>
    13c4:	e4 0c       	add	r14, r4
    13c6:	04 ff       	sbrs	r16, 4
    13c8:	04 c0       	rjmp	.+8      	; 0x13d2 <vfprintf+0x1a4>
    13ca:	8a 81       	ldd	r24, Y+2	; 0x02
    13cc:	81 33       	cpi	r24, 0x31	; 49
    13ce:	09 f4       	brne	.+2      	; 0x13d2 <vfprintf+0x1a4>
    13d0:	ea 94       	dec	r14
    13d2:	1e 14       	cp	r1, r14
    13d4:	74 f5       	brge	.+92     	; 0x1432 <vfprintf+0x204>
    13d6:	f8 e0       	ldi	r31, 0x08	; 8
    13d8:	fe 15       	cp	r31, r14
    13da:	78 f5       	brcc	.+94     	; 0x143a <vfprintf+0x20c>
    13dc:	88 e0       	ldi	r24, 0x08	; 8
    13de:	e8 2e       	mov	r14, r24
    13e0:	2c c0       	rjmp	.+88     	; 0x143a <vfprintf+0x20c>
    13e2:	36 fc       	sbrc	r3, 6
    13e4:	2a c0       	rjmp	.+84     	; 0x143a <vfprintf+0x20c>
    13e6:	81 2f       	mov	r24, r17
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	84 15       	cp	r24, r4
    13ec:	95 05       	cpc	r25, r5
    13ee:	9c f0       	brlt	.+38     	; 0x1416 <vfprintf+0x1e8>
    13f0:	2c ef       	ldi	r18, 0xFC	; 252
    13f2:	42 16       	cp	r4, r18
    13f4:	2f ef       	ldi	r18, 0xFF	; 255
    13f6:	52 06       	cpc	r5, r18
    13f8:	74 f0       	brlt	.+28     	; 0x1416 <vfprintf+0x1e8>
    13fa:	43 2d       	mov	r20, r3
    13fc:	40 68       	ori	r20, 0x80	; 128
    13fe:	34 2e       	mov	r3, r20
    1400:	0a c0       	rjmp	.+20     	; 0x1416 <vfprintf+0x1e8>
    1402:	e2 e0       	ldi	r30, 0x02	; 2
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	ec 0f       	add	r30, r28
    1408:	fd 1f       	adc	r31, r29
    140a:	e1 0f       	add	r30, r17
    140c:	f1 1d       	adc	r31, r1
    140e:	80 81       	ld	r24, Z
    1410:	80 33       	cpi	r24, 0x30	; 48
    1412:	19 f4       	brne	.+6      	; 0x141a <vfprintf+0x1ec>
    1414:	11 50       	subi	r17, 0x01	; 1
    1416:	11 11       	cpse	r17, r1
    1418:	f4 cf       	rjmp	.-24     	; 0x1402 <vfprintf+0x1d4>
    141a:	37 fe       	sbrs	r3, 7
    141c:	0e c0       	rjmp	.+28     	; 0x143a <vfprintf+0x20c>
    141e:	ee 24       	eor	r14, r14
    1420:	e3 94       	inc	r14
    1422:	e1 0e       	add	r14, r17
    1424:	81 2f       	mov	r24, r17
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	48 16       	cp	r4, r24
    142a:	59 06       	cpc	r5, r25
    142c:	2c f4       	brge	.+10     	; 0x1438 <vfprintf+0x20a>
    142e:	14 19       	sub	r17, r4
    1430:	04 c0       	rjmp	.+8      	; 0x143a <vfprintf+0x20c>
    1432:	ee 24       	eor	r14, r14
    1434:	e3 94       	inc	r14
    1436:	01 c0       	rjmp	.+2      	; 0x143a <vfprintf+0x20c>
    1438:	10 e0       	ldi	r17, 0x00	; 0
    143a:	37 fe       	sbrs	r3, 7
    143c:	06 c0       	rjmp	.+12     	; 0x144a <vfprintf+0x21c>
    143e:	14 14       	cp	r1, r4
    1440:	15 04       	cpc	r1, r5
    1442:	34 f4       	brge	.+12     	; 0x1450 <vfprintf+0x222>
    1444:	c2 01       	movw	r24, r4
    1446:	01 96       	adiw	r24, 0x01	; 1
    1448:	05 c0       	rjmp	.+10     	; 0x1454 <vfprintf+0x226>
    144a:	85 e0       	ldi	r24, 0x05	; 5
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <vfprintf+0x226>
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	21 10       	cpse	r2, r1
    1456:	01 96       	adiw	r24, 0x01	; 1
    1458:	11 23       	and	r17, r17
    145a:	31 f0       	breq	.+12     	; 0x1468 <vfprintf+0x23a>
    145c:	21 2f       	mov	r18, r17
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	2f 5f       	subi	r18, 0xFF	; 255
    1462:	3f 4f       	sbci	r19, 0xFF	; 255
    1464:	82 0f       	add	r24, r18
    1466:	93 1f       	adc	r25, r19
    1468:	2f 2d       	mov	r18, r15
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	82 17       	cp	r24, r18
    146e:	93 07       	cpc	r25, r19
    1470:	14 f4       	brge	.+4      	; 0x1476 <vfprintf+0x248>
    1472:	f8 1a       	sub	r15, r24
    1474:	01 c0       	rjmp	.+2      	; 0x1478 <vfprintf+0x24a>
    1476:	f1 2c       	mov	r15, r1
    1478:	83 2d       	mov	r24, r3
    147a:	89 70       	andi	r24, 0x09	; 9
    147c:	49 f4       	brne	.+18     	; 0x1490 <vfprintf+0x262>
    147e:	ff 20       	and	r15, r15
    1480:	39 f0       	breq	.+14     	; 0x1490 <vfprintf+0x262>
    1482:	b6 01       	movw	r22, r12
    1484:	80 e2       	ldi	r24, 0x20	; 32
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <fputc>
    148c:	fa 94       	dec	r15
    148e:	f7 cf       	rjmp	.-18     	; 0x147e <vfprintf+0x250>
    1490:	22 20       	and	r2, r2
    1492:	29 f0       	breq	.+10     	; 0x149e <vfprintf+0x270>
    1494:	b6 01       	movw	r22, r12
    1496:	82 2d       	mov	r24, r2
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <fputc>
    149e:	33 fc       	sbrc	r3, 3
    14a0:	09 c0       	rjmp	.+18     	; 0x14b4 <vfprintf+0x286>
    14a2:	ff 20       	and	r15, r15
    14a4:	39 f0       	breq	.+14     	; 0x14b4 <vfprintf+0x286>
    14a6:	b6 01       	movw	r22, r12
    14a8:	80 e3       	ldi	r24, 0x30	; 48
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <fputc>
    14b0:	fa 94       	dec	r15
    14b2:	f7 cf       	rjmp	.-18     	; 0x14a2 <vfprintf+0x274>
    14b4:	37 fe       	sbrs	r3, 7
    14b6:	5a c0       	rjmp	.+180    	; 0x156c <vfprintf+0x33e>
    14b8:	94 2d       	mov	r25, r4
    14ba:	85 2d       	mov	r24, r5
    14bc:	57 fe       	sbrs	r5, 7
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <vfprintf+0x296>
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	80 e0       	ldi	r24, 0x00	; 0
    14c4:	29 2e       	mov	r2, r25
    14c6:	38 2e       	mov	r3, r24
    14c8:	20 e0       	ldi	r18, 0x00	; 0
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	a2 01       	movw	r20, r4
    14ce:	4e 19       	sub	r20, r14
    14d0:	51 09       	sbc	r21, r1
    14d2:	5d 87       	std	Y+13, r21	; 0x0d
    14d4:	4c 87       	std	Y+12, r20	; 0x0c
    14d6:	a2 01       	movw	r20, r4
    14d8:	42 19       	sub	r20, r2
    14da:	53 09       	sbc	r21, r3
    14dc:	5f 87       	std	Y+15, r21	; 0x0f
    14de:	4e 87       	std	Y+14, r20	; 0x0e
    14e0:	61 2f       	mov	r22, r17
    14e2:	70 e0       	ldi	r23, 0x00	; 0
    14e4:	44 27       	eor	r20, r20
    14e6:	55 27       	eor	r21, r21
    14e8:	46 1b       	sub	r20, r22
    14ea:	57 0b       	sbc	r21, r23
    14ec:	59 8b       	std	Y+17, r21	; 0x11
    14ee:	48 8b       	std	Y+16, r20	; 0x10
    14f0:	5f ef       	ldi	r21, 0xFF	; 255
    14f2:	25 16       	cp	r2, r21
    14f4:	35 06       	cpc	r3, r21
    14f6:	49 f4       	brne	.+18     	; 0x150a <vfprintf+0x2dc>
    14f8:	b6 01       	movw	r22, r12
    14fa:	8e e2       	ldi	r24, 0x2E	; 46
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	2a 8b       	std	Y+18, r18	; 0x12
    1500:	3b 8b       	std	Y+19, r19	; 0x13
    1502:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <fputc>
    1506:	3b 89       	ldd	r19, Y+19	; 0x13
    1508:	2a 89       	ldd	r18, Y+18	; 0x12
    150a:	42 14       	cp	r4, r2
    150c:	53 04       	cpc	r5, r3
    150e:	6c f0       	brlt	.+26     	; 0x152a <vfprintf+0x2fc>
    1510:	4c 85       	ldd	r20, Y+12	; 0x0c
    1512:	5d 85       	ldd	r21, Y+13	; 0x0d
    1514:	42 15       	cp	r20, r2
    1516:	53 05       	cpc	r21, r3
    1518:	44 f4       	brge	.+16     	; 0x152a <vfprintf+0x2fc>
    151a:	ee 85       	ldd	r30, Y+14	; 0x0e
    151c:	ff 85       	ldd	r31, Y+15	; 0x0f
    151e:	e2 0f       	add	r30, r18
    1520:	f3 1f       	adc	r31, r19
    1522:	e6 0d       	add	r30, r6
    1524:	f7 1d       	adc	r31, r7
    1526:	81 81       	ldd	r24, Z+1	; 0x01
    1528:	01 c0       	rjmp	.+2      	; 0x152c <vfprintf+0x2fe>
    152a:	80 e3       	ldi	r24, 0x30	; 48
    152c:	51 e0       	ldi	r21, 0x01	; 1
    152e:	25 1a       	sub	r2, r21
    1530:	31 08       	sbc	r3, r1
    1532:	2f 5f       	subi	r18, 0xFF	; 255
    1534:	3f 4f       	sbci	r19, 0xFF	; 255
    1536:	48 89       	ldd	r20, Y+16	; 0x10
    1538:	59 89       	ldd	r21, Y+17	; 0x11
    153a:	24 16       	cp	r2, r20
    153c:	35 06       	cpc	r3, r21
    153e:	4c f0       	brlt	.+18     	; 0x1552 <vfprintf+0x324>
    1540:	b6 01       	movw	r22, r12
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	2a 8b       	std	Y+18, r18	; 0x12
    1546:	3b 8b       	std	Y+19, r19	; 0x13
    1548:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <fputc>
    154c:	2a 89       	ldd	r18, Y+18	; 0x12
    154e:	3b 89       	ldd	r19, Y+19	; 0x13
    1550:	cf cf       	rjmp	.-98     	; 0x14f0 <vfprintf+0x2c2>
    1552:	24 14       	cp	r2, r4
    1554:	35 04       	cpc	r3, r5
    1556:	39 f4       	brne	.+14     	; 0x1566 <vfprintf+0x338>
    1558:	9a 81       	ldd	r25, Y+2	; 0x02
    155a:	96 33       	cpi	r25, 0x36	; 54
    155c:	18 f4       	brcc	.+6      	; 0x1564 <vfprintf+0x336>
    155e:	95 33       	cpi	r25, 0x35	; 53
    1560:	11 f4       	brne	.+4      	; 0x1566 <vfprintf+0x338>
    1562:	04 ff       	sbrs	r16, 4
    1564:	81 e3       	ldi	r24, 0x31	; 49
    1566:	b6 01       	movw	r22, r12
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	4b c0       	rjmp	.+150    	; 0x1602 <vfprintf+0x3d4>
    156c:	8a 81       	ldd	r24, Y+2	; 0x02
    156e:	81 33       	cpi	r24, 0x31	; 49
    1570:	09 f0       	breq	.+2      	; 0x1574 <vfprintf+0x346>
    1572:	0f 7e       	andi	r16, 0xEF	; 239
    1574:	b6 01       	movw	r22, r12
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <fputc>
    157c:	11 11       	cpse	r17, r1
    157e:	05 c0       	rjmp	.+10     	; 0x158a <vfprintf+0x35c>
    1580:	34 fc       	sbrc	r3, 4
    1582:	18 c0       	rjmp	.+48     	; 0x15b4 <vfprintf+0x386>
    1584:	85 e6       	ldi	r24, 0x65	; 101
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	17 c0       	rjmp	.+46     	; 0x15b8 <vfprintf+0x38a>
    158a:	b6 01       	movw	r22, r12
    158c:	8e e2       	ldi	r24, 0x2E	; 46
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <fputc>
    1594:	82 e0       	ldi	r24, 0x02	; 2
    1596:	ee 24       	eor	r14, r14
    1598:	e3 94       	inc	r14
    159a:	e8 0e       	add	r14, r24
    159c:	f3 01       	movw	r30, r6
    159e:	e8 0f       	add	r30, r24
    15a0:	f1 1d       	adc	r31, r1
    15a2:	80 81       	ld	r24, Z
    15a4:	b6 01       	movw	r22, r12
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <fputc>
    15ac:	11 50       	subi	r17, 0x01	; 1
    15ae:	8e 2d       	mov	r24, r14
    15b0:	91 f7       	brne	.-28     	; 0x1596 <vfprintf+0x368>
    15b2:	e6 cf       	rjmp	.-52     	; 0x1580 <vfprintf+0x352>
    15b4:	85 e4       	ldi	r24, 0x45	; 69
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	b6 01       	movw	r22, r12
    15ba:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <fputc>
    15be:	57 fc       	sbrc	r5, 7
    15c0:	05 c0       	rjmp	.+10     	; 0x15cc <vfprintf+0x39e>
    15c2:	41 14       	cp	r4, r1
    15c4:	51 04       	cpc	r5, r1
    15c6:	39 f4       	brne	.+14     	; 0x15d6 <vfprintf+0x3a8>
    15c8:	04 ff       	sbrs	r16, 4
    15ca:	05 c0       	rjmp	.+10     	; 0x15d6 <vfprintf+0x3a8>
    15cc:	51 94       	neg	r5
    15ce:	41 94       	neg	r4
    15d0:	51 08       	sbc	r5, r1
    15d2:	8d e2       	ldi	r24, 0x2D	; 45
    15d4:	01 c0       	rjmp	.+2      	; 0x15d8 <vfprintf+0x3aa>
    15d6:	8b e2       	ldi	r24, 0x2B	; 43
    15d8:	b6 01       	movw	r22, r12
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <fputc>
    15e0:	80 e3       	ldi	r24, 0x30	; 48
    15e2:	9a e0       	ldi	r25, 0x0A	; 10
    15e4:	49 16       	cp	r4, r25
    15e6:	51 04       	cpc	r5, r1
    15e8:	2c f0       	brlt	.+10     	; 0x15f4 <vfprintf+0x3c6>
    15ea:	8f 5f       	subi	r24, 0xFF	; 255
    15ec:	5a e0       	ldi	r21, 0x0A	; 10
    15ee:	45 1a       	sub	r4, r21
    15f0:	51 08       	sbc	r5, r1
    15f2:	f7 cf       	rjmp	.-18     	; 0x15e2 <vfprintf+0x3b4>
    15f4:	b6 01       	movw	r22, r12
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <fputc>
    15fc:	b6 01       	movw	r22, r12
    15fe:	c2 01       	movw	r24, r4
    1600:	c0 96       	adiw	r24, 0x30	; 48
    1602:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <fputc>
    1606:	57 c1       	rjmp	.+686    	; 0x18b6 <vfprintf+0x688>
    1608:	83 36       	cpi	r24, 0x63	; 99
    160a:	31 f0       	breq	.+12     	; 0x1618 <vfprintf+0x3ea>
    160c:	83 37       	cpi	r24, 0x73	; 115
    160e:	79 f0       	breq	.+30     	; 0x162e <vfprintf+0x400>
    1610:	83 35       	cpi	r24, 0x53	; 83
    1612:	09 f0       	breq	.+2      	; 0x1616 <vfprintf+0x3e8>
    1614:	58 c0       	rjmp	.+176    	; 0x16c6 <vfprintf+0x498>
    1616:	21 c0       	rjmp	.+66     	; 0x165a <vfprintf+0x42c>
    1618:	52 01       	movw	r10, r4
    161a:	e2 e0       	ldi	r30, 0x02	; 2
    161c:	ae 0e       	add	r10, r30
    161e:	b1 1c       	adc	r11, r1
    1620:	f2 01       	movw	r30, r4
    1622:	80 81       	ld	r24, Z
    1624:	89 83       	std	Y+1, r24	; 0x01
    1626:	01 e0       	ldi	r16, 0x01	; 1
    1628:	10 e0       	ldi	r17, 0x00	; 0
    162a:	23 01       	movw	r4, r6
    162c:	14 c0       	rjmp	.+40     	; 0x1656 <vfprintf+0x428>
    162e:	52 01       	movw	r10, r4
    1630:	f2 e0       	ldi	r31, 0x02	; 2
    1632:	af 0e       	add	r10, r31
    1634:	b1 1c       	adc	r11, r1
    1636:	f2 01       	movw	r30, r4
    1638:	40 80       	ld	r4, Z
    163a:	51 80       	ldd	r5, Z+1	; 0x01
    163c:	26 ff       	sbrs	r18, 6
    163e:	03 c0       	rjmp	.+6      	; 0x1646 <vfprintf+0x418>
    1640:	61 2f       	mov	r22, r17
    1642:	70 e0       	ldi	r23, 0x00	; 0
    1644:	02 c0       	rjmp	.+4      	; 0x164a <vfprintf+0x41c>
    1646:	6f ef       	ldi	r22, 0xFF	; 255
    1648:	7f ef       	ldi	r23, 0xFF	; 255
    164a:	c2 01       	movw	r24, r4
    164c:	2a 8b       	std	Y+18, r18	; 0x12
    164e:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <strnlen>
    1652:	8c 01       	movw	r16, r24
    1654:	2a 89       	ldd	r18, Y+18	; 0x12
    1656:	2f 77       	andi	r18, 0x7F	; 127
    1658:	15 c0       	rjmp	.+42     	; 0x1684 <vfprintf+0x456>
    165a:	52 01       	movw	r10, r4
    165c:	f2 e0       	ldi	r31, 0x02	; 2
    165e:	af 0e       	add	r10, r31
    1660:	b1 1c       	adc	r11, r1
    1662:	f2 01       	movw	r30, r4
    1664:	40 80       	ld	r4, Z
    1666:	51 80       	ldd	r5, Z+1	; 0x01
    1668:	26 ff       	sbrs	r18, 6
    166a:	03 c0       	rjmp	.+6      	; 0x1672 <vfprintf+0x444>
    166c:	61 2f       	mov	r22, r17
    166e:	70 e0       	ldi	r23, 0x00	; 0
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <vfprintf+0x448>
    1672:	6f ef       	ldi	r22, 0xFF	; 255
    1674:	7f ef       	ldi	r23, 0xFF	; 255
    1676:	c2 01       	movw	r24, r4
    1678:	2a 8b       	std	Y+18, r18	; 0x12
    167a:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <strnlen_P>
    167e:	8c 01       	movw	r16, r24
    1680:	2a 89       	ldd	r18, Y+18	; 0x12
    1682:	20 68       	ori	r18, 0x80	; 128
    1684:	32 2e       	mov	r3, r18
    1686:	23 fd       	sbrc	r18, 3
    1688:	1a c0       	rjmp	.+52     	; 0x16be <vfprintf+0x490>
    168a:	8f 2d       	mov	r24, r15
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	08 17       	cp	r16, r24
    1690:	19 07       	cpc	r17, r25
    1692:	a8 f4       	brcc	.+42     	; 0x16be <vfprintf+0x490>
    1694:	b6 01       	movw	r22, r12
    1696:	80 e2       	ldi	r24, 0x20	; 32
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <fputc>
    169e:	fa 94       	dec	r15
    16a0:	f4 cf       	rjmp	.-24     	; 0x168a <vfprintf+0x45c>
    16a2:	f2 01       	movw	r30, r4
    16a4:	37 fc       	sbrc	r3, 7
    16a6:	85 91       	lpm	r24, Z+
    16a8:	37 fe       	sbrs	r3, 7
    16aa:	81 91       	ld	r24, Z+
    16ac:	2f 01       	movw	r4, r30
    16ae:	b6 01       	movw	r22, r12
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <fputc>
    16b6:	f1 10       	cpse	r15, r1
    16b8:	fa 94       	dec	r15
    16ba:	01 50       	subi	r16, 0x01	; 1
    16bc:	11 09       	sbc	r17, r1
    16be:	01 15       	cp	r16, r1
    16c0:	11 05       	cpc	r17, r1
    16c2:	79 f7       	brne	.-34     	; 0x16a2 <vfprintf+0x474>
    16c4:	f8 c0       	rjmp	.+496    	; 0x18b6 <vfprintf+0x688>
    16c6:	84 36       	cpi	r24, 0x64	; 100
    16c8:	11 f0       	breq	.+4      	; 0x16ce <vfprintf+0x4a0>
    16ca:	89 36       	cpi	r24, 0x69	; 105
    16cc:	59 f5       	brne	.+86     	; 0x1724 <vfprintf+0x4f6>
    16ce:	52 01       	movw	r10, r4
    16d0:	27 ff       	sbrs	r18, 7
    16d2:	09 c0       	rjmp	.+18     	; 0x16e6 <vfprintf+0x4b8>
    16d4:	f4 e0       	ldi	r31, 0x04	; 4
    16d6:	af 0e       	add	r10, r31
    16d8:	b1 1c       	adc	r11, r1
    16da:	f2 01       	movw	r30, r4
    16dc:	60 81       	ld	r22, Z
    16de:	71 81       	ldd	r23, Z+1	; 0x01
    16e0:	82 81       	ldd	r24, Z+2	; 0x02
    16e2:	93 81       	ldd	r25, Z+3	; 0x03
    16e4:	0a c0       	rjmp	.+20     	; 0x16fa <vfprintf+0x4cc>
    16e6:	f2 e0       	ldi	r31, 0x02	; 2
    16e8:	af 0e       	add	r10, r31
    16ea:	b1 1c       	adc	r11, r1
    16ec:	f2 01       	movw	r30, r4
    16ee:	60 81       	ld	r22, Z
    16f0:	71 81       	ldd	r23, Z+1	; 0x01
    16f2:	07 2e       	mov	r0, r23
    16f4:	00 0c       	add	r0, r0
    16f6:	88 0b       	sbc	r24, r24
    16f8:	99 0b       	sbc	r25, r25
    16fa:	2f 76       	andi	r18, 0x6F	; 111
    16fc:	32 2e       	mov	r3, r18
    16fe:	97 ff       	sbrs	r25, 7
    1700:	09 c0       	rjmp	.+18     	; 0x1714 <vfprintf+0x4e6>
    1702:	90 95       	com	r25
    1704:	80 95       	com	r24
    1706:	70 95       	com	r23
    1708:	61 95       	neg	r22
    170a:	7f 4f       	sbci	r23, 0xFF	; 255
    170c:	8f 4f       	sbci	r24, 0xFF	; 255
    170e:	9f 4f       	sbci	r25, 0xFF	; 255
    1710:	20 68       	ori	r18, 0x80	; 128
    1712:	32 2e       	mov	r3, r18
    1714:	2a e0       	ldi	r18, 0x0A	; 10
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	a3 01       	movw	r20, r6
    171a:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__ultoa_invert>
    171e:	e8 2e       	mov	r14, r24
    1720:	e6 18       	sub	r14, r6
    1722:	3f c0       	rjmp	.+126    	; 0x17a2 <vfprintf+0x574>
    1724:	02 2f       	mov	r16, r18
    1726:	85 37       	cpi	r24, 0x75	; 117
    1728:	21 f4       	brne	.+8      	; 0x1732 <vfprintf+0x504>
    172a:	0f 7e       	andi	r16, 0xEF	; 239
    172c:	2a e0       	ldi	r18, 0x0A	; 10
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	1d c0       	rjmp	.+58     	; 0x176c <vfprintf+0x53e>
    1732:	09 7f       	andi	r16, 0xF9	; 249
    1734:	8f 36       	cpi	r24, 0x6F	; 111
    1736:	91 f0       	breq	.+36     	; 0x175c <vfprintf+0x52e>
    1738:	18 f4       	brcc	.+6      	; 0x1740 <vfprintf+0x512>
    173a:	88 35       	cpi	r24, 0x58	; 88
    173c:	59 f0       	breq	.+22     	; 0x1754 <vfprintf+0x526>
    173e:	c5 c0       	rjmp	.+394    	; 0x18ca <vfprintf+0x69c>
    1740:	80 37       	cpi	r24, 0x70	; 112
    1742:	19 f0       	breq	.+6      	; 0x174a <vfprintf+0x51c>
    1744:	88 37       	cpi	r24, 0x78	; 120
    1746:	11 f0       	breq	.+4      	; 0x174c <vfprintf+0x51e>
    1748:	c0 c0       	rjmp	.+384    	; 0x18ca <vfprintf+0x69c>
    174a:	00 61       	ori	r16, 0x10	; 16
    174c:	04 ff       	sbrs	r16, 4
    174e:	09 c0       	rjmp	.+18     	; 0x1762 <vfprintf+0x534>
    1750:	04 60       	ori	r16, 0x04	; 4
    1752:	07 c0       	rjmp	.+14     	; 0x1762 <vfprintf+0x534>
    1754:	24 ff       	sbrs	r18, 4
    1756:	08 c0       	rjmp	.+16     	; 0x1768 <vfprintf+0x53a>
    1758:	06 60       	ori	r16, 0x06	; 6
    175a:	06 c0       	rjmp	.+12     	; 0x1768 <vfprintf+0x53a>
    175c:	28 e0       	ldi	r18, 0x08	; 8
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	05 c0       	rjmp	.+10     	; 0x176c <vfprintf+0x53e>
    1762:	20 e1       	ldi	r18, 0x10	; 16
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	02 c0       	rjmp	.+4      	; 0x176c <vfprintf+0x53e>
    1768:	20 e1       	ldi	r18, 0x10	; 16
    176a:	32 e0       	ldi	r19, 0x02	; 2
    176c:	52 01       	movw	r10, r4
    176e:	07 ff       	sbrs	r16, 7
    1770:	09 c0       	rjmp	.+18     	; 0x1784 <vfprintf+0x556>
    1772:	f4 e0       	ldi	r31, 0x04	; 4
    1774:	af 0e       	add	r10, r31
    1776:	b1 1c       	adc	r11, r1
    1778:	f2 01       	movw	r30, r4
    177a:	60 81       	ld	r22, Z
    177c:	71 81       	ldd	r23, Z+1	; 0x01
    177e:	82 81       	ldd	r24, Z+2	; 0x02
    1780:	93 81       	ldd	r25, Z+3	; 0x03
    1782:	08 c0       	rjmp	.+16     	; 0x1794 <vfprintf+0x566>
    1784:	f2 e0       	ldi	r31, 0x02	; 2
    1786:	af 0e       	add	r10, r31
    1788:	b1 1c       	adc	r11, r1
    178a:	f2 01       	movw	r30, r4
    178c:	60 81       	ld	r22, Z
    178e:	71 81       	ldd	r23, Z+1	; 0x01
    1790:	80 e0       	ldi	r24, 0x00	; 0
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	a3 01       	movw	r20, r6
    1796:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__ultoa_invert>
    179a:	e8 2e       	mov	r14, r24
    179c:	e6 18       	sub	r14, r6
    179e:	0f 77       	andi	r16, 0x7F	; 127
    17a0:	30 2e       	mov	r3, r16
    17a2:	36 fe       	sbrs	r3, 6
    17a4:	0b c0       	rjmp	.+22     	; 0x17bc <vfprintf+0x58e>
    17a6:	33 2d       	mov	r19, r3
    17a8:	3e 7f       	andi	r19, 0xFE	; 254
    17aa:	e1 16       	cp	r14, r17
    17ac:	50 f4       	brcc	.+20     	; 0x17c2 <vfprintf+0x594>
    17ae:	34 fe       	sbrs	r3, 4
    17b0:	0a c0       	rjmp	.+20     	; 0x17c6 <vfprintf+0x598>
    17b2:	32 fc       	sbrc	r3, 2
    17b4:	08 c0       	rjmp	.+16     	; 0x17c6 <vfprintf+0x598>
    17b6:	33 2d       	mov	r19, r3
    17b8:	3e 7e       	andi	r19, 0xEE	; 238
    17ba:	05 c0       	rjmp	.+10     	; 0x17c6 <vfprintf+0x598>
    17bc:	0e 2d       	mov	r16, r14
    17be:	33 2d       	mov	r19, r3
    17c0:	03 c0       	rjmp	.+6      	; 0x17c8 <vfprintf+0x59a>
    17c2:	0e 2d       	mov	r16, r14
    17c4:	01 c0       	rjmp	.+2      	; 0x17c8 <vfprintf+0x59a>
    17c6:	01 2f       	mov	r16, r17
    17c8:	34 ff       	sbrs	r19, 4
    17ca:	0c c0       	rjmp	.+24     	; 0x17e4 <vfprintf+0x5b6>
    17cc:	fe 01       	movw	r30, r28
    17ce:	ee 0d       	add	r30, r14
    17d0:	f1 1d       	adc	r31, r1
    17d2:	80 81       	ld	r24, Z
    17d4:	80 33       	cpi	r24, 0x30	; 48
    17d6:	11 f4       	brne	.+4      	; 0x17dc <vfprintf+0x5ae>
    17d8:	39 7e       	andi	r19, 0xE9	; 233
    17da:	08 c0       	rjmp	.+16     	; 0x17ec <vfprintf+0x5be>
    17dc:	32 ff       	sbrs	r19, 2
    17de:	05 c0       	rjmp	.+10     	; 0x17ea <vfprintf+0x5bc>
    17e0:	0e 5f       	subi	r16, 0xFE	; 254
    17e2:	04 c0       	rjmp	.+8      	; 0x17ec <vfprintf+0x5be>
    17e4:	83 2f       	mov	r24, r19
    17e6:	86 78       	andi	r24, 0x86	; 134
    17e8:	09 f0       	breq	.+2      	; 0x17ec <vfprintf+0x5be>
    17ea:	0f 5f       	subi	r16, 0xFF	; 255
    17ec:	33 fd       	sbrc	r19, 3
    17ee:	13 c0       	rjmp	.+38     	; 0x1816 <vfprintf+0x5e8>
    17f0:	30 ff       	sbrs	r19, 0
    17f2:	06 c0       	rjmp	.+12     	; 0x1800 <vfprintf+0x5d2>
    17f4:	1e 2d       	mov	r17, r14
    17f6:	0f 15       	cp	r16, r15
    17f8:	18 f4       	brcc	.+6      	; 0x1800 <vfprintf+0x5d2>
    17fa:	1f 0d       	add	r17, r15
    17fc:	10 1b       	sub	r17, r16
    17fe:	0f 2d       	mov	r16, r15
    1800:	0f 15       	cp	r16, r15
    1802:	68 f4       	brcc	.+26     	; 0x181e <vfprintf+0x5f0>
    1804:	b6 01       	movw	r22, r12
    1806:	80 e2       	ldi	r24, 0x20	; 32
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	3b 8b       	std	Y+19, r19	; 0x13
    180c:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <fputc>
    1810:	0f 5f       	subi	r16, 0xFF	; 255
    1812:	3b 89       	ldd	r19, Y+19	; 0x13
    1814:	f5 cf       	rjmp	.-22     	; 0x1800 <vfprintf+0x5d2>
    1816:	0f 15       	cp	r16, r15
    1818:	10 f4       	brcc	.+4      	; 0x181e <vfprintf+0x5f0>
    181a:	f0 1a       	sub	r15, r16
    181c:	01 c0       	rjmp	.+2      	; 0x1820 <vfprintf+0x5f2>
    181e:	f1 2c       	mov	r15, r1
    1820:	34 ff       	sbrs	r19, 4
    1822:	12 c0       	rjmp	.+36     	; 0x1848 <vfprintf+0x61a>
    1824:	b6 01       	movw	r22, r12
    1826:	80 e3       	ldi	r24, 0x30	; 48
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	3b 8b       	std	Y+19, r19	; 0x13
    182c:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <fputc>
    1830:	3b 89       	ldd	r19, Y+19	; 0x13
    1832:	32 ff       	sbrs	r19, 2
    1834:	17 c0       	rjmp	.+46     	; 0x1864 <vfprintf+0x636>
    1836:	31 fd       	sbrc	r19, 1
    1838:	03 c0       	rjmp	.+6      	; 0x1840 <vfprintf+0x612>
    183a:	88 e7       	ldi	r24, 0x78	; 120
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	02 c0       	rjmp	.+4      	; 0x1844 <vfprintf+0x616>
    1840:	88 e5       	ldi	r24, 0x58	; 88
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	b6 01       	movw	r22, r12
    1846:	0c c0       	rjmp	.+24     	; 0x1860 <vfprintf+0x632>
    1848:	83 2f       	mov	r24, r19
    184a:	86 78       	andi	r24, 0x86	; 134
    184c:	59 f0       	breq	.+22     	; 0x1864 <vfprintf+0x636>
    184e:	31 ff       	sbrs	r19, 1
    1850:	02 c0       	rjmp	.+4      	; 0x1856 <vfprintf+0x628>
    1852:	8b e2       	ldi	r24, 0x2B	; 43
    1854:	01 c0       	rjmp	.+2      	; 0x1858 <vfprintf+0x62a>
    1856:	80 e2       	ldi	r24, 0x20	; 32
    1858:	37 fd       	sbrc	r19, 7
    185a:	8d e2       	ldi	r24, 0x2D	; 45
    185c:	b6 01       	movw	r22, r12
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <fputc>
    1864:	e1 16       	cp	r14, r17
    1866:	38 f4       	brcc	.+14     	; 0x1876 <vfprintf+0x648>
    1868:	b6 01       	movw	r22, r12
    186a:	80 e3       	ldi	r24, 0x30	; 48
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <fputc>
    1872:	11 50       	subi	r17, 0x01	; 1
    1874:	f7 cf       	rjmp	.-18     	; 0x1864 <vfprintf+0x636>
    1876:	ea 94       	dec	r14
    1878:	f3 01       	movw	r30, r6
    187a:	ee 0d       	add	r30, r14
    187c:	f1 1d       	adc	r31, r1
    187e:	80 81       	ld	r24, Z
    1880:	b6 01       	movw	r22, r12
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <fputc>
    1888:	e1 10       	cpse	r14, r1
    188a:	f5 cf       	rjmp	.-22     	; 0x1876 <vfprintf+0x648>
    188c:	14 c0       	rjmp	.+40     	; 0x18b6 <vfprintf+0x688>
    188e:	f4 e0       	ldi	r31, 0x04	; 4
    1890:	ff 15       	cp	r31, r15
    1892:	58 f5       	brcc	.+86     	; 0x18ea <vfprintf+0x6bc>
    1894:	84 e0       	ldi	r24, 0x04	; 4
    1896:	f8 1a       	sub	r15, r24
    1898:	33 fe       	sbrs	r3, 3
    189a:	1e c0       	rjmp	.+60     	; 0x18d8 <vfprintf+0x6aa>
    189c:	21 10       	cpse	r2, r1
    189e:	26 c0       	rjmp	.+76     	; 0x18ec <vfprintf+0x6be>
    18a0:	03 ff       	sbrs	r16, 3
    18a2:	2a c0       	rjmp	.+84     	; 0x18f8 <vfprintf+0x6ca>
    18a4:	08 e6       	ldi	r16, 0x68	; 104
    18a6:	10 e0       	ldi	r17, 0x00	; 0
    18a8:	f3 2d       	mov	r31, r3
    18aa:	f0 71       	andi	r31, 0x10	; 16
    18ac:	3f 2e       	mov	r3, r31
    18ae:	f8 01       	movw	r30, r16
    18b0:	84 91       	lpm	r24, Z
    18b2:	81 11       	cpse	r24, r1
    18b4:	24 c0       	rjmp	.+72     	; 0x18fe <vfprintf+0x6d0>
    18b6:	ff 20       	and	r15, r15
    18b8:	09 f4       	brne	.+2      	; 0x18bc <vfprintf+0x68e>
    18ba:	e5 cc       	rjmp	.-1590   	; 0x1286 <vfprintf+0x58>
    18bc:	b6 01       	movw	r22, r12
    18be:	80 e2       	ldi	r24, 0x20	; 32
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <fputc>
    18c6:	fa 94       	dec	r15
    18c8:	f6 cf       	rjmp	.-20     	; 0x18b6 <vfprintf+0x688>
    18ca:	f6 01       	movw	r30, r12
    18cc:	86 81       	ldd	r24, Z+6	; 0x06
    18ce:	97 81       	ldd	r25, Z+7	; 0x07
    18d0:	26 c0       	rjmp	.+76     	; 0x191e <vfprintf+0x6f0>
    18d2:	8f ef       	ldi	r24, 0xFF	; 255
    18d4:	9f ef       	ldi	r25, 0xFF	; 255
    18d6:	23 c0       	rjmp	.+70     	; 0x191e <vfprintf+0x6f0>
    18d8:	b6 01       	movw	r22, r12
    18da:	80 e2       	ldi	r24, 0x20	; 32
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <fputc>
    18e2:	fa 94       	dec	r15
    18e4:	f1 10       	cpse	r15, r1
    18e6:	f8 cf       	rjmp	.-16     	; 0x18d8 <vfprintf+0x6aa>
    18e8:	d9 cf       	rjmp	.-78     	; 0x189c <vfprintf+0x66e>
    18ea:	f1 2c       	mov	r15, r1
    18ec:	b6 01       	movw	r22, r12
    18ee:	82 2d       	mov	r24, r2
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <fputc>
    18f6:	d4 cf       	rjmp	.-88     	; 0x18a0 <vfprintf+0x672>
    18f8:	0c e6       	ldi	r16, 0x6C	; 108
    18fa:	10 e0       	ldi	r17, 0x00	; 0
    18fc:	d5 cf       	rjmp	.-86     	; 0x18a8 <vfprintf+0x67a>
    18fe:	31 10       	cpse	r3, r1
    1900:	80 52       	subi	r24, 0x20	; 32
    1902:	b6 01       	movw	r22, r12
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <fputc>
    190a:	0f 5f       	subi	r16, 0xFF	; 255
    190c:	1f 4f       	sbci	r17, 0xFF	; 255
    190e:	cf cf       	rjmp	.-98     	; 0x18ae <vfprintf+0x680>
    1910:	23 e0       	ldi	r18, 0x03	; 3
    1912:	2f 15       	cp	r18, r15
    1914:	10 f4       	brcc	.+4      	; 0x191a <vfprintf+0x6ec>
    1916:	83 e0       	ldi	r24, 0x03	; 3
    1918:	be cf       	rjmp	.-132    	; 0x1896 <vfprintf+0x668>
    191a:	f1 2c       	mov	r15, r1
    191c:	c1 cf       	rjmp	.-126    	; 0x18a0 <vfprintf+0x672>
    191e:	63 96       	adiw	r28, 0x13	; 19
    1920:	e2 e1       	ldi	r30, 0x12	; 18
    1922:	0c 94 d1 0c 	jmp	0x19a2	; 0x19a2 <__epilogue_restores__>

00001926 <__udivmodsi4>:
    1926:	a1 e2       	ldi	r26, 0x21	; 33
    1928:	1a 2e       	mov	r1, r26
    192a:	aa 1b       	sub	r26, r26
    192c:	bb 1b       	sub	r27, r27
    192e:	fd 01       	movw	r30, r26
    1930:	0d c0       	rjmp	.+26     	; 0x194c <__udivmodsi4_ep>

00001932 <__udivmodsi4_loop>:
    1932:	aa 1f       	adc	r26, r26
    1934:	bb 1f       	adc	r27, r27
    1936:	ee 1f       	adc	r30, r30
    1938:	ff 1f       	adc	r31, r31
    193a:	a2 17       	cp	r26, r18
    193c:	b3 07       	cpc	r27, r19
    193e:	e4 07       	cpc	r30, r20
    1940:	f5 07       	cpc	r31, r21
    1942:	20 f0       	brcs	.+8      	; 0x194c <__udivmodsi4_ep>
    1944:	a2 1b       	sub	r26, r18
    1946:	b3 0b       	sbc	r27, r19
    1948:	e4 0b       	sbc	r30, r20
    194a:	f5 0b       	sbc	r31, r21

0000194c <__udivmodsi4_ep>:
    194c:	66 1f       	adc	r22, r22
    194e:	77 1f       	adc	r23, r23
    1950:	88 1f       	adc	r24, r24
    1952:	99 1f       	adc	r25, r25
    1954:	1a 94       	dec	r1
    1956:	69 f7       	brne	.-38     	; 0x1932 <__udivmodsi4_loop>
    1958:	60 95       	com	r22
    195a:	70 95       	com	r23
    195c:	80 95       	com	r24
    195e:	90 95       	com	r25
    1960:	9b 01       	movw	r18, r22
    1962:	ac 01       	movw	r20, r24
    1964:	bd 01       	movw	r22, r26
    1966:	cf 01       	movw	r24, r30
    1968:	08 95       	ret

0000196a <__prologue_saves__>:
    196a:	2f 92       	push	r2
    196c:	3f 92       	push	r3
    196e:	4f 92       	push	r4
    1970:	5f 92       	push	r5
    1972:	6f 92       	push	r6
    1974:	7f 92       	push	r7
    1976:	8f 92       	push	r8
    1978:	9f 92       	push	r9
    197a:	af 92       	push	r10
    197c:	bf 92       	push	r11
    197e:	cf 92       	push	r12
    1980:	df 92       	push	r13
    1982:	ef 92       	push	r14
    1984:	ff 92       	push	r15
    1986:	0f 93       	push	r16
    1988:	1f 93       	push	r17
    198a:	cf 93       	push	r28
    198c:	df 93       	push	r29
    198e:	cd b7       	in	r28, 0x3d	; 61
    1990:	de b7       	in	r29, 0x3e	; 62
    1992:	ca 1b       	sub	r28, r26
    1994:	db 0b       	sbc	r29, r27
    1996:	0f b6       	in	r0, 0x3f	; 63
    1998:	f8 94       	cli
    199a:	de bf       	out	0x3e, r29	; 62
    199c:	0f be       	out	0x3f, r0	; 63
    199e:	cd bf       	out	0x3d, r28	; 61
    19a0:	09 94       	ijmp

000019a2 <__epilogue_restores__>:
    19a2:	2a 88       	ldd	r2, Y+18	; 0x12
    19a4:	39 88       	ldd	r3, Y+17	; 0x11
    19a6:	48 88       	ldd	r4, Y+16	; 0x10
    19a8:	5f 84       	ldd	r5, Y+15	; 0x0f
    19aa:	6e 84       	ldd	r6, Y+14	; 0x0e
    19ac:	7d 84       	ldd	r7, Y+13	; 0x0d
    19ae:	8c 84       	ldd	r8, Y+12	; 0x0c
    19b0:	9b 84       	ldd	r9, Y+11	; 0x0b
    19b2:	aa 84       	ldd	r10, Y+10	; 0x0a
    19b4:	b9 84       	ldd	r11, Y+9	; 0x09
    19b6:	c8 84       	ldd	r12, Y+8	; 0x08
    19b8:	df 80       	ldd	r13, Y+7	; 0x07
    19ba:	ee 80       	ldd	r14, Y+6	; 0x06
    19bc:	fd 80       	ldd	r15, Y+5	; 0x05
    19be:	0c 81       	ldd	r16, Y+4	; 0x04
    19c0:	1b 81       	ldd	r17, Y+3	; 0x03
    19c2:	aa 81       	ldd	r26, Y+2	; 0x02
    19c4:	b9 81       	ldd	r27, Y+1	; 0x01
    19c6:	ce 0f       	add	r28, r30
    19c8:	d1 1d       	adc	r29, r1
    19ca:	0f b6       	in	r0, 0x3f	; 63
    19cc:	f8 94       	cli
    19ce:	de bf       	out	0x3e, r29	; 62
    19d0:	0f be       	out	0x3f, r0	; 63
    19d2:	cd bf       	out	0x3d, r28	; 61
    19d4:	ed 01       	movw	r28, r26
    19d6:	08 95       	ret

000019d8 <__tablejump2__>:
    19d8:	ee 0f       	add	r30, r30
    19da:	ff 1f       	adc	r31, r31
    19dc:	05 90       	lpm	r0, Z+
    19de:	f4 91       	lpm	r31, Z
    19e0:	e0 2d       	mov	r30, r0
    19e2:	09 94       	ijmp

000019e4 <__ftoa_engine>:
    19e4:	28 30       	cpi	r18, 0x08	; 8
    19e6:	08 f0       	brcs	.+2      	; 0x19ea <__ftoa_engine+0x6>
    19e8:	27 e0       	ldi	r18, 0x07	; 7
    19ea:	33 27       	eor	r19, r19
    19ec:	da 01       	movw	r26, r20
    19ee:	99 0f       	add	r25, r25
    19f0:	31 1d       	adc	r19, r1
    19f2:	87 fd       	sbrc	r24, 7
    19f4:	91 60       	ori	r25, 0x01	; 1
    19f6:	00 96       	adiw	r24, 0x00	; 0
    19f8:	61 05       	cpc	r22, r1
    19fa:	71 05       	cpc	r23, r1
    19fc:	39 f4       	brne	.+14     	; 0x1a0c <__ftoa_engine+0x28>
    19fe:	32 60       	ori	r19, 0x02	; 2
    1a00:	2e 5f       	subi	r18, 0xFE	; 254
    1a02:	3d 93       	st	X+, r19
    1a04:	30 e3       	ldi	r19, 0x30	; 48
    1a06:	2a 95       	dec	r18
    1a08:	e1 f7       	brne	.-8      	; 0x1a02 <__ftoa_engine+0x1e>
    1a0a:	08 95       	ret
    1a0c:	9f 3f       	cpi	r25, 0xFF	; 255
    1a0e:	30 f0       	brcs	.+12     	; 0x1a1c <__ftoa_engine+0x38>
    1a10:	80 38       	cpi	r24, 0x80	; 128
    1a12:	71 05       	cpc	r23, r1
    1a14:	61 05       	cpc	r22, r1
    1a16:	09 f0       	breq	.+2      	; 0x1a1a <__ftoa_engine+0x36>
    1a18:	3c 5f       	subi	r19, 0xFC	; 252
    1a1a:	3c 5f       	subi	r19, 0xFC	; 252
    1a1c:	3d 93       	st	X+, r19
    1a1e:	91 30       	cpi	r25, 0x01	; 1
    1a20:	08 f0       	brcs	.+2      	; 0x1a24 <__ftoa_engine+0x40>
    1a22:	80 68       	ori	r24, 0x80	; 128
    1a24:	91 1d       	adc	r25, r1
    1a26:	df 93       	push	r29
    1a28:	cf 93       	push	r28
    1a2a:	1f 93       	push	r17
    1a2c:	0f 93       	push	r16
    1a2e:	ff 92       	push	r15
    1a30:	ef 92       	push	r14
    1a32:	19 2f       	mov	r17, r25
    1a34:	98 7f       	andi	r25, 0xF8	; 248
    1a36:	96 95       	lsr	r25
    1a38:	e9 2f       	mov	r30, r25
    1a3a:	96 95       	lsr	r25
    1a3c:	96 95       	lsr	r25
    1a3e:	e9 0f       	add	r30, r25
    1a40:	ff 27       	eor	r31, r31
    1a42:	e6 53       	subi	r30, 0x36	; 54
    1a44:	ff 4f       	sbci	r31, 0xFF	; 255
    1a46:	99 27       	eor	r25, r25
    1a48:	33 27       	eor	r19, r19
    1a4a:	ee 24       	eor	r14, r14
    1a4c:	ff 24       	eor	r15, r15
    1a4e:	a7 01       	movw	r20, r14
    1a50:	e7 01       	movw	r28, r14
    1a52:	05 90       	lpm	r0, Z+
    1a54:	08 94       	sec
    1a56:	07 94       	ror	r0
    1a58:	28 f4       	brcc	.+10     	; 0x1a64 <__ftoa_engine+0x80>
    1a5a:	36 0f       	add	r19, r22
    1a5c:	e7 1e       	adc	r14, r23
    1a5e:	f8 1e       	adc	r15, r24
    1a60:	49 1f       	adc	r20, r25
    1a62:	51 1d       	adc	r21, r1
    1a64:	66 0f       	add	r22, r22
    1a66:	77 1f       	adc	r23, r23
    1a68:	88 1f       	adc	r24, r24
    1a6a:	99 1f       	adc	r25, r25
    1a6c:	06 94       	lsr	r0
    1a6e:	a1 f7       	brne	.-24     	; 0x1a58 <__ftoa_engine+0x74>
    1a70:	05 90       	lpm	r0, Z+
    1a72:	07 94       	ror	r0
    1a74:	28 f4       	brcc	.+10     	; 0x1a80 <__ftoa_engine+0x9c>
    1a76:	e7 0e       	add	r14, r23
    1a78:	f8 1e       	adc	r15, r24
    1a7a:	49 1f       	adc	r20, r25
    1a7c:	56 1f       	adc	r21, r22
    1a7e:	c1 1d       	adc	r28, r1
    1a80:	77 0f       	add	r23, r23
    1a82:	88 1f       	adc	r24, r24
    1a84:	99 1f       	adc	r25, r25
    1a86:	66 1f       	adc	r22, r22
    1a88:	06 94       	lsr	r0
    1a8a:	a1 f7       	brne	.-24     	; 0x1a74 <__ftoa_engine+0x90>
    1a8c:	05 90       	lpm	r0, Z+
    1a8e:	07 94       	ror	r0
    1a90:	28 f4       	brcc	.+10     	; 0x1a9c <__ftoa_engine+0xb8>
    1a92:	f8 0e       	add	r15, r24
    1a94:	49 1f       	adc	r20, r25
    1a96:	56 1f       	adc	r21, r22
    1a98:	c7 1f       	adc	r28, r23
    1a9a:	d1 1d       	adc	r29, r1
    1a9c:	88 0f       	add	r24, r24
    1a9e:	99 1f       	adc	r25, r25
    1aa0:	66 1f       	adc	r22, r22
    1aa2:	77 1f       	adc	r23, r23
    1aa4:	06 94       	lsr	r0
    1aa6:	a1 f7       	brne	.-24     	; 0x1a90 <__ftoa_engine+0xac>
    1aa8:	05 90       	lpm	r0, Z+
    1aaa:	07 94       	ror	r0
    1aac:	20 f4       	brcc	.+8      	; 0x1ab6 <__ftoa_engine+0xd2>
    1aae:	49 0f       	add	r20, r25
    1ab0:	56 1f       	adc	r21, r22
    1ab2:	c7 1f       	adc	r28, r23
    1ab4:	d8 1f       	adc	r29, r24
    1ab6:	99 0f       	add	r25, r25
    1ab8:	66 1f       	adc	r22, r22
    1aba:	77 1f       	adc	r23, r23
    1abc:	88 1f       	adc	r24, r24
    1abe:	06 94       	lsr	r0
    1ac0:	a9 f7       	brne	.-22     	; 0x1aac <__ftoa_engine+0xc8>
    1ac2:	84 91       	lpm	r24, Z
    1ac4:	10 95       	com	r17
    1ac6:	17 70       	andi	r17, 0x07	; 7
    1ac8:	41 f0       	breq	.+16     	; 0x1ada <__ftoa_engine+0xf6>
    1aca:	d6 95       	lsr	r29
    1acc:	c7 95       	ror	r28
    1ace:	57 95       	ror	r21
    1ad0:	47 95       	ror	r20
    1ad2:	f7 94       	ror	r15
    1ad4:	e7 94       	ror	r14
    1ad6:	1a 95       	dec	r17
    1ad8:	c1 f7       	brne	.-16     	; 0x1aca <__ftoa_engine+0xe6>
    1ada:	e0 e7       	ldi	r30, 0x70	; 112
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	68 94       	set
    1ae0:	15 90       	lpm	r1, Z+
    1ae2:	15 91       	lpm	r17, Z+
    1ae4:	35 91       	lpm	r19, Z+
    1ae6:	65 91       	lpm	r22, Z+
    1ae8:	95 91       	lpm	r25, Z+
    1aea:	05 90       	lpm	r0, Z+
    1aec:	7f e2       	ldi	r23, 0x2F	; 47
    1aee:	73 95       	inc	r23
    1af0:	e1 18       	sub	r14, r1
    1af2:	f1 0a       	sbc	r15, r17
    1af4:	43 0b       	sbc	r20, r19
    1af6:	56 0b       	sbc	r21, r22
    1af8:	c9 0b       	sbc	r28, r25
    1afa:	d0 09       	sbc	r29, r0
    1afc:	c0 f7       	brcc	.-16     	; 0x1aee <__ftoa_engine+0x10a>
    1afe:	e1 0c       	add	r14, r1
    1b00:	f1 1e       	adc	r15, r17
    1b02:	43 1f       	adc	r20, r19
    1b04:	56 1f       	adc	r21, r22
    1b06:	c9 1f       	adc	r28, r25
    1b08:	d0 1d       	adc	r29, r0
    1b0a:	7e f4       	brtc	.+30     	; 0x1b2a <__ftoa_engine+0x146>
    1b0c:	70 33       	cpi	r23, 0x30	; 48
    1b0e:	11 f4       	brne	.+4      	; 0x1b14 <__ftoa_engine+0x130>
    1b10:	8a 95       	dec	r24
    1b12:	e6 cf       	rjmp	.-52     	; 0x1ae0 <__ftoa_engine+0xfc>
    1b14:	e8 94       	clt
    1b16:	01 50       	subi	r16, 0x01	; 1
    1b18:	30 f0       	brcs	.+12     	; 0x1b26 <__ftoa_engine+0x142>
    1b1a:	08 0f       	add	r16, r24
    1b1c:	0a f4       	brpl	.+2      	; 0x1b20 <__ftoa_engine+0x13c>
    1b1e:	00 27       	eor	r16, r16
    1b20:	02 17       	cp	r16, r18
    1b22:	08 f4       	brcc	.+2      	; 0x1b26 <__ftoa_engine+0x142>
    1b24:	20 2f       	mov	r18, r16
    1b26:	23 95       	inc	r18
    1b28:	02 2f       	mov	r16, r18
    1b2a:	7a 33       	cpi	r23, 0x3A	; 58
    1b2c:	28 f0       	brcs	.+10     	; 0x1b38 <__ftoa_engine+0x154>
    1b2e:	79 e3       	ldi	r23, 0x39	; 57
    1b30:	7d 93       	st	X+, r23
    1b32:	2a 95       	dec	r18
    1b34:	e9 f7       	brne	.-6      	; 0x1b30 <__ftoa_engine+0x14c>
    1b36:	10 c0       	rjmp	.+32     	; 0x1b58 <__ftoa_engine+0x174>
    1b38:	7d 93       	st	X+, r23
    1b3a:	2a 95       	dec	r18
    1b3c:	89 f6       	brne	.-94     	; 0x1ae0 <__ftoa_engine+0xfc>
    1b3e:	06 94       	lsr	r0
    1b40:	97 95       	ror	r25
    1b42:	67 95       	ror	r22
    1b44:	37 95       	ror	r19
    1b46:	17 95       	ror	r17
    1b48:	17 94       	ror	r1
    1b4a:	e1 18       	sub	r14, r1
    1b4c:	f1 0a       	sbc	r15, r17
    1b4e:	43 0b       	sbc	r20, r19
    1b50:	56 0b       	sbc	r21, r22
    1b52:	c9 0b       	sbc	r28, r25
    1b54:	d0 09       	sbc	r29, r0
    1b56:	98 f0       	brcs	.+38     	; 0x1b7e <__ftoa_engine+0x19a>
    1b58:	23 95       	inc	r18
    1b5a:	7e 91       	ld	r23, -X
    1b5c:	73 95       	inc	r23
    1b5e:	7a 33       	cpi	r23, 0x3A	; 58
    1b60:	08 f0       	brcs	.+2      	; 0x1b64 <__ftoa_engine+0x180>
    1b62:	70 e3       	ldi	r23, 0x30	; 48
    1b64:	7c 93       	st	X, r23
    1b66:	20 13       	cpse	r18, r16
    1b68:	b8 f7       	brcc	.-18     	; 0x1b58 <__ftoa_engine+0x174>
    1b6a:	7e 91       	ld	r23, -X
    1b6c:	70 61       	ori	r23, 0x10	; 16
    1b6e:	7d 93       	st	X+, r23
    1b70:	30 f0       	brcs	.+12     	; 0x1b7e <__ftoa_engine+0x19a>
    1b72:	83 95       	inc	r24
    1b74:	71 e3       	ldi	r23, 0x31	; 49
    1b76:	7d 93       	st	X+, r23
    1b78:	70 e3       	ldi	r23, 0x30	; 48
    1b7a:	2a 95       	dec	r18
    1b7c:	e1 f7       	brne	.-8      	; 0x1b76 <__ftoa_engine+0x192>
    1b7e:	11 24       	eor	r1, r1
    1b80:	ef 90       	pop	r14
    1b82:	ff 90       	pop	r15
    1b84:	0f 91       	pop	r16
    1b86:	1f 91       	pop	r17
    1b88:	cf 91       	pop	r28
    1b8a:	df 91       	pop	r29
    1b8c:	99 27       	eor	r25, r25
    1b8e:	87 fd       	sbrc	r24, 7
    1b90:	90 95       	com	r25
    1b92:	08 95       	ret

00001b94 <strnlen_P>:
    1b94:	fc 01       	movw	r30, r24
    1b96:	05 90       	lpm	r0, Z+
    1b98:	61 50       	subi	r22, 0x01	; 1
    1b9a:	70 40       	sbci	r23, 0x00	; 0
    1b9c:	01 10       	cpse	r0, r1
    1b9e:	d8 f7       	brcc	.-10     	; 0x1b96 <strnlen_P+0x2>
    1ba0:	80 95       	com	r24
    1ba2:	90 95       	com	r25
    1ba4:	8e 0f       	add	r24, r30
    1ba6:	9f 1f       	adc	r25, r31
    1ba8:	08 95       	ret

00001baa <strcat>:
    1baa:	fb 01       	movw	r30, r22
    1bac:	dc 01       	movw	r26, r24
    1bae:	0d 90       	ld	r0, X+
    1bb0:	00 20       	and	r0, r0
    1bb2:	e9 f7       	brne	.-6      	; 0x1bae <strcat+0x4>
    1bb4:	11 97       	sbiw	r26, 0x01	; 1
    1bb6:	01 90       	ld	r0, Z+
    1bb8:	0d 92       	st	X+, r0
    1bba:	00 20       	and	r0, r0
    1bbc:	e1 f7       	brne	.-8      	; 0x1bb6 <strcat+0xc>
    1bbe:	08 95       	ret

00001bc0 <strnlen>:
    1bc0:	fc 01       	movw	r30, r24
    1bc2:	61 50       	subi	r22, 0x01	; 1
    1bc4:	70 40       	sbci	r23, 0x00	; 0
    1bc6:	01 90       	ld	r0, Z+
    1bc8:	01 10       	cpse	r0, r1
    1bca:	d8 f7       	brcc	.-10     	; 0x1bc2 <strnlen+0x2>
    1bcc:	80 95       	com	r24
    1bce:	90 95       	com	r25
    1bd0:	8e 0f       	add	r24, r30
    1bd2:	9f 1f       	adc	r25, r31
    1bd4:	08 95       	ret

00001bd6 <fputc>:
    1bd6:	0f 93       	push	r16
    1bd8:	1f 93       	push	r17
    1bda:	cf 93       	push	r28
    1bdc:	df 93       	push	r29
    1bde:	fb 01       	movw	r30, r22
    1be0:	23 81       	ldd	r18, Z+3	; 0x03
    1be2:	21 fd       	sbrc	r18, 1
    1be4:	03 c0       	rjmp	.+6      	; 0x1bec <fputc+0x16>
    1be6:	8f ef       	ldi	r24, 0xFF	; 255
    1be8:	9f ef       	ldi	r25, 0xFF	; 255
    1bea:	28 c0       	rjmp	.+80     	; 0x1c3c <fputc+0x66>
    1bec:	22 ff       	sbrs	r18, 2
    1bee:	16 c0       	rjmp	.+44     	; 0x1c1c <fputc+0x46>
    1bf0:	46 81       	ldd	r20, Z+6	; 0x06
    1bf2:	57 81       	ldd	r21, Z+7	; 0x07
    1bf4:	24 81       	ldd	r18, Z+4	; 0x04
    1bf6:	35 81       	ldd	r19, Z+5	; 0x05
    1bf8:	42 17       	cp	r20, r18
    1bfa:	53 07       	cpc	r21, r19
    1bfc:	44 f4       	brge	.+16     	; 0x1c0e <fputc+0x38>
    1bfe:	a0 81       	ld	r26, Z
    1c00:	b1 81       	ldd	r27, Z+1	; 0x01
    1c02:	9d 01       	movw	r18, r26
    1c04:	2f 5f       	subi	r18, 0xFF	; 255
    1c06:	3f 4f       	sbci	r19, 0xFF	; 255
    1c08:	31 83       	std	Z+1, r19	; 0x01
    1c0a:	20 83       	st	Z, r18
    1c0c:	8c 93       	st	X, r24
    1c0e:	26 81       	ldd	r18, Z+6	; 0x06
    1c10:	37 81       	ldd	r19, Z+7	; 0x07
    1c12:	2f 5f       	subi	r18, 0xFF	; 255
    1c14:	3f 4f       	sbci	r19, 0xFF	; 255
    1c16:	37 83       	std	Z+7, r19	; 0x07
    1c18:	26 83       	std	Z+6, r18	; 0x06
    1c1a:	10 c0       	rjmp	.+32     	; 0x1c3c <fputc+0x66>
    1c1c:	eb 01       	movw	r28, r22
    1c1e:	09 2f       	mov	r16, r25
    1c20:	18 2f       	mov	r17, r24
    1c22:	00 84       	ldd	r0, Z+8	; 0x08
    1c24:	f1 85       	ldd	r31, Z+9	; 0x09
    1c26:	e0 2d       	mov	r30, r0
    1c28:	09 95       	icall
    1c2a:	89 2b       	or	r24, r25
    1c2c:	e1 f6       	brne	.-72     	; 0x1be6 <fputc+0x10>
    1c2e:	8e 81       	ldd	r24, Y+6	; 0x06
    1c30:	9f 81       	ldd	r25, Y+7	; 0x07
    1c32:	01 96       	adiw	r24, 0x01	; 1
    1c34:	9f 83       	std	Y+7, r25	; 0x07
    1c36:	8e 83       	std	Y+6, r24	; 0x06
    1c38:	81 2f       	mov	r24, r17
    1c3a:	90 2f       	mov	r25, r16
    1c3c:	df 91       	pop	r29
    1c3e:	cf 91       	pop	r28
    1c40:	1f 91       	pop	r17
    1c42:	0f 91       	pop	r16
    1c44:	08 95       	ret

00001c46 <sprintf>:
    1c46:	ae e0       	ldi	r26, 0x0E	; 14
    1c48:	b0 e0       	ldi	r27, 0x00	; 0
    1c4a:	e9 e2       	ldi	r30, 0x29	; 41
    1c4c:	fe e0       	ldi	r31, 0x0E	; 14
    1c4e:	0c 94 c3 0c 	jmp	0x1986	; 0x1986 <__prologue_saves__+0x1c>
    1c52:	0d 89       	ldd	r16, Y+21	; 0x15
    1c54:	1e 89       	ldd	r17, Y+22	; 0x16
    1c56:	86 e0       	ldi	r24, 0x06	; 6
    1c58:	8c 83       	std	Y+4, r24	; 0x04
    1c5a:	1a 83       	std	Y+2, r17	; 0x02
    1c5c:	09 83       	std	Y+1, r16	; 0x01
    1c5e:	8f ef       	ldi	r24, 0xFF	; 255
    1c60:	9f e7       	ldi	r25, 0x7F	; 127
    1c62:	9e 83       	std	Y+6, r25	; 0x06
    1c64:	8d 83       	std	Y+5, r24	; 0x05
    1c66:	ae 01       	movw	r20, r28
    1c68:	47 5e       	subi	r20, 0xE7	; 231
    1c6a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c6c:	6f 89       	ldd	r22, Y+23	; 0x17
    1c6e:	78 8d       	ldd	r23, Y+24	; 0x18
    1c70:	ce 01       	movw	r24, r28
    1c72:	01 96       	adiw	r24, 0x01	; 1
    1c74:	0e 94 17 09 	call	0x122e	; 0x122e <vfprintf>
    1c78:	2f 81       	ldd	r18, Y+7	; 0x07
    1c7a:	38 85       	ldd	r19, Y+8	; 0x08
    1c7c:	f8 01       	movw	r30, r16
    1c7e:	e2 0f       	add	r30, r18
    1c80:	f3 1f       	adc	r31, r19
    1c82:	10 82       	st	Z, r1
    1c84:	2e 96       	adiw	r28, 0x0e	; 14
    1c86:	e4 e0       	ldi	r30, 0x04	; 4
    1c88:	0c 94 df 0c 	jmp	0x19be	; 0x19be <__epilogue_restores__+0x1c>

00001c8c <__ultoa_invert>:
    1c8c:	fa 01       	movw	r30, r20
    1c8e:	aa 27       	eor	r26, r26
    1c90:	28 30       	cpi	r18, 0x08	; 8
    1c92:	51 f1       	breq	.+84     	; 0x1ce8 <__ultoa_invert+0x5c>
    1c94:	20 31       	cpi	r18, 0x10	; 16
    1c96:	81 f1       	breq	.+96     	; 0x1cf8 <__ultoa_invert+0x6c>
    1c98:	e8 94       	clt
    1c9a:	6f 93       	push	r22
    1c9c:	6e 7f       	andi	r22, 0xFE	; 254
    1c9e:	6e 5f       	subi	r22, 0xFE	; 254
    1ca0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ca4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ca6:	af 4f       	sbci	r26, 0xFF	; 255
    1ca8:	b1 e0       	ldi	r27, 0x01	; 1
    1caa:	3e d0       	rcall	.+124    	; 0x1d28 <__ultoa_invert+0x9c>
    1cac:	b4 e0       	ldi	r27, 0x04	; 4
    1cae:	3c d0       	rcall	.+120    	; 0x1d28 <__ultoa_invert+0x9c>
    1cb0:	67 0f       	add	r22, r23
    1cb2:	78 1f       	adc	r23, r24
    1cb4:	89 1f       	adc	r24, r25
    1cb6:	9a 1f       	adc	r25, r26
    1cb8:	a1 1d       	adc	r26, r1
    1cba:	68 0f       	add	r22, r24
    1cbc:	79 1f       	adc	r23, r25
    1cbe:	8a 1f       	adc	r24, r26
    1cc0:	91 1d       	adc	r25, r1
    1cc2:	a1 1d       	adc	r26, r1
    1cc4:	6a 0f       	add	r22, r26
    1cc6:	71 1d       	adc	r23, r1
    1cc8:	81 1d       	adc	r24, r1
    1cca:	91 1d       	adc	r25, r1
    1ccc:	a1 1d       	adc	r26, r1
    1cce:	20 d0       	rcall	.+64     	; 0x1d10 <__ultoa_invert+0x84>
    1cd0:	09 f4       	brne	.+2      	; 0x1cd4 <__ultoa_invert+0x48>
    1cd2:	68 94       	set
    1cd4:	3f 91       	pop	r19
    1cd6:	2a e0       	ldi	r18, 0x0A	; 10
    1cd8:	26 9f       	mul	r18, r22
    1cda:	11 24       	eor	r1, r1
    1cdc:	30 19       	sub	r19, r0
    1cde:	30 5d       	subi	r19, 0xD0	; 208
    1ce0:	31 93       	st	Z+, r19
    1ce2:	de f6       	brtc	.-74     	; 0x1c9a <__ultoa_invert+0xe>
    1ce4:	cf 01       	movw	r24, r30
    1ce6:	08 95       	ret
    1ce8:	46 2f       	mov	r20, r22
    1cea:	47 70       	andi	r20, 0x07	; 7
    1cec:	40 5d       	subi	r20, 0xD0	; 208
    1cee:	41 93       	st	Z+, r20
    1cf0:	b3 e0       	ldi	r27, 0x03	; 3
    1cf2:	0f d0       	rcall	.+30     	; 0x1d12 <__ultoa_invert+0x86>
    1cf4:	c9 f7       	brne	.-14     	; 0x1ce8 <__ultoa_invert+0x5c>
    1cf6:	f6 cf       	rjmp	.-20     	; 0x1ce4 <__ultoa_invert+0x58>
    1cf8:	46 2f       	mov	r20, r22
    1cfa:	4f 70       	andi	r20, 0x0F	; 15
    1cfc:	40 5d       	subi	r20, 0xD0	; 208
    1cfe:	4a 33       	cpi	r20, 0x3A	; 58
    1d00:	18 f0       	brcs	.+6      	; 0x1d08 <__ultoa_invert+0x7c>
    1d02:	49 5d       	subi	r20, 0xD9	; 217
    1d04:	31 fd       	sbrc	r19, 1
    1d06:	40 52       	subi	r20, 0x20	; 32
    1d08:	41 93       	st	Z+, r20
    1d0a:	02 d0       	rcall	.+4      	; 0x1d10 <__ultoa_invert+0x84>
    1d0c:	a9 f7       	brne	.-22     	; 0x1cf8 <__ultoa_invert+0x6c>
    1d0e:	ea cf       	rjmp	.-44     	; 0x1ce4 <__ultoa_invert+0x58>
    1d10:	b4 e0       	ldi	r27, 0x04	; 4
    1d12:	a6 95       	lsr	r26
    1d14:	97 95       	ror	r25
    1d16:	87 95       	ror	r24
    1d18:	77 95       	ror	r23
    1d1a:	67 95       	ror	r22
    1d1c:	ba 95       	dec	r27
    1d1e:	c9 f7       	brne	.-14     	; 0x1d12 <__ultoa_invert+0x86>
    1d20:	00 97       	sbiw	r24, 0x00	; 0
    1d22:	61 05       	cpc	r22, r1
    1d24:	71 05       	cpc	r23, r1
    1d26:	08 95       	ret
    1d28:	9b 01       	movw	r18, r22
    1d2a:	ac 01       	movw	r20, r24
    1d2c:	0a 2e       	mov	r0, r26
    1d2e:	06 94       	lsr	r0
    1d30:	57 95       	ror	r21
    1d32:	47 95       	ror	r20
    1d34:	37 95       	ror	r19
    1d36:	27 95       	ror	r18
    1d38:	ba 95       	dec	r27
    1d3a:	c9 f7       	brne	.-14     	; 0x1d2e <__ultoa_invert+0xa2>
    1d3c:	62 0f       	add	r22, r18
    1d3e:	73 1f       	adc	r23, r19
    1d40:	84 1f       	adc	r24, r20
    1d42:	95 1f       	adc	r25, r21
    1d44:	a0 1d       	adc	r26, r0
    1d46:	08 95       	ret

00001d48 <_exit>:
    1d48:	f8 94       	cli

00001d4a <__stop_program>:
    1d4a:	ff cf       	rjmp	.-2      	; 0x1d4a <__stop_program>
