
MLX Multi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800100  00002e8c  00002f20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002e8c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000056  00800148  00800148  00002f68  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002f68  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002fc4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000298  00000000  00000000  00003004  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000066ef  00000000  00000000  0000329c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001132  00000000  00000000  0000998b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e72  00000000  00000000  0000aabd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000958  00000000  00000000  0000b930  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001966  00000000  00000000  0000c288  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003073  00000000  00000000  0000dbee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000510  00000000  00000000  00010c61  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__ctors_end>
       4:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
       8:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
       c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      10:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      14:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      18:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      1c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      20:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      24:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      28:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      2c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      30:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      34:	0c 94 14 02 	jmp	0x428	; 0x428 <__vector_13>
      38:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__vector_14>
      3c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      40:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      44:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      48:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      4c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      50:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      54:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      58:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      5c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      60:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      64:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	6e 61       	ori	r22, 0x1E	; 30
      6a:	6e 00       	.word	0x006e	; ????

0000006c <__c.2177>:
      6c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      7c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      8c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      9c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      ac:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      bc:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      cc:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      dc:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      ec:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      fc:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     10c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     11c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     12c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     13c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     14c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     15c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000016a <__ctors_start>:
     16a:	bd 04       	cpc	r11, r13
     16c:	58 0f       	add	r21, r24

0000016e <__ctors_end>:
     16e:	11 24       	eor	r1, r1
     170:	1f be       	out	0x3f, r1	; 63
     172:	cf ef       	ldi	r28, 0xFF	; 255
     174:	d8 e0       	ldi	r29, 0x08	; 8
     176:	de bf       	out	0x3e, r29	; 62
     178:	cd bf       	out	0x3d, r28	; 61

0000017a <__do_copy_data>:
     17a:	11 e0       	ldi	r17, 0x01	; 1
     17c:	a0 e0       	ldi	r26, 0x00	; 0
     17e:	b1 e0       	ldi	r27, 0x01	; 1
     180:	ec e8       	ldi	r30, 0x8C	; 140
     182:	fe e2       	ldi	r31, 0x2E	; 46
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x10>
     186:	05 90       	lpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	a8 34       	cpi	r26, 0x48	; 72
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0xc>

00000190 <__do_clear_bss>:
     190:	21 e0       	ldi	r18, 0x01	; 1
     192:	a8 e4       	ldi	r26, 0x48	; 72
     194:	b1 e0       	ldi	r27, 0x01	; 1
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	ae 39       	cpi	r26, 0x9E	; 158
     19c:	b2 07       	cpc	r27, r18
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>

000001a0 <__do_global_ctors>:
     1a0:	10 e0       	ldi	r17, 0x00	; 0
     1a2:	c7 eb       	ldi	r28, 0xB7	; 183
     1a4:	d0 e0       	ldi	r29, 0x00	; 0
     1a6:	04 c0       	rjmp	.+8      	; 0x1b0 <__do_global_ctors+0x10>
     1a8:	21 97       	sbiw	r28, 0x01	; 1
     1aa:	fe 01       	movw	r30, r28
     1ac:	0e 94 7d 15 	call	0x2afa	; 0x2afa <__tablejump2__>
     1b0:	c5 3b       	cpi	r28, 0xB5	; 181
     1b2:	d1 07       	cpc	r29, r17
     1b4:	c9 f7       	brne	.-14     	; 0x1a8 <__do_global_ctors+0x8>
     1b6:	0e 94 98 04 	call	0x930	; 0x930 <main>
     1ba:	0c 94 44 17 	jmp	0x2e88	; 0x2e88 <_exit>

000001be <__bad_interrupt>:
     1be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001c2 <_ZN17Adafruit_MLX90614C1Eh>:
 ****************************************************/

#include "Adafruit_MLX90614.h"
#include "uart.h"
  
Adafruit_MLX90614::Adafruit_MLX90614(uint8_t i2caddr) {
     1c2:	1f 93       	push	r17
     1c4:	cf 93       	push	r28
     1c6:	df 93       	push	r29
     1c8:	ec 01       	movw	r28, r24
     1ca:	16 2f       	mov	r17, r22
	  }
 class I2c
 {
 public:
    I2c()
    {
     1cc:	18 86       	std	Y+8, r1	; 0x08
     1ce:	19 86       	std	Y+9, r1	; 0x09
	    i2c_init();
     1d0:	0e 94 d6 04 	call	0x9ac	; 0x9ac <i2c_init>
  _addr = i2caddr;
     1d4:	1a 87       	std	Y+10, r17	; 0x0a
}
     1d6:	df 91       	pop	r29
     1d8:	cf 91       	pop	r28
     1da:	1f 91       	pop	r17
     1dc:	08 95       	ret

000001de <_ZN17Adafruit_MLX906146read16Eh>:
  return temp;
}

/*********************************************************************/

uint16_t Adafruit_MLX90614::read16(uint8_t a) {
     1de:	0f 93       	push	r16
     1e0:	1f 93       	push	r17
     1e2:	cf 93       	push	r28
     1e4:	8c 01       	movw	r16, r24
     1e6:	c6 2f       	mov	r28, r22
  uint16_t ret;
  Wire.beginTransmission(_addr); // start transmission to device 
     1e8:	fc 01       	movw	r30, r24
     1ea:	82 85       	ldd	r24, Z+10	; 0x0a
    }
     void beginTransmission(uint8_t address)
     {
         m_bufferIndex = 0;
     1ec:	10 86       	std	Z+8, r1	; 0x08

         i2c_start((address << 1) | I2C_WRITE);
     1ee:	88 0f       	add	r24, r24
     1f0:	0e 94 df 04 	call	0x9be	; 0x9be <i2c_start>
     }

     void write(uint8_t byte)
     {
         if (m_bufferIndex == c_bufferSize)
     1f4:	f8 01       	movw	r30, r16
     1f6:	80 85       	ldd	r24, Z+8	; 0x08
     1f8:	88 30       	cpi	r24, 0x08	; 8
     1fa:	59 f0       	breq	.+22     	; 0x212 <_ZN17Adafruit_MLX906146read16Eh+0x34>
             return;

         m_buffer[m_bufferIndex++] = byte;
     1fc:	91 e0       	ldi	r25, 0x01	; 1
     1fe:	98 0f       	add	r25, r24
     200:	90 87       	std	Z+8, r25	; 0x08
     202:	e8 0f       	add	r30, r24
     204:	f1 1d       	adc	r31, r1
     206:	c0 83       	st	Z, r28
    }

    uint8_t endTransmission(bool stop = true)
    {
         for (uint8_t index = 0; index < m_bufferIndex; ++index) {
     208:	f8 01       	movw	r30, r16
     20a:	80 85       	ldd	r24, Z+8	; 0x08
     20c:	88 23       	and	r24, r24
     20e:	09 f4       	brne	.+2      	; 0x212 <_ZN17Adafruit_MLX906146read16Eh+0x34>
     210:	4e c0       	rjmp	.+156    	; 0x2ae <_ZN17Adafruit_MLX906146read16Eh+0xd0>
  return temp;
}

/*********************************************************************/

uint16_t Adafruit_MLX90614::read16(uint8_t a) {
     212:	c0 e0       	ldi	r28, 0x00	; 0
             if (i2c_write(m_buffer[index]) != 0)
     214:	f8 01       	movw	r30, r16
     216:	ec 0f       	add	r30, r28
     218:	f1 1d       	adc	r31, r1
     21a:	80 81       	ld	r24, Z
     21c:	0e 94 0a 05 	call	0xa14	; 0xa14 <i2c_write>
     220:	81 11       	cpse	r24, r1
     222:	45 c0       	rjmp	.+138    	; 0x2ae <_ZN17Adafruit_MLX906146read16Eh+0xd0>
         m_buffer[m_bufferIndex++] = byte;
    }

    uint8_t endTransmission(bool stop = true)
    {
         for (uint8_t index = 0; index < m_bufferIndex; ++index) {
     224:	cf 5f       	subi	r28, 0xFF	; 255
     226:	f8 01       	movw	r30, r16
     228:	80 85       	ldd	r24, Z+8	; 0x08
     22a:	c8 17       	cp	r28, r24
     22c:	98 f3       	brcs	.-26     	; 0x214 <_ZN17Adafruit_MLX906146read16Eh+0x36>
     22e:	3f c0       	rjmp	.+126    	; 0x2ae <_ZN17Adafruit_MLX906146read16Eh+0xd0>
         return m_bufferIndex;
     }

     uint8_t read()
     {
         if (m_bufferReadIndex == m_bufferIndex)
     230:	f8 01       	movw	r30, r16
     232:	91 85       	ldd	r25, Z+9	; 0x09
     234:	80 85       	ldd	r24, Z+8	; 0x08
     236:	98 17       	cp	r25, r24
     238:	b1 f0       	breq	.+44     	; 0x266 <_ZN17Adafruit_MLX906146read16Eh+0x88>
             return 0;
        return m_buffer[m_bufferReadIndex++];
     23a:	41 e0       	ldi	r20, 0x01	; 1
     23c:	49 0f       	add	r20, r25
     23e:	41 87       	std	Z+9, r20	; 0x09
     240:	e9 0f       	add	r30, r25
     242:	f1 1d       	adc	r31, r1
  Wire.beginTransmission(_addr); // start transmission to device 
  Wire.write(a); // sends register address to read from
  Wire.endTransmission(false); // end transmission
  
  Wire.requestFrom(_addr, (uint8_t)3);// send data n-bytes read
  ret = Wire.read(); // receive DATA
     244:	20 81       	ld	r18, Z
     246:	30 e0       	ldi	r19, 0x00	; 0
         return m_bufferIndex;
     }

     uint8_t read()
     {
         if (m_bufferReadIndex == m_bufferIndex)
     248:	84 17       	cp	r24, r20
     24a:	d1 f1       	breq	.+116    	; 0x2c0 <_ZN17Adafruit_MLX906146read16Eh+0xe2>
             return 0;
        return m_buffer[m_bufferReadIndex++];
     24c:	9e 5f       	subi	r25, 0xFE	; 254
     24e:	f8 01       	movw	r30, r16
     250:	91 87       	std	Z+9, r25	; 0x09
     252:	e4 0f       	add	r30, r20
     254:	f1 1d       	adc	r31, r1
  ret |= Wire.read() << 8; // receive DATA
     256:	40 81       	ld	r20, Z
     258:	34 2b       	or	r19, r20
         return m_bufferIndex;
     }

     uint8_t read()
     {
         if (m_bufferReadIndex == m_bufferIndex)
     25a:	98 17       	cp	r25, r24
     25c:	89 f1       	breq	.+98     	; 0x2c0 <_ZN17Adafruit_MLX906146read16Eh+0xe2>
             return 0;
        return m_buffer[m_bufferReadIndex++];
     25e:	9f 5f       	subi	r25, 0xFF	; 255
     260:	f8 01       	movw	r30, r16
     262:	91 87       	std	Z+9, r25	; 0x09
     264:	2d c0       	rjmp	.+90     	; 0x2c0 <_ZN17Adafruit_MLX906146read16Eh+0xe2>
     266:	20 e0       	ldi	r18, 0x00	; 0
     268:	30 e0       	ldi	r19, 0x00	; 0
     26a:	2a c0       	rjmp	.+84     	; 0x2c0 <_ZN17Adafruit_MLX906146read16Eh+0xe2>
         if (i2c_start((address << 1) | I2C_READ) != 0)
             return 0;

        m_bufferIndex = 0;
         while (--quantity > 0) {
             m_buffer[m_bufferIndex++] = i2c_readAck();
     26c:	81 e0       	ldi	r24, 0x01	; 1
     26e:	f8 01       	movw	r30, r16
     270:	80 87       	std	Z+8, r24	; 0x08
     272:	0e 94 1c 05 	call	0xa38	; 0xa38 <i2c_readAck>
     276:	f8 01       	movw	r30, r16
     278:	80 83       	st	Z, r24
     27a:	c0 85       	ldd	r28, Z+8	; 0x08
     27c:	81 e0       	ldi	r24, 0x01	; 1
     27e:	8c 0f       	add	r24, r28
     280:	80 87       	std	Z+8, r24	; 0x08
     282:	0e 94 1c 05 	call	0xa38	; 0xa38 <i2c_readAck>
     286:	f8 01       	movw	r30, r16
     288:	ec 0f       	add	r30, r28
     28a:	f1 1d       	adc	r31, r1
     28c:	80 83       	st	Z, r24
         }
         m_buffer[m_bufferIndex++] = i2c_readNak();
     28e:	f8 01       	movw	r30, r16
     290:	c0 85       	ldd	r28, Z+8	; 0x08
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	8c 0f       	add	r24, r28
     296:	80 87       	std	Z+8, r24	; 0x08
     298:	0e 94 27 05 	call	0xa4e	; 0xa4e <i2c_readNak>
     29c:	f8 01       	movw	r30, r16
     29e:	ec 0f       	add	r30, r28
     2a0:	f1 1d       	adc	r31, r1
     2a2:	80 83       	st	Z, r24
         m_bufferReadIndex = 0;
     2a4:	f8 01       	movw	r30, r16
     2a6:	11 86       	std	Z+9, r1	; 0x09

         if (stop)
             i2c_stop();
     2a8:	0e 94 06 05 	call	0xa0c	; 0xa0c <i2c_stop>
     2ac:	c1 cf       	rjmp	.-126    	; 0x230 <_ZN17Adafruit_MLX906146read16Eh+0x52>
     {
        // quantity = Sensors::min(quantity, c_bufferSize);
         if (quantity == 0)
             return 0;

         if (i2c_start((address << 1) | I2C_READ) != 0)
     2ae:	f8 01       	movw	r30, r16
     2b0:	82 85       	ldd	r24, Z+10	; 0x0a
     2b2:	88 0f       	add	r24, r24
     2b4:	81 60       	ori	r24, 0x01	; 1
     2b6:	0e 94 df 04 	call	0x9be	; 0x9be <i2c_start>
     2ba:	88 23       	and	r24, r24
     2bc:	b9 f2       	breq	.-82     	; 0x26c <_ZN17Adafruit_MLX906146read16Eh+0x8e>
     2be:	b8 cf       	rjmp	.-144    	; 0x230 <_ZN17Adafruit_MLX906146read16Eh+0x52>

  uint8_t pec = Wire.read();

  return ret;
}
     2c0:	c9 01       	movw	r24, r18
     2c2:	cf 91       	pop	r28
     2c4:	1f 91       	pop	r17
     2c6:	0f 91       	pop	r16
     2c8:	08 95       	ret

000002ca <_ZN17Adafruit_MLX906148readTempEh>:
  return readTemp(MLX90614_TA);
}

float Adafruit_MLX90614::readTemp(uint8_t reg) {
  float temp;
  temp = read16(reg);
     2ca:	0e 94 ef 00 	call	0x1de	; 0x1de <_ZN17Adafruit_MLX906146read16Eh>
     2ce:	bc 01       	movw	r22, r24
     2d0:	80 e0       	ldi	r24, 0x00	; 0
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	0e 94 79 10 	call	0x20f2	; 0x20f2 <__floatunsisf>
  temp *= .02;
     2d8:	2a e0       	ldi	r18, 0x0A	; 10
     2da:	37 ed       	ldi	r19, 0xD7	; 215
     2dc:	43 ea       	ldi	r20, 0xA3	; 163
     2de:	5c e3       	ldi	r21, 0x3C	; 60
     2e0:	0e 94 30 11 	call	0x2260	; 0x2260 <__mulsf3>
  temp  -= 273.15;
     2e4:	23 e3       	ldi	r18, 0x33	; 51
     2e6:	33 e9       	ldi	r19, 0x93	; 147
     2e8:	48 e8       	ldi	r20, 0x88	; 136
     2ea:	53 e4       	ldi	r21, 0x43	; 67
     2ec:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <__subsf3>
  return temp;
}
     2f0:	08 95       	ret

000002f2 <_ZN17Adafruit_MLX9061415readObjectTempCEv>:
  _addr = i2caddr;
}
//////////////////////////////////////////////////////

double Adafruit_MLX90614::readObjectTempC(void) {
  return readTemp(MLX90614_TOBJ1);
     2f2:	67 e0       	ldi	r22, 0x07	; 7
     2f4:	0e 94 65 01 	call	0x2ca	; 0x2ca <_ZN17Adafruit_MLX906148readTempEh>
}
     2f8:	08 95       	ret

000002fa <_ZN17Adafruit_MLX9061416readAmbientTempCEv>:


double Adafruit_MLX90614::readAmbientTempC(void) {
  return readTemp(MLX90614_TA);
     2fa:	66 e0       	ldi	r22, 0x06	; 6
     2fc:	0e 94 65 01 	call	0x2ca	; 0x2ca <_ZN17Adafruit_MLX906148readTempEh>
}
     300:	08 95       	ret

00000302 <_ZN7HC_SR044initEv>:
// Anything over 400/500 cm (23200/29410 us pulse) is "out of range"
const unsigned long MAX_DIST = 23200;
  
void HC_SR04::init() {
  // The Trigger pin will tell the sensor to range find
  DDRD = 0x20;
     302:	80 e2       	ldi	r24, 0x20	; 32
     304:	8a b9       	out	0x0a, r24	; 10
  PORTD = 0x00;
     306:	1b b8       	out	0x0b, r1	; 11
  clr_pin(PORTD, TRIG_PIN);  
     308:	5d 98       	cbi	0x0b, 5	; 11
     30a:	08 95       	ret

0000030c <_ZN7HC_SR044readEv>:
}
uint8_t HC_SR04::read(){
     30c:	cf 92       	push	r12
     30e:	df 92       	push	r13
     310:	ef 92       	push	r14
     312:	ff 92       	push	r15
     314:	0f 93       	push	r16
     316:	1f 93       	push	r17
     318:	cf 93       	push	r28
     31a:	8c 01       	movw	r16, r24
	float t1;
	float t2;
	float pulse_width;
	
	//set_micro(0);
	clr_pin(PORTD, TRIG_PIN);
     31c:	5d 98       	cbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     31e:	8a e0       	ldi	r24, 0x0A	; 10
     320:	8a 95       	dec	r24
     322:	f1 f7       	brne	.-4      	; 0x320 <_ZN7HC_SR044readEv+0x14>
     324:	00 c0       	rjmp	.+0      	; 0x326 <_ZN7HC_SR044readEv+0x1a>
	_delay_us(2);
	// Hold the trigger pin high for at least 10 us
	set_pin(PORTD, TRIG_PIN);
     326:	5d 9a       	sbi	0x0b, 5	; 11
     328:	ea e6       	ldi	r30, 0x6A	; 106
     32a:	ea 95       	dec	r30
     32c:	f1 f7       	brne	.-4      	; 0x32a <_ZN7HC_SR044readEv+0x1e>
     32e:	00 c0       	rjmp	.+0      	; 0x330 <_ZN7HC_SR044readEv+0x24>
	_delay_us(20);
	clr_pin(PORTD, TRIG_PIN);
     330:	5d 98       	cbi	0x0b, 5	; 11
	
	// Wait for pulse on echo pin
	while ((PIND & _BV(ECHO_PIN)) == 0 );
     332:	4e 9b       	sbis	0x09, 6	; 9
     334:	fe cf       	rjmp	.-4      	; 0x332 <_ZN7HC_SR044readEv+0x26>
	// Measure how long the echo pin was held high (pulse width)
	// Note: the micros() counter will overflow after ~70 min
	TCNT1 = 0;
     336:	e4 e8       	ldi	r30, 0x84	; 132
     338:	f0 e0       	ldi	r31, 0x00	; 0
     33a:	11 82       	std	Z+1, r1	; 0x01
     33c:	10 82       	st	Z, r1
	t1 = TCNT1 ;
     33e:	60 81       	ld	r22, Z
     340:	71 81       	ldd	r23, Z+1	; 0x01
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	0e 94 79 10 	call	0x20f2	; 0x20f2 <__floatunsisf>
     34a:	6b 01       	movw	r12, r22
     34c:	7c 01       	movw	r14, r24
	cli();
     34e:	f8 94       	cli

	while ((PIND & _BV(ECHO_PIN)) != 0);
     350:	99 b1       	in	r25, 0x09	; 9
     352:	c9 2f       	mov	r28, r25
     354:	c0 74       	andi	r28, 0x40	; 64
     356:	96 fd       	sbrc	r25, 6
     358:	fb cf       	rjmp	.-10     	; 0x350 <_ZN7HC_SR044readEv+0x44>
	sei();
     35a:	78 94       	sei
	t2 = TCNT1 ;
     35c:	40 91 84 00 	lds	r20, 0x0084
     360:	50 91 85 00 	lds	r21, 0x0085
     364:	ba 01       	movw	r22, r20
     366:	80 e0       	ldi	r24, 0x00	; 0
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	0e 94 79 10 	call	0x20f2	; 0x20f2 <__floatunsisf>
	
	pulse_width = (t2 - t1)* 0.5;
     36e:	a7 01       	movw	r20, r14
     370:	96 01       	movw	r18, r12
     372:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <__subsf3>
     376:	20 e0       	ldi	r18, 0x00	; 0
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	40 e0       	ldi	r20, 0x00	; 0
     37c:	5f e3       	ldi	r21, 0x3F	; 63
     37e:	0e 94 30 11 	call	0x2260	; 0x2260 <__mulsf3>
     382:	6b 01       	movw	r12, r22
     384:	7c 01       	movw	r14, r24
	
	if ( pulse_width > MAX_DIST ) {
     386:	20 e0       	ldi	r18, 0x00	; 0
     388:	30 e4       	ldi	r19, 0x40	; 64
     38a:	45 eb       	ldi	r20, 0xB5	; 181
     38c:	56 e4       	ldi	r21, 0x46	; 70
     38e:	0e 94 2b 11 	call	0x2256	; 0x2256 <__gesf2>
     392:	18 16       	cp	r1, r24
     394:	74 f4       	brge	.+28     	; 0x3b2 <_ZN7HC_SR044readEv+0xa6>
		//void send_int(int d);
		void send(double data, int base);
		//void send(uint32_t str);
			
		void sendln(void) {send("\r\n");};
		void sendln(const char* c) {send(c);send("\r\n");};
     396:	60 e0       	ldi	r22, 0x00	; 0
     398:	71 e0       	ldi	r23, 0x01	; 1
     39a:	8c e8       	ldi	r24, 0x8C	; 140
     39c:	91 e0       	ldi	r25, 0x01	; 1
     39e:	0e 94 84 05 	call	0xb08	; 0xb08 <_ZN5USART4sendEPKc>
     3a2:	65 e4       	ldi	r22, 0x45	; 69
     3a4:	71 e0       	ldi	r23, 0x01	; 1
     3a6:	8c e8       	ldi	r24, 0x8C	; 140
     3a8:	91 e0       	ldi	r25, 0x01	; 1
     3aa:	0e 94 84 05 	call	0xb08	; 0xb08 <_ZN5USART4sendEPKc>
		Serial.sendln("Out of range");
		pulse_width = MAX_DIST;
		return 1;
     3ae:	c1 e0       	ldi	r28, 0x01	; 1
     3b0:	0d c0       	rjmp	.+26     	; 0x3cc <_ZN7HC_SR044readEv+0xc0>
	}
	// Calculate distance in centimeters and inches. The constants
	// are found in the data-sheet, and calculated from the assumed speed 
	//of sound in air at sea level (~340 m/s).
	cm = pulse_width/ 58;
     3b2:	20 e0       	ldi	r18, 0x00	; 0
     3b4:	30 e0       	ldi	r19, 0x00	; 0
     3b6:	48 e6       	ldi	r20, 0x68	; 104
     3b8:	52 e4       	ldi	r21, 0x42	; 66
     3ba:	c7 01       	movw	r24, r14
     3bc:	b6 01       	movw	r22, r12
     3be:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <__divsf3>
	Distance = cm;
     3c2:	f8 01       	movw	r30, r16
     3c4:	60 83       	st	Z, r22
     3c6:	71 83       	std	Z+1, r23	; 0x01
     3c8:	82 83       	std	Z+2, r24	; 0x02
     3ca:	93 83       	std	Z+3, r25	; 0x03
	return 0;
}
     3cc:	8c 2f       	mov	r24, r28
     3ce:	cf 91       	pop	r28
     3d0:	1f 91       	pop	r17
     3d2:	0f 91       	pop	r16
     3d4:	ff 90       	pop	r15
     3d6:	ef 90       	pop	r14
     3d8:	df 90       	pop	r13
     3da:	cf 90       	pop	r12
     3dc:	08 95       	ret

000003de <__vector_14>:

HC_SR04 Sonic;
VL53L0X TOF;
volatile unsigned long int count = 0; 
ISR(TIMER0_COMPA_vect)
{
     3de:	1f 92       	push	r1
     3e0:	0f 92       	push	r0
     3e2:	0f b6       	in	r0, 0x3f	; 63
     3e4:	0f 92       	push	r0
     3e6:	11 24       	eor	r1, r1
     3e8:	8f 93       	push	r24
     3ea:	9f 93       	push	r25
     3ec:	af 93       	push	r26
     3ee:	bf 93       	push	r27
	count++;
     3f0:	80 91 48 01 	lds	r24, 0x0148
     3f4:	90 91 49 01 	lds	r25, 0x0149
     3f8:	a0 91 4a 01 	lds	r26, 0x014A
     3fc:	b0 91 4b 01 	lds	r27, 0x014B
     400:	01 96       	adiw	r24, 0x01	; 1
     402:	a1 1d       	adc	r26, r1
     404:	b1 1d       	adc	r27, r1
     406:	80 93 48 01 	sts	0x0148, r24
     40a:	90 93 49 01 	sts	0x0149, r25
     40e:	a0 93 4a 01 	sts	0x014A, r26
     412:	b0 93 4b 01 	sts	0x014B, r27
}
     416:	bf 91       	pop	r27
     418:	af 91       	pop	r26
     41a:	9f 91       	pop	r25
     41c:	8f 91       	pop	r24
     41e:	0f 90       	pop	r0
     420:	0f be       	out	0x3f, r0	; 63
     422:	0f 90       	pop	r0
     424:	1f 90       	pop	r1
     426:	18 95       	reti

00000428 <__vector_13>:

ISR(TIMER1_OVF_vect){
     428:	1f 92       	push	r1
     42a:	0f 92       	push	r0
     42c:	0f b6       	in	r0, 0x3f	; 63
     42e:	0f 92       	push	r0
     430:	11 24       	eor	r1, r1
	//PORTB ^= _BV(PORTB5);
	//TIFR1 = 0;
}
     432:	0f 90       	pop	r0
     434:	0f be       	out	0x3f, r0	; 63
     436:	0f 90       	pop	r0
     438:	1f 90       	pop	r1
     43a:	18 95       	reti

0000043c <_Z6millisv>:
/*********************************************************************/
unsigned long int millis(void)
{
	return count;
     43c:	60 91 48 01 	lds	r22, 0x0148
     440:	70 91 49 01 	lds	r23, 0x0149
     444:	80 91 4a 01 	lds	r24, 0x014A
     448:	90 91 4b 01 	lds	r25, 0x014B
}
     44c:	08 95       	ret

0000044e <_Z5setupv>:
/*********************************************************************/
void setup(void)
{		
	cli();
     44e:	f8 94       	cli
	#endif // _DEBUG
	
	//DDRB |= _BV(PORTB5);
	//PORTB &= ~_BV(PORTB5);
	
	TCNT0 = 0;
     450:	16 bc       	out	0x26, r1	; 38
	TCNT1 = 0;
     452:	10 92 85 00 	sts	0x0085, r1
     456:	10 92 84 00 	sts	0x0084, r1
	TCCR0A |= (1<<WGM01);
     45a:	84 b5       	in	r24, 0x24	; 36
     45c:	82 60       	ori	r24, 0x02	; 2
     45e:	84 bd       	out	0x24, r24	; 36
	OCR0A = 249;
     460:	89 ef       	ldi	r24, 0xF9	; 249
     462:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1 << OCIE0A);
     464:	ee e6       	ldi	r30, 0x6E	; 110
     466:	f0 e0       	ldi	r31, 0x00	; 0
     468:	80 81       	ld	r24, Z
     46a:	82 60       	ori	r24, 0x02	; 2
     46c:	80 83       	st	Z, r24
	TIMSK1 |= _BV(TOIE1);
     46e:	ef e6       	ldi	r30, 0x6F	; 111
     470:	f0 e0       	ldi	r31, 0x00	; 0
     472:	80 81       	ld	r24, Z
     474:	81 60       	ori	r24, 0x01	; 1
     476:	80 83       	st	Z, r24
	TCCR0B |= (1<<CS01) | (1<<CS00);
     478:	85 b5       	in	r24, 0x25	; 37
     47a:	83 60       	ori	r24, 0x03	; 3
     47c:	85 bd       	out	0x25, r24	; 37
	TCCR1B |= (1<<CS11);
     47e:	e1 e8       	ldi	r30, 0x81	; 129
     480:	f0 e0       	ldi	r31, 0x00	; 0
     482:	80 81       	ld	r24, Z
     484:	82 60       	ori	r24, 0x02	; 2
     486:	80 83       	st	Z, r24
	sei();
     488:	78 94       	sei
	Serial.init(9600);
     48a:	60 e8       	ldi	r22, 0x80	; 128
     48c:	75 e2       	ldi	r23, 0x25	; 37
     48e:	8c e8       	ldi	r24, 0x8C	; 140
     490:	91 e0       	ldi	r25, 0x01	; 1
     492:	0e 94 32 05 	call	0xa64	; 0xa64 <_ZN5USART4initEi>
	Sonic.init();
     496:	88 e5       	ldi	r24, 0x58	; 88
     498:	91 e0       	ldi	r25, 0x01	; 1
     49a:	0e 94 81 01 	call	0x302	; 0x302 <_ZN7HC_SR044initEv>
	#ifdef _DEBUG
		Serial.send( rflag ,HEX);
		Serial.sendln("> Booting...");	
	#endif // _DEBUG
	TOF.init();
     49e:	61 e0       	ldi	r22, 0x01	; 1
     4a0:	8c e4       	ldi	r24, 0x4C	; 76
     4a2:	91 e0       	ldi	r25, 0x01	; 1
     4a4:	0e 94 a8 0c 	call	0x1950	; 0x1950 <_ZN7VL53L0X4initEb>
    void startContinuous(uint32_t period_ms = 0);
    void stopContinuous(void);
    uint16_t readRangeContinuousMillimeters(void);
    uint16_t readRangeSingleMillimeters(void);

    inline void setTimeout(uint16_t timeout) { io_timeout = timeout; }
     4a8:	84 ef       	ldi	r24, 0xF4	; 244
     4aa:	91 e0       	ldi	r25, 0x01	; 1
     4ac:	90 93 4f 01 	sts	0x014F, r25
     4b0:	80 93 4e 01 	sts	0x014E, r24
     4b4:	08 95       	ret

000004b6 <_Z13IR_sensorReadv>:
	TOF.setTimeout(500);
}
/*********************************************************************/
void IR_sensorRead(void )
{
     4b6:	2f 92       	push	r2
     4b8:	3f 92       	push	r3
     4ba:	4f 92       	push	r4
     4bc:	5f 92       	push	r5
     4be:	6f 92       	push	r6
     4c0:	7f 92       	push	r7
     4c2:	8f 92       	push	r8
     4c4:	9f 92       	push	r9
     4c6:	af 92       	push	r10
     4c8:	bf 92       	push	r11
     4ca:	cf 92       	push	r12
     4cc:	df 92       	push	r13
     4ce:	ef 92       	push	r14
     4d0:	ff 92       	push	r15
     4d2:	0f 93       	push	r16
     4d4:	1f 93       	push	r17
     4d6:	cf 93       	push	r28
     4d8:	df 93       	push	r29
     4da:	cd b7       	in	r28, 0x3d	; 61
     4dc:	de b7       	in	r29, 0x3e	; 62
     4de:	c7 59       	subi	r28, 0x97	; 151
     4e0:	d1 09       	sbc	r29, r1
     4e2:	0f b6       	in	r0, 0x3f	; 63
     4e4:	f8 94       	cli
     4e6:	de bf       	out	0x3e, r29	; 62
     4e8:	0f be       	out	0x3f, r0	; 63
     4ea:	cd bf       	out	0x3d, r28	; 61
	char str[25];
	char str_out[100] = {""};
     4ec:	19 82       	std	Y+1, r1	; 0x01
     4ee:	1a 82       	std	Y+2, r1	; 0x02
     4f0:	1b 82       	std	Y+3, r1	; 0x03
     4f2:	1c 82       	std	Y+4, r1	; 0x04
     4f4:	fe 01       	movw	r30, r28
     4f6:	35 96       	adiw	r30, 0x05	; 5
     4f8:	80 e6       	ldi	r24, 0x60	; 96
     4fa:	df 01       	movw	r26, r30
     4fc:	1d 92       	st	X+, r1
     4fe:	8a 95       	dec	r24
     500:	e9 f7       	brne	.-6      	; 0x4fc <_Z13IR_sensorReadv+0x46>
	double obj_1,obj_2,obj_3,obj_4,amb_1,amb_2,amb_3,amb_4;
	unsigned long int m_read_time = 0;

	Sonic.read();
     502:	88 e5       	ldi	r24, 0x58	; 88
     504:	91 e0       	ldi	r25, 0x01	; 1
     506:	0e 94 86 01 	call	0x30c	; 0x30c <_ZN7HC_SR044readEv>
	double mDistance = TOF.readRangeContinuousMillimeters();
     50a:	8c e4       	ldi	r24, 0x4C	; 76
     50c:	91 e0       	ldi	r25, 0x01	; 1
     50e:	0e 94 29 09 	call	0x1252	; 0x1252 <_ZN7VL53L0X30readRangeContinuousMillimetersEv>
     512:	bc 01       	movw	r22, r24
     514:	80 e0       	ldi	r24, 0x00	; 0
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	0e 94 79 10 	call	0x20f2	; 0x20f2 <__floatunsisf>
     51c:	b6 2e       	mov	r11, r22
     51e:	a7 2e       	mov	r10, r23
     520:	98 2e       	mov	r9, r24
     522:	89 2e       	mov	r8, r25
	//TIFR1 = 0;
}
/*********************************************************************/
unsigned long int millis(void)
{
	return count;
     524:	c0 90 48 01 	lds	r12, 0x0148
     528:	d0 90 49 01 	lds	r13, 0x0149
     52c:	e0 90 4a 01 	lds	r14, 0x014A
     530:	f0 90 4b 01 	lds	r15, 0x014B
	m_read_time = millis();
	#ifdef _DEBUG
		//Serial.sendln("> Read 0x5a...");
	#endif
				
	obj_1 = MLX_5a.readObjectTempC();
     534:	81 e8       	ldi	r24, 0x81	; 129
     536:	91 e0       	ldi	r25, 0x01	; 1
     538:	0e 94 79 01 	call	0x2f2	; 0x2f2 <_ZN17Adafruit_MLX9061415readObjectTempCEv>
     53c:	16 2f       	mov	r17, r22
     53e:	07 2f       	mov	r16, r23
     540:	78 2e       	mov	r7, r24
     542:	69 2e       	mov	r6, r25
	amb_1 = MLX_5a.readAmbientTempC();
     544:	81 e8       	ldi	r24, 0x81	; 129
     546:	91 e0       	ldi	r25, 0x01	; 1
     548:	0e 94 7d 01 	call	0x2fa	; 0x2fa <_ZN17Adafruit_MLX9061416readAmbientTempCEv>
     54c:	ef 96       	adiw	r28, 0x3f	; 63
     54e:	6f af       	std	Y+63, r22	; 0x3f
     550:	ef 97       	sbiw	r28, 0x3f	; 63
     552:	c1 58       	subi	r28, 0x81	; 129
     554:	df 4f       	sbci	r29, 0xFF	; 255
     556:	78 83       	st	Y, r23
     558:	cf 57       	subi	r28, 0x7F	; 127
     55a:	d0 40       	sbci	r29, 0x00	; 0
     55c:	38 2e       	mov	r3, r24
     55e:	29 2e       	mov	r2, r25
	//Read 0x5B
	obj_2 = MLX_5b.readObjectTempC();
     560:	86 e7       	ldi	r24, 0x76	; 118
     562:	91 e0       	ldi	r25, 0x01	; 1
     564:	0e 94 79 01 	call	0x2f2	; 0x2f2 <_ZN17Adafruit_MLX9061415readObjectTempCEv>
     568:	c0 58       	subi	r28, 0x80	; 128
     56a:	df 4f       	sbci	r29, 0xFF	; 255
     56c:	68 83       	st	Y, r22
     56e:	c0 58       	subi	r28, 0x80	; 128
     570:	d0 40       	sbci	r29, 0x00	; 0
     572:	cf 57       	subi	r28, 0x7F	; 127
     574:	df 4f       	sbci	r29, 0xFF	; 255
     576:	78 83       	st	Y, r23
     578:	c1 58       	subi	r28, 0x81	; 129
     57a:	d0 40       	sbci	r29, 0x00	; 0
     57c:	ce 57       	subi	r28, 0x7E	; 126
     57e:	df 4f       	sbci	r29, 0xFF	; 255
     580:	88 83       	st	Y, r24
     582:	c2 58       	subi	r28, 0x82	; 130
     584:	d0 40       	sbci	r29, 0x00	; 0
     586:	cd 57       	subi	r28, 0x7D	; 125
     588:	df 4f       	sbci	r29, 0xFF	; 255
     58a:	98 83       	st	Y, r25
     58c:	c3 58       	subi	r28, 0x83	; 131
     58e:	d0 40       	sbci	r29, 0x00	; 0
	amb_2 = MLX_5b.readAmbientTempC();
     590:	86 e7       	ldi	r24, 0x76	; 118
     592:	91 e0       	ldi	r25, 0x01	; 1
     594:	0e 94 7d 01 	call	0x2fa	; 0x2fa <_ZN17Adafruit_MLX9061416readAmbientTempCEv>
     598:	cc 57       	subi	r28, 0x7C	; 124
     59a:	df 4f       	sbci	r29, 0xFF	; 255
     59c:	68 83       	st	Y, r22
     59e:	c4 58       	subi	r28, 0x84	; 132
     5a0:	d0 40       	sbci	r29, 0x00	; 0
     5a2:	cb 57       	subi	r28, 0x7B	; 123
     5a4:	df 4f       	sbci	r29, 0xFF	; 255
     5a6:	78 83       	st	Y, r23
     5a8:	c5 58       	subi	r28, 0x85	; 133
     5aa:	d0 40       	sbci	r29, 0x00	; 0
     5ac:	ca 57       	subi	r28, 0x7A	; 122
     5ae:	df 4f       	sbci	r29, 0xFF	; 255
     5b0:	88 83       	st	Y, r24
     5b2:	c6 58       	subi	r28, 0x86	; 134
     5b4:	d0 40       	sbci	r29, 0x00	; 0
     5b6:	c9 57       	subi	r28, 0x79	; 121
     5b8:	df 4f       	sbci	r29, 0xFF	; 255
     5ba:	98 83       	st	Y, r25
     5bc:	c7 58       	subi	r28, 0x87	; 135
     5be:	d0 40       	sbci	r29, 0x00	; 0
	//Read 0x5C
	obj_3 = MLX_5c.readObjectTempC();
     5c0:	8b e6       	ldi	r24, 0x6B	; 107
     5c2:	91 e0       	ldi	r25, 0x01	; 1
     5c4:	0e 94 79 01 	call	0x2f2	; 0x2f2 <_ZN17Adafruit_MLX9061415readObjectTempCEv>
     5c8:	c8 57       	subi	r28, 0x78	; 120
     5ca:	df 4f       	sbci	r29, 0xFF	; 255
     5cc:	68 83       	st	Y, r22
     5ce:	c8 58       	subi	r28, 0x88	; 136
     5d0:	d0 40       	sbci	r29, 0x00	; 0
     5d2:	c7 57       	subi	r28, 0x77	; 119
     5d4:	df 4f       	sbci	r29, 0xFF	; 255
     5d6:	78 83       	st	Y, r23
     5d8:	c9 58       	subi	r28, 0x89	; 137
     5da:	d0 40       	sbci	r29, 0x00	; 0
     5dc:	c6 57       	subi	r28, 0x76	; 118
     5de:	df 4f       	sbci	r29, 0xFF	; 255
     5e0:	88 83       	st	Y, r24
     5e2:	ca 58       	subi	r28, 0x8A	; 138
     5e4:	d0 40       	sbci	r29, 0x00	; 0
     5e6:	c5 57       	subi	r28, 0x75	; 117
     5e8:	df 4f       	sbci	r29, 0xFF	; 255
     5ea:	98 83       	st	Y, r25
     5ec:	cb 58       	subi	r28, 0x8B	; 139
     5ee:	d0 40       	sbci	r29, 0x00	; 0
	amb_3 = MLX_5c.readAmbientTempC();
     5f0:	8b e6       	ldi	r24, 0x6B	; 107
     5f2:	91 e0       	ldi	r25, 0x01	; 1
     5f4:	0e 94 7d 01 	call	0x2fa	; 0x2fa <_ZN17Adafruit_MLX9061416readAmbientTempCEv>
     5f8:	c4 57       	subi	r28, 0x74	; 116
     5fa:	df 4f       	sbci	r29, 0xFF	; 255
     5fc:	68 83       	st	Y, r22
     5fe:	cc 58       	subi	r28, 0x8C	; 140
     600:	d0 40       	sbci	r29, 0x00	; 0
     602:	c3 57       	subi	r28, 0x73	; 115
     604:	df 4f       	sbci	r29, 0xFF	; 255
     606:	78 83       	st	Y, r23
     608:	cd 58       	subi	r28, 0x8D	; 141
     60a:	d0 40       	sbci	r29, 0x00	; 0
     60c:	c2 57       	subi	r28, 0x72	; 114
     60e:	df 4f       	sbci	r29, 0xFF	; 255
     610:	88 83       	st	Y, r24
     612:	ce 58       	subi	r28, 0x8E	; 142
     614:	d0 40       	sbci	r29, 0x00	; 0
     616:	c1 57       	subi	r28, 0x71	; 113
     618:	df 4f       	sbci	r29, 0xFF	; 255
     61a:	98 83       	st	Y, r25
     61c:	cf 58       	subi	r28, 0x8F	; 143
     61e:	d0 40       	sbci	r29, 0x00	; 0
	//Read 0x5D
	obj_4 = MLX_5d.readObjectTempC();
     620:	80 e6       	ldi	r24, 0x60	; 96
     622:	91 e0       	ldi	r25, 0x01	; 1
     624:	0e 94 79 01 	call	0x2f2	; 0x2f2 <_ZN17Adafruit_MLX9061415readObjectTempCEv>
     628:	c0 57       	subi	r28, 0x70	; 112
     62a:	df 4f       	sbci	r29, 0xFF	; 255
     62c:	68 83       	st	Y, r22
     62e:	c0 59       	subi	r28, 0x90	; 144
     630:	d0 40       	sbci	r29, 0x00	; 0
     632:	cf 56       	subi	r28, 0x6F	; 111
     634:	df 4f       	sbci	r29, 0xFF	; 255
     636:	78 83       	st	Y, r23
     638:	c1 59       	subi	r28, 0x91	; 145
     63a:	d0 40       	sbci	r29, 0x00	; 0
     63c:	ce 56       	subi	r28, 0x6E	; 110
     63e:	df 4f       	sbci	r29, 0xFF	; 255
     640:	88 83       	st	Y, r24
     642:	c2 59       	subi	r28, 0x92	; 146
     644:	d0 40       	sbci	r29, 0x00	; 0
     646:	cd 56       	subi	r28, 0x6D	; 109
     648:	df 4f       	sbci	r29, 0xFF	; 255
     64a:	98 83       	st	Y, r25
     64c:	c3 59       	subi	r28, 0x93	; 147
     64e:	d0 40       	sbci	r29, 0x00	; 0
	amb_4 = MLX_5d.readAmbientTempC();	
     650:	80 e6       	ldi	r24, 0x60	; 96
     652:	91 e0       	ldi	r25, 0x01	; 1
     654:	0e 94 7d 01 	call	0x2fa	; 0x2fa <_ZN17Adafruit_MLX9061416readAmbientTempCEv>
     658:	cc 56       	subi	r28, 0x6C	; 108
     65a:	df 4f       	sbci	r29, 0xFF	; 255
     65c:	68 83       	st	Y, r22
     65e:	c4 59       	subi	r28, 0x94	; 148
     660:	d0 40       	sbci	r29, 0x00	; 0
     662:	cb 56       	subi	r28, 0x6B	; 107
     664:	df 4f       	sbci	r29, 0xFF	; 255
     666:	78 83       	st	Y, r23
     668:	c5 59       	subi	r28, 0x95	; 149
     66a:	d0 40       	sbci	r29, 0x00	; 0
     66c:	ca 56       	subi	r28, 0x6A	; 106
     66e:	df 4f       	sbci	r29, 0xFF	; 255
     670:	88 83       	st	Y, r24
     672:	c6 59       	subi	r28, 0x96	; 150
     674:	d0 40       	sbci	r29, 0x00	; 0
     676:	c9 56       	subi	r28, 0x69	; 105
     678:	df 4f       	sbci	r29, 0xFF	; 255
     67a:	98 83       	st	Y, r25
     67c:	c7 59       	subi	r28, 0x97	; 151
     67e:	d0 40       	sbci	r29, 0x00	; 0
	
	sprintf(str, "T%d,%0.1f,%0.1f,%i,%.2f,%lu\r\n", 1, obj_1, amb_1, (int)Sonic.Distance,mDistance,m_read_time);
     680:	0f 2e       	mov	r0, r31
     682:	f8 e5       	ldi	r31, 0x58	; 88
     684:	4f 2e       	mov	r4, r31
     686:	f1 e0       	ldi	r31, 0x01	; 1
     688:	5f 2e       	mov	r5, r31
     68a:	f0 2d       	mov	r31, r0
     68c:	f2 01       	movw	r30, r4
     68e:	60 81       	ld	r22, Z
     690:	71 81       	ldd	r23, Z+1	; 0x01
     692:	82 81       	ldd	r24, Z+2	; 0x02
     694:	93 81       	ldd	r25, Z+3	; 0x03
     696:	ff 92       	push	r15
     698:	ef 92       	push	r14
     69a:	df 92       	push	r13
     69c:	cf 92       	push	r12
     69e:	8f 92       	push	r8
     6a0:	9f 92       	push	r9
     6a2:	af 92       	push	r10
     6a4:	bf 92       	push	r11
     6a6:	0e 94 43 10 	call	0x2086	; 0x2086 <__fixsfsi>
     6aa:	7f 93       	push	r23
     6ac:	6f 93       	push	r22
     6ae:	2f 92       	push	r2
     6b0:	3f 92       	push	r3
     6b2:	c1 58       	subi	r28, 0x81	; 129
     6b4:	df 4f       	sbci	r29, 0xFF	; 255
     6b6:	f8 81       	ld	r31, Y
     6b8:	cf 57       	subi	r28, 0x7F	; 127
     6ba:	d0 40       	sbci	r29, 0x00	; 0
     6bc:	ff 93       	push	r31
     6be:	ef 96       	adiw	r28, 0x3f	; 63
     6c0:	8f ad       	ldd	r24, Y+63	; 0x3f
     6c2:	ef 97       	sbiw	r28, 0x3f	; 63
     6c4:	8f 93       	push	r24
     6c6:	6f 92       	push	r6
     6c8:	7f 92       	push	r7
     6ca:	0f 93       	push	r16
     6cc:	1f 93       	push	r17
     6ce:	1f 92       	push	r1
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	8f 93       	push	r24
     6d4:	0f 2e       	mov	r0, r31
     6d6:	fd e0       	ldi	r31, 0x0D	; 13
     6d8:	6f 2e       	mov	r6, r31
     6da:	f1 e0       	ldi	r31, 0x01	; 1
     6dc:	7f 2e       	mov	r7, r31
     6de:	f0 2d       	mov	r31, r0
     6e0:	7f 92       	push	r7
     6e2:	6f 92       	push	r6
     6e4:	8e 01       	movw	r16, r28
     6e6:	0b 59       	subi	r16, 0x9B	; 155
     6e8:	1f 4f       	sbci	r17, 0xFF	; 255
     6ea:	1f 93       	push	r17
     6ec:	0f 93       	push	r16
     6ee:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <sprintf>
	strcat(str_out,str);
     6f2:	b8 01       	movw	r22, r16
     6f4:	ce 01       	movw	r24, r28
     6f6:	01 96       	adiw	r24, 0x01	; 1
     6f8:	0e 94 75 16 	call	0x2cea	; 0x2cea <strcat>

	sprintf(str, "T%d,%.1f,%0.1f,%i,%.2f,%lu\r\n", 2, obj_2, amb_2, (int)Sonic.Distance,mDistance,m_read_time);
     6fc:	d2 01       	movw	r26, r4
     6fe:	6d 91       	ld	r22, X+
     700:	7d 91       	ld	r23, X+
     702:	8d 91       	ld	r24, X+
     704:	9c 91       	ld	r25, X
     706:	ff 92       	push	r15
     708:	ef 92       	push	r14
     70a:	df 92       	push	r13
     70c:	cf 92       	push	r12
     70e:	8f 92       	push	r8
     710:	9f 92       	push	r9
     712:	af 92       	push	r10
     714:	bf 92       	push	r11
     716:	0e 94 43 10 	call	0x2086	; 0x2086 <__fixsfsi>
     71a:	7f 93       	push	r23
     71c:	6f 93       	push	r22
     71e:	c9 57       	subi	r28, 0x79	; 121
     720:	df 4f       	sbci	r29, 0xFF	; 255
     722:	b8 81       	ld	r27, Y
     724:	c7 58       	subi	r28, 0x87	; 135
     726:	d0 40       	sbci	r29, 0x00	; 0
     728:	bf 93       	push	r27
     72a:	ca 57       	subi	r28, 0x7A	; 122
     72c:	df 4f       	sbci	r29, 0xFF	; 255
     72e:	e8 81       	ld	r30, Y
     730:	c6 58       	subi	r28, 0x86	; 134
     732:	d0 40       	sbci	r29, 0x00	; 0
     734:	ef 93       	push	r30
     736:	cb 57       	subi	r28, 0x7B	; 123
     738:	df 4f       	sbci	r29, 0xFF	; 255
     73a:	f8 81       	ld	r31, Y
     73c:	c5 58       	subi	r28, 0x85	; 133
     73e:	d0 40       	sbci	r29, 0x00	; 0
     740:	ff 93       	push	r31
     742:	cc 57       	subi	r28, 0x7C	; 124
     744:	df 4f       	sbci	r29, 0xFF	; 255
     746:	88 81       	ld	r24, Y
     748:	c4 58       	subi	r28, 0x84	; 132
     74a:	d0 40       	sbci	r29, 0x00	; 0
     74c:	8f 93       	push	r24
     74e:	cd 57       	subi	r28, 0x7D	; 125
     750:	df 4f       	sbci	r29, 0xFF	; 255
     752:	98 81       	ld	r25, Y
     754:	c3 58       	subi	r28, 0x83	; 131
     756:	d0 40       	sbci	r29, 0x00	; 0
     758:	9f 93       	push	r25
     75a:	ce 57       	subi	r28, 0x7E	; 126
     75c:	df 4f       	sbci	r29, 0xFF	; 255
     75e:	a8 81       	ld	r26, Y
     760:	c2 58       	subi	r28, 0x82	; 130
     762:	d0 40       	sbci	r29, 0x00	; 0
     764:	af 93       	push	r26
     766:	cf 57       	subi	r28, 0x7F	; 127
     768:	df 4f       	sbci	r29, 0xFF	; 255
     76a:	b8 81       	ld	r27, Y
     76c:	c1 58       	subi	r28, 0x81	; 129
     76e:	d0 40       	sbci	r29, 0x00	; 0
     770:	bf 93       	push	r27
     772:	c0 58       	subi	r28, 0x80	; 128
     774:	df 4f       	sbci	r29, 0xFF	; 255
     776:	e8 81       	ld	r30, Y
     778:	c0 58       	subi	r28, 0x80	; 128
     77a:	d0 40       	sbci	r29, 0x00	; 0
     77c:	ef 93       	push	r30
     77e:	1f 92       	push	r1
     780:	82 e0       	ldi	r24, 0x02	; 2
     782:	8f 93       	push	r24
     784:	8b e2       	ldi	r24, 0x2B	; 43
     786:	91 e0       	ldi	r25, 0x01	; 1
     788:	9f 93       	push	r25
     78a:	8f 93       	push	r24
     78c:	1f 93       	push	r17
     78e:	0f 93       	push	r16
     790:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <sprintf>
	strcat(str_out,str);
     794:	0f b6       	in	r0, 0x3f	; 63
     796:	f8 94       	cli
     798:	de bf       	out	0x3e, r29	; 62
     79a:	0f be       	out	0x3f, r0	; 63
     79c:	cd bf       	out	0x3d, r28	; 61
     79e:	b8 01       	movw	r22, r16
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	0e 94 75 16 	call	0x2cea	; 0x2cea <strcat>

	sprintf(str, "T%d,%0.1f,%0.1f,%i,%.2f,%lu\r\n", 3, obj_3, amb_3, (int)Sonic.Distance,mDistance,m_read_time);
     7a8:	d2 01       	movw	r26, r4
     7aa:	6d 91       	ld	r22, X+
     7ac:	7d 91       	ld	r23, X+
     7ae:	8d 91       	ld	r24, X+
     7b0:	9c 91       	ld	r25, X
     7b2:	ff 92       	push	r15
     7b4:	ef 92       	push	r14
     7b6:	df 92       	push	r13
     7b8:	cf 92       	push	r12
     7ba:	8f 92       	push	r8
     7bc:	9f 92       	push	r9
     7be:	af 92       	push	r10
     7c0:	bf 92       	push	r11
     7c2:	0e 94 43 10 	call	0x2086	; 0x2086 <__fixsfsi>
     7c6:	7f 93       	push	r23
     7c8:	6f 93       	push	r22
     7ca:	c1 57       	subi	r28, 0x71	; 113
     7cc:	df 4f       	sbci	r29, 0xFF	; 255
     7ce:	b8 81       	ld	r27, Y
     7d0:	cf 58       	subi	r28, 0x8F	; 143
     7d2:	d0 40       	sbci	r29, 0x00	; 0
     7d4:	bf 93       	push	r27
     7d6:	c2 57       	subi	r28, 0x72	; 114
     7d8:	df 4f       	sbci	r29, 0xFF	; 255
     7da:	e8 81       	ld	r30, Y
     7dc:	ce 58       	subi	r28, 0x8E	; 142
     7de:	d0 40       	sbci	r29, 0x00	; 0
     7e0:	ef 93       	push	r30
     7e2:	c3 57       	subi	r28, 0x73	; 115
     7e4:	df 4f       	sbci	r29, 0xFF	; 255
     7e6:	f8 81       	ld	r31, Y
     7e8:	cd 58       	subi	r28, 0x8D	; 141
     7ea:	d0 40       	sbci	r29, 0x00	; 0
     7ec:	ff 93       	push	r31
     7ee:	c4 57       	subi	r28, 0x74	; 116
     7f0:	df 4f       	sbci	r29, 0xFF	; 255
     7f2:	88 81       	ld	r24, Y
     7f4:	cc 58       	subi	r28, 0x8C	; 140
     7f6:	d0 40       	sbci	r29, 0x00	; 0
     7f8:	8f 93       	push	r24
     7fa:	c5 57       	subi	r28, 0x75	; 117
     7fc:	df 4f       	sbci	r29, 0xFF	; 255
     7fe:	98 81       	ld	r25, Y
     800:	cb 58       	subi	r28, 0x8B	; 139
     802:	d0 40       	sbci	r29, 0x00	; 0
     804:	9f 93       	push	r25
     806:	c6 57       	subi	r28, 0x76	; 118
     808:	df 4f       	sbci	r29, 0xFF	; 255
     80a:	a8 81       	ld	r26, Y
     80c:	ca 58       	subi	r28, 0x8A	; 138
     80e:	d0 40       	sbci	r29, 0x00	; 0
     810:	af 93       	push	r26
     812:	c7 57       	subi	r28, 0x77	; 119
     814:	df 4f       	sbci	r29, 0xFF	; 255
     816:	b8 81       	ld	r27, Y
     818:	c9 58       	subi	r28, 0x89	; 137
     81a:	d0 40       	sbci	r29, 0x00	; 0
     81c:	bf 93       	push	r27
     81e:	c8 57       	subi	r28, 0x78	; 120
     820:	df 4f       	sbci	r29, 0xFF	; 255
     822:	e8 81       	ld	r30, Y
     824:	c8 58       	subi	r28, 0x88	; 136
     826:	d0 40       	sbci	r29, 0x00	; 0
     828:	ef 93       	push	r30
     82a:	1f 92       	push	r1
     82c:	83 e0       	ldi	r24, 0x03	; 3
     82e:	8f 93       	push	r24
     830:	7f 92       	push	r7
     832:	6f 92       	push	r6
     834:	1f 93       	push	r17
     836:	0f 93       	push	r16
     838:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <sprintf>
	strcat(str_out,str);
     83c:	b8 01       	movw	r22, r16
     83e:	ce 01       	movw	r24, r28
     840:	01 96       	adiw	r24, 0x01	; 1
     842:	0e 94 75 16 	call	0x2cea	; 0x2cea <strcat>
	
	sprintf(str, "T%d,%0.1f,%0.1f,%i,%.2f,%lu\r\n", 4, obj_4, amb_4, (int)Sonic.Distance,mDistance,m_read_time);
     846:	d2 01       	movw	r26, r4
     848:	6d 91       	ld	r22, X+
     84a:	7d 91       	ld	r23, X+
     84c:	8d 91       	ld	r24, X+
     84e:	9c 91       	ld	r25, X
     850:	ff 92       	push	r15
     852:	ef 92       	push	r14
     854:	df 92       	push	r13
     856:	cf 92       	push	r12
     858:	8f 92       	push	r8
     85a:	9f 92       	push	r9
     85c:	af 92       	push	r10
     85e:	bf 92       	push	r11
     860:	0e 94 43 10 	call	0x2086	; 0x2086 <__fixsfsi>
     864:	7f 93       	push	r23
     866:	6f 93       	push	r22
     868:	c9 56       	subi	r28, 0x69	; 105
     86a:	df 4f       	sbci	r29, 0xFF	; 255
     86c:	b8 81       	ld	r27, Y
     86e:	c7 59       	subi	r28, 0x97	; 151
     870:	d0 40       	sbci	r29, 0x00	; 0
     872:	bf 93       	push	r27
     874:	ca 56       	subi	r28, 0x6A	; 106
     876:	df 4f       	sbci	r29, 0xFF	; 255
     878:	e8 81       	ld	r30, Y
     87a:	c6 59       	subi	r28, 0x96	; 150
     87c:	d0 40       	sbci	r29, 0x00	; 0
     87e:	ef 93       	push	r30
     880:	cb 56       	subi	r28, 0x6B	; 107
     882:	df 4f       	sbci	r29, 0xFF	; 255
     884:	f8 81       	ld	r31, Y
     886:	c5 59       	subi	r28, 0x95	; 149
     888:	d0 40       	sbci	r29, 0x00	; 0
     88a:	ff 93       	push	r31
     88c:	cc 56       	subi	r28, 0x6C	; 108
     88e:	df 4f       	sbci	r29, 0xFF	; 255
     890:	88 81       	ld	r24, Y
     892:	c4 59       	subi	r28, 0x94	; 148
     894:	d0 40       	sbci	r29, 0x00	; 0
     896:	8f 93       	push	r24
     898:	cd 56       	subi	r28, 0x6D	; 109
     89a:	df 4f       	sbci	r29, 0xFF	; 255
     89c:	98 81       	ld	r25, Y
     89e:	c3 59       	subi	r28, 0x93	; 147
     8a0:	d0 40       	sbci	r29, 0x00	; 0
     8a2:	9f 93       	push	r25
     8a4:	ce 56       	subi	r28, 0x6E	; 110
     8a6:	df 4f       	sbci	r29, 0xFF	; 255
     8a8:	a8 81       	ld	r26, Y
     8aa:	c2 59       	subi	r28, 0x92	; 146
     8ac:	d0 40       	sbci	r29, 0x00	; 0
     8ae:	af 93       	push	r26
     8b0:	cf 56       	subi	r28, 0x6F	; 111
     8b2:	df 4f       	sbci	r29, 0xFF	; 255
     8b4:	b8 81       	ld	r27, Y
     8b6:	c1 59       	subi	r28, 0x91	; 145
     8b8:	d0 40       	sbci	r29, 0x00	; 0
     8ba:	bf 93       	push	r27
     8bc:	c0 57       	subi	r28, 0x70	; 112
     8be:	df 4f       	sbci	r29, 0xFF	; 255
     8c0:	e8 81       	ld	r30, Y
     8c2:	c0 59       	subi	r28, 0x90	; 144
     8c4:	d0 40       	sbci	r29, 0x00	; 0
     8c6:	ef 93       	push	r30
     8c8:	1f 92       	push	r1
     8ca:	84 e0       	ldi	r24, 0x04	; 4
     8cc:	8f 93       	push	r24
     8ce:	7f 92       	push	r7
     8d0:	6f 92       	push	r6
     8d2:	1f 93       	push	r17
     8d4:	0f 93       	push	r16
     8d6:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <sprintf>
	strcat(str_out,str);
     8da:	0f b6       	in	r0, 0x3f	; 63
     8dc:	f8 94       	cli
     8de:	de bf       	out	0x3e, r29	; 62
     8e0:	0f be       	out	0x3f, r0	; 63
     8e2:	cd bf       	out	0x3d, r28	; 61
     8e4:	b8 01       	movw	r22, r16
     8e6:	ce 01       	movw	r24, r28
     8e8:	01 96       	adiw	r24, 0x01	; 1
     8ea:	0e 94 75 16 	call	0x2cea	; 0x2cea <strcat>
	
	Serial.send(str_out);
     8ee:	be 01       	movw	r22, r28
     8f0:	6f 5f       	subi	r22, 0xFF	; 255
     8f2:	7f 4f       	sbci	r23, 0xFF	; 255
     8f4:	8c e8       	ldi	r24, 0x8C	; 140
     8f6:	91 e0       	ldi	r25, 0x01	; 1
     8f8:	0e 94 84 05 	call	0xb08	; 0xb08 <_ZN5USART4sendEPKc>
}
     8fc:	c9 56       	subi	r28, 0x69	; 105
     8fe:	df 4f       	sbci	r29, 0xFF	; 255
     900:	0f b6       	in	r0, 0x3f	; 63
     902:	f8 94       	cli
     904:	de bf       	out	0x3e, r29	; 62
     906:	0f be       	out	0x3f, r0	; 63
     908:	cd bf       	out	0x3d, r28	; 61
     90a:	df 91       	pop	r29
     90c:	cf 91       	pop	r28
     90e:	1f 91       	pop	r17
     910:	0f 91       	pop	r16
     912:	ff 90       	pop	r15
     914:	ef 90       	pop	r14
     916:	df 90       	pop	r13
     918:	cf 90       	pop	r12
     91a:	bf 90       	pop	r11
     91c:	af 90       	pop	r10
     91e:	9f 90       	pop	r9
     920:	8f 90       	pop	r8
     922:	7f 90       	pop	r7
     924:	6f 90       	pop	r6
     926:	5f 90       	pop	r5
     928:	4f 90       	pop	r4
     92a:	3f 90       	pop	r3
     92c:	2f 90       	pop	r2
     92e:	08 95       	ret

00000930 <main>:
/*********************************************************************/
int main(void)
{	
	setup();
     930:	0e 94 27 02 	call	0x44e	; 0x44e <_Z5setupv>
	// Start continuous back-to-back mode (take readings as
	// fast as possible).  To use continuous timed mode
	// instead, provide a desired inter-measurement period in
	// ms (e.g. sensor.startContinuous(100)).
	TOF.startContinuous();
     934:	40 e0       	ldi	r20, 0x00	; 0
     936:	50 e0       	ldi	r21, 0x00	; 0
     938:	ba 01       	movw	r22, r20
     93a:	8c e4       	ldi	r24, 0x4C	; 76
     93c:	91 e0       	ldi	r25, 0x01	; 1
     93e:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN7VL53L0X15startContinuousEm>
	//TIFR1 = 0;
}
/*********************************************************************/
unsigned long int millis(void)
{
	return count;
     942:	c0 90 48 01 	lds	r12, 0x0148
     946:	d0 90 49 01 	lds	r13, 0x0149
     94a:	e0 90 4a 01 	lds	r14, 0x014A
     94e:	f0 90 4b 01 	lds	r15, 0x014B
	    start_time = millis();	
		#ifdef _DEBUG
			Serial.sendln("> Read Sensors...");
		#endif

		IR_sensorRead();
     952:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <_Z13IR_sensorReadv>
	//TIFR1 = 0;
}
/*********************************************************************/
unsigned long int millis(void)
{
	return count;
     956:	80 91 48 01 	lds	r24, 0x0148
     95a:	90 91 49 01 	lds	r25, 0x0149
     95e:	a0 91 4a 01 	lds	r26, 0x014A
     962:	b0 91 4b 01 	lds	r27, 0x014B
			Serial.sendln("> Read Sensors...");
		#endif

		IR_sensorRead();
		//_delay_ms(250);		
		while((millis()-start_time) <= 250);
     966:	8c 19       	sub	r24, r12
     968:	9d 09       	sbc	r25, r13
     96a:	ae 09       	sbc	r26, r14
     96c:	bf 09       	sbc	r27, r15
     96e:	8b 3f       	cpi	r24, 0xFB	; 251
     970:	91 05       	cpc	r25, r1
     972:	a1 05       	cpc	r26, r1
     974:	b1 05       	cpc	r27, r1
     976:	78 f3       	brcs	.-34     	; 0x956 <main+0x26>
     978:	e4 cf       	rjmp	.-56     	; 0x942 <main+0x12>

0000097a <_GLOBAL__sub_I_MLX_5a>:
#include "Adafruit_MLX90614.h"
#include "HCSR04.h"
#include "VL53L0X.h"


Adafruit_MLX90614 MLX_5a(0x5A);
     97a:	6a e5       	ldi	r22, 0x5A	; 90
     97c:	81 e8       	ldi	r24, 0x81	; 129
     97e:	91 e0       	ldi	r25, 0x01	; 1
     980:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_ZN17Adafruit_MLX90614C1Eh>
Adafruit_MLX90614 MLX_5b(0x5B);
     984:	6b e5       	ldi	r22, 0x5B	; 91
     986:	86 e7       	ldi	r24, 0x76	; 118
     988:	91 e0       	ldi	r25, 0x01	; 1
     98a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_ZN17Adafruit_MLX90614C1Eh>
Adafruit_MLX90614 MLX_5c(0x5C);
     98e:	6c e5       	ldi	r22, 0x5C	; 92
     990:	8b e6       	ldi	r24, 0x6B	; 107
     992:	91 e0       	ldi	r25, 0x01	; 1
     994:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_ZN17Adafruit_MLX90614C1Eh>
Adafruit_MLX90614 MLX_5d(0x5D);
     998:	6d e5       	ldi	r22, 0x5D	; 93
     99a:	80 e6       	ldi	r24, 0x60	; 96
     99c:	91 e0       	ldi	r25, 0x01	; 1
     99e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_ZN17Adafruit_MLX90614C1Eh>

HC_SR04 Sonic;
VL53L0X TOF;
     9a2:	8c e4       	ldi	r24, 0x4C	; 76
     9a4:	91 e0       	ldi	r25, 0x01	; 1
     9a6:	0e 94 99 05 	call	0xb32	; 0xb32 <_ZN7VL53L0XC1Ev>
     9aa:	08 95       	ret

000009ac <i2c_init>:
 Initialization of the I2C bus interface. Need to be called only once
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  DDRC = 0;
     9ac:	17 b8       	out	0x07, r1	; 7
  PORTC = (1 << PORTC4) | (1 << PORTC5);//enable pull up
     9ae:	80 e3       	ldi	r24, 0x30	; 48
     9b0:	88 b9       	out	0x08, r24	; 8
  TWSR = 0;                         /* no prescaler */
     9b2:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
     9b6:	88 e4       	ldi	r24, 0x48	; 72
     9b8:	80 93 b8 00 	sts	0x00B8, r24
     9bc:	08 95       	ret

000009be <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     9be:	94 ea       	ldi	r25, 0xA4	; 164
     9c0:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     9c4:	ec eb       	ldi	r30, 0xBC	; 188
     9c6:	f0 e0       	ldi	r31, 0x00	; 0
     9c8:	90 81       	ld	r25, Z
     9ca:	99 23       	and	r25, r25
     9cc:	ec f7       	brge	.-6      	; 0x9c8 <i2c_start+0xa>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     9ce:	90 91 b9 00 	lds	r25, 0x00B9
     9d2:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     9d4:	98 30       	cpi	r25, 0x08	; 8
     9d6:	11 f0       	breq	.+4      	; 0x9dc <i2c_start+0x1e>
     9d8:	90 31       	cpi	r25, 0x10	; 16
     9da:	a1 f4       	brne	.+40     	; 0xa04 <i2c_start+0x46>

	// send device address
	TWDR = address;
     9dc:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     9e0:	84 e8       	ldi	r24, 0x84	; 132
     9e2:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
     9e6:	ec eb       	ldi	r30, 0xBC	; 188
     9e8:	f0 e0       	ldi	r31, 0x00	; 0
     9ea:	80 81       	ld	r24, Z
     9ec:	88 23       	and	r24, r24
     9ee:	ec f7       	brge	.-6      	; 0x9ea <i2c_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     9f0:	90 91 b9 00 	lds	r25, 0x00B9
     9f4:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     9f6:	98 31       	cpi	r25, 0x18	; 24
     9f8:	39 f0       	breq	.+14     	; 0xa08 <i2c_start+0x4a>
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	90 34       	cpi	r25, 0x40	; 64
     9fe:	29 f4       	brne	.+10     	; 0xa0a <i2c_start+0x4c>
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
     a08:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
     a0a:	08 95       	ret

00000a0c <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     a0c:	84 e9       	ldi	r24, 0x94	; 148
     a0e:	80 93 bc 00 	sts	0x00BC, r24
     a12:	08 95       	ret

00000a14 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     a14:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     a18:	84 e8       	ldi	r24, 0x84	; 132
     a1a:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     a1e:	ec eb       	ldi	r30, 0xBC	; 188
     a20:	f0 e0       	ldi	r31, 0x00	; 0
     a22:	80 81       	ld	r24, Z
     a24:	88 23       	and	r24, r24
     a26:	ec f7       	brge	.-6      	; 0xa22 <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     a28:	90 91 b9 00 	lds	r25, 0x00B9
     a2c:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	98 32       	cpi	r25, 0x28	; 40
     a32:	09 f4       	brne	.+2      	; 0xa36 <i2c_write+0x22>
     a34:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
     a36:	08 95       	ret

00000a38 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     a38:	84 ec       	ldi	r24, 0xC4	; 196
     a3a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
     a3e:	ec eb       	ldi	r30, 0xBC	; 188
     a40:	f0 e0       	ldi	r31, 0x00	; 0
     a42:	80 81       	ld	r24, Z
     a44:	88 23       	and	r24, r24
     a46:	ec f7       	brge	.-6      	; 0xa42 <i2c_readAck+0xa>
    return TWDR;
     a48:	80 91 bb 00 	lds	r24, 0x00BB
}/* i2c_readAck */
     a4c:	08 95       	ret

00000a4e <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     a4e:	84 e8       	ldi	r24, 0x84	; 132
     a50:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
     a54:	ec eb       	ldi	r30, 0xBC	; 188
     a56:	f0 e0       	ldi	r31, 0x00	; 0
     a58:	80 81       	ld	r24, Z
     a5a:	88 23       	and	r24, r24
     a5c:	ec f7       	brge	.-6      	; 0xa58 <i2c_readNak+0xa>
    return TWDR;
     a5e:	80 91 bb 00 	lds	r24, 0x00BB
}/* i2c_readNak */
     a62:	08 95       	ret

00000a64 <_ZN5USART4initEi>:
USART Serial; //Initialize new instance of the serial class
//Setup Baud rate in header file
//set to 8 bits, no stop bit, no parity

/*********************************************************************/
void USART::init(int BAUDRATE){
     a64:	0f 93       	push	r16
     a66:	1f 93       	push	r17
	UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);
     a68:	8b 01       	movw	r16, r22
     a6a:	77 0f       	add	r23, r23
     a6c:	22 0b       	sbc	r18, r18
     a6e:	33 0b       	sbc	r19, r19
     a70:	d9 01       	movw	r26, r18
     a72:	c8 01       	movw	r24, r16
     a74:	80 58       	subi	r24, 0x80	; 128
     a76:	9b 47       	sbci	r25, 0x7B	; 123
     a78:	a1 4e       	sbci	r26, 0xE1	; 225
     a7a:	bf 4f       	sbci	r27, 0xFF	; 255
     a7c:	88 0f       	add	r24, r24
     a7e:	99 1f       	adc	r25, r25
     a80:	aa 1f       	adc	r26, r26
     a82:	bb 1f       	adc	r27, r27
     a84:	88 0f       	add	r24, r24
     a86:	99 1f       	adc	r25, r25
     a88:	aa 1f       	adc	r26, r26
     a8a:	bb 1f       	adc	r27, r27
     a8c:	bc 01       	movw	r22, r24
     a8e:	cd 01       	movw	r24, r26
     a90:	66 0f       	add	r22, r22
     a92:	77 1f       	adc	r23, r23
     a94:	88 1f       	adc	r24, r24
     a96:	99 1f       	adc	r25, r25
     a98:	00 0f       	add	r16, r16
     a9a:	11 1f       	adc	r17, r17
     a9c:	22 1f       	adc	r18, r18
     a9e:	33 1f       	adc	r19, r19
     aa0:	00 0f       	add	r16, r16
     aa2:	11 1f       	adc	r17, r17
     aa4:	22 1f       	adc	r18, r18
     aa6:	33 1f       	adc	r19, r19
     aa8:	a9 01       	movw	r20, r18
     aaa:	98 01       	movw	r18, r16
     aac:	22 0f       	add	r18, r18
     aae:	33 1f       	adc	r19, r19
     ab0:	44 1f       	adc	r20, r20
     ab2:	55 1f       	adc	r21, r21
     ab4:	22 0f       	add	r18, r18
     ab6:	33 1f       	adc	r19, r19
     ab8:	44 1f       	adc	r20, r20
     aba:	55 1f       	adc	r21, r21
     abc:	0e 94 19 15 	call	0x2a32	; 0x2a32 <__udivmodsi4>
     ac0:	da 01       	movw	r26, r20
     ac2:	c9 01       	movw	r24, r18
     ac4:	01 97       	sbiw	r24, 0x01	; 1
     ac6:	a1 09       	sbc	r26, r1
     ac8:	b1 09       	sbc	r27, r1
     aca:	89 2f       	mov	r24, r25
     acc:	9a 2f       	mov	r25, r26
     ace:	ab 2f       	mov	r26, r27
     ad0:	bb 27       	eor	r27, r27
     ad2:	80 93 c5 00 	sts	0x00C5, r24
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);
     ad6:	21 50       	subi	r18, 0x01	; 1
     ad8:	20 93 c4 00 	sts	0x00C4, r18
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     adc:	e1 ec       	ldi	r30, 0xC1	; 193
     ade:	f0 e0       	ldi	r31, 0x00	; 0
     ae0:	88 e1       	ldi	r24, 0x18	; 24
     ae2:	80 83       	st	Z, r24
	UCSR0C = (1<<UCSZ00)|(1<<UCSZ01);
     ae4:	86 e0       	ldi	r24, 0x06	; 6
     ae6:	80 93 c2 00 	sts	0x00C2, r24

	UCSR0B |= (1 << RXCIE0); // Enable the USART Receive Complete interrupt (USART_RXC)
     aea:	80 81       	ld	r24, Z
     aec:	80 68       	ori	r24, 0x80	; 128
     aee:	80 83       	st	Z, r24
	sei();
     af0:	78 94       	sei
}
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	08 95       	ret

00000af8 <_ZN5USART4sendEh>:
 return UDR0;// read buffer
}
/*********************************************************************/
void USART::send(uint8_t data){

	while(!(UCSR0A & (1<<UDRE0))); //wait until buffer is empty
     af8:	e0 ec       	ldi	r30, 0xC0	; 192
     afa:	f0 e0       	ldi	r31, 0x00	; 0
     afc:	80 81       	ld	r24, Z
     afe:	85 ff       	sbrs	r24, 5
     b00:	fd cf       	rjmp	.-6      	; 0xafc <_ZN5USART4sendEh+0x4>
	UDR0 = data; //Load data into buffer
     b02:	60 93 c6 00 	sts	0x00C6, r22
     b06:	08 95       	ret

00000b08 <_ZN5USART4sendEPKc>:
}
/*********************************************************************/
//send one char at a time
void USART::send(const char* StringPtr)
{
     b08:	0f 93       	push	r16
     b0a:	1f 93       	push	r17
     b0c:	cf 93       	push	r28
     b0e:	df 93       	push	r29
     b10:	eb 01       	movw	r28, r22
	//st = millis();
	while(*StringPtr != 0x00)
     b12:	68 81       	ld	r22, Y
     b14:	66 23       	and	r22, r22
     b16:	41 f0       	breq	.+16     	; 0xb28 <_ZN5USART4sendEPKc+0x20>
     b18:	8c 01       	movw	r16, r24
     b1a:	21 96       	adiw	r28, 0x01	; 1
		void init(int BAUDRATE = 9600); 
		bool available(void);
		unsigned char read(void);
		bool flush(void);
		void send(uint8_t data);
		void send(char data) {send((uint8_t)data); };
     b1c:	c8 01       	movw	r24, r16
     b1e:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <_ZN5USART4sendEh>
     b22:	69 91       	ld	r22, Y+
     b24:	61 11       	cpse	r22, r1
     b26:	fa cf       	rjmp	.-12     	; 0xb1c <_ZN5USART4sendEPKc+0x14>
	{
		send(*StringPtr++);
	}
	//ft = millis();
}
     b28:	df 91       	pop	r29
     b2a:	cf 91       	pop	r28
     b2c:	1f 91       	pop	r17
     b2e:	0f 91       	pop	r16
     b30:	08 95       	ret

00000b32 <_ZN7VL53L0XC1Ev>:
// PLL_period_ps = 1655; macro_period_vclks = 2304
#define calcMacroPeriod(vcsel_period_pclks) ((((uint32_t)2304 * (vcsel_period_pclks) * 1655) + 500) / 1000)

// Constructors ////////////////////////////////////////////////////////////////

VL53L0X::VL53L0X(void)
     b32:	fc 01       	movw	r30, r24
  : address(ADDRESS_DEFAULT)
  , io_timeout(0) // no timeout
  , did_timeout(false)
     b34:	89 e2       	ldi	r24, 0x29	; 41
     b36:	81 83       	std	Z+1, r24	; 0x01
     b38:	13 82       	std	Z+3, r1	; 0x03
     b3a:	12 82       	std	Z+2, r1	; 0x02
     b3c:	14 82       	std	Z+4, r1	; 0x04
     b3e:	08 95       	ret

00000b40 <_ZN7VL53L0X8writeRegEhh>:
  return true;
}

// Write an 8-bit register
void VL53L0X::writeReg(uint8_t reg, uint8_t value)
{
     b40:	ef 92       	push	r14
     b42:	ff 92       	push	r15
     b44:	0f 93       	push	r16
     b46:	1f 93       	push	r17
     b48:	cf 93       	push	r28
     b4a:	df 93       	push	r29
     b4c:	7c 01       	movw	r14, r24
     b4e:	06 2f       	mov	r16, r22
     b50:	14 2f       	mov	r17, r20
  Wire.beginTransmission(address);
     b52:	fc 01       	movw	r30, r24
     b54:	81 81       	ldd	r24, Z+1	; 0x01
    {
	    i2c_init();
    }
     void beginTransmission(uint8_t address)
     {
         m_bufferIndex = 0;
     b56:	c4 e9       	ldi	r28, 0x94	; 148
     b58:	d1 e0       	ldi	r29, 0x01	; 1
     b5a:	18 86       	std	Y+8, r1	; 0x08

         i2c_start((address << 1) | I2C_WRITE);
     b5c:	88 0f       	add	r24, r24
     b5e:	0e 94 df 04 	call	0x9be	; 0x9be <i2c_start>
     }

     void write(uint8_t byte)
     {
         if (m_bufferIndex == c_bufferSize)
     b62:	a8 85       	ldd	r26, Y+8	; 0x08
     b64:	a8 30       	cpi	r26, 0x08	; 8
     b66:	a1 f0       	breq	.+40     	; 0xb90 <_ZN7VL53L0X8writeRegEhh+0x50>
             return;

         m_buffer[m_bufferIndex++] = byte;
     b68:	e1 e0       	ldi	r30, 0x01	; 1
     b6a:	ea 0f       	add	r30, r26
     b6c:	e0 93 9c 01 	sts	0x019C, r30
     b70:	b0 e0       	ldi	r27, 0x00	; 0
     b72:	ac 56       	subi	r26, 0x6C	; 108
     b74:	be 4f       	sbci	r27, 0xFE	; 254
     b76:	0c 93       	st	X, r16
         i2c_start((address << 1) | I2C_WRITE);
     }

     void write(uint8_t byte)
     {
         if (m_bufferIndex == c_bufferSize)
     b78:	e8 30       	cpi	r30, 0x08	; 8
     b7a:	51 f0       	breq	.+20     	; 0xb90 <_ZN7VL53L0X8writeRegEhh+0x50>
             return;

         m_buffer[m_bufferIndex++] = byte;
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	8e 0f       	add	r24, r30
     b80:	80 93 9c 01 	sts	0x019C, r24
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	ec 56       	subi	r30, 0x6C	; 108
     b88:	fe 4f       	sbci	r31, 0xFE	; 254
     b8a:	10 83       	st	Z, r17
    }

    uint8_t endTransmission(bool stop = true)
    {
         for (uint8_t index = 0; index < m_bufferIndex; ++index) {
     b8c:	88 23       	and	r24, r24
     b8e:	89 f0       	breq	.+34     	; 0xbb2 <_ZN7VL53L0X8writeRegEhh+0x72>
  return true;
}

// Write an 8-bit register
void VL53L0X::writeReg(uint8_t reg, uint8_t value)
{
     b90:	c0 e0       	ldi	r28, 0x00	; 0
     b92:	04 e9       	ldi	r16, 0x94	; 148
     b94:	11 e0       	ldi	r17, 0x01	; 1
             if (i2c_write(m_buffer[index]) != 0)
     b96:	ec 2f       	mov	r30, r28
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	ec 56       	subi	r30, 0x6C	; 108
     b9c:	fe 4f       	sbci	r31, 0xFE	; 254
     b9e:	80 81       	ld	r24, Z
     ba0:	0e 94 0a 05 	call	0xa14	; 0xa14 <i2c_write>
     ba4:	81 11       	cpse	r24, r1
     ba6:	09 c0       	rjmp	.+18     	; 0xbba <_ZN7VL53L0X8writeRegEhh+0x7a>
         m_buffer[m_bufferIndex++] = byte;
    }

    uint8_t endTransmission(bool stop = true)
    {
         for (uint8_t index = 0; index < m_bufferIndex; ++index) {
     ba8:	cf 5f       	subi	r28, 0xFF	; 255
     baa:	f8 01       	movw	r30, r16
     bac:	90 85       	ldd	r25, Z+8	; 0x08
     bae:	c9 17       	cp	r28, r25
     bb0:	90 f3       	brcs	.-28     	; 0xb96 <_ZN7VL53L0X8writeRegEhh+0x56>
             if (i2c_write(m_buffer[index]) != 0)
                 return 1;
         }

        if (stop)i2c_stop();
     bb2:	0e 94 06 05 	call	0xa0c	; 0xa0c <i2c_stop>
			 
		return 0;	
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	01 c0       	rjmp	.+2      	; 0xbbc <_ZN7VL53L0X8writeRegEhh+0x7c>

    uint8_t endTransmission(bool stop = true)
    {
         for (uint8_t index = 0; index < m_bufferIndex; ++index) {
             if (i2c_write(m_buffer[index]) != 0)
                 return 1;
     bba:	81 e0       	ldi	r24, 0x01	; 1
  Wire.beginTransmission(address);
  Wire.write(reg);
  Wire.write(value);
  last_status = Wire.endTransmission();
     bbc:	f7 01       	movw	r30, r14
     bbe:	80 83       	st	Z, r24
}
     bc0:	df 91       	pop	r29
     bc2:	cf 91       	pop	r28
     bc4:	1f 91       	pop	r17
     bc6:	0f 91       	pop	r16
     bc8:	ff 90       	pop	r15
     bca:	ef 90       	pop	r14
     bcc:	08 95       	ret

00000bce <_ZN7VL53L0X13writeReg16BitEhj>:

// Write a 16-bit register
void VL53L0X::writeReg16Bit(uint8_t reg, uint16_t value)
{
     bce:	df 92       	push	r13
     bd0:	ef 92       	push	r14
     bd2:	ff 92       	push	r15
     bd4:	0f 93       	push	r16
     bd6:	1f 93       	push	r17
     bd8:	cf 93       	push	r28
     bda:	df 93       	push	r29
     bdc:	7c 01       	movw	r14, r24
     bde:	d6 2e       	mov	r13, r22
     be0:	c4 2f       	mov	r28, r20
     be2:	d5 2f       	mov	r29, r21
  Wire.beginTransmission(address);
     be4:	dc 01       	movw	r26, r24
     be6:	11 96       	adiw	r26, 0x01	; 1
     be8:	8c 91       	ld	r24, X
    {
	    i2c_init();
    }
     void beginTransmission(uint8_t address)
     {
         m_bufferIndex = 0;
     bea:	04 e9       	ldi	r16, 0x94	; 148
     bec:	11 e0       	ldi	r17, 0x01	; 1
     bee:	f8 01       	movw	r30, r16
     bf0:	10 86       	std	Z+8, r1	; 0x08

         i2c_start((address << 1) | I2C_WRITE);
     bf2:	88 0f       	add	r24, r24
     bf4:	0e 94 df 04 	call	0x9be	; 0x9be <i2c_start>
     }

     void write(uint8_t byte)
     {
         if (m_bufferIndex == c_bufferSize)
     bf8:	d8 01       	movw	r26, r16
     bfa:	18 96       	adiw	r26, 0x08	; 8
     bfc:	ec 91       	ld	r30, X
     bfe:	e8 30       	cpi	r30, 0x08	; 8
     c00:	f1 f0       	breq	.+60     	; 0xc3e <_ZN7VL53L0X13writeReg16BitEhj+0x70>
             return;

         m_buffer[m_bufferIndex++] = byte;
     c02:	a1 e0       	ldi	r26, 0x01	; 1
     c04:	ae 0f       	add	r26, r30
     c06:	a0 93 9c 01 	sts	0x019C, r26
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	ec 56       	subi	r30, 0x6C	; 108
     c0e:	fe 4f       	sbci	r31, 0xFE	; 254
     c10:	d0 82       	st	Z, r13
         i2c_start((address << 1) | I2C_WRITE);
     }

     void write(uint8_t byte)
     {
         if (m_bufferIndex == c_bufferSize)
     c12:	a8 30       	cpi	r26, 0x08	; 8
     c14:	a1 f0       	breq	.+40     	; 0xc3e <_ZN7VL53L0X13writeReg16BitEhj+0x70>
             return;

         m_buffer[m_bufferIndex++] = byte;
     c16:	e1 e0       	ldi	r30, 0x01	; 1
     c18:	ea 0f       	add	r30, r26
     c1a:	e0 93 9c 01 	sts	0x019C, r30
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	ac 56       	subi	r26, 0x6C	; 108
     c22:	be 4f       	sbci	r27, 0xFE	; 254
     c24:	dc 93       	st	X, r29
         i2c_start((address << 1) | I2C_WRITE);
     }

     void write(uint8_t byte)
     {
         if (m_bufferIndex == c_bufferSize)
     c26:	e8 30       	cpi	r30, 0x08	; 8
     c28:	51 f0       	breq	.+20     	; 0xc3e <_ZN7VL53L0X13writeReg16BitEhj+0x70>
             return;

         m_buffer[m_bufferIndex++] = byte;
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	8e 0f       	add	r24, r30
     c2e:	80 93 9c 01 	sts	0x019C, r24
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	ec 56       	subi	r30, 0x6C	; 108
     c36:	fe 4f       	sbci	r31, 0xFE	; 254
     c38:	c0 83       	st	Z, r28
    }

    uint8_t endTransmission(bool stop = true)
    {
         for (uint8_t index = 0; index < m_bufferIndex; ++index) {
     c3a:	88 23       	and	r24, r24
     c3c:	89 f0       	breq	.+34     	; 0xc60 <_ZN7VL53L0X13writeReg16BitEhj+0x92>
  last_status = Wire.endTransmission();
}

// Write a 16-bit register
void VL53L0X::writeReg16Bit(uint8_t reg, uint16_t value)
{
     c3e:	c0 e0       	ldi	r28, 0x00	; 0
     c40:	04 e9       	ldi	r16, 0x94	; 148
     c42:	11 e0       	ldi	r17, 0x01	; 1
             if (i2c_write(m_buffer[index]) != 0)
     c44:	ec 2f       	mov	r30, r28
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	ec 56       	subi	r30, 0x6C	; 108
     c4a:	fe 4f       	sbci	r31, 0xFE	; 254
     c4c:	80 81       	ld	r24, Z
     c4e:	0e 94 0a 05 	call	0xa14	; 0xa14 <i2c_write>
     c52:	81 11       	cpse	r24, r1
     c54:	09 c0       	rjmp	.+18     	; 0xc68 <_ZN7VL53L0X13writeReg16BitEhj+0x9a>
         m_buffer[m_bufferIndex++] = byte;
    }

    uint8_t endTransmission(bool stop = true)
    {
         for (uint8_t index = 0; index < m_bufferIndex; ++index) {
     c56:	cf 5f       	subi	r28, 0xFF	; 255
     c58:	f8 01       	movw	r30, r16
     c5a:	90 85       	ldd	r25, Z+8	; 0x08
     c5c:	c9 17       	cp	r28, r25
     c5e:	90 f3       	brcs	.-28     	; 0xc44 <_ZN7VL53L0X13writeReg16BitEhj+0x76>
             if (i2c_write(m_buffer[index]) != 0)
                 return 1;
         }

        if (stop)i2c_stop();
     c60:	0e 94 06 05 	call	0xa0c	; 0xa0c <i2c_stop>
			 
		return 0;	
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	01 c0       	rjmp	.+2      	; 0xc6a <_ZN7VL53L0X13writeReg16BitEhj+0x9c>

    uint8_t endTransmission(bool stop = true)
    {
         for (uint8_t index = 0; index < m_bufferIndex; ++index) {
             if (i2c_write(m_buffer[index]) != 0)
                 return 1;
     c68:	81 e0       	ldi	r24, 0x01	; 1
  Wire.beginTransmission(address);
  Wire.write(reg);
  Wire.write((value >> 8) & 0xFF); // value high byte
  Wire.write( value       & 0xFF); // value low byte
  last_status = Wire.endTransmission();
     c6a:	d7 01       	movw	r26, r14
     c6c:	8c 93       	st	X, r24
}
     c6e:	df 91       	pop	r29
     c70:	cf 91       	pop	r28
     c72:	1f 91       	pop	r17
     c74:	0f 91       	pop	r16
     c76:	ff 90       	pop	r15
     c78:	ef 90       	pop	r14
     c7a:	df 90       	pop	r13
     c7c:	08 95       	ret

00000c7e <_ZN7VL53L0X13writeReg32BitEhm>:

// Write a 32-bit register
void VL53L0X::writeReg32Bit(uint8_t reg, uint32_t value)
{
     c7e:	8f 92       	push	r8
     c80:	9f 92       	push	r9
     c82:	af 92       	push	r10
     c84:	bf 92       	push	r11
     c86:	ef 92       	push	r14
     c88:	ff 92       	push	r15
     c8a:	0f 93       	push	r16
     c8c:	1f 93       	push	r17
     c8e:	cf 93       	push	r28
     c90:	df 93       	push	r29
     c92:	7c 01       	movw	r14, r24
     c94:	16 2f       	mov	r17, r22
     c96:	49 01       	movw	r8, r18
     c98:	5a 01       	movw	r10, r20
  Wire.beginTransmission(address);
     c9a:	fc 01       	movw	r30, r24
     c9c:	81 81       	ldd	r24, Z+1	; 0x01
    {
	    i2c_init();
    }
     void beginTransmission(uint8_t address)
     {
         m_bufferIndex = 0;
     c9e:	c4 e9       	ldi	r28, 0x94	; 148
     ca0:	d1 e0       	ldi	r29, 0x01	; 1
     ca2:	18 86       	std	Y+8, r1	; 0x08

         i2c_start((address << 1) | I2C_WRITE);
     ca4:	88 0f       	add	r24, r24
     ca6:	0e 94 df 04 	call	0x9be	; 0x9be <i2c_start>
     }

     void write(uint8_t byte)
     {
         if (m_bufferIndex == c_bufferSize)
     caa:	a8 85       	ldd	r26, Y+8	; 0x08
     cac:	a8 30       	cpi	r26, 0x08	; 8
     cae:	71 f1       	breq	.+92     	; 0xd0c <_ZN7VL53L0X13writeReg32BitEhm+0x8e>
             return;

         m_buffer[m_bufferIndex++] = byte;
     cb0:	e1 e0       	ldi	r30, 0x01	; 1
     cb2:	ea 0f       	add	r30, r26
     cb4:	e0 93 9c 01 	sts	0x019C, r30
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	ac 56       	subi	r26, 0x6C	; 108
     cbc:	be 4f       	sbci	r27, 0xFE	; 254
     cbe:	1c 93       	st	X, r17
  Wire.write(reg);
  Wire.write((value >> 24) & 0xFF); // value highest byte
     cc0:	4b 2d       	mov	r20, r11
     cc2:	55 27       	eor	r21, r21
     cc4:	66 27       	eor	r22, r22
     cc6:	77 27       	eor	r23, r23
         i2c_start((address << 1) | I2C_WRITE);
     }

     void write(uint8_t byte)
     {
         if (m_bufferIndex == c_bufferSize)
     cc8:	e8 30       	cpi	r30, 0x08	; 8
     cca:	61 f1       	breq	.+88     	; 0xd24 <_ZN7VL53L0X13writeReg32BitEhm+0xa6>
             return;

         m_buffer[m_bufferIndex++] = byte;
     ccc:	a1 e0       	ldi	r26, 0x01	; 1
     cce:	ae 0f       	add	r26, r30
     cd0:	a0 93 9c 01 	sts	0x019C, r26
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	ec 56       	subi	r30, 0x6C	; 108
     cd8:	fe 4f       	sbci	r31, 0xFE	; 254
     cda:	40 83       	st	Z, r20
         i2c_start((address << 1) | I2C_WRITE);
     }

     void write(uint8_t byte)
     {
         if (m_bufferIndex == c_bufferSize)
     cdc:	a8 30       	cpi	r26, 0x08	; 8
     cde:	31 f1       	breq	.+76     	; 0xd2c <_ZN7VL53L0X13writeReg32BitEhm+0xae>
             return;

         m_buffer[m_bufferIndex++] = byte;
     ce0:	e1 e0       	ldi	r30, 0x01	; 1
     ce2:	ea 0f       	add	r30, r26
     ce4:	e0 93 9c 01 	sts	0x019C, r30
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	ac 56       	subi	r26, 0x6C	; 108
     cec:	be 4f       	sbci	r27, 0xFE	; 254
  Wire.write((value >> 16) & 0xFF);
     cee:	ac 92       	st	X, r10
  Wire.write((value >>  8) & 0xFF);
     cf0:	bb 27       	eor	r27, r27
     cf2:	ab 2d       	mov	r26, r11
     cf4:	9a 2d       	mov	r25, r10
     cf6:	89 2d       	mov	r24, r9
         i2c_start((address << 1) | I2C_WRITE);
     }

     void write(uint8_t byte)
     {
         if (m_bufferIndex == c_bufferSize)
     cf8:	e8 30       	cpi	r30, 0x08	; 8
     cfa:	c1 f0       	breq	.+48     	; 0xd2c <_ZN7VL53L0X13writeReg32BitEhm+0xae>
             return;

         m_buffer[m_bufferIndex++] = byte;
     cfc:	21 e0       	ldi	r18, 0x01	; 1
     cfe:	2e 0f       	add	r18, r30
     d00:	20 93 9c 01 	sts	0x019C, r18
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	ec 56       	subi	r30, 0x6C	; 108
     d08:	fe 4f       	sbci	r31, 0xFE	; 254
     d0a:	80 83       	st	Z, r24
         i2c_start((address << 1) | I2C_WRITE);
     }

     void write(uint8_t byte)
     {
         if (m_bufferIndex == c_bufferSize)
     d0c:	e0 91 9c 01 	lds	r30, 0x019C
     d10:	e8 30       	cpi	r30, 0x08	; 8
     d12:	61 f0       	breq	.+24     	; 0xd2c <_ZN7VL53L0X13writeReg32BitEhm+0xae>
             return;

         m_buffer[m_bufferIndex++] = byte;
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	8e 0f       	add	r24, r30
     d18:	80 93 9c 01 	sts	0x019C, r24
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	ec 56       	subi	r30, 0x6C	; 108
     d20:	fe 4f       	sbci	r31, 0xFE	; 254
     d22:	80 82       	st	Z, r8
    }

    uint8_t endTransmission(bool stop = true)
    {
         for (uint8_t index = 0; index < m_bufferIndex; ++index) {
     d24:	80 91 9c 01 	lds	r24, 0x019C
     d28:	88 23       	and	r24, r24
     d2a:	89 f0       	breq	.+34     	; 0xd4e <_ZN7VL53L0X13writeReg32BitEhm+0xd0>
  last_status = Wire.endTransmission();
}

// Write a 32-bit register
void VL53L0X::writeReg32Bit(uint8_t reg, uint32_t value)
{
     d2c:	c0 e0       	ldi	r28, 0x00	; 0
     d2e:	04 e9       	ldi	r16, 0x94	; 148
     d30:	11 e0       	ldi	r17, 0x01	; 1
             if (i2c_write(m_buffer[index]) != 0)
     d32:	ec 2f       	mov	r30, r28
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	ec 56       	subi	r30, 0x6C	; 108
     d38:	fe 4f       	sbci	r31, 0xFE	; 254
     d3a:	80 81       	ld	r24, Z
     d3c:	0e 94 0a 05 	call	0xa14	; 0xa14 <i2c_write>
     d40:	81 11       	cpse	r24, r1
     d42:	09 c0       	rjmp	.+18     	; 0xd56 <_ZN7VL53L0X13writeReg32BitEhm+0xd8>
         m_buffer[m_bufferIndex++] = byte;
    }

    uint8_t endTransmission(bool stop = true)
    {
         for (uint8_t index = 0; index < m_bufferIndex; ++index) {
     d44:	cf 5f       	subi	r28, 0xFF	; 255
     d46:	f8 01       	movw	r30, r16
     d48:	90 85       	ldd	r25, Z+8	; 0x08
     d4a:	c9 17       	cp	r28, r25
     d4c:	90 f3       	brcs	.-28     	; 0xd32 <_ZN7VL53L0X13writeReg32BitEhm+0xb4>
             if (i2c_write(m_buffer[index]) != 0)
                 return 1;
         }

        if (stop)i2c_stop();
     d4e:	0e 94 06 05 	call	0xa0c	; 0xa0c <i2c_stop>
			 
		return 0;	
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	01 c0       	rjmp	.+2      	; 0xd58 <_ZN7VL53L0X13writeReg32BitEhm+0xda>

    uint8_t endTransmission(bool stop = true)
    {
         for (uint8_t index = 0; index < m_bufferIndex; ++index) {
             if (i2c_write(m_buffer[index]) != 0)
                 return 1;
     d56:	81 e0       	ldi	r24, 0x01	; 1
  Wire.write(reg);
  Wire.write((value >> 24) & 0xFF); // value highest byte
  Wire.write((value >> 16) & 0xFF);
  Wire.write((value >>  8) & 0xFF);
  Wire.write( value        & 0xFF); // value lowest byte
  last_status = Wire.endTransmission();
     d58:	f7 01       	movw	r30, r14
     d5a:	80 83       	st	Z, r24
}
     d5c:	df 91       	pop	r29
     d5e:	cf 91       	pop	r28
     d60:	1f 91       	pop	r17
     d62:	0f 91       	pop	r16
     d64:	ff 90       	pop	r15
     d66:	ef 90       	pop	r14
     d68:	bf 90       	pop	r11
     d6a:	af 90       	pop	r10
     d6c:	9f 90       	pop	r9
     d6e:	8f 90       	pop	r8
     d70:	08 95       	ret

00000d72 <_ZN7VL53L0X7readRegEh>:

// Read an 8-bit register
uint8_t VL53L0X::readReg(uint8_t reg)
{
     d72:	ef 92       	push	r14
     d74:	ff 92       	push	r15
     d76:	0f 93       	push	r16
     d78:	1f 93       	push	r17
     d7a:	cf 93       	push	r28
     d7c:	df 93       	push	r29
     d7e:	7c 01       	movw	r14, r24
     d80:	16 2f       	mov	r17, r22
  uint8_t value;

  Wire.beginTransmission(address);
     d82:	fc 01       	movw	r30, r24
     d84:	81 81       	ldd	r24, Z+1	; 0x01
    {
	    i2c_init();
    }
     void beginTransmission(uint8_t address)
     {
         m_bufferIndex = 0;
     d86:	c4 e9       	ldi	r28, 0x94	; 148
     d88:	d1 e0       	ldi	r29, 0x01	; 1
     d8a:	18 86       	std	Y+8, r1	; 0x08

         i2c_start((address << 1) | I2C_WRITE);
     d8c:	88 0f       	add	r24, r24
     d8e:	0e 94 df 04 	call	0x9be	; 0x9be <i2c_start>
     }

     void write(uint8_t byte)
     {
         if (m_bufferIndex == c_bufferSize)
     d92:	e8 85       	ldd	r30, Y+8	; 0x08
     d94:	e8 30       	cpi	r30, 0x08	; 8
     d96:	51 f0       	breq	.+20     	; 0xdac <_ZN7VL53L0X7readRegEh+0x3a>
             return;

         m_buffer[m_bufferIndex++] = byte;
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	8e 0f       	add	r24, r30
     d9c:	80 93 9c 01 	sts	0x019C, r24
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	ec 56       	subi	r30, 0x6C	; 108
     da4:	fe 4f       	sbci	r31, 0xFE	; 254
     da6:	10 83       	st	Z, r17
    }

    uint8_t endTransmission(bool stop = true)
    {
         for (uint8_t index = 0; index < m_bufferIndex; ++index) {
     da8:	88 23       	and	r24, r24
     daa:	89 f0       	breq	.+34     	; 0xdce <_ZN7VL53L0X7readRegEh+0x5c>
  last_status = Wire.endTransmission();
}

// Read an 8-bit register
uint8_t VL53L0X::readReg(uint8_t reg)
{
     dac:	c0 e0       	ldi	r28, 0x00	; 0
     dae:	04 e9       	ldi	r16, 0x94	; 148
     db0:	11 e0       	ldi	r17, 0x01	; 1
             if (i2c_write(m_buffer[index]) != 0)
     db2:	ec 2f       	mov	r30, r28
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	ec 56       	subi	r30, 0x6C	; 108
     db8:	fe 4f       	sbci	r31, 0xFE	; 254
     dba:	80 81       	ld	r24, Z
     dbc:	0e 94 0a 05 	call	0xa14	; 0xa14 <i2c_write>
     dc0:	81 11       	cpse	r24, r1
     dc2:	09 c0       	rjmp	.+18     	; 0xdd6 <_ZN7VL53L0X7readRegEh+0x64>
         m_buffer[m_bufferIndex++] = byte;
    }

    uint8_t endTransmission(bool stop = true)
    {
         for (uint8_t index = 0; index < m_bufferIndex; ++index) {
     dc4:	cf 5f       	subi	r28, 0xFF	; 255
     dc6:	f8 01       	movw	r30, r16
     dc8:	90 85       	ldd	r25, Z+8	; 0x08
     dca:	c9 17       	cp	r28, r25
     dcc:	90 f3       	brcs	.-28     	; 0xdb2 <_ZN7VL53L0X7readRegEh+0x40>
             if (i2c_write(m_buffer[index]) != 0)
                 return 1;
         }

        if (stop)i2c_stop();
     dce:	0e 94 06 05 	call	0xa0c	; 0xa0c <i2c_stop>
			 
		return 0;	
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	01 c0       	rjmp	.+2      	; 0xdd8 <_ZN7VL53L0X7readRegEh+0x66>

    uint8_t endTransmission(bool stop = true)
    {
         for (uint8_t index = 0; index < m_bufferIndex; ++index) {
             if (i2c_write(m_buffer[index]) != 0)
                 return 1;
     dd6:	81 e0       	ldi	r24, 0x01	; 1
  uint8_t value;

  Wire.beginTransmission(address);
  Wire.write(reg);
  last_status = Wire.endTransmission();
     dd8:	f7 01       	movw	r30, r14
     dda:	80 83       	st	Z, r24
     {
        // quantity = Sensors::min(quantity, c_bufferSize);
         if (quantity == 0)
             return 0;

         if (i2c_start((address << 1) | I2C_READ) != 0)
     ddc:	81 81       	ldd	r24, Z+1	; 0x01
     dde:	88 0f       	add	r24, r24
     de0:	81 60       	ori	r24, 0x01	; 1
     de2:	0e 94 df 04 	call	0x9be	; 0x9be <i2c_start>
     de6:	81 11       	cpse	r24, r1
     de8:	0a c0       	rjmp	.+20     	; 0xdfe <_ZN7VL53L0X7readRegEh+0x8c>

        m_bufferIndex = 0;
         while (--quantity > 0) {
             m_buffer[m_bufferIndex++] = i2c_readAck();
         }
         m_buffer[m_bufferIndex++] = i2c_readNak();
     dea:	c4 e9       	ldi	r28, 0x94	; 148
     dec:	d1 e0       	ldi	r29, 0x01	; 1
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	88 87       	std	Y+8, r24	; 0x08
     df2:	0e 94 27 05 	call	0xa4e	; 0xa4e <i2c_readNak>
     df6:	88 83       	st	Y, r24
         m_bufferReadIndex = 0;
     df8:	19 86       	std	Y+9, r1	; 0x09

         if (stop)
             i2c_stop();
     dfa:	0e 94 06 05 	call	0xa0c	; 0xa0c <i2c_stop>
         return m_bufferIndex;
     }

     uint8_t read()
     {
         if (m_bufferReadIndex == m_bufferIndex)
     dfe:	a4 e9       	ldi	r26, 0x94	; 148
     e00:	b1 e0       	ldi	r27, 0x01	; 1
     e02:	19 96       	adiw	r26, 0x09	; 9
     e04:	ec 91       	ld	r30, X
     e06:	19 97       	sbiw	r26, 0x09	; 9
     e08:	18 96       	adiw	r26, 0x08	; 8
     e0a:	8c 91       	ld	r24, X
     e0c:	e8 17       	cp	r30, r24
     e0e:	49 f0       	breq	.+18     	; 0xe22 <_ZN7VL53L0X7readRegEh+0xb0>
             return 0;
        return m_buffer[m_bufferReadIndex++];
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	8e 0f       	add	r24, r30
     e14:	80 93 9d 01 	sts	0x019D, r24
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	ec 56       	subi	r30, 0x6C	; 108
     e1c:	fe 4f       	sbci	r31, 0xFE	; 254
     e1e:	80 81       	ld	r24, Z
     e20:	01 c0       	rjmp	.+2      	; 0xe24 <_ZN7VL53L0X7readRegEh+0xb2>
     }

     uint8_t read()
     {
         if (m_bufferReadIndex == m_bufferIndex)
             return 0;
     e22:	80 e0       	ldi	r24, 0x00	; 0

  Wire.requestFrom(address, (uint8_t)1);
  value = Wire.read();

  return value;
}
     e24:	df 91       	pop	r29
     e26:	cf 91       	pop	r28
     e28:	1f 91       	pop	r17
     e2a:	0f 91       	pop	r16
     e2c:	ff 90       	pop	r15
     e2e:	ef 90       	pop	r14
     e30:	08 95       	ret

00000e32 <_ZN7VL53L0X12readReg16BitEh>:

// Read a 16-bit register
uint16_t VL53L0X::readReg16Bit(uint8_t reg)
{
     e32:	ef 92       	push	r14
     e34:	ff 92       	push	r15
     e36:	0f 93       	push	r16
     e38:	1f 93       	push	r17
     e3a:	cf 93       	push	r28
     e3c:	df 93       	push	r29
     e3e:	7c 01       	movw	r14, r24
     e40:	16 2f       	mov	r17, r22
  uint16_t value;

  Wire.beginTransmission(address);
     e42:	fc 01       	movw	r30, r24
     e44:	81 81       	ldd	r24, Z+1	; 0x01
    {
	    i2c_init();
    }
     void beginTransmission(uint8_t address)
     {
         m_bufferIndex = 0;
     e46:	c4 e9       	ldi	r28, 0x94	; 148
     e48:	d1 e0       	ldi	r29, 0x01	; 1
     e4a:	18 86       	std	Y+8, r1	; 0x08

         i2c_start((address << 1) | I2C_WRITE);
     e4c:	88 0f       	add	r24, r24
     e4e:	0e 94 df 04 	call	0x9be	; 0x9be <i2c_start>
     }

     void write(uint8_t byte)
     {
         if (m_bufferIndex == c_bufferSize)
     e52:	e8 85       	ldd	r30, Y+8	; 0x08
     e54:	e8 30       	cpi	r30, 0x08	; 8
     e56:	51 f0       	breq	.+20     	; 0xe6c <_ZN7VL53L0X12readReg16BitEh+0x3a>
             return;

         m_buffer[m_bufferIndex++] = byte;
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	8e 0f       	add	r24, r30
     e5c:	80 93 9c 01 	sts	0x019C, r24
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	ec 56       	subi	r30, 0x6C	; 108
     e64:	fe 4f       	sbci	r31, 0xFE	; 254
     e66:	10 83       	st	Z, r17
    }

    uint8_t endTransmission(bool stop = true)
    {
         for (uint8_t index = 0; index < m_bufferIndex; ++index) {
     e68:	88 23       	and	r24, r24
     e6a:	89 f0       	breq	.+34     	; 0xe8e <_ZN7VL53L0X12readReg16BitEh+0x5c>
  return value;
}

// Read a 16-bit register
uint16_t VL53L0X::readReg16Bit(uint8_t reg)
{
     e6c:	c0 e0       	ldi	r28, 0x00	; 0
     e6e:	04 e9       	ldi	r16, 0x94	; 148
     e70:	11 e0       	ldi	r17, 0x01	; 1
             if (i2c_write(m_buffer[index]) != 0)
     e72:	ec 2f       	mov	r30, r28
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	ec 56       	subi	r30, 0x6C	; 108
     e78:	fe 4f       	sbci	r31, 0xFE	; 254
     e7a:	80 81       	ld	r24, Z
     e7c:	0e 94 0a 05 	call	0xa14	; 0xa14 <i2c_write>
     e80:	81 11       	cpse	r24, r1
     e82:	09 c0       	rjmp	.+18     	; 0xe96 <_ZN7VL53L0X12readReg16BitEh+0x64>
         m_buffer[m_bufferIndex++] = byte;
    }

    uint8_t endTransmission(bool stop = true)
    {
         for (uint8_t index = 0; index < m_bufferIndex; ++index) {
     e84:	cf 5f       	subi	r28, 0xFF	; 255
     e86:	f8 01       	movw	r30, r16
     e88:	90 85       	ldd	r25, Z+8	; 0x08
     e8a:	c9 17       	cp	r28, r25
     e8c:	90 f3       	brcs	.-28     	; 0xe72 <_ZN7VL53L0X12readReg16BitEh+0x40>
             if (i2c_write(m_buffer[index]) != 0)
                 return 1;
         }

        if (stop)i2c_stop();
     e8e:	0e 94 06 05 	call	0xa0c	; 0xa0c <i2c_stop>
			 
		return 0;	
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	01 c0       	rjmp	.+2      	; 0xe98 <_ZN7VL53L0X12readReg16BitEh+0x66>

    uint8_t endTransmission(bool stop = true)
    {
         for (uint8_t index = 0; index < m_bufferIndex; ++index) {
             if (i2c_write(m_buffer[index]) != 0)
                 return 1;
     e96:	81 e0       	ldi	r24, 0x01	; 1
  uint16_t value;

  Wire.beginTransmission(address);
  Wire.write(reg);
  last_status = Wire.endTransmission();
     e98:	f7 01       	movw	r30, r14
     e9a:	80 83       	st	Z, r24
     {
        // quantity = Sensors::min(quantity, c_bufferSize);
         if (quantity == 0)
             return 0;

         if (i2c_start((address << 1) | I2C_READ) != 0)
     e9c:	81 81       	ldd	r24, Z+1	; 0x01
     e9e:	88 0f       	add	r24, r24
     ea0:	81 60       	ori	r24, 0x01	; 1
     ea2:	0e 94 df 04 	call	0x9be	; 0x9be <i2c_start>
     ea6:	81 11       	cpse	r24, r1
     ea8:	15 c0       	rjmp	.+42     	; 0xed4 <_ZN7VL53L0X12readReg16BitEh+0xa2>
             return 0;

        m_bufferIndex = 0;
         while (--quantity > 0) {
             m_buffer[m_bufferIndex++] = i2c_readAck();
     eaa:	c4 e9       	ldi	r28, 0x94	; 148
     eac:	d1 e0       	ldi	r29, 0x01	; 1
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	88 87       	std	Y+8, r24	; 0x08
     eb2:	0e 94 1c 05 	call	0xa38	; 0xa38 <i2c_readAck>
     eb6:	88 83       	st	Y, r24
         }
         m_buffer[m_bufferIndex++] = i2c_readNak();
     eb8:	18 85       	ldd	r17, Y+8	; 0x08
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	81 0f       	add	r24, r17
     ebe:	88 87       	std	Y+8, r24	; 0x08
     ec0:	0e 94 27 05 	call	0xa4e	; 0xa4e <i2c_readNak>
     ec4:	e1 2f       	mov	r30, r17
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	ec 56       	subi	r30, 0x6C	; 108
     eca:	fe 4f       	sbci	r31, 0xFE	; 254
     ecc:	80 83       	st	Z, r24
         m_bufferReadIndex = 0;
     ece:	19 86       	std	Y+9, r1	; 0x09

         if (stop)
             i2c_stop();
     ed0:	0e 94 06 05 	call	0xa0c	; 0xa0c <i2c_stop>
         return m_bufferIndex;
     }

     uint8_t read()
     {
         if (m_bufferReadIndex == m_bufferIndex)
     ed4:	e4 e9       	ldi	r30, 0x94	; 148
     ed6:	f1 e0       	ldi	r31, 0x01	; 1
     ed8:	91 85       	ldd	r25, Z+9	; 0x09
     eda:	80 85       	ldd	r24, Z+8	; 0x08
     edc:	98 17       	cp	r25, r24
     ede:	b1 f0       	breq	.+44     	; 0xf0c <_ZN7VL53L0X12readReg16BitEh+0xda>
             return 0;
        return m_buffer[m_bufferReadIndex++];
     ee0:	e1 e0       	ldi	r30, 0x01	; 1
     ee2:	e9 0f       	add	r30, r25
     ee4:	e0 93 9d 01 	sts	0x019D, r30
     ee8:	a9 2f       	mov	r26, r25
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	ac 56       	subi	r26, 0x6C	; 108
     eee:	be 4f       	sbci	r27, 0xFE	; 254

  Wire.requestFrom(address, (uint8_t)2);
  value  = (uint16_t)Wire.read() << 8; // value high byte
     ef0:	2c 91       	ld	r18, X
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	32 2f       	mov	r19, r18
     ef6:	22 27       	eor	r18, r18
         return m_bufferIndex;
     }

     uint8_t read()
     {
         if (m_bufferReadIndex == m_bufferIndex)
     ef8:	8e 17       	cp	r24, r30
     efa:	61 f0       	breq	.+24     	; 0xf14 <_ZN7VL53L0X12readReg16BitEh+0xe2>
             return 0;
        return m_buffer[m_bufferReadIndex++];
     efc:	9e 5f       	subi	r25, 0xFE	; 254
     efe:	90 93 9d 01 	sts	0x019D, r25
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	ec 56       	subi	r30, 0x6C	; 108
     f06:	fe 4f       	sbci	r31, 0xFE	; 254
     f08:	80 81       	ld	r24, Z
     f0a:	05 c0       	rjmp	.+10     	; 0xf16 <_ZN7VL53L0X12readReg16BitEh+0xe4>
     f0c:	20 e0       	ldi	r18, 0x00	; 0
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     }

     uint8_t read()
     {
         if (m_bufferReadIndex == m_bufferIndex)
             return 0;
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	01 c0       	rjmp	.+2      	; 0xf16 <_ZN7VL53L0X12readReg16BitEh+0xe4>
     f14:	80 e0       	ldi	r24, 0x00	; 0
  value |=           Wire.read();      // value low byte

  return value;
}
     f16:	a9 01       	movw	r20, r18
     f18:	48 2b       	or	r20, r24
     f1a:	ca 01       	movw	r24, r20
     f1c:	df 91       	pop	r29
     f1e:	cf 91       	pop	r28
     f20:	1f 91       	pop	r17
     f22:	0f 91       	pop	r16
     f24:	ff 90       	pop	r15
     f26:	ef 90       	pop	r14
     f28:	08 95       	ret

00000f2a <_ZN7VL53L0X10writeMultiEhPKhh>:
}

// Write an arbitrary number of bytes from the given array to the sensor,
// starting at the given register
void VL53L0X::writeMulti(uint8_t reg, uint8_t const * src, uint8_t count)
{
     f2a:	cf 92       	push	r12
     f2c:	df 92       	push	r13
     f2e:	ef 92       	push	r14
     f30:	ff 92       	push	r15
     f32:	0f 93       	push	r16
     f34:	1f 93       	push	r17
     f36:	cf 93       	push	r28
     f38:	df 93       	push	r29
     f3a:	7c 01       	movw	r14, r24
     f3c:	c6 2e       	mov	r12, r22
     f3e:	8a 01       	movw	r16, r20
     f40:	d2 2e       	mov	r13, r18
  Wire.beginTransmission(address);
     f42:	fc 01       	movw	r30, r24
     f44:	81 81       	ldd	r24, Z+1	; 0x01
    {
	    i2c_init();
    }
     void beginTransmission(uint8_t address)
     {
         m_bufferIndex = 0;
     f46:	c4 e9       	ldi	r28, 0x94	; 148
     f48:	d1 e0       	ldi	r29, 0x01	; 1
     f4a:	18 86       	std	Y+8, r1	; 0x08

         i2c_start((address << 1) | I2C_WRITE);
     f4c:	88 0f       	add	r24, r24
     f4e:	0e 94 df 04 	call	0x9be	; 0x9be <i2c_start>
     }

     void write(uint8_t byte)
     {
         if (m_bufferIndex == c_bufferSize)
     f52:	e8 85       	ldd	r30, Y+8	; 0x08
     f54:	e8 30       	cpi	r30, 0x08	; 8
     f56:	41 f0       	breq	.+16     	; 0xf68 <_ZN7VL53L0X10writeMultiEhPKhh+0x3e>
             return;

         m_buffer[m_bufferIndex++] = byte;
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	8e 0f       	add	r24, r30
     f5c:	80 93 9c 01 	sts	0x019C, r24
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	ec 56       	subi	r30, 0x6C	; 108
     f64:	fe 4f       	sbci	r31, 0xFE	; 254
     f66:	c0 82       	st	Z, r12
     f68:	d8 01       	movw	r26, r16
     f6a:	a8 01       	movw	r20, r16
     f6c:	4d 0d       	add	r20, r13
     f6e:	51 1d       	adc	r21, r1
         i2c_start((address << 1) | I2C_WRITE);
     }

     void write(uint8_t byte)
     {
         if (m_bufferIndex == c_bufferSize)
     f70:	c4 e9       	ldi	r28, 0x94	; 148
     f72:	d1 e0       	ldi	r29, 0x01	; 1
     f74:	0b c0       	rjmp	.+22     	; 0xf8c <_ZN7VL53L0X10writeMultiEhPKhh+0x62>
  Wire.write(reg);

  while (count-- > 0)
  {
    Wire.write(*(src++));
     f76:	2d 91       	ld	r18, X+
     f78:	e8 85       	ldd	r30, Y+8	; 0x08
     f7a:	e8 30       	cpi	r30, 0x08	; 8
     f7c:	39 f0       	breq	.+14     	; 0xf8c <_ZN7VL53L0X10writeMultiEhPKhh+0x62>
             return;

         m_buffer[m_bufferIndex++] = byte;
     f7e:	31 e0       	ldi	r19, 0x01	; 1
     f80:	3e 0f       	add	r19, r30
     f82:	38 87       	std	Y+8, r19	; 0x08
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	ec 56       	subi	r30, 0x6C	; 108
     f88:	fe 4f       	sbci	r31, 0xFE	; 254
     f8a:	20 83       	st	Z, r18
void VL53L0X::writeMulti(uint8_t reg, uint8_t const * src, uint8_t count)
{
  Wire.beginTransmission(address);
  Wire.write(reg);

  while (count-- > 0)
     f8c:	a4 17       	cp	r26, r20
     f8e:	b5 07       	cpc	r27, r21
     f90:	91 f7       	brne	.-28     	; 0xf76 <_ZN7VL53L0X10writeMultiEhPKhh+0x4c>
    }

    uint8_t endTransmission(bool stop = true)
    {
         for (uint8_t index = 0; index < m_bufferIndex; ++index) {
     f92:	80 91 9c 01 	lds	r24, 0x019C
     f96:	88 23       	and	r24, r24
     f98:	81 f0       	breq	.+32     	; 0xfba <_ZN7VL53L0X10writeMultiEhPKhh+0x90>
     f9a:	10 e0       	ldi	r17, 0x00	; 0
     f9c:	c4 e9       	ldi	r28, 0x94	; 148
     f9e:	d1 e0       	ldi	r29, 0x01	; 1
             if (i2c_write(m_buffer[index]) != 0)
     fa0:	e1 2f       	mov	r30, r17
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	ec 56       	subi	r30, 0x6C	; 108
     fa6:	fe 4f       	sbci	r31, 0xFE	; 254
     fa8:	80 81       	ld	r24, Z
     faa:	0e 94 0a 05 	call	0xa14	; 0xa14 <i2c_write>
     fae:	81 11       	cpse	r24, r1
     fb0:	08 c0       	rjmp	.+16     	; 0xfc2 <_ZN7VL53L0X10writeMultiEhPKhh+0x98>
         m_buffer[m_bufferIndex++] = byte;
    }

    uint8_t endTransmission(bool stop = true)
    {
         for (uint8_t index = 0; index < m_bufferIndex; ++index) {
     fb2:	1f 5f       	subi	r17, 0xFF	; 255
     fb4:	88 85       	ldd	r24, Y+8	; 0x08
     fb6:	18 17       	cp	r17, r24
     fb8:	98 f3       	brcs	.-26     	; 0xfa0 <_ZN7VL53L0X10writeMultiEhPKhh+0x76>
             if (i2c_write(m_buffer[index]) != 0)
                 return 1;
         }

        if (stop)i2c_stop();
     fba:	0e 94 06 05 	call	0xa0c	; 0xa0c <i2c_stop>
			 
		return 0;	
     fbe:	80 e0       	ldi	r24, 0x00	; 0
     fc0:	01 c0       	rjmp	.+2      	; 0xfc4 <_ZN7VL53L0X10writeMultiEhPKhh+0x9a>

    uint8_t endTransmission(bool stop = true)
    {
         for (uint8_t index = 0; index < m_bufferIndex; ++index) {
             if (i2c_write(m_buffer[index]) != 0)
                 return 1;
     fc2:	81 e0       	ldi	r24, 0x01	; 1
  {
    Wire.write(*(src++));
  }

  last_status = Wire.endTransmission();
     fc4:	f7 01       	movw	r30, r14
     fc6:	80 83       	st	Z, r24
}
     fc8:	df 91       	pop	r29
     fca:	cf 91       	pop	r28
     fcc:	1f 91       	pop	r17
     fce:	0f 91       	pop	r16
     fd0:	ff 90       	pop	r15
     fd2:	ef 90       	pop	r14
     fd4:	df 90       	pop	r13
     fd6:	cf 90       	pop	r12
     fd8:	08 95       	ret

00000fda <_ZN7VL53L0X9readMultiEhPhh>:

// Read an arbitrary number of bytes from the sensor, starting at the given
// register, into the given array
void VL53L0X::readMulti(uint8_t reg, uint8_t * dst, uint8_t count)
{
     fda:	cf 92       	push	r12
     fdc:	df 92       	push	r13
     fde:	ef 92       	push	r14
     fe0:	ff 92       	push	r15
     fe2:	0f 93       	push	r16
     fe4:	1f 93       	push	r17
     fe6:	cf 93       	push	r28
     fe8:	df 93       	push	r29
     fea:	7c 01       	movw	r14, r24
     fec:	c6 2f       	mov	r28, r22
     fee:	c4 2e       	mov	r12, r20
     ff0:	d5 2e       	mov	r13, r21
     ff2:	d2 2f       	mov	r29, r18
  Wire.beginTransmission(address);
     ff4:	dc 01       	movw	r26, r24
     ff6:	11 96       	adiw	r26, 0x01	; 1
     ff8:	8c 91       	ld	r24, X
    {
	    i2c_init();
    }
     void beginTransmission(uint8_t address)
     {
         m_bufferIndex = 0;
     ffa:	04 e9       	ldi	r16, 0x94	; 148
     ffc:	11 e0       	ldi	r17, 0x01	; 1
     ffe:	f8 01       	movw	r30, r16
    1000:	10 86       	std	Z+8, r1	; 0x08

         i2c_start((address << 1) | I2C_WRITE);
    1002:	88 0f       	add	r24, r24
    1004:	0e 94 df 04 	call	0x9be	; 0x9be <i2c_start>
     }

     void write(uint8_t byte)
     {
         if (m_bufferIndex == c_bufferSize)
    1008:	d8 01       	movw	r26, r16
    100a:	18 96       	adiw	r26, 0x08	; 8
    100c:	ec 91       	ld	r30, X
    100e:	e8 30       	cpi	r30, 0x08	; 8
    1010:	51 f0       	breq	.+20     	; 0x1026 <_ZN7VL53L0X9readMultiEhPhh+0x4c>
             return;

         m_buffer[m_bufferIndex++] = byte;
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	8e 0f       	add	r24, r30
    1016:	80 93 9c 01 	sts	0x019C, r24
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	ec 56       	subi	r30, 0x6C	; 108
    101e:	fe 4f       	sbci	r31, 0xFE	; 254
    1020:	c0 83       	st	Z, r28
    }

    uint8_t endTransmission(bool stop = true)
    {
         for (uint8_t index = 0; index < m_bufferIndex; ++index) {
    1022:	88 23       	and	r24, r24
    1024:	89 f0       	breq	.+34     	; 0x1048 <_ZN7VL53L0X9readMultiEhPhh+0x6e>
}

// Read an arbitrary number of bytes from the sensor, starting at the given
// register, into the given array
void VL53L0X::readMulti(uint8_t reg, uint8_t * dst, uint8_t count)
{
    1026:	c0 e0       	ldi	r28, 0x00	; 0
    1028:	04 e9       	ldi	r16, 0x94	; 148
    102a:	11 e0       	ldi	r17, 0x01	; 1
             if (i2c_write(m_buffer[index]) != 0)
    102c:	ec 2f       	mov	r30, r28
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	ec 56       	subi	r30, 0x6C	; 108
    1032:	fe 4f       	sbci	r31, 0xFE	; 254
    1034:	80 81       	ld	r24, Z
    1036:	0e 94 0a 05 	call	0xa14	; 0xa14 <i2c_write>
    103a:	81 11       	cpse	r24, r1
    103c:	09 c0       	rjmp	.+18     	; 0x1050 <_ZN7VL53L0X9readMultiEhPhh+0x76>
         m_buffer[m_bufferIndex++] = byte;
    }

    uint8_t endTransmission(bool stop = true)
    {
         for (uint8_t index = 0; index < m_bufferIndex; ++index) {
    103e:	cf 5f       	subi	r28, 0xFF	; 255
    1040:	f8 01       	movw	r30, r16
    1042:	90 85       	ldd	r25, Z+8	; 0x08
    1044:	c9 17       	cp	r28, r25
    1046:	90 f3       	brcs	.-28     	; 0x102c <_ZN7VL53L0X9readMultiEhPhh+0x52>
             if (i2c_write(m_buffer[index]) != 0)
                 return 1;
         }

        if (stop)i2c_stop();
    1048:	0e 94 06 05 	call	0xa0c	; 0xa0c <i2c_stop>
			 
		return 0;	
    104c:	80 e0       	ldi	r24, 0x00	; 0
    104e:	01 c0       	rjmp	.+2      	; 0x1052 <_ZN7VL53L0X9readMultiEhPhh+0x78>

    uint8_t endTransmission(bool stop = true)
    {
         for (uint8_t index = 0; index < m_bufferIndex; ++index) {
             if (i2c_write(m_buffer[index]) != 0)
                 return 1;
    1050:	81 e0       	ldi	r24, 0x01	; 1
  Wire.beginTransmission(address);
  Wire.write(reg);
  last_status = Wire.endTransmission();
    1052:	d7 01       	movw	r26, r14
    1054:	8c 93       	st	X, r24

  Wire.requestFrom(address, count);
    1056:	11 96       	adiw	r26, 0x01	; 1
    1058:	8c 91       	ld	r24, X
     }

     uint8_t requestFrom(uint8_t address, uint8_t quantity, bool stop = true)
     {
        // quantity = Sensors::min(quantity, c_bufferSize);
         if (quantity == 0)
    105a:	dd 23       	and	r29, r29
    105c:	09 f4       	brne	.+2      	; 0x1060 <_ZN7VL53L0X9readMultiEhPhh+0x86>
    105e:	52 c0       	rjmp	.+164    	; 0x1104 <_ZN7VL53L0X9readMultiEhPhh+0x12a>
             return 0;

         if (i2c_start((address << 1) | I2C_READ) != 0)
    1060:	88 0f       	add	r24, r24
    1062:	81 60       	ori	r24, 0x01	; 1
    1064:	0e 94 df 04 	call	0x9be	; 0x9be <i2c_start>
    1068:	81 11       	cpse	r24, r1
    106a:	44 c0       	rjmp	.+136    	; 0x10f4 <_ZN7VL53L0X9readMultiEhPhh+0x11a>
             return 0;

        m_bufferIndex = 0;
    106c:	10 92 9c 01 	sts	0x019C, r1
         while (--quantity > 0) {
    1070:	ff 24       	eor	r15, r15
    1072:	fa 94       	dec	r15
    1074:	fd 0e       	add	r15, r29
    1076:	89 f0       	breq	.+34     	; 0x109a <_ZN7VL53L0X9readMultiEhPhh+0xc0>
             m_buffer[m_bufferIndex++] = i2c_readAck();
    1078:	04 e9       	ldi	r16, 0x94	; 148
    107a:	11 e0       	ldi	r17, 0x01	; 1
    107c:	f8 01       	movw	r30, r16
    107e:	c0 85       	ldd	r28, Z+8	; 0x08
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	8c 0f       	add	r24, r28
    1084:	80 87       	std	Z+8, r24	; 0x08
    1086:	0e 94 1c 05 	call	0xa38	; 0xa38 <i2c_readAck>
    108a:	ec 2f       	mov	r30, r28
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	ec 56       	subi	r30, 0x6C	; 108
    1090:	fe 4f       	sbci	r31, 0xFE	; 254
    1092:	80 83       	st	Z, r24

         if (i2c_start((address << 1) | I2C_READ) != 0)
             return 0;

        m_bufferIndex = 0;
         while (--quantity > 0) {
    1094:	fa 94       	dec	r15
    1096:	f1 10       	cpse	r15, r1
    1098:	f1 cf       	rjmp	.-30     	; 0x107c <_ZN7VL53L0X9readMultiEhPhh+0xa2>
             m_buffer[m_bufferIndex++] = i2c_readAck();
         }
         m_buffer[m_bufferIndex++] = i2c_readNak();
    109a:	04 e9       	ldi	r16, 0x94	; 148
    109c:	11 e0       	ldi	r17, 0x01	; 1
    109e:	d8 01       	movw	r26, r16
    10a0:	18 96       	adiw	r26, 0x08	; 8
    10a2:	cc 91       	ld	r28, X
    10a4:	18 97       	sbiw	r26, 0x08	; 8
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	8c 0f       	add	r24, r28
    10aa:	18 96       	adiw	r26, 0x08	; 8
    10ac:	8c 93       	st	X, r24
    10ae:	0e 94 27 05 	call	0xa4e	; 0xa4e <i2c_readNak>
    10b2:	ec 2f       	mov	r30, r28
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	ec 56       	subi	r30, 0x6C	; 108
    10b8:	fe 4f       	sbci	r31, 0xFE	; 254
    10ba:	80 83       	st	Z, r24
         m_bufferReadIndex = 0;
    10bc:	f8 01       	movw	r30, r16
    10be:	11 86       	std	Z+9, r1	; 0x09

         if (stop)
             i2c_stop();
    10c0:	0e 94 06 05 	call	0xa0c	; 0xa0c <i2c_stop>
    10c4:	17 c0       	rjmp	.+46     	; 0x10f4 <_ZN7VL53L0X9readMultiEhPhh+0x11a>
         return m_bufferIndex;
     }

     uint8_t read()
     {
         if (m_bufferReadIndex == m_bufferIndex)
    10c6:	19 96       	adiw	r26, 0x09	; 9
    10c8:	ec 91       	ld	r30, X
    10ca:	19 97       	sbiw	r26, 0x09	; 9
    10cc:	18 96       	adiw	r26, 0x08	; 8
    10ce:	8c 91       	ld	r24, X
    10d0:	18 97       	sbiw	r26, 0x08	; 8
    10d2:	e8 17       	cp	r30, r24
    10d4:	51 f0       	breq	.+20     	; 0x10ea <_ZN7VL53L0X9readMultiEhPhh+0x110>
             return 0;
        return m_buffer[m_bufferReadIndex++];
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	8e 0f       	add	r24, r30
    10da:	19 96       	adiw	r26, 0x09	; 9
    10dc:	8c 93       	st	X, r24
    10de:	19 97       	sbiw	r26, 0x09	; 9
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	ec 56       	subi	r30, 0x6C	; 108
    10e4:	fe 4f       	sbci	r31, 0xFE	; 254
    10e6:	80 81       	ld	r24, Z
    10e8:	01 c0       	rjmp	.+2      	; 0x10ec <_ZN7VL53L0X9readMultiEhPhh+0x112>
     }

     uint8_t read()
     {
         if (m_bufferReadIndex == m_bufferIndex)
             return 0;
    10ea:	89 2f       	mov	r24, r25

  while (count-- > 0)
  {
    *(dst++) = Wire.read();
    10ec:	89 93       	st	Y+, r24
  Wire.write(reg);
  last_status = Wire.endTransmission();

  Wire.requestFrom(address, count);

  while (count-- > 0)
    10ee:	21 50       	subi	r18, 0x01	; 1
    10f0:	50 f7       	brcc	.-44     	; 0x10c6 <_ZN7VL53L0X9readMultiEhPhh+0xec>
    10f2:	08 c0       	rjmp	.+16     	; 0x1104 <_ZN7VL53L0X9readMultiEhPhh+0x12a>
    10f4:	2f ef       	ldi	r18, 0xFF	; 255
    10f6:	2d 0f       	add	r18, r29
    10f8:	cc 2d       	mov	r28, r12
    10fa:	dd 2d       	mov	r29, r13
         return m_bufferIndex;
     }

     uint8_t read()
     {
         if (m_bufferReadIndex == m_bufferIndex)
    10fc:	a4 e9       	ldi	r26, 0x94	; 148
    10fe:	b1 e0       	ldi	r27, 0x01	; 1
             return 0;
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	e1 cf       	rjmp	.-62     	; 0x10c6 <_ZN7VL53L0X9readMultiEhPhh+0xec>
  {
    *(dst++) = Wire.read();
  }
}
    1104:	df 91       	pop	r29
    1106:	cf 91       	pop	r28
    1108:	1f 91       	pop	r17
    110a:	0f 91       	pop	r16
    110c:	ff 90       	pop	r15
    110e:	ef 90       	pop	r14
    1110:	df 90       	pop	r13
    1112:	cf 90       	pop	r12
    1114:	08 95       	ret

00001116 <_ZN7VL53L0X18setSignalRateLimitEf>:
// Setting a lower limit increases the potential range of the sensor but also
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
bool VL53L0X::setSignalRateLimit(float limit_Mcps)
{
    1116:	cf 92       	push	r12
    1118:	df 92       	push	r13
    111a:	ef 92       	push	r14
    111c:	ff 92       	push	r15
    111e:	cf 93       	push	r28
    1120:	df 93       	push	r29
    1122:	ec 01       	movw	r28, r24
    1124:	6a 01       	movw	r12, r20
    1126:	7b 01       	movw	r14, r22
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
    1128:	20 e0       	ldi	r18, 0x00	; 0
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	a9 01       	movw	r20, r18
    112e:	c7 01       	movw	r24, r14
    1130:	b6 01       	movw	r22, r12
    1132:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <__cmpsf2>
    1136:	88 23       	and	r24, r24
    1138:	dc f0       	brlt	.+54     	; 0x1170 <_ZN7VL53L0X18setSignalRateLimitEf+0x5a>
    113a:	28 eb       	ldi	r18, 0xB8	; 184
    113c:	3e ef       	ldi	r19, 0xFE	; 254
    113e:	4f ef       	ldi	r20, 0xFF	; 255
    1140:	53 e4       	ldi	r21, 0x43	; 67
    1142:	c7 01       	movw	r24, r14
    1144:	b6 01       	movw	r22, r12
    1146:	0e 94 2b 11 	call	0x2256	; 0x2256 <__gesf2>
    114a:	18 16       	cp	r1, r24
    114c:	9c f0       	brlt	.+38     	; 0x1174 <_ZN7VL53L0X18setSignalRateLimitEf+0x5e>

  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16Bit(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
    114e:	20 e0       	ldi	r18, 0x00	; 0
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	40 e0       	ldi	r20, 0x00	; 0
    1154:	53 e4       	ldi	r21, 0x43	; 67
    1156:	c7 01       	movw	r24, r14
    1158:	b6 01       	movw	r22, r12
    115a:	0e 94 30 11 	call	0x2260	; 0x2260 <__mulsf3>
    115e:	0e 94 4a 10 	call	0x2094	; 0x2094 <__fixunssfsi>
    1162:	ab 01       	movw	r20, r22
    1164:	64 e4       	ldi	r22, 0x44	; 68
    1166:	ce 01       	movw	r24, r28
    1168:	0e 94 e7 05 	call	0xbce	; 0xbce <_ZN7VL53L0X13writeReg16BitEhj>
  return true;
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	03 c0       	rjmp	.+6      	; 0x1176 <_ZN7VL53L0X18setSignalRateLimitEf+0x60>
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
bool VL53L0X::setSignalRateLimit(float limit_Mcps)
{
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	01 c0       	rjmp	.+2      	; 0x1176 <_ZN7VL53L0X18setSignalRateLimitEf+0x60>
    1174:	80 e0       	ldi	r24, 0x00	; 0

  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16Bit(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
  return true;
}
    1176:	df 91       	pop	r29
    1178:	cf 91       	pop	r28
    117a:	ff 90       	pop	r15
    117c:	ef 90       	pop	r14
    117e:	df 90       	pop	r13
    1180:	cf 90       	pop	r12
    1182:	08 95       	ret

00001184 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE>:

// Get the VCSEL pulse period in PCLKs for the given period type.
// based on VL53L0X_get_vcsel_pulse_period()
uint8_t VL53L0X::getVcselPulsePeriod(vcselPeriodType type)
{
  if (type == VcselPeriodPreRange)
    1184:	61 11       	cpse	r22, r1
    1186:	06 c0       	rjmp	.+12     	; 0x1194 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE+0x10>
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
    1188:	60 e5       	ldi	r22, 0x50	; 80
    118a:	0e 94 b9 06 	call	0xd72	; 0xd72 <_ZN7VL53L0X7readRegEh>
    118e:	8f 5f       	subi	r24, 0xFF	; 255
    1190:	88 0f       	add	r24, r24
    1192:	08 95       	ret
  }
  else if (type == VcselPeriodFinalRange)
    1194:	61 30       	cpi	r22, 0x01	; 1
    1196:	31 f4       	brne	.+12     	; 0x11a4 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE+0x20>
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
    1198:	60 e7       	ldi	r22, 0x70	; 112
    119a:	0e 94 b9 06 	call	0xd72	; 0xd72 <_ZN7VL53L0X7readRegEh>
    119e:	8f 5f       	subi	r24, 0xFF	; 255
    11a0:	88 0f       	add	r24, r24
    11a2:	08 95       	ret
  }
  else { return 255; }
    11a4:	8f ef       	ldi	r24, 0xFF	; 255
}
    11a6:	08 95       	ret

000011a8 <_ZN7VL53L0X15startContinuousEm>:
// often as possible); otherwise, continuous timed mode is used, with the given
// inter-measurement period in milliseconds determining how often the sensor
// takes a measurement.
// based on VL53L0X_StartMeasurement()
void VL53L0X::startContinuous(uint32_t period_ms)
{
    11a8:	cf 92       	push	r12
    11aa:	df 92       	push	r13
    11ac:	ef 92       	push	r14
    11ae:	ff 92       	push	r15
    11b0:	cf 93       	push	r28
    11b2:	df 93       	push	r29
    11b4:	ec 01       	movw	r28, r24
    11b6:	6a 01       	movw	r12, r20
    11b8:	7b 01       	movw	r14, r22
  writeReg(0x80, 0x01);
    11ba:	41 e0       	ldi	r20, 0x01	; 1
    11bc:	60 e8       	ldi	r22, 0x80	; 128
    11be:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
    11c2:	41 e0       	ldi	r20, 0x01	; 1
    11c4:	6f ef       	ldi	r22, 0xFF	; 255
    11c6:	ce 01       	movw	r24, r28
    11c8:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
    11cc:	40 e0       	ldi	r20, 0x00	; 0
    11ce:	60 e0       	ldi	r22, 0x00	; 0
    11d0:	ce 01       	movw	r24, r28
    11d2:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x91, stop_variable);
    11d6:	4f 81       	ldd	r20, Y+7	; 0x07
    11d8:	61 e9       	ldi	r22, 0x91	; 145
    11da:	ce 01       	movw	r24, r28
    11dc:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x01);
    11e0:	41 e0       	ldi	r20, 0x01	; 1
    11e2:	60 e0       	ldi	r22, 0x00	; 0
    11e4:	ce 01       	movw	r24, r28
    11e6:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
    11ea:	40 e0       	ldi	r20, 0x00	; 0
    11ec:	6f ef       	ldi	r22, 0xFF	; 255
    11ee:	ce 01       	movw	r24, r28
    11f0:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
    11f4:	40 e0       	ldi	r20, 0x00	; 0
    11f6:	60 e8       	ldi	r22, 0x80	; 128
    11f8:	ce 01       	movw	r24, r28
    11fa:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>

  if (period_ms != 0)
    11fe:	c1 14       	cp	r12, r1
    1200:	d1 04       	cpc	r13, r1
    1202:	e1 04       	cpc	r14, r1
    1204:	f1 04       	cpc	r15, r1
    1206:	c9 f0       	breq	.+50     	; 0x123a <_ZN7VL53L0X15startContinuousEm+0x92>
  {
    // continuous timed mode

    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() begin

    uint16_t osc_calibrate_val = readReg16Bit(OSC_CALIBRATE_VAL);
    1208:	68 ef       	ldi	r22, 0xF8	; 248
    120a:	ce 01       	movw	r24, r28
    120c:	0e 94 19 07 	call	0xe32	; 0xe32 <_ZN7VL53L0X12readReg16BitEh>

    if (osc_calibrate_val != 0)
    1210:	00 97       	sbiw	r24, 0x00	; 0
    1212:	39 f0       	breq	.+14     	; 0x1222 <_ZN7VL53L0X15startContinuousEm+0x7a>
    {
      period_ms *= osc_calibrate_val;
    1214:	dc 01       	movw	r26, r24
    1216:	a7 01       	movw	r20, r14
    1218:	96 01       	movw	r18, r12
    121a:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <__muluhisi3>
    121e:	6b 01       	movw	r12, r22
    1220:	7c 01       	movw	r14, r24
    }

    writeReg32Bit(SYSTEM_INTERMEASUREMENT_PERIOD, period_ms);
    1222:	a7 01       	movw	r20, r14
    1224:	96 01       	movw	r18, r12
    1226:	64 e0       	ldi	r22, 0x04	; 4
    1228:	ce 01       	movw	r24, r28
    122a:	0e 94 3f 06 	call	0xc7e	; 0xc7e <_ZN7VL53L0X13writeReg32BitEhm>

    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() end

    writeReg(SYSRANGE_START, 0x04); // VL53L0X_REG_SYSRANGE_MODE_TIMED
    122e:	44 e0       	ldi	r20, 0x04	; 4
    1230:	60 e0       	ldi	r22, 0x00	; 0
    1232:	ce 01       	movw	r24, r28
    1234:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
    1238:	05 c0       	rjmp	.+10     	; 0x1244 <_ZN7VL53L0X15startContinuousEm+0x9c>
  }
  else
  {
    // continuous back-to-back mode
    writeReg(SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
    123a:	42 e0       	ldi	r20, 0x02	; 2
    123c:	60 e0       	ldi	r22, 0x00	; 0
    123e:	ce 01       	movw	r24, r28
    1240:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  }
}
    1244:	df 91       	pop	r29
    1246:	cf 91       	pop	r28
    1248:	ff 90       	pop	r15
    124a:	ef 90       	pop	r14
    124c:	df 90       	pop	r13
    124e:	cf 90       	pop	r12
    1250:	08 95       	ret

00001252 <_ZN7VL53L0X30readRangeContinuousMillimetersEv>:

// Returns a range reading in millimeters when continuous mode is active
// (readRangeSingleMillimeters() also calls this function after starting a
// single-shot range measurement)
uint16_t VL53L0X::readRangeContinuousMillimeters(void)
{
    1252:	0f 93       	push	r16
    1254:	1f 93       	push	r17
    1256:	cf 93       	push	r28
    1258:	df 93       	push	r29
    125a:	ec 01       	movw	r28, r24
  startTimeout();
    125c:	0e 94 1e 02 	call	0x43c	; 0x43c <_Z6millisv>
    1260:	7e 83       	std	Y+6, r23	; 0x06
    1262:	6d 83       	std	Y+5, r22	; 0x05
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
    1264:	14 c0       	rjmp	.+40     	; 0x128e <_ZN7VL53L0X30readRangeContinuousMillimetersEv+0x3c>
  {
    if (checkTimeoutExpired())
    1266:	8a 81       	ldd	r24, Y+2	; 0x02
    1268:	9b 81       	ldd	r25, Y+3	; 0x03
    126a:	89 2b       	or	r24, r25
    126c:	81 f0       	breq	.+32     	; 0x128e <_ZN7VL53L0X30readRangeContinuousMillimetersEv+0x3c>
    126e:	0e 94 1e 02 	call	0x43c	; 0x43c <_Z6millisv>
    1272:	2d 81       	ldd	r18, Y+5	; 0x05
    1274:	3e 81       	ldd	r19, Y+6	; 0x06
    1276:	62 1b       	sub	r22, r18
    1278:	73 0b       	sbc	r23, r19
    127a:	8a 81       	ldd	r24, Y+2	; 0x02
    127c:	9b 81       	ldd	r25, Y+3	; 0x03
    127e:	86 17       	cp	r24, r22
    1280:	97 07       	cpc	r25, r23
    1282:	28 f4       	brcc	.+10     	; 0x128e <_ZN7VL53L0X30readRangeContinuousMillimetersEv+0x3c>
    {
      did_timeout = true;
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	8c 83       	std	Y+4, r24	; 0x04
      return 65535;
    1288:	8f ef       	ldi	r24, 0xFF	; 255
    128a:	9f ef       	ldi	r25, 0xFF	; 255
    128c:	13 c0       	rjmp	.+38     	; 0x12b4 <_ZN7VL53L0X30readRangeContinuousMillimetersEv+0x62>
// (readRangeSingleMillimeters() also calls this function after starting a
// single-shot range measurement)
uint16_t VL53L0X::readRangeContinuousMillimeters(void)
{
  startTimeout();
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
    128e:	63 e1       	ldi	r22, 0x13	; 19
    1290:	ce 01       	movw	r24, r28
    1292:	0e 94 b9 06 	call	0xd72	; 0xd72 <_ZN7VL53L0X7readRegEh>
    1296:	87 70       	andi	r24, 0x07	; 7
    1298:	31 f3       	breq	.-52     	; 0x1266 <_ZN7VL53L0X30readRangeContinuousMillimetersEv+0x14>
    }
  }

  // assumptions: Linearity Corrective Gain is 1000 (default);
  // fractional ranging is not enabled
  uint16_t range = readReg16Bit(RESULT_RANGE_STATUS + 10);
    129a:	6e e1       	ldi	r22, 0x1E	; 30
    129c:	ce 01       	movw	r24, r28
    129e:	0e 94 19 07 	call	0xe32	; 0xe32 <_ZN7VL53L0X12readReg16BitEh>
    12a2:	08 2f       	mov	r16, r24
    12a4:	19 2f       	mov	r17, r25

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
    12a6:	41 e0       	ldi	r20, 0x01	; 1
    12a8:	6b e0       	ldi	r22, 0x0B	; 11
    12aa:	ce 01       	movw	r24, r28
    12ac:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>

  return range;
    12b0:	80 2f       	mov	r24, r16
    12b2:	91 2f       	mov	r25, r17
}
    12b4:	df 91       	pop	r29
    12b6:	cf 91       	pop	r28
    12b8:	1f 91       	pop	r17
    12ba:	0f 91       	pop	r16
    12bc:	08 95       	ret

000012be <_ZN7VL53L0X11getSpadInfoEPhPb>:

// Get reference SPAD (single photon avalanche diode) count and type
// based on VL53L0X_get_info_from_device(),
// but only gets reference SPAD count and type
bool VL53L0X::getSpadInfo(uint8_t * count, bool * type_is_aperture)
{
    12be:	ef 92       	push	r14
    12c0:	ff 92       	push	r15
    12c2:	0f 93       	push	r16
    12c4:	1f 93       	push	r17
    12c6:	cf 93       	push	r28
    12c8:	df 93       	push	r29
    12ca:	ec 01       	movw	r28, r24
    12cc:	7b 01       	movw	r14, r22
    12ce:	8a 01       	movw	r16, r20
  uint8_t tmp;

  writeReg(0x80, 0x01);
    12d0:	41 e0       	ldi	r20, 0x01	; 1
    12d2:	60 e8       	ldi	r22, 0x80	; 128
    12d4:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
    12d8:	41 e0       	ldi	r20, 0x01	; 1
    12da:	6f ef       	ldi	r22, 0xFF	; 255
    12dc:	ce 01       	movw	r24, r28
    12de:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
    12e2:	40 e0       	ldi	r20, 0x00	; 0
    12e4:	60 e0       	ldi	r22, 0x00	; 0
    12e6:	ce 01       	movw	r24, r28
    12e8:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x06);
    12ec:	46 e0       	ldi	r20, 0x06	; 6
    12ee:	6f ef       	ldi	r22, 0xFF	; 255
    12f0:	ce 01       	movw	r24, r28
    12f2:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x83, readReg(0x83) | 0x04);
    12f6:	63 e8       	ldi	r22, 0x83	; 131
    12f8:	ce 01       	movw	r24, r28
    12fa:	0e 94 b9 06 	call	0xd72	; 0xd72 <_ZN7VL53L0X7readRegEh>
    12fe:	48 2f       	mov	r20, r24
    1300:	44 60       	ori	r20, 0x04	; 4
    1302:	63 e8       	ldi	r22, 0x83	; 131
    1304:	ce 01       	movw	r24, r28
    1306:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x07);
    130a:	47 e0       	ldi	r20, 0x07	; 7
    130c:	6f ef       	ldi	r22, 0xFF	; 255
    130e:	ce 01       	movw	r24, r28
    1310:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x81, 0x01);
    1314:	41 e0       	ldi	r20, 0x01	; 1
    1316:	61 e8       	ldi	r22, 0x81	; 129
    1318:	ce 01       	movw	r24, r28
    131a:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x80, 0x01);
    131e:	41 e0       	ldi	r20, 0x01	; 1
    1320:	60 e8       	ldi	r22, 0x80	; 128
    1322:	ce 01       	movw	r24, r28
    1324:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x94, 0x6b);
    1328:	4b e6       	ldi	r20, 0x6B	; 107
    132a:	64 e9       	ldi	r22, 0x94	; 148
    132c:	ce 01       	movw	r24, r28
    132e:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x83, 0x00);
    1332:	40 e0       	ldi	r20, 0x00	; 0
    1334:	63 e8       	ldi	r22, 0x83	; 131
    1336:	ce 01       	movw	r24, r28
    1338:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  startTimeout();
    133c:	0e 94 1e 02 	call	0x43c	; 0x43c <_Z6millisv>
    1340:	7e 83       	std	Y+6, r23	; 0x06
    1342:	6d 83       	std	Y+5, r22	; 0x05
  while (readReg(0x83) == 0x00)
    1344:	10 c0       	rjmp	.+32     	; 0x1366 <_ZN7VL53L0X11getSpadInfoEPhPb+0xa8>
  {
    if (checkTimeoutExpired()) { return false; }
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	9b 81       	ldd	r25, Y+3	; 0x03
    134a:	89 2b       	or	r24, r25
    134c:	61 f0       	breq	.+24     	; 0x1366 <_ZN7VL53L0X11getSpadInfoEPhPb+0xa8>
    134e:	0e 94 1e 02 	call	0x43c	; 0x43c <_Z6millisv>
    1352:	2d 81       	ldd	r18, Y+5	; 0x05
    1354:	3e 81       	ldd	r19, Y+6	; 0x06
    1356:	62 1b       	sub	r22, r18
    1358:	73 0b       	sbc	r23, r19
    135a:	8a 81       	ldd	r24, Y+2	; 0x02
    135c:	9b 81       	ldd	r25, Y+3	; 0x03
    135e:	86 17       	cp	r24, r22
    1360:	97 07       	cpc	r25, r23
    1362:	08 f4       	brcc	.+2      	; 0x1366 <_ZN7VL53L0X11getSpadInfoEPhPb+0xa8>
    1364:	42 c0       	rjmp	.+132    	; 0x13ea <_ZN7VL53L0X11getSpadInfoEPhPb+0x12c>
  writeReg(0x80, 0x01);

  writeReg(0x94, 0x6b);
  writeReg(0x83, 0x00);
  startTimeout();
  while (readReg(0x83) == 0x00)
    1366:	63 e8       	ldi	r22, 0x83	; 131
    1368:	ce 01       	movw	r24, r28
    136a:	0e 94 b9 06 	call	0xd72	; 0xd72 <_ZN7VL53L0X7readRegEh>
    136e:	88 23       	and	r24, r24
    1370:	51 f3       	breq	.-44     	; 0x1346 <_ZN7VL53L0X11getSpadInfoEPhPb+0x88>
  {
    if (checkTimeoutExpired()) { return false; }
  }
  writeReg(0x83, 0x01);
    1372:	41 e0       	ldi	r20, 0x01	; 1
    1374:	63 e8       	ldi	r22, 0x83	; 131
    1376:	ce 01       	movw	r24, r28
    1378:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  tmp = readReg(0x92);
    137c:	62 e9       	ldi	r22, 0x92	; 146
    137e:	ce 01       	movw	r24, r28
    1380:	0e 94 b9 06 	call	0xd72	; 0xd72 <_ZN7VL53L0X7readRegEh>

  *count = tmp & 0x7f;
    1384:	98 2f       	mov	r25, r24
    1386:	9f 77       	andi	r25, 0x7F	; 127
    1388:	f7 01       	movw	r30, r14
    138a:	90 83       	st	Z, r25
  *type_is_aperture = (tmp >> 7) & 0x01;
    138c:	98 2f       	mov	r25, r24
    138e:	99 1f       	adc	r25, r25
    1390:	99 27       	eor	r25, r25
    1392:	99 1f       	adc	r25, r25
    1394:	f8 01       	movw	r30, r16
    1396:	90 83       	st	Z, r25

  writeReg(0x81, 0x00);
    1398:	40 e0       	ldi	r20, 0x00	; 0
    139a:	61 e8       	ldi	r22, 0x81	; 129
    139c:	ce 01       	movw	r24, r28
    139e:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x06);
    13a2:	46 e0       	ldi	r20, 0x06	; 6
    13a4:	6f ef       	ldi	r22, 0xFF	; 255
    13a6:	ce 01       	movw	r24, r28
    13a8:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x83, readReg( 0x83  & ~0x04));
    13ac:	63 e8       	ldi	r22, 0x83	; 131
    13ae:	ce 01       	movw	r24, r28
    13b0:	0e 94 b9 06 	call	0xd72	; 0xd72 <_ZN7VL53L0X7readRegEh>
    13b4:	48 2f       	mov	r20, r24
    13b6:	63 e8       	ldi	r22, 0x83	; 131
    13b8:	ce 01       	movw	r24, r28
    13ba:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
    13be:	41 e0       	ldi	r20, 0x01	; 1
    13c0:	6f ef       	ldi	r22, 0xFF	; 255
    13c2:	ce 01       	movw	r24, r28
    13c4:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x01);
    13c8:	41 e0       	ldi	r20, 0x01	; 1
    13ca:	60 e0       	ldi	r22, 0x00	; 0
    13cc:	ce 01       	movw	r24, r28
    13ce:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
    13d2:	40 e0       	ldi	r20, 0x00	; 0
    13d4:	6f ef       	ldi	r22, 0xFF	; 255
    13d6:	ce 01       	movw	r24, r28
    13d8:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
    13dc:	40 e0       	ldi	r20, 0x00	; 0
    13de:	60 e8       	ldi	r22, 0x80	; 128
    13e0:	ce 01       	movw	r24, r28
    13e2:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>

  return true;
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	01 c0       	rjmp	.+2      	; 0x13ec <_ZN7VL53L0X11getSpadInfoEPhPb+0x12e>
  writeReg(0x94, 0x6b);
  writeReg(0x83, 0x00);
  startTimeout();
  while (readReg(0x83) == 0x00)
  {
    if (checkTimeoutExpired()) { return false; }
    13ea:	80 e0       	ldi	r24, 0x00	; 0

  writeReg(0xFF, 0x00);
  writeReg(0x80, 0x00);

  return true;
}
    13ec:	df 91       	pop	r29
    13ee:	cf 91       	pop	r28
    13f0:	1f 91       	pop	r17
    13f2:	0f 91       	pop	r16
    13f4:	ff 90       	pop	r15
    13f6:	ef 90       	pop	r14
    13f8:	08 95       	ret

000013fa <_ZN7VL53L0X22getSequenceStepEnablesEPNS_19SequenceStepEnablesE>:

// Get sequence step enables
// based on VL53L0X_GetSequenceStepEnables()
void VL53L0X::getSequenceStepEnables(SequenceStepEnables * enables)
{
    13fa:	cf 93       	push	r28
    13fc:	df 93       	push	r29
    13fe:	eb 01       	movw	r28, r22
  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);
    1400:	61 e0       	ldi	r22, 0x01	; 1
    1402:	0e 94 b9 06 	call	0xd72	; 0xd72 <_ZN7VL53L0X7readRegEh>

  enables->tcc          = (sequence_config >> 4) & 0x1;
    1406:	84 fb       	bst	r24, 4
    1408:	99 27       	eor	r25, r25
    140a:	90 f9       	bld	r25, 0
    140c:	98 83       	st	Y, r25
  enables->dss          = (sequence_config >> 3) & 0x1;
    140e:	83 fb       	bst	r24, 3
    1410:	99 27       	eor	r25, r25
    1412:	90 f9       	bld	r25, 0
    1414:	9a 83       	std	Y+2, r25	; 0x02
  enables->msrc         = (sequence_config >> 2) & 0x1;
    1416:	82 fb       	bst	r24, 2
    1418:	99 27       	eor	r25, r25
    141a:	90 f9       	bld	r25, 0
    141c:	99 83       	std	Y+1, r25	; 0x01
  enables->pre_range    = (sequence_config >> 6) & 0x1;
    141e:	86 fb       	bst	r24, 6
    1420:	99 27       	eor	r25, r25
    1422:	90 f9       	bld	r25, 0
    1424:	9b 83       	std	Y+3, r25	; 0x03
  enables->final_range  = (sequence_config >> 7) & 0x1;
    1426:	98 2f       	mov	r25, r24
    1428:	99 1f       	adc	r25, r25
    142a:	99 27       	eor	r25, r25
    142c:	99 1f       	adc	r25, r25
    142e:	9c 83       	std	Y+4, r25	; 0x04
}
    1430:	df 91       	pop	r29
    1432:	cf 91       	pop	r28
    1434:	08 95       	ret

00001436 <_ZN7VL53L0X13decodeTimeoutEj>:
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
uint16_t VL53L0X::decodeTimeout(uint16_t reg_val)
{
  // format: "(LSByte * 2^MSByte) + 1"
  return (uint16_t)((reg_val & 0x00FF) <<
    1436:	9c 01       	movw	r18, r24
    1438:	33 27       	eor	r19, r19
    143a:	a9 01       	movw	r20, r18
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <_ZN7VL53L0X13decodeTimeoutEj+0xc>
    143e:	44 0f       	add	r20, r20
    1440:	55 1f       	adc	r21, r21
    1442:	9a 95       	dec	r25
    1444:	e2 f7       	brpl	.-8      	; 0x143e <_ZN7VL53L0X13decodeTimeoutEj+0x8>
    1446:	ca 01       	movw	r24, r20
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
}
    1448:	01 96       	adiw	r24, 0x01	; 1
    144a:	08 95       	ret

0000144c <_ZN7VL53L0X13encodeTimeoutEj>:
  // format: "(LSByte * 2^MSByte) + 1"

  uint32_t ls_byte = 0;
  uint16_t ms_byte = 0;

  if (timeout_mclks > 0)
    144c:	00 97       	sbiw	r24, 0x00	; 0
    144e:	11 f1       	breq	.+68     	; 0x1494 <_ZN7VL53L0X13encodeTimeoutEj+0x48>
  {
    ls_byte = timeout_mclks - 1;
    1450:	01 97       	sbiw	r24, 0x01	; 1
    1452:	a0 e0       	ldi	r26, 0x00	; 0
    1454:	b0 e0       	ldi	r27, 0x00	; 0

    while ((ls_byte & 0xFFFFFF00) > 0)
    1456:	ac 01       	movw	r20, r24
    1458:	bd 01       	movw	r22, r26
    145a:	44 27       	eor	r20, r20
    145c:	45 2b       	or	r20, r21
    145e:	46 2b       	or	r20, r22
    1460:	47 2b       	or	r20, r23
    1462:	81 f0       	breq	.+32     	; 0x1484 <_ZN7VL53L0X13encodeTimeoutEj+0x38>
    1464:	20 e0       	ldi	r18, 0x00	; 0
    1466:	30 e0       	ldi	r19, 0x00	; 0
    {
      ls_byte >>= 1;
    1468:	b6 95       	lsr	r27
    146a:	a7 95       	ror	r26
    146c:	97 95       	ror	r25
    146e:	87 95       	ror	r24
      ms_byte++;
    1470:	2f 5f       	subi	r18, 0xFF	; 255
    1472:	3f 4f       	sbci	r19, 0xFF	; 255

  if (timeout_mclks > 0)
  {
    ls_byte = timeout_mclks - 1;

    while ((ls_byte & 0xFFFFFF00) > 0)
    1474:	ac 01       	movw	r20, r24
    1476:	bd 01       	movw	r22, r26
    1478:	44 27       	eor	r20, r20
    147a:	45 2b       	or	r20, r21
    147c:	46 2b       	or	r20, r22
    147e:	47 2b       	or	r20, r23
    1480:	99 f7       	brne	.-26     	; 0x1468 <_ZN7VL53L0X13encodeTimeoutEj+0x1c>
    1482:	02 c0       	rjmp	.+4      	; 0x1488 <_ZN7VL53L0X13encodeTimeoutEj+0x3c>
uint16_t VL53L0X::encodeTimeout(uint16_t timeout_mclks)
{
  // format: "(LSByte * 2^MSByte) + 1"

  uint32_t ls_byte = 0;
  uint16_t ms_byte = 0;
    1484:	20 e0       	ldi	r18, 0x00	; 0
    1486:	30 e0       	ldi	r19, 0x00	; 0
    {
      ls_byte >>= 1;
      ms_byte++;
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
    1488:	99 27       	eor	r25, r25
    148a:	32 2f       	mov	r19, r18
    148c:	22 27       	eor	r18, r18
    148e:	82 2b       	or	r24, r18
    1490:	93 2b       	or	r25, r19
    1492:	08 95       	ret
  }
  else { return 0; }
    1494:	80 e0       	ldi	r24, 0x00	; 0
    1496:	90 e0       	ldi	r25, 0x00	; 0
}
    1498:	08 95       	ret

0000149a <_ZN7VL53L0X26timeoutMclksToMicrosecondsEjh>:

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t VL53L0X::timeoutMclksToMicroseconds(uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
    149a:	8f 92       	push	r8
    149c:	9f 92       	push	r9
    149e:	af 92       	push	r10
    14a0:	bf 92       	push	r11
    14a2:	cf 92       	push	r12
    14a4:	df 92       	push	r13
    14a6:	ef 92       	push	r14
    14a8:	ff 92       	push	r15
    14aa:	cf 93       	push	r28
    14ac:	df 93       	push	r29
    14ae:	ec 01       	movw	r28, r24
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
    14b0:	a6 2f       	mov	r26, r22
    14b2:	b0 e0       	ldi	r27, 0x00	; 0
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	3f e2       	ldi	r19, 0x2F	; 47
    14b8:	4a e3       	ldi	r20, 0x3A	; 58
    14ba:	50 e0       	ldi	r21, 0x00	; 0
    14bc:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <__muluhisi3>
    14c0:	6c 50       	subi	r22, 0x0C	; 12
    14c2:	7e 4f       	sbci	r23, 0xFE	; 254
    14c4:	8f 4f       	sbci	r24, 0xFF	; 255
    14c6:	9f 4f       	sbci	r25, 0xFF	; 255
    14c8:	0f 2e       	mov	r0, r31
    14ca:	f8 ee       	ldi	r31, 0xE8	; 232
    14cc:	cf 2e       	mov	r12, r31
    14ce:	f3 e0       	ldi	r31, 0x03	; 3
    14d0:	df 2e       	mov	r13, r31
    14d2:	e1 2c       	mov	r14, r1
    14d4:	f1 2c       	mov	r15, r1
    14d6:	f0 2d       	mov	r31, r0
    14d8:	a7 01       	movw	r20, r14
    14da:	96 01       	movw	r18, r12
    14dc:	0e 94 19 15 	call	0x2a32	; 0x2a32 <__udivmodsi4>

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
    14e0:	49 01       	movw	r8, r18
    14e2:	5a 01       	movw	r10, r20
    14e4:	b6 94       	lsr	r11
    14e6:	a7 94       	ror	r10
    14e8:	97 94       	ror	r9
    14ea:	87 94       	ror	r8
    14ec:	de 01       	movw	r26, r28
    14ee:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <__muluhisi3>
    14f2:	68 0d       	add	r22, r8
    14f4:	79 1d       	adc	r23, r9
    14f6:	8a 1d       	adc	r24, r10
    14f8:	9b 1d       	adc	r25, r11
    14fa:	a7 01       	movw	r20, r14
    14fc:	96 01       	movw	r18, r12
    14fe:	0e 94 19 15 	call	0x2a32	; 0x2a32 <__udivmodsi4>
}
    1502:	ca 01       	movw	r24, r20
    1504:	b9 01       	movw	r22, r18
    1506:	df 91       	pop	r29
    1508:	cf 91       	pop	r28
    150a:	ff 90       	pop	r15
    150c:	ef 90       	pop	r14
    150e:	df 90       	pop	r13
    1510:	cf 90       	pop	r12
    1512:	bf 90       	pop	r11
    1514:	af 90       	pop	r10
    1516:	9f 90       	pop	r9
    1518:	8f 90       	pop	r8
    151a:	08 95       	ret

0000151c <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE>:
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
    151c:	ef 92       	push	r14
    151e:	ff 92       	push	r15
    1520:	0f 93       	push	r16
    1522:	1f 93       	push	r17
    1524:	cf 93       	push	r28
    1526:	df 93       	push	r29
    1528:	8c 01       	movw	r16, r24
    152a:	7b 01       	movw	r14, r22
    152c:	ea 01       	movw	r28, r20
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
    152e:	60 e0       	ldi	r22, 0x00	; 0
    1530:	0e 94 c2 08 	call	0x1184	; 0x1184 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE>
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	99 83       	std	Y+1, r25	; 0x01
    1538:	88 83       	st	Y, r24

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
    153a:	66 e4       	ldi	r22, 0x46	; 70
    153c:	c8 01       	movw	r24, r16
    153e:	0e 94 b9 06 	call	0xd72	; 0xd72 <_ZN7VL53L0X7readRegEh>
    1542:	28 2f       	mov	r18, r24
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	c9 01       	movw	r24, r18
    1548:	01 96       	adiw	r24, 0x01	; 1
    154a:	9d 83       	std	Y+5, r25	; 0x05
    154c:	8c 83       	std	Y+4, r24	; 0x04
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
                               timeouts->pre_range_vcsel_period_pclks);
    154e:	68 81       	ld	r22, Y
    1550:	0e 94 4d 0a 	call	0x149a	; 0x149a <_ZN7VL53L0X26timeoutMclksToMicrosecondsEjh>
    1554:	6a 87       	std	Y+10, r22	; 0x0a
    1556:	7b 87       	std	Y+11, r23	; 0x0b
    1558:	8c 87       	std	Y+12, r24	; 0x0c
    155a:	9d 87       	std	Y+13, r25	; 0x0d

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
    155c:	61 e5       	ldi	r22, 0x51	; 81
    155e:	c8 01       	movw	r24, r16
    1560:	0e 94 19 07 	call	0xe32	; 0xe32 <_ZN7VL53L0X12readReg16BitEh>
    1564:	0e 94 1b 0a 	call	0x1436	; 0x1436 <_ZN7VL53L0X13decodeTimeoutEj>
    1568:	9f 83       	std	Y+7, r25	; 0x07
    156a:	8e 83       	std	Y+6, r24	; 0x06
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
                               timeouts->pre_range_vcsel_period_pclks);
    156c:	68 81       	ld	r22, Y
    156e:	0e 94 4d 0a 	call	0x149a	; 0x149a <_ZN7VL53L0X26timeoutMclksToMicrosecondsEjh>
    1572:	6e 87       	std	Y+14, r22	; 0x0e
    1574:	7f 87       	std	Y+15, r23	; 0x0f
    1576:	88 8b       	std	Y+16, r24	; 0x10
    1578:	99 8b       	std	Y+17, r25	; 0x11

  timeouts->final_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodFinalRange);
    157a:	61 e0       	ldi	r22, 0x01	; 1
    157c:	c8 01       	movw	r24, r16
    157e:	0e 94 c2 08 	call	0x1184	; 0x1184 <_ZN7VL53L0X19getVcselPulsePeriodENS_15vcselPeriodTypeE>
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	9b 83       	std	Y+3, r25	; 0x03
    1586:	8a 83       	std	Y+2, r24	; 0x02

  timeouts->final_range_mclks =
    decodeTimeout(readReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
    1588:	61 e7       	ldi	r22, 0x71	; 113
    158a:	c8 01       	movw	r24, r16
    158c:	0e 94 19 07 	call	0xe32	; 0xe32 <_ZN7VL53L0X12readReg16BitEh>
    1590:	0e 94 1b 0a 	call	0x1436	; 0x1436 <_ZN7VL53L0X13decodeTimeoutEj>
    1594:	99 87       	std	Y+9, r25	; 0x09
    1596:	88 87       	std	Y+8, r24	; 0x08

  if (enables->pre_range)
    1598:	f7 01       	movw	r30, r14
    159a:	23 81       	ldd	r18, Z+3	; 0x03
    159c:	22 23       	and	r18, r18
    159e:	31 f0       	breq	.+12     	; 0x15ac <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE+0x90>
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
    15a0:	2e 81       	ldd	r18, Y+6	; 0x06
    15a2:	3f 81       	ldd	r19, Y+7	; 0x07
    15a4:	82 1b       	sub	r24, r18
    15a6:	93 0b       	sbc	r25, r19
    15a8:	99 87       	std	Y+9, r25	; 0x09
    15aa:	88 87       	std	Y+8, r24	; 0x08
  }

  timeouts->final_range_us =
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
                               timeouts->final_range_vcsel_period_pclks);
    15ac:	6a 81       	ldd	r22, Y+2	; 0x02
    15ae:	88 85       	ldd	r24, Y+8	; 0x08
    15b0:	99 85       	ldd	r25, Y+9	; 0x09
    15b2:	0e 94 4d 0a 	call	0x149a	; 0x149a <_ZN7VL53L0X26timeoutMclksToMicrosecondsEjh>
    15b6:	6a 8b       	std	Y+18, r22	; 0x12
    15b8:	7b 8b       	std	Y+19, r23	; 0x13
    15ba:	8c 8b       	std	Y+20, r24	; 0x14
    15bc:	9d 8b       	std	Y+21, r25	; 0x15
}
    15be:	df 91       	pop	r29
    15c0:	cf 91       	pop	r28
    15c2:	1f 91       	pop	r17
    15c4:	0f 91       	pop	r16
    15c6:	ff 90       	pop	r15
    15c8:	ef 90       	pop	r14
    15ca:	08 95       	ret

000015cc <_ZN7VL53L0X26getMeasurementTimingBudgetEv>:

// Get the measurement timing budget in microseconds
// based on VL53L0X_get_measurement_timing_budget_micro_seconds()
// in us
uint32_t VL53L0X::getMeasurementTimingBudget(void)
{
    15cc:	cf 92       	push	r12
    15ce:	df 92       	push	r13
    15d0:	ef 92       	push	r14
    15d2:	ff 92       	push	r15
    15d4:	0f 93       	push	r16
    15d6:	1f 93       	push	r17
    15d8:	cf 93       	push	r28
    15da:	df 93       	push	r29
    15dc:	cd b7       	in	r28, 0x3d	; 61
    15de:	de b7       	in	r29, 0x3e	; 62
    15e0:	6b 97       	sbiw	r28, 0x1b	; 27
    15e2:	0f b6       	in	r0, 0x3f	; 63
    15e4:	f8 94       	cli
    15e6:	de bf       	out	0x3e, r29	; 62
    15e8:	0f be       	out	0x3f, r0	; 63
    15ea:	cd bf       	out	0x3d, r28	; 61
    15ec:	8c 01       	movw	r16, r24
  uint16_t const FinalRangeOverhead = 550;

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;

  getSequenceStepEnables(&enables);
    15ee:	be 01       	movw	r22, r28
    15f0:	69 5e       	subi	r22, 0xE9	; 233
    15f2:	7f 4f       	sbci	r23, 0xFF	; 255
    15f4:	0e 94 fd 09 	call	0x13fa	; 0x13fa <_ZN7VL53L0X22getSequenceStepEnablesEPNS_19SequenceStepEnablesE>
  getSequenceStepTimeouts(&enables, &timeouts);
    15f8:	ae 01       	movw	r20, r28
    15fa:	4f 5f       	subi	r20, 0xFF	; 255
    15fc:	5f 4f       	sbci	r21, 0xFF	; 255
    15fe:	be 01       	movw	r22, r28
    1600:	69 5e       	subi	r22, 0xE9	; 233
    1602:	7f 4f       	sbci	r23, 0xFF	; 255
    1604:	c8 01       	movw	r24, r16
    1606:	0e 94 8e 0a 	call	0x151c	; 0x151c <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE>

  if (enables.tcc)
    160a:	8f 89       	ldd	r24, Y+23	; 0x17
    160c:	88 23       	and	r24, r24
    160e:	59 f0       	breq	.+22     	; 0x1626 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x5a>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
    1610:	8b 85       	ldd	r24, Y+11	; 0x0b
    1612:	9c 85       	ldd	r25, Y+12	; 0x0c
    1614:	ad 85       	ldd	r26, Y+13	; 0x0d
    1616:	be 85       	ldd	r27, Y+14	; 0x0e
    1618:	bc 01       	movw	r22, r24
    161a:	cd 01       	movw	r24, r26
    161c:	6c 57       	subi	r22, 0x7C	; 124
    161e:	72 4f       	sbci	r23, 0xF2	; 242
    1620:	8f 4f       	sbci	r24, 0xFF	; 255
    1622:	9f 4f       	sbci	r25, 0xFF	; 255
    1624:	04 c0       	rjmp	.+8      	; 0x162e <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x62>
  uint16_t const DssOverhead        = 690;
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;
    1626:	66 e3       	ldi	r22, 0x36	; 54
    1628:	7b e0       	ldi	r23, 0x0B	; 11
    162a:	80 e0       	ldi	r24, 0x00	; 0
    162c:	90 e0       	ldi	r25, 0x00	; 0
  if (enables.tcc)
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
  }

  if (enables.dss)
    162e:	29 8d       	ldd	r18, Y+25	; 0x19
    1630:	22 23       	and	r18, r18
    1632:	99 f0       	breq	.+38     	; 0x165a <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x8e>
  {
    budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
    1634:	cb 84       	ldd	r12, Y+11	; 0x0b
    1636:	dc 84       	ldd	r13, Y+12	; 0x0c
    1638:	ed 84       	ldd	r14, Y+13	; 0x0d
    163a:	fe 84       	ldd	r15, Y+14	; 0x0e
    163c:	22 eb       	ldi	r18, 0xB2	; 178
    163e:	c2 0e       	add	r12, r18
    1640:	22 e0       	ldi	r18, 0x02	; 2
    1642:	d2 1e       	adc	r13, r18
    1644:	e1 1c       	adc	r14, r1
    1646:	f1 1c       	adc	r15, r1
    1648:	cc 0c       	add	r12, r12
    164a:	dd 1c       	adc	r13, r13
    164c:	ee 1c       	adc	r14, r14
    164e:	ff 1c       	adc	r15, r15
    1650:	6c 0d       	add	r22, r12
    1652:	7d 1d       	adc	r23, r13
    1654:	8e 1d       	adc	r24, r14
    1656:	9f 1d       	adc	r25, r15
    1658:	11 c0       	rjmp	.+34     	; 0x167c <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0xb0>
  }
  else if (enables.msrc)
    165a:	28 8d       	ldd	r18, Y+24	; 0x18
    165c:	22 23       	and	r18, r18
    165e:	71 f0       	breq	.+28     	; 0x167c <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0xb0>
    1660:	cb 84       	ldd	r12, Y+11	; 0x0b
    1662:	dc 84       	ldd	r13, Y+12	; 0x0c
    1664:	ed 84       	ldd	r14, Y+13	; 0x0d
    1666:	fe 84       	ldd	r15, Y+14	; 0x0e
    1668:	e4 e9       	ldi	r30, 0x94	; 148
    166a:	ce 0e       	add	r12, r30
    166c:	e2 e0       	ldi	r30, 0x02	; 2
    166e:	de 1e       	adc	r13, r30
    1670:	e1 1c       	adc	r14, r1
    1672:	f1 1c       	adc	r15, r1
  {
    budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
    1674:	6c 0d       	add	r22, r12
    1676:	7d 1d       	adc	r23, r13
    1678:	8e 1d       	adc	r24, r14
    167a:	9f 1d       	adc	r25, r15
  }

  if (enables.pre_range)
    167c:	2a 8d       	ldd	r18, Y+26	; 0x1a
    167e:	22 23       	and	r18, r18
    1680:	71 f0       	breq	.+28     	; 0x169e <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0xd2>
    1682:	cf 84       	ldd	r12, Y+15	; 0x0f
    1684:	d8 88       	ldd	r13, Y+16	; 0x10
    1686:	e9 88       	ldd	r14, Y+17	; 0x11
    1688:	fa 88       	ldd	r15, Y+18	; 0x12
    168a:	f4 e9       	ldi	r31, 0x94	; 148
    168c:	cf 0e       	add	r12, r31
    168e:	f2 e0       	ldi	r31, 0x02	; 2
    1690:	df 1e       	adc	r13, r31
    1692:	e1 1c       	adc	r14, r1
    1694:	f1 1c       	adc	r15, r1
  {
    budget_us += (timeouts.pre_range_us + PreRangeOverhead);
    1696:	6c 0d       	add	r22, r12
    1698:	7d 1d       	adc	r23, r13
    169a:	8e 1d       	adc	r24, r14
    169c:	9f 1d       	adc	r25, r15
  }

  if (enables.final_range)
    169e:	2b 8d       	ldd	r18, Y+27	; 0x1b
    16a0:	22 23       	and	r18, r18
    16a2:	71 f0       	breq	.+28     	; 0x16c0 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0xf4>
    16a4:	cb 88       	ldd	r12, Y+19	; 0x13
    16a6:	dc 88       	ldd	r13, Y+20	; 0x14
    16a8:	ed 88       	ldd	r14, Y+21	; 0x15
    16aa:	fe 88       	ldd	r15, Y+22	; 0x16
    16ac:	26 e2       	ldi	r18, 0x26	; 38
    16ae:	c2 0e       	add	r12, r18
    16b0:	22 e0       	ldi	r18, 0x02	; 2
    16b2:	d2 1e       	adc	r13, r18
    16b4:	e1 1c       	adc	r14, r1
    16b6:	f1 1c       	adc	r15, r1
  {
    budget_us += (timeouts.final_range_us + FinalRangeOverhead);
    16b8:	6c 0d       	add	r22, r12
    16ba:	7d 1d       	adc	r23, r13
    16bc:	8e 1d       	adc	r24, r14
    16be:	9f 1d       	adc	r25, r15
  }

  measurement_timing_budget_us = budget_us; // store for internal reuse
    16c0:	f8 01       	movw	r30, r16
    16c2:	60 87       	std	Z+8, r22	; 0x08
    16c4:	71 87       	std	Z+9, r23	; 0x09
    16c6:	82 87       	std	Z+10, r24	; 0x0a
    16c8:	93 87       	std	Z+11, r25	; 0x0b
  return budget_us;
}
    16ca:	6b 96       	adiw	r28, 0x1b	; 27
    16cc:	0f b6       	in	r0, 0x3f	; 63
    16ce:	f8 94       	cli
    16d0:	de bf       	out	0x3e, r29	; 62
    16d2:	0f be       	out	0x3f, r0	; 63
    16d4:	cd bf       	out	0x3d, r28	; 61
    16d6:	df 91       	pop	r29
    16d8:	cf 91       	pop	r28
    16da:	1f 91       	pop	r17
    16dc:	0f 91       	pop	r16
    16de:	ff 90       	pop	r15
    16e0:	ef 90       	pop	r14
    16e2:	df 90       	pop	r13
    16e4:	cf 90       	pop	r12
    16e6:	08 95       	ret

000016e8 <_ZN7VL53L0X26timeoutMicrosecondsToMclksEmh>:
}

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t VL53L0X::timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
    16e8:	4f 92       	push	r4
    16ea:	5f 92       	push	r5
    16ec:	6f 92       	push	r6
    16ee:	7f 92       	push	r7
    16f0:	8f 92       	push	r8
    16f2:	9f 92       	push	r9
    16f4:	af 92       	push	r10
    16f6:	bf 92       	push	r11
    16f8:	cf 92       	push	r12
    16fa:	df 92       	push	r13
    16fc:	ef 92       	push	r14
    16fe:	ff 92       	push	r15
    1700:	4b 01       	movw	r8, r22
    1702:	5c 01       	movw	r10, r24
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
    1704:	a4 2f       	mov	r26, r20
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	20 e0       	ldi	r18, 0x00	; 0
    170a:	3f e2       	ldi	r19, 0x2F	; 47
    170c:	4a e3       	ldi	r20, 0x3A	; 58
    170e:	50 e0       	ldi	r21, 0x00	; 0
    1710:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <__muluhisi3>
    1714:	6c 50       	subi	r22, 0x0C	; 12
    1716:	7e 4f       	sbci	r23, 0xFE	; 254
    1718:	8f 4f       	sbci	r24, 0xFF	; 255
    171a:	9f 4f       	sbci	r25, 0xFF	; 255
    171c:	28 ee       	ldi	r18, 0xE8	; 232
    171e:	33 e0       	ldi	r19, 0x03	; 3
    1720:	40 e0       	ldi	r20, 0x00	; 0
    1722:	50 e0       	ldi	r21, 0x00	; 0
    1724:	0e 94 19 15 	call	0x2a32	; 0x2a32 <__udivmodsi4>
    1728:	69 01       	movw	r12, r18
    172a:	7a 01       	movw	r14, r20

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
    172c:	29 01       	movw	r4, r18
    172e:	3a 01       	movw	r6, r20
    1730:	76 94       	lsr	r7
    1732:	67 94       	ror	r6
    1734:	57 94       	ror	r5
    1736:	47 94       	ror	r4
    1738:	a8 ee       	ldi	r26, 0xE8	; 232
    173a:	b3 e0       	ldi	r27, 0x03	; 3
    173c:	a5 01       	movw	r20, r10
    173e:	94 01       	movw	r18, r8
    1740:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <__muluhisi3>
    1744:	64 0d       	add	r22, r4
    1746:	75 1d       	adc	r23, r5
    1748:	86 1d       	adc	r24, r6
    174a:	97 1d       	adc	r25, r7
    174c:	a7 01       	movw	r20, r14
    174e:	96 01       	movw	r18, r12
    1750:	0e 94 19 15 	call	0x2a32	; 0x2a32 <__udivmodsi4>
}
    1754:	ca 01       	movw	r24, r20
    1756:	b9 01       	movw	r22, r18
    1758:	ff 90       	pop	r15
    175a:	ef 90       	pop	r14
    175c:	df 90       	pop	r13
    175e:	cf 90       	pop	r12
    1760:	bf 90       	pop	r11
    1762:	af 90       	pop	r10
    1764:	9f 90       	pop	r9
    1766:	8f 90       	pop	r8
    1768:	7f 90       	pop	r7
    176a:	6f 90       	pop	r6
    176c:	5f 90       	pop	r5
    176e:	4f 90       	pop	r4
    1770:	08 95       	ret

00001772 <_ZN7VL53L0X26setMeasurementTimingBudgetEm>:
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
bool VL53L0X::setMeasurementTimingBudget(uint32_t budget_us)
{
    1772:	4f 92       	push	r4
    1774:	5f 92       	push	r5
    1776:	6f 92       	push	r6
    1778:	7f 92       	push	r7
    177a:	af 92       	push	r10
    177c:	bf 92       	push	r11
    177e:	cf 92       	push	r12
    1780:	df 92       	push	r13
    1782:	ef 92       	push	r14
    1784:	ff 92       	push	r15
    1786:	0f 93       	push	r16
    1788:	1f 93       	push	r17
    178a:	cf 93       	push	r28
    178c:	df 93       	push	r29
    178e:	cd b7       	in	r28, 0x3d	; 61
    1790:	de b7       	in	r29, 0x3e	; 62
    1792:	6b 97       	sbiw	r28, 0x1b	; 27
    1794:	0f b6       	in	r0, 0x3f	; 63
    1796:	f8 94       	cli
    1798:	de bf       	out	0x3e, r29	; 62
    179a:	0f be       	out	0x3f, r0	; 63
    179c:	cd bf       	out	0x3d, r28	; 61
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }
    179e:	40 32       	cpi	r20, 0x20	; 32
    17a0:	2e e4       	ldi	r18, 0x4E	; 78
    17a2:	52 07       	cpc	r21, r18
    17a4:	61 05       	cpc	r22, r1
    17a6:	71 05       	cpc	r23, r1
    17a8:	08 f4       	brcc	.+2      	; 0x17ac <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x3a>
    17aa:	85 c0       	rjmp	.+266    	; 0x18b6 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x144>
    17ac:	2a 01       	movw	r4, r20
    17ae:	3b 01       	movw	r6, r22
    17b0:	5c 01       	movw	r10, r24

  uint32_t used_budget_us = StartOverhead + EndOverhead;

  getSequenceStepEnables(&enables);
    17b2:	be 01       	movw	r22, r28
    17b4:	69 5e       	subi	r22, 0xE9	; 233
    17b6:	7f 4f       	sbci	r23, 0xFF	; 255
    17b8:	0e 94 fd 09 	call	0x13fa	; 0x13fa <_ZN7VL53L0X22getSequenceStepEnablesEPNS_19SequenceStepEnablesE>
  getSequenceStepTimeouts(&enables, &timeouts);
    17bc:	ae 01       	movw	r20, r28
    17be:	4f 5f       	subi	r20, 0xFF	; 255
    17c0:	5f 4f       	sbci	r21, 0xFF	; 255
    17c2:	be 01       	movw	r22, r28
    17c4:	69 5e       	subi	r22, 0xE9	; 233
    17c6:	7f 4f       	sbci	r23, 0xFF	; 255
    17c8:	c5 01       	movw	r24, r10
    17ca:	0e 94 8e 0a 	call	0x151c	; 0x151c <_ZN7VL53L0X23getSequenceStepTimeoutsEPKNS_19SequenceStepEnablesEPNS_20SequenceStepTimeoutsE>

  if (enables.tcc)
    17ce:	8f 89       	ldd	r24, Y+23	; 0x17
    17d0:	88 23       	and	r24, r24
    17d2:	59 f0       	breq	.+22     	; 0x17ea <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x78>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
    17d4:	cb 84       	ldd	r12, Y+11	; 0x0b
    17d6:	dc 84       	ldd	r13, Y+12	; 0x0c
    17d8:	ed 84       	ldd	r14, Y+13	; 0x0d
    17da:	fe 84       	ldd	r15, Y+14	; 0x0e
    17dc:	86 e3       	ldi	r24, 0x36	; 54
    17de:	c8 0e       	add	r12, r24
    17e0:	8b e0       	ldi	r24, 0x0B	; 11
    17e2:	d8 1e       	adc	r13, r24
    17e4:	e1 1c       	adc	r14, r1
    17e6:	f1 1c       	adc	r15, r1
    17e8:	08 c0       	rjmp	.+16     	; 0x17fa <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x88>

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }

  uint32_t used_budget_us = StartOverhead + EndOverhead;
    17ea:	0f 2e       	mov	r0, r31
    17ec:	f8 ee       	ldi	r31, 0xE8	; 232
    17ee:	cf 2e       	mov	r12, r31
    17f0:	f8 e0       	ldi	r31, 0x08	; 8
    17f2:	df 2e       	mov	r13, r31
    17f4:	e1 2c       	mov	r14, r1
    17f6:	f1 2c       	mov	r15, r1
    17f8:	f0 2d       	mov	r31, r0
  if (enables.tcc)
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
  }

  if (enables.dss)
    17fa:	89 8d       	ldd	r24, Y+25	; 0x19
    17fc:	88 23       	and	r24, r24
    17fe:	89 f0       	breq	.+34     	; 0x1822 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0xb0>
  {
    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
    1800:	8b 85       	ldd	r24, Y+11	; 0x0b
    1802:	9c 85       	ldd	r25, Y+12	; 0x0c
    1804:	ad 85       	ldd	r26, Y+13	; 0x0d
    1806:	be 85       	ldd	r27, Y+14	; 0x0e
    1808:	8e 54       	subi	r24, 0x4E	; 78
    180a:	9d 4f       	sbci	r25, 0xFD	; 253
    180c:	af 4f       	sbci	r26, 0xFF	; 255
    180e:	bf 4f       	sbci	r27, 0xFF	; 255
    1810:	88 0f       	add	r24, r24
    1812:	99 1f       	adc	r25, r25
    1814:	aa 1f       	adc	r26, r26
    1816:	bb 1f       	adc	r27, r27
    1818:	c8 0e       	add	r12, r24
    181a:	d9 1e       	adc	r13, r25
    181c:	ea 1e       	adc	r14, r26
    181e:	fb 1e       	adc	r15, r27
    1820:	0f c0       	rjmp	.+30     	; 0x1840 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0xce>
  }
  else if (enables.msrc)
    1822:	88 8d       	ldd	r24, Y+24	; 0x18
    1824:	88 23       	and	r24, r24
    1826:	61 f0       	breq	.+24     	; 0x1840 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0xce>
    1828:	8b 85       	ldd	r24, Y+11	; 0x0b
    182a:	9c 85       	ldd	r25, Y+12	; 0x0c
    182c:	ad 85       	ldd	r26, Y+13	; 0x0d
    182e:	be 85       	ldd	r27, Y+14	; 0x0e
    1830:	8c 56       	subi	r24, 0x6C	; 108
    1832:	9d 4f       	sbci	r25, 0xFD	; 253
    1834:	af 4f       	sbci	r26, 0xFF	; 255
    1836:	bf 4f       	sbci	r27, 0xFF	; 255
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
    1838:	c8 0e       	add	r12, r24
    183a:	d9 1e       	adc	r13, r25
    183c:	ea 1e       	adc	r14, r26
    183e:	fb 1e       	adc	r15, r27
  }

  if (enables.pre_range)
    1840:	0a 8d       	ldd	r16, Y+26	; 0x1a
    1842:	00 23       	and	r16, r16
    1844:	61 f0       	breq	.+24     	; 0x185e <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0xec>
    1846:	8f 85       	ldd	r24, Y+15	; 0x0f
    1848:	98 89       	ldd	r25, Y+16	; 0x10
    184a:	a9 89       	ldd	r26, Y+17	; 0x11
    184c:	ba 89       	ldd	r27, Y+18	; 0x12
    184e:	8c 56       	subi	r24, 0x6C	; 108
    1850:	9d 4f       	sbci	r25, 0xFD	; 253
    1852:	af 4f       	sbci	r26, 0xFF	; 255
    1854:	bf 4f       	sbci	r27, 0xFF	; 255
  {
    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
    1856:	c8 0e       	add	r12, r24
    1858:	d9 1e       	adc	r13, r25
    185a:	ea 1e       	adc	r14, r26
    185c:	fb 1e       	adc	r15, r27
  }

  if (enables.final_range)
    185e:	1b 8d       	ldd	r17, Y+27	; 0x1b
    1860:	11 23       	and	r17, r17
    1862:	59 f1       	breq	.+86     	; 0x18ba <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x148>
  {
    used_budget_us += FinalRangeOverhead;
    1864:	e6 e2       	ldi	r30, 0x26	; 38
    1866:	ce 0e       	add	r12, r30
    1868:	e2 e0       	ldi	r30, 0x02	; 2
    186a:	de 1e       	adc	r13, r30
    186c:	e1 1c       	adc	r14, r1
    186e:	f1 1c       	adc	r15, r1
    // budget and the sum of all other timeouts within the sequence.
    // If there is no room for the final range timeout, then an error
    // will be set. Otherwise the remaining time will be applied to
    // the final range."

    if (used_budget_us > budget_us)
    1870:	4c 14       	cp	r4, r12
    1872:	5d 04       	cpc	r5, r13
    1874:	6e 04       	cpc	r6, r14
    1876:	7f 04       	cpc	r7, r15
    1878:	10 f1       	brcs	.+68     	; 0x18be <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x14c>
    {
      // "Requested timeout too big."
      return false;
    }

    uint32_t final_range_timeout_us = budget_us - used_budget_us;
    187a:	c3 01       	movw	r24, r6
    187c:	b2 01       	movw	r22, r4
    187e:	6c 19       	sub	r22, r12
    1880:	7d 09       	sbc	r23, r13
    1882:	8e 09       	sbc	r24, r14
    1884:	9f 09       	sbc	r25, r15
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint16_t final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(final_range_timeout_us,
                                 timeouts.final_range_vcsel_period_pclks);
    1886:	4b 81       	ldd	r20, Y+3	; 0x03
    1888:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <_ZN7VL53L0X26timeoutMicrosecondsToMclksEmh>
    188c:	9b 01       	movw	r18, r22

    if (enables.pre_range)
    188e:	00 23       	and	r16, r16
    1890:	21 f0       	breq	.+8      	; 0x189a <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x128>
    {
      final_range_timeout_mclks += timeouts.pre_range_mclks;
    1892:	2f 81       	ldd	r18, Y+7	; 0x07
    1894:	38 85       	ldd	r19, Y+8	; 0x08
    1896:	26 0f       	add	r18, r22
    1898:	37 1f       	adc	r19, r23
    }

    writeReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
      encodeTimeout(final_range_timeout_mclks));
    189a:	c9 01       	movw	r24, r18
    189c:	0e 94 26 0a 	call	0x144c	; 0x144c <_ZN7VL53L0X13encodeTimeoutEj>
    18a0:	ac 01       	movw	r20, r24
    18a2:	61 e7       	ldi	r22, 0x71	; 113
    18a4:	c5 01       	movw	r24, r10
    18a6:	0e 94 e7 05 	call	0xbce	; 0xbce <_ZN7VL53L0X13writeReg16BitEhj>

    // set_sequence_step_timeout() end

    measurement_timing_budget_us = budget_us; // store for internal reuse
    18aa:	f5 01       	movw	r30, r10
    18ac:	40 86       	std	Z+8, r4	; 0x08
    18ae:	51 86       	std	Z+9, r5	; 0x09
    18b0:	62 86       	std	Z+10, r6	; 0x0a
    18b2:	73 86       	std	Z+11, r7	; 0x0b
    18b4:	05 c0       	rjmp	.+10     	; 0x18c0 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x14e>
  uint16_t const PreRangeOverhead   = 660;
  uint16_t const FinalRangeOverhead = 550;

  uint32_t const MinTimingBudget = 20000;

  if (budget_us < MinTimingBudget) { return false; }
    18b6:	10 e0       	ldi	r17, 0x00	; 0
    18b8:	03 c0       	rjmp	.+6      	; 0x18c0 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x14e>

    // set_sequence_step_timeout() end

    measurement_timing_budget_us = budget_us; // store for internal reuse
  }
  return true;
    18ba:	11 e0       	ldi	r17, 0x01	; 1
    18bc:	01 c0       	rjmp	.+2      	; 0x18c0 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x14e>
    // the final range."

    if (used_budget_us > budget_us)
    {
      // "Requested timeout too big."
      return false;
    18be:	10 e0       	ldi	r17, 0x00	; 0
    // set_sequence_step_timeout() end

    measurement_timing_budget_us = budget_us; // store for internal reuse
  }
  return true;
}
    18c0:	81 2f       	mov	r24, r17
    18c2:	6b 96       	adiw	r28, 0x1b	; 27
    18c4:	0f b6       	in	r0, 0x3f	; 63
    18c6:	f8 94       	cli
    18c8:	de bf       	out	0x3e, r29	; 62
    18ca:	0f be       	out	0x3f, r0	; 63
    18cc:	cd bf       	out	0x3d, r28	; 61
    18ce:	df 91       	pop	r29
    18d0:	cf 91       	pop	r28
    18d2:	1f 91       	pop	r17
    18d4:	0f 91       	pop	r16
    18d6:	ff 90       	pop	r15
    18d8:	ef 90       	pop	r14
    18da:	df 90       	pop	r13
    18dc:	cf 90       	pop	r12
    18de:	bf 90       	pop	r11
    18e0:	af 90       	pop	r10
    18e2:	7f 90       	pop	r7
    18e4:	6f 90       	pop	r6
    18e6:	5f 90       	pop	r5
    18e8:	4f 90       	pop	r4
    18ea:	08 95       	ret

000018ec <_ZN7VL53L0X27performSingleRefCalibrationEh>:
}


// based on VL53L0X_perform_single_ref_calibration()
bool VL53L0X::performSingleRefCalibration(uint8_t vhv_init_byte)
{
    18ec:	cf 93       	push	r28
    18ee:	df 93       	push	r29
    18f0:	ec 01       	movw	r28, r24
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
    18f2:	46 2f       	mov	r20, r22
    18f4:	41 60       	ori	r20, 0x01	; 1
    18f6:	60 e0       	ldi	r22, 0x00	; 0
    18f8:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>

  startTimeout();
    18fc:	0e 94 1e 02 	call	0x43c	; 0x43c <_Z6millisv>
    1900:	7e 83       	std	Y+6, r23	; 0x06
    1902:	6d 83       	std	Y+5, r22	; 0x05
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
    1904:	0f c0       	rjmp	.+30     	; 0x1924 <_ZN7VL53L0X27performSingleRefCalibrationEh+0x38>
  {
    if (checkTimeoutExpired()) { return false; }
    1906:	8a 81       	ldd	r24, Y+2	; 0x02
    1908:	9b 81       	ldd	r25, Y+3	; 0x03
    190a:	89 2b       	or	r24, r25
    190c:	59 f0       	breq	.+22     	; 0x1924 <_ZN7VL53L0X27performSingleRefCalibrationEh+0x38>
    190e:	0e 94 1e 02 	call	0x43c	; 0x43c <_Z6millisv>
    1912:	2d 81       	ldd	r18, Y+5	; 0x05
    1914:	3e 81       	ldd	r19, Y+6	; 0x06
    1916:	62 1b       	sub	r22, r18
    1918:	73 0b       	sbc	r23, r19
    191a:	8a 81       	ldd	r24, Y+2	; 0x02
    191c:	9b 81       	ldd	r25, Y+3	; 0x03
    191e:	86 17       	cp	r24, r22
    1920:	97 07       	cpc	r25, r23
    1922:	90 f0       	brcs	.+36     	; 0x1948 <_ZN7VL53L0X27performSingleRefCalibrationEh+0x5c>
bool VL53L0X::performSingleRefCalibration(uint8_t vhv_init_byte)
{
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP

  startTimeout();
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
    1924:	63 e1       	ldi	r22, 0x13	; 19
    1926:	ce 01       	movw	r24, r28
    1928:	0e 94 b9 06 	call	0xd72	; 0xd72 <_ZN7VL53L0X7readRegEh>
    192c:	87 70       	andi	r24, 0x07	; 7
    192e:	59 f3       	breq	.-42     	; 0x1906 <_ZN7VL53L0X27performSingleRefCalibrationEh+0x1a>
  {
    if (checkTimeoutExpired()) { return false; }
  }

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
    1930:	41 e0       	ldi	r20, 0x01	; 1
    1932:	6b e0       	ldi	r22, 0x0B	; 11
    1934:	ce 01       	movw	r24, r28
    1936:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>

  writeReg(SYSRANGE_START, 0x00);
    193a:	40 e0       	ldi	r20, 0x00	; 0
    193c:	60 e0       	ldi	r22, 0x00	; 0
    193e:	ce 01       	movw	r24, r28
    1940:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>

  return true;
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	01 c0       	rjmp	.+2      	; 0x194a <_ZN7VL53L0X27performSingleRefCalibrationEh+0x5e>
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP

  startTimeout();
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
  {
    if (checkTimeoutExpired()) { return false; }
    1948:	80 e0       	ldi	r24, 0x00	; 0
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);

  writeReg(SYSRANGE_START, 0x00);

  return true;
}
    194a:	df 91       	pop	r29
    194c:	cf 91       	pop	r28
    194e:	08 95       	ret

00001950 <_ZN7VL53L0X4initEb>:
// is performed by ST on the bare modules; it seems like that should work well
// enough unless a cover glass is added.
// If io_2v8 (optional) is true or not given, the sensor is configured for 2V8
// mode.
bool VL53L0X::init(bool io_2v8)
{
    1950:	ff 92       	push	r15
    1952:	0f 93       	push	r16
    1954:	1f 93       	push	r17
    1956:	cf 93       	push	r28
    1958:	df 93       	push	r29
    195a:	cd b7       	in	r28, 0x3d	; 61
    195c:	de b7       	in	r29, 0x3e	; 62
    195e:	28 97       	sbiw	r28, 0x08	; 8
    1960:	0f b6       	in	r0, 0x3f	; 63
    1962:	f8 94       	cli
    1964:	de bf       	out	0x3e, r29	; 62
    1966:	0f be       	out	0x3f, r0	; 63
    1968:	cd bf       	out	0x3d, r28	; 61
    196a:	8c 01       	movw	r16, r24
  // VL53L0X_DataInit() begin

  // sensor uses 1V8 mode for I/O by default; switch to 2V8 mode if necessary
  if (io_2v8)
    196c:	66 23       	and	r22, r22
    196e:	49 f0       	breq	.+18     	; 0x1982 <_ZN7VL53L0X4initEb+0x32>
  {
    writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
      readReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01); // set bit 0
    1970:	69 e8       	ldi	r22, 0x89	; 137
    1972:	0e 94 b9 06 	call	0xd72	; 0xd72 <_ZN7VL53L0X7readRegEh>
    1976:	48 2f       	mov	r20, r24
    1978:	41 60       	ori	r20, 0x01	; 1
    197a:	69 e8       	ldi	r22, 0x89	; 137
    197c:	c8 01       	movw	r24, r16
    197e:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  }

  // "Set I2C standard mode"
  writeReg(0x88, 0x00);
    1982:	40 e0       	ldi	r20, 0x00	; 0
    1984:	68 e8       	ldi	r22, 0x88	; 136
    1986:	c8 01       	movw	r24, r16
    1988:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x80, 0x01);
    198c:	41 e0       	ldi	r20, 0x01	; 1
    198e:	60 e8       	ldi	r22, 0x80	; 128
    1990:	c8 01       	movw	r24, r16
    1992:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x01);
    1996:	41 e0       	ldi	r20, 0x01	; 1
    1998:	6f ef       	ldi	r22, 0xFF	; 255
    199a:	c8 01       	movw	r24, r16
    199c:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
    19a0:	40 e0       	ldi	r20, 0x00	; 0
    19a2:	60 e0       	ldi	r22, 0x00	; 0
    19a4:	c8 01       	movw	r24, r16
    19a6:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  stop_variable = readReg(0x91);
    19aa:	61 e9       	ldi	r22, 0x91	; 145
    19ac:	c8 01       	movw	r24, r16
    19ae:	0e 94 b9 06 	call	0xd72	; 0xd72 <_ZN7VL53L0X7readRegEh>
    19b2:	f8 01       	movw	r30, r16
    19b4:	87 83       	std	Z+7, r24	; 0x07
  writeReg(0x00, 0x01);
    19b6:	41 e0       	ldi	r20, 0x01	; 1
    19b8:	60 e0       	ldi	r22, 0x00	; 0
    19ba:	c8 01       	movw	r24, r16
    19bc:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
    19c0:	40 e0       	ldi	r20, 0x00	; 0
    19c2:	6f ef       	ldi	r22, 0xFF	; 255
    19c4:	c8 01       	movw	r24, r16
    19c6:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
    19ca:	40 e0       	ldi	r20, 0x00	; 0
    19cc:	60 e8       	ldi	r22, 0x80	; 128
    19ce:	c8 01       	movw	r24, r16
    19d0:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>

  // disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(MSRC_CONFIG_CONTROL, readReg(MSRC_CONFIG_CONTROL) | 0x12);
    19d4:	60 e6       	ldi	r22, 0x60	; 96
    19d6:	c8 01       	movw	r24, r16
    19d8:	0e 94 b9 06 	call	0xd72	; 0xd72 <_ZN7VL53L0X7readRegEh>
    19dc:	48 2f       	mov	r20, r24
    19de:	42 61       	ori	r20, 0x12	; 18
    19e0:	60 e6       	ldi	r22, 0x60	; 96
    19e2:	c8 01       	movw	r24, r16
    19e4:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>

  // set final range signal rate limit to 0.25 MCPS (million counts per second)
  setSignalRateLimit(0.25);
    19e8:	40 e0       	ldi	r20, 0x00	; 0
    19ea:	50 e0       	ldi	r21, 0x00	; 0
    19ec:	60 e8       	ldi	r22, 0x80	; 128
    19ee:	7e e3       	ldi	r23, 0x3E	; 62
    19f0:	c8 01       	movw	r24, r16
    19f2:	0e 94 8b 08 	call	0x1116	; 0x1116 <_ZN7VL53L0X18setSignalRateLimitEf>

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
    19f6:	4f ef       	ldi	r20, 0xFF	; 255
    19f8:	61 e0       	ldi	r22, 0x01	; 1
    19fa:	c8 01       	movw	r24, r16
    19fc:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>

  // VL53L0X_StaticInit() begin

  uint8_t spad_count;
  bool spad_type_is_aperture;
  if (!getSpadInfo(&spad_count, &spad_type_is_aperture)) { return false; }
    1a00:	ae 01       	movw	r20, r28
    1a02:	49 5f       	subi	r20, 0xF9	; 249
    1a04:	5f 4f       	sbci	r21, 0xFF	; 255
    1a06:	be 01       	movw	r22, r28
    1a08:	68 5f       	subi	r22, 0xF8	; 248
    1a0a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a0c:	c8 01       	movw	r24, r16
    1a0e:	0e 94 5f 09 	call	0x12be	; 0x12be <_ZN7VL53L0X11getSpadInfoEPhPb>
    1a12:	f8 2e       	mov	r15, r24
    1a14:	88 23       	and	r24, r24
    1a16:	09 f4       	brne	.+2      	; 0x1a1a <_ZN7VL53L0X4initEb+0xca>
    1a18:	3e c2       	rjmp	.+1148   	; 0x1e96 <_ZN7VL53L0X4initEb+0x546>

  // The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
  uint8_t ref_spad_map[6];
  readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
    1a1a:	26 e0       	ldi	r18, 0x06	; 6
    1a1c:	ae 01       	movw	r20, r28
    1a1e:	4f 5f       	subi	r20, 0xFF	; 255
    1a20:	5f 4f       	sbci	r21, 0xFF	; 255
    1a22:	60 eb       	ldi	r22, 0xB0	; 176
    1a24:	c8 01       	movw	r24, r16
    1a26:	0e 94 ed 07 	call	0xfda	; 0xfda <_ZN7VL53L0X9readMultiEhPhh>

  // -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)

  writeReg(0xFF, 0x01);
    1a2a:	41 e0       	ldi	r20, 0x01	; 1
    1a2c:	6f ef       	ldi	r22, 0xFF	; 255
    1a2e:	c8 01       	movw	r24, r16
    1a30:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
    1a34:	40 e0       	ldi	r20, 0x00	; 0
    1a36:	6f e4       	ldi	r22, 0x4F	; 79
    1a38:	c8 01       	movw	r24, r16
    1a3a:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
    1a3e:	4c e2       	ldi	r20, 0x2C	; 44
    1a40:	6e e4       	ldi	r22, 0x4E	; 78
    1a42:	c8 01       	movw	r24, r16
    1a44:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
    1a48:	40 e0       	ldi	r20, 0x00	; 0
    1a4a:	6f ef       	ldi	r22, 0xFF	; 255
    1a4c:	c8 01       	movw	r24, r16
    1a4e:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
    1a52:	44 eb       	ldi	r20, 0xB4	; 180
    1a54:	66 eb       	ldi	r22, 0xB6	; 182
    1a56:	c8 01       	movw	r24, r16
    1a58:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
    1a5c:	8f 81       	ldd	r24, Y+7	; 0x07
    1a5e:	81 11       	cpse	r24, r1
    1a60:	02 c0       	rjmp	.+4      	; 0x1a66 <_ZN7VL53L0X4initEb+0x116>
    1a62:	60 e0       	ldi	r22, 0x00	; 0
    1a64:	01 c0       	rjmp	.+2      	; 0x1a68 <_ZN7VL53L0X4initEb+0x118>
    1a66:	6c e0       	ldi	r22, 0x0C	; 12
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
    1a68:	a8 85       	ldd	r26, Y+8	; 0x08
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
  writeReg(0xFF, 0x00);
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;
    1a6c:	70 e0       	ldi	r23, 0x00	; 0
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
    1a6e:	41 e0       	ldi	r20, 0x01	; 1
    1a70:	50 e0       	ldi	r21, 0x00	; 0
  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
    1a72:	96 17       	cp	r25, r22
    1a74:	10 f0       	brcs	.+4      	; 0x1a7a <_ZN7VL53L0X4initEb+0x12a>
    1a76:	7a 13       	cpse	r23, r26
    1a78:	18 c0       	rjmp	.+48     	; 0x1aaa <_ZN7VL53L0X4initEb+0x15a>
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
    1a7a:	89 2f       	mov	r24, r25
    1a7c:	86 95       	lsr	r24
    1a7e:	86 95       	lsr	r24
    1a80:	86 95       	lsr	r24
    1a82:	e1 e0       	ldi	r30, 0x01	; 1
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	ec 0f       	add	r30, r28
    1a88:	fd 1f       	adc	r31, r29
    1a8a:	e8 0f       	add	r30, r24
    1a8c:	f1 1d       	adc	r31, r1
    1a8e:	89 2f       	mov	r24, r25
    1a90:	87 70       	andi	r24, 0x07	; 7
    1a92:	9a 01       	movw	r18, r20
    1a94:	02 c0       	rjmp	.+4      	; 0x1a9a <_ZN7VL53L0X4initEb+0x14a>
    1a96:	22 0f       	add	r18, r18
    1a98:	33 1f       	adc	r19, r19
    1a9a:	8a 95       	dec	r24
    1a9c:	e2 f7       	brpl	.-8      	; 0x1a96 <_ZN7VL53L0X4initEb+0x146>
    1a9e:	82 2f       	mov	r24, r18
    1aa0:	80 95       	com	r24
    1aa2:	20 81       	ld	r18, Z
    1aa4:	82 23       	and	r24, r18
    1aa6:	80 83       	st	Z, r24
    1aa8:	15 c0       	rjmp	.+42     	; 0x1ad4 <_ZN7VL53L0X4initEb+0x184>
    }
    else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
    1aaa:	89 2f       	mov	r24, r25
    1aac:	86 95       	lsr	r24
    1aae:	86 95       	lsr	r24
    1ab0:	86 95       	lsr	r24
    1ab2:	e1 e0       	ldi	r30, 0x01	; 1
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	ec 0f       	add	r30, r28
    1ab8:	fd 1f       	adc	r31, r29
    1aba:	e8 0f       	add	r30, r24
    1abc:	f1 1d       	adc	r31, r1
    1abe:	20 81       	ld	r18, Z
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	89 2f       	mov	r24, r25
    1ac4:	87 70       	andi	r24, 0x07	; 7
    1ac6:	02 c0       	rjmp	.+4      	; 0x1acc <_ZN7VL53L0X4initEb+0x17c>
    1ac8:	35 95       	asr	r19
    1aca:	27 95       	ror	r18
    1acc:	8a 95       	dec	r24
    1ace:	e2 f7       	brpl	.-8      	; 0x1ac8 <_ZN7VL53L0X4initEb+0x178>
    1ad0:	20 fd       	sbrc	r18, 0
    {
      spads_enabled++;
    1ad2:	7f 5f       	subi	r23, 0xFF	; 255
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
  uint8_t spads_enabled = 0;

  for (uint8_t i = 0; i < 48; i++)
    1ad4:	9f 5f       	subi	r25, 0xFF	; 255
    1ad6:	90 33       	cpi	r25, 0x30	; 48
    1ad8:	61 f6       	brne	.-104    	; 0x1a72 <_ZN7VL53L0X4initEb+0x122>
    {
      spads_enabled++;
    }
  }

  writeMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
    1ada:	26 e0       	ldi	r18, 0x06	; 6
    1adc:	ae 01       	movw	r20, r28
    1ade:	4f 5f       	subi	r20, 0xFF	; 255
    1ae0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ae2:	60 eb       	ldi	r22, 0xB0	; 176
    1ae4:	c8 01       	movw	r24, r16
    1ae6:	0e 94 95 07 	call	0xf2a	; 0xf2a <_ZN7VL53L0X10writeMultiEhPKhh>
  // -- VL53L0X_set_reference_spads() end

  // -- VL53L0X_load_tuning_settings() begin
  // DefaultTuningSettings from vl53l0x_tuning.h

  writeReg(0xFF, 0x01);
    1aea:	41 e0       	ldi	r20, 0x01	; 1
    1aec:	6f ef       	ldi	r22, 0xFF	; 255
    1aee:	c8 01       	movw	r24, r16
    1af0:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x00);
    1af4:	40 e0       	ldi	r20, 0x00	; 0
    1af6:	60 e0       	ldi	r22, 0x00	; 0
    1af8:	c8 01       	movw	r24, r16
    1afa:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
    1afe:	40 e0       	ldi	r20, 0x00	; 0
    1b00:	6f ef       	ldi	r22, 0xFF	; 255
    1b02:	c8 01       	movw	r24, r16
    1b04:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x09, 0x00);
    1b08:	40 e0       	ldi	r20, 0x00	; 0
    1b0a:	69 e0       	ldi	r22, 0x09	; 9
    1b0c:	c8 01       	movw	r24, r16
    1b0e:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x10, 0x00);
    1b12:	40 e0       	ldi	r20, 0x00	; 0
    1b14:	60 e1       	ldi	r22, 0x10	; 16
    1b16:	c8 01       	movw	r24, r16
    1b18:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x11, 0x00);
    1b1c:	40 e0       	ldi	r20, 0x00	; 0
    1b1e:	61 e1       	ldi	r22, 0x11	; 17
    1b20:	c8 01       	movw	r24, r16
    1b22:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0x24, 0x01);
    1b26:	41 e0       	ldi	r20, 0x01	; 1
    1b28:	64 e2       	ldi	r22, 0x24	; 36
    1b2a:	c8 01       	movw	r24, r16
    1b2c:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x25, 0xFF);
    1b30:	4f ef       	ldi	r20, 0xFF	; 255
    1b32:	65 e2       	ldi	r22, 0x25	; 37
    1b34:	c8 01       	movw	r24, r16
    1b36:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x75, 0x00);
    1b3a:	40 e0       	ldi	r20, 0x00	; 0
    1b3c:	65 e7       	ldi	r22, 0x75	; 117
    1b3e:	c8 01       	movw	r24, r16
    1b40:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
    1b44:	41 e0       	ldi	r20, 0x01	; 1
    1b46:	6f ef       	ldi	r22, 0xFF	; 255
    1b48:	c8 01       	movw	r24, r16
    1b4a:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4E, 0x2C);
    1b4e:	4c e2       	ldi	r20, 0x2C	; 44
    1b50:	6e e4       	ldi	r22, 0x4E	; 78
    1b52:	c8 01       	movw	r24, r16
    1b54:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x48, 0x00);
    1b58:	40 e0       	ldi	r20, 0x00	; 0
    1b5a:	68 e4       	ldi	r22, 0x48	; 72
    1b5c:	c8 01       	movw	r24, r16
    1b5e:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x30, 0x20);
    1b62:	40 e2       	ldi	r20, 0x20	; 32
    1b64:	60 e3       	ldi	r22, 0x30	; 48
    1b66:	c8 01       	movw	r24, r16
    1b68:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
    1b6c:	40 e0       	ldi	r20, 0x00	; 0
    1b6e:	6f ef       	ldi	r22, 0xFF	; 255
    1b70:	c8 01       	movw	r24, r16
    1b72:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x30, 0x09);
    1b76:	49 e0       	ldi	r20, 0x09	; 9
    1b78:	60 e3       	ldi	r22, 0x30	; 48
    1b7a:	c8 01       	movw	r24, r16
    1b7c:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x54, 0x00);
    1b80:	40 e0       	ldi	r20, 0x00	; 0
    1b82:	64 e5       	ldi	r22, 0x54	; 84
    1b84:	c8 01       	movw	r24, r16
    1b86:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x31, 0x04);
    1b8a:	44 e0       	ldi	r20, 0x04	; 4
    1b8c:	61 e3       	ldi	r22, 0x31	; 49
    1b8e:	c8 01       	movw	r24, r16
    1b90:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x32, 0x03);
    1b94:	43 e0       	ldi	r20, 0x03	; 3
    1b96:	62 e3       	ldi	r22, 0x32	; 50
    1b98:	c8 01       	movw	r24, r16
    1b9a:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x40, 0x83);
    1b9e:	43 e8       	ldi	r20, 0x83	; 131
    1ba0:	60 e4       	ldi	r22, 0x40	; 64
    1ba2:	c8 01       	movw	r24, r16
    1ba4:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x46, 0x25);
    1ba8:	45 e2       	ldi	r20, 0x25	; 37
    1baa:	66 e4       	ldi	r22, 0x46	; 70
    1bac:	c8 01       	movw	r24, r16
    1bae:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x60, 0x00);
    1bb2:	40 e0       	ldi	r20, 0x00	; 0
    1bb4:	60 e6       	ldi	r22, 0x60	; 96
    1bb6:	c8 01       	movw	r24, r16
    1bb8:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x27, 0x00);
    1bbc:	40 e0       	ldi	r20, 0x00	; 0
    1bbe:	67 e2       	ldi	r22, 0x27	; 39
    1bc0:	c8 01       	movw	r24, r16
    1bc2:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x50, 0x06);
    1bc6:	46 e0       	ldi	r20, 0x06	; 6
    1bc8:	60 e5       	ldi	r22, 0x50	; 80
    1bca:	c8 01       	movw	r24, r16
    1bcc:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x51, 0x00);
    1bd0:	40 e0       	ldi	r20, 0x00	; 0
    1bd2:	61 e5       	ldi	r22, 0x51	; 81
    1bd4:	c8 01       	movw	r24, r16
    1bd6:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x52, 0x96);
    1bda:	46 e9       	ldi	r20, 0x96	; 150
    1bdc:	62 e5       	ldi	r22, 0x52	; 82
    1bde:	c8 01       	movw	r24, r16
    1be0:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x56, 0x08);
    1be4:	48 e0       	ldi	r20, 0x08	; 8
    1be6:	66 e5       	ldi	r22, 0x56	; 86
    1be8:	c8 01       	movw	r24, r16
    1bea:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x57, 0x30);
    1bee:	40 e3       	ldi	r20, 0x30	; 48
    1bf0:	67 e5       	ldi	r22, 0x57	; 87
    1bf2:	c8 01       	movw	r24, r16
    1bf4:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x61, 0x00);
    1bf8:	40 e0       	ldi	r20, 0x00	; 0
    1bfa:	61 e6       	ldi	r22, 0x61	; 97
    1bfc:	c8 01       	movw	r24, r16
    1bfe:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x62, 0x00);
    1c02:	40 e0       	ldi	r20, 0x00	; 0
    1c04:	62 e6       	ldi	r22, 0x62	; 98
    1c06:	c8 01       	movw	r24, r16
    1c08:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x64, 0x00);
    1c0c:	40 e0       	ldi	r20, 0x00	; 0
    1c0e:	64 e6       	ldi	r22, 0x64	; 100
    1c10:	c8 01       	movw	r24, r16
    1c12:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x65, 0x00);
    1c16:	40 e0       	ldi	r20, 0x00	; 0
    1c18:	65 e6       	ldi	r22, 0x65	; 101
    1c1a:	c8 01       	movw	r24, r16
    1c1c:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x66, 0xA0);
    1c20:	40 ea       	ldi	r20, 0xA0	; 160
    1c22:	66 e6       	ldi	r22, 0x66	; 102
    1c24:	c8 01       	movw	r24, r16
    1c26:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
    1c2a:	41 e0       	ldi	r20, 0x01	; 1
    1c2c:	6f ef       	ldi	r22, 0xFF	; 255
    1c2e:	c8 01       	movw	r24, r16
    1c30:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x22, 0x32);
    1c34:	42 e3       	ldi	r20, 0x32	; 50
    1c36:	62 e2       	ldi	r22, 0x22	; 34
    1c38:	c8 01       	movw	r24, r16
    1c3a:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x47, 0x14);
    1c3e:	44 e1       	ldi	r20, 0x14	; 20
    1c40:	67 e4       	ldi	r22, 0x47	; 71
    1c42:	c8 01       	movw	r24, r16
    1c44:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x49, 0xFF);
    1c48:	4f ef       	ldi	r20, 0xFF	; 255
    1c4a:	69 e4       	ldi	r22, 0x49	; 73
    1c4c:	c8 01       	movw	r24, r16
    1c4e:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4A, 0x00);
    1c52:	40 e0       	ldi	r20, 0x00	; 0
    1c54:	6a e4       	ldi	r22, 0x4A	; 74
    1c56:	c8 01       	movw	r24, r16
    1c58:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
    1c5c:	40 e0       	ldi	r20, 0x00	; 0
    1c5e:	6f ef       	ldi	r22, 0xFF	; 255
    1c60:	c8 01       	movw	r24, r16
    1c62:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x7A, 0x0A);
    1c66:	4a e0       	ldi	r20, 0x0A	; 10
    1c68:	6a e7       	ldi	r22, 0x7A	; 122
    1c6a:	c8 01       	movw	r24, r16
    1c6c:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x7B, 0x00);
    1c70:	40 e0       	ldi	r20, 0x00	; 0
    1c72:	6b e7       	ldi	r22, 0x7B	; 123
    1c74:	c8 01       	movw	r24, r16
    1c76:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x78, 0x21);
    1c7a:	41 e2       	ldi	r20, 0x21	; 33
    1c7c:	68 e7       	ldi	r22, 0x78	; 120
    1c7e:	c8 01       	movw	r24, r16
    1c80:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
    1c84:	41 e0       	ldi	r20, 0x01	; 1
    1c86:	6f ef       	ldi	r22, 0xFF	; 255
    1c88:	c8 01       	movw	r24, r16
    1c8a:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x23, 0x34);
    1c8e:	44 e3       	ldi	r20, 0x34	; 52
    1c90:	63 e2       	ldi	r22, 0x23	; 35
    1c92:	c8 01       	movw	r24, r16
    1c94:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x42, 0x00);
    1c98:	40 e0       	ldi	r20, 0x00	; 0
    1c9a:	62 e4       	ldi	r22, 0x42	; 66
    1c9c:	c8 01       	movw	r24, r16
    1c9e:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x44, 0xFF);
    1ca2:	4f ef       	ldi	r20, 0xFF	; 255
    1ca4:	64 e4       	ldi	r22, 0x44	; 68
    1ca6:	c8 01       	movw	r24, r16
    1ca8:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x45, 0x26);
    1cac:	46 e2       	ldi	r20, 0x26	; 38
    1cae:	65 e4       	ldi	r22, 0x45	; 69
    1cb0:	c8 01       	movw	r24, r16
    1cb2:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x46, 0x05);
    1cb6:	45 e0       	ldi	r20, 0x05	; 5
    1cb8:	66 e4       	ldi	r22, 0x46	; 70
    1cba:	c8 01       	movw	r24, r16
    1cbc:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x40, 0x40);
    1cc0:	40 e4       	ldi	r20, 0x40	; 64
    1cc2:	60 e4       	ldi	r22, 0x40	; 64
    1cc4:	c8 01       	movw	r24, r16
    1cc6:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x0E, 0x06);
    1cca:	46 e0       	ldi	r20, 0x06	; 6
    1ccc:	6e e0       	ldi	r22, 0x0E	; 14
    1cce:	c8 01       	movw	r24, r16
    1cd0:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x20, 0x1A);
    1cd4:	4a e1       	ldi	r20, 0x1A	; 26
    1cd6:	60 e2       	ldi	r22, 0x20	; 32
    1cd8:	c8 01       	movw	r24, r16
    1cda:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x43, 0x40);
    1cde:	40 e4       	ldi	r20, 0x40	; 64
    1ce0:	63 e4       	ldi	r22, 0x43	; 67
    1ce2:	c8 01       	movw	r24, r16
    1ce4:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
    1ce8:	40 e0       	ldi	r20, 0x00	; 0
    1cea:	6f ef       	ldi	r22, 0xFF	; 255
    1cec:	c8 01       	movw	r24, r16
    1cee:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x34, 0x03);
    1cf2:	43 e0       	ldi	r20, 0x03	; 3
    1cf4:	64 e3       	ldi	r22, 0x34	; 52
    1cf6:	c8 01       	movw	r24, r16
    1cf8:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x35, 0x44);
    1cfc:	44 e4       	ldi	r20, 0x44	; 68
    1cfe:	65 e3       	ldi	r22, 0x35	; 53
    1d00:	c8 01       	movw	r24, r16
    1d02:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
    1d06:	41 e0       	ldi	r20, 0x01	; 1
    1d08:	6f ef       	ldi	r22, 0xFF	; 255
    1d0a:	c8 01       	movw	r24, r16
    1d0c:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x31, 0x04);
    1d10:	44 e0       	ldi	r20, 0x04	; 4
    1d12:	61 e3       	ldi	r22, 0x31	; 49
    1d14:	c8 01       	movw	r24, r16
    1d16:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4B, 0x09);
    1d1a:	49 e0       	ldi	r20, 0x09	; 9
    1d1c:	6b e4       	ldi	r22, 0x4B	; 75
    1d1e:	c8 01       	movw	r24, r16
    1d20:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4C, 0x05);
    1d24:	45 e0       	ldi	r20, 0x05	; 5
    1d26:	6c e4       	ldi	r22, 0x4C	; 76
    1d28:	c8 01       	movw	r24, r16
    1d2a:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x4D, 0x04);
    1d2e:	44 e0       	ldi	r20, 0x04	; 4
    1d30:	6d e4       	ldi	r22, 0x4D	; 77
    1d32:	c8 01       	movw	r24, r16
    1d34:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
    1d38:	40 e0       	ldi	r20, 0x00	; 0
    1d3a:	6f ef       	ldi	r22, 0xFF	; 255
    1d3c:	c8 01       	movw	r24, r16
    1d3e:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x44, 0x00);
    1d42:	40 e0       	ldi	r20, 0x00	; 0
    1d44:	64 e4       	ldi	r22, 0x44	; 68
    1d46:	c8 01       	movw	r24, r16
    1d48:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x45, 0x20);
    1d4c:	40 e2       	ldi	r20, 0x20	; 32
    1d4e:	65 e4       	ldi	r22, 0x45	; 69
    1d50:	c8 01       	movw	r24, r16
    1d52:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x47, 0x08);
    1d56:	48 e0       	ldi	r20, 0x08	; 8
    1d58:	67 e4       	ldi	r22, 0x47	; 71
    1d5a:	c8 01       	movw	r24, r16
    1d5c:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x48, 0x28);
    1d60:	48 e2       	ldi	r20, 0x28	; 40
    1d62:	68 e4       	ldi	r22, 0x48	; 72
    1d64:	c8 01       	movw	r24, r16
    1d66:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x67, 0x00);
    1d6a:	40 e0       	ldi	r20, 0x00	; 0
    1d6c:	67 e6       	ldi	r22, 0x67	; 103
    1d6e:	c8 01       	movw	r24, r16
    1d70:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x70, 0x04);
    1d74:	44 e0       	ldi	r20, 0x04	; 4
    1d76:	60 e7       	ldi	r22, 0x70	; 112
    1d78:	c8 01       	movw	r24, r16
    1d7a:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x71, 0x01);
    1d7e:	41 e0       	ldi	r20, 0x01	; 1
    1d80:	61 e7       	ldi	r22, 0x71	; 113
    1d82:	c8 01       	movw	r24, r16
    1d84:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x72, 0xFE);
    1d88:	4e ef       	ldi	r20, 0xFE	; 254
    1d8a:	62 e7       	ldi	r22, 0x72	; 114
    1d8c:	c8 01       	movw	r24, r16
    1d8e:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x76, 0x00);
    1d92:	40 e0       	ldi	r20, 0x00	; 0
    1d94:	66 e7       	ldi	r22, 0x76	; 118
    1d96:	c8 01       	movw	r24, r16
    1d98:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x77, 0x00);
    1d9c:	40 e0       	ldi	r20, 0x00	; 0
    1d9e:	67 e7       	ldi	r22, 0x77	; 119
    1da0:	c8 01       	movw	r24, r16
    1da2:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
    1da6:	41 e0       	ldi	r20, 0x01	; 1
    1da8:	6f ef       	ldi	r22, 0xFF	; 255
    1daa:	c8 01       	movw	r24, r16
    1dac:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x0D, 0x01);
    1db0:	41 e0       	ldi	r20, 0x01	; 1
    1db2:	6d e0       	ldi	r22, 0x0D	; 13
    1db4:	c8 01       	movw	r24, r16
    1db6:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x00);
    1dba:	40 e0       	ldi	r20, 0x00	; 0
    1dbc:	6f ef       	ldi	r22, 0xFF	; 255
    1dbe:	c8 01       	movw	r24, r16
    1dc0:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x01);
    1dc4:	41 e0       	ldi	r20, 0x01	; 1
    1dc6:	60 e8       	ldi	r22, 0x80	; 128
    1dc8:	c8 01       	movw	r24, r16
    1dca:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x01, 0xF8);
    1dce:	48 ef       	ldi	r20, 0xF8	; 248
    1dd0:	61 e0       	ldi	r22, 0x01	; 1
    1dd2:	c8 01       	movw	r24, r16
    1dd4:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>

  writeReg(0xFF, 0x01);
    1dd8:	41 e0       	ldi	r20, 0x01	; 1
    1dda:	6f ef       	ldi	r22, 0xFF	; 255
    1ddc:	c8 01       	movw	r24, r16
    1dde:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x8E, 0x01);
    1de2:	41 e0       	ldi	r20, 0x01	; 1
    1de4:	6e e8       	ldi	r22, 0x8E	; 142
    1de6:	c8 01       	movw	r24, r16
    1de8:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x00, 0x01);
    1dec:	41 e0       	ldi	r20, 0x01	; 1
    1dee:	60 e0       	ldi	r22, 0x00	; 0
    1df0:	c8 01       	movw	r24, r16
    1df2:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0xFF, 0x00);
    1df6:	40 e0       	ldi	r20, 0x00	; 0
    1df8:	6f ef       	ldi	r22, 0xFF	; 255
    1dfa:	c8 01       	movw	r24, r16
    1dfc:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(0x80, 0x00);
    1e00:	40 e0       	ldi	r20, 0x00	; 0
    1e02:	60 e8       	ldi	r22, 0x80	; 128
    1e04:	c8 01       	movw	r24, r16
    1e06:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  // -- VL53L0X_load_tuning_settings() end

  // "Set interrupt config to new sample ready"
  // -- VL53L0X_SetGpioConfig() begin

  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
    1e0a:	44 e0       	ldi	r20, 0x04	; 4
    1e0c:	6a e0       	ldi	r22, 0x0A	; 10
    1e0e:	c8 01       	movw	r24, r16
    1e10:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
    1e14:	64 e8       	ldi	r22, 0x84	; 132
    1e16:	c8 01       	movw	r24, r16
    1e18:	0e 94 b9 06 	call	0xd72	; 0xd72 <_ZN7VL53L0X7readRegEh>
    1e1c:	48 2f       	mov	r20, r24
    1e1e:	4f 7e       	andi	r20, 0xEF	; 239
    1e20:	64 e8       	ldi	r22, 0x84	; 132
    1e22:	c8 01       	movw	r24, r16
    1e24:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
    1e28:	41 e0       	ldi	r20, 0x01	; 1
    1e2a:	6b e0       	ldi	r22, 0x0B	; 11
    1e2c:	c8 01       	movw	r24, r16
    1e2e:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>

  // -- VL53L0X_SetGpioConfig() end

  measurement_timing_budget_us = getMeasurementTimingBudget();
    1e32:	c8 01       	movw	r24, r16
    1e34:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <_ZN7VL53L0X26getMeasurementTimingBudgetEv>
    1e38:	f8 01       	movw	r30, r16
    1e3a:	60 87       	std	Z+8, r22	; 0x08
    1e3c:	71 87       	std	Z+9, r23	; 0x09
    1e3e:	82 87       	std	Z+10, r24	; 0x0a
    1e40:	93 87       	std	Z+11, r25	; 0x0b
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
    1e42:	48 ee       	ldi	r20, 0xE8	; 232
    1e44:	61 e0       	ldi	r22, 0x01	; 1
    1e46:	c8 01       	movw	r24, r16
    1e48:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>

  // -- VL53L0X_SetSequenceStepEnable() end

  // "Recalculate timing budget"
  setMeasurementTimingBudget(measurement_timing_budget_us);
    1e4c:	f8 01       	movw	r30, r16
    1e4e:	40 85       	ldd	r20, Z+8	; 0x08
    1e50:	51 85       	ldd	r21, Z+9	; 0x09
    1e52:	62 85       	ldd	r22, Z+10	; 0x0a
    1e54:	73 85       	ldd	r23, Z+11	; 0x0b
    1e56:	c8 01       	movw	r24, r16
    1e58:	0e 94 b9 0b 	call	0x1772	; 0x1772 <_ZN7VL53L0X26setMeasurementTimingBudgetEm>

  // VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())

  // -- VL53L0X_perform_vhv_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
    1e5c:	41 e0       	ldi	r20, 0x01	; 1
    1e5e:	61 e0       	ldi	r22, 0x01	; 1
    1e60:	c8 01       	movw	r24, r16
    1e62:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  if (!performSingleRefCalibration(0x40)) { return false; }
    1e66:	60 e4       	ldi	r22, 0x40	; 64
    1e68:	c8 01       	movw	r24, r16
    1e6a:	0e 94 76 0c 	call	0x18ec	; 0x18ec <_ZN7VL53L0X27performSingleRefCalibrationEh>
    1e6e:	f8 2e       	mov	r15, r24
    1e70:	88 23       	and	r24, r24
    1e72:	89 f0       	breq	.+34     	; 0x1e96 <_ZN7VL53L0X4initEb+0x546>

  // -- VL53L0X_perform_vhv_calibration() end

  // -- VL53L0X_perform_phase_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
    1e74:	42 e0       	ldi	r20, 0x02	; 2
    1e76:	61 e0       	ldi	r22, 0x01	; 1
    1e78:	c8 01       	movw	r24, r16
    1e7a:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>
  if (!performSingleRefCalibration(0x00)) { return false; }
    1e7e:	60 e0       	ldi	r22, 0x00	; 0
    1e80:	c8 01       	movw	r24, r16
    1e82:	0e 94 76 0c 	call	0x18ec	; 0x18ec <_ZN7VL53L0X27performSingleRefCalibrationEh>
    1e86:	f8 2e       	mov	r15, r24
    1e88:	88 23       	and	r24, r24
    1e8a:	29 f0       	breq	.+10     	; 0x1e96 <_ZN7VL53L0X4initEb+0x546>

  // -- VL53L0X_perform_phase_calibration() end

  // "restore the previous Sequence Config"
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
    1e8c:	48 ee       	ldi	r20, 0xE8	; 232
    1e8e:	61 e0       	ldi	r22, 0x01	; 1
    1e90:	c8 01       	movw	r24, r16
    1e92:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZN7VL53L0X8writeRegEhh>

  // VL53L0X_PerformRefCalibration() end

  return true;
}
    1e96:	8f 2d       	mov	r24, r15
    1e98:	28 96       	adiw	r28, 0x08	; 8
    1e9a:	0f b6       	in	r0, 0x3f	; 63
    1e9c:	f8 94       	cli
    1e9e:	de bf       	out	0x3e, r29	; 62
    1ea0:	0f be       	out	0x3f, r0	; 63
    1ea2:	cd bf       	out	0x3d, r28	; 61
    1ea4:	df 91       	pop	r29
    1ea6:	cf 91       	pop	r28
    1ea8:	1f 91       	pop	r17
    1eaa:	0f 91       	pop	r16
    1eac:	ff 90       	pop	r15
    1eae:	08 95       	ret

00001eb0 <_GLOBAL__sub_I_Wire>:
	  }
 class I2c
 {
 public:
    I2c()
    {
    1eb0:	e4 e9       	ldi	r30, 0x94	; 148
    1eb2:	f1 e0       	ldi	r31, 0x01	; 1
    1eb4:	10 86       	std	Z+8, r1	; 0x08
    1eb6:	11 86       	std	Z+9, r1	; 0x09
	    i2c_init();
    1eb8:	0e 94 d6 04 	call	0x9ac	; 0x9ac <i2c_init>
    1ebc:	08 95       	ret

00001ebe <__subsf3>:
    1ebe:	50 58       	subi	r21, 0x80	; 128

00001ec0 <__addsf3>:
    1ec0:	bb 27       	eor	r27, r27
    1ec2:	aa 27       	eor	r26, r26
    1ec4:	0e 94 77 0f 	call	0x1eee	; 0x1eee <__addsf3x>
    1ec8:	0c 94 f1 10 	jmp	0x21e2	; 0x21e2 <__fp_round>
    1ecc:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <__fp_pscA>
    1ed0:	38 f0       	brcs	.+14     	; 0x1ee0 <__addsf3+0x20>
    1ed2:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <__fp_pscB>
    1ed6:	20 f0       	brcs	.+8      	; 0x1ee0 <__addsf3+0x20>
    1ed8:	39 f4       	brne	.+14     	; 0x1ee8 <__addsf3+0x28>
    1eda:	9f 3f       	cpi	r25, 0xFF	; 255
    1edc:	19 f4       	brne	.+6      	; 0x1ee4 <__addsf3+0x24>
    1ede:	26 f4       	brtc	.+8      	; 0x1ee8 <__addsf3+0x28>
    1ee0:	0c 94 e0 10 	jmp	0x21c0	; 0x21c0 <__fp_nan>
    1ee4:	0e f4       	brtc	.+2      	; 0x1ee8 <__addsf3+0x28>
    1ee6:	e0 95       	com	r30
    1ee8:	e7 fb       	bst	r30, 7
    1eea:	0c 94 da 10 	jmp	0x21b4	; 0x21b4 <__fp_inf>

00001eee <__addsf3x>:
    1eee:	e9 2f       	mov	r30, r25
    1ef0:	0e 94 02 11 	call	0x2204	; 0x2204 <__fp_split3>
    1ef4:	58 f3       	brcs	.-42     	; 0x1ecc <__addsf3+0xc>
    1ef6:	ba 17       	cp	r27, r26
    1ef8:	62 07       	cpc	r22, r18
    1efa:	73 07       	cpc	r23, r19
    1efc:	84 07       	cpc	r24, r20
    1efe:	95 07       	cpc	r25, r21
    1f00:	20 f0       	brcs	.+8      	; 0x1f0a <__addsf3x+0x1c>
    1f02:	79 f4       	brne	.+30     	; 0x1f22 <__addsf3x+0x34>
    1f04:	a6 f5       	brtc	.+104    	; 0x1f6e <__addsf3x+0x80>
    1f06:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__fp_zero>
    1f0a:	0e f4       	brtc	.+2      	; 0x1f0e <__addsf3x+0x20>
    1f0c:	e0 95       	com	r30
    1f0e:	0b 2e       	mov	r0, r27
    1f10:	ba 2f       	mov	r27, r26
    1f12:	a0 2d       	mov	r26, r0
    1f14:	0b 01       	movw	r0, r22
    1f16:	b9 01       	movw	r22, r18
    1f18:	90 01       	movw	r18, r0
    1f1a:	0c 01       	movw	r0, r24
    1f1c:	ca 01       	movw	r24, r20
    1f1e:	a0 01       	movw	r20, r0
    1f20:	11 24       	eor	r1, r1
    1f22:	ff 27       	eor	r31, r31
    1f24:	59 1b       	sub	r21, r25
    1f26:	99 f0       	breq	.+38     	; 0x1f4e <__addsf3x+0x60>
    1f28:	59 3f       	cpi	r21, 0xF9	; 249
    1f2a:	50 f4       	brcc	.+20     	; 0x1f40 <__addsf3x+0x52>
    1f2c:	50 3e       	cpi	r21, 0xE0	; 224
    1f2e:	68 f1       	brcs	.+90     	; 0x1f8a <__addsf3x+0x9c>
    1f30:	1a 16       	cp	r1, r26
    1f32:	f0 40       	sbci	r31, 0x00	; 0
    1f34:	a2 2f       	mov	r26, r18
    1f36:	23 2f       	mov	r18, r19
    1f38:	34 2f       	mov	r19, r20
    1f3a:	44 27       	eor	r20, r20
    1f3c:	58 5f       	subi	r21, 0xF8	; 248
    1f3e:	f3 cf       	rjmp	.-26     	; 0x1f26 <__addsf3x+0x38>
    1f40:	46 95       	lsr	r20
    1f42:	37 95       	ror	r19
    1f44:	27 95       	ror	r18
    1f46:	a7 95       	ror	r26
    1f48:	f0 40       	sbci	r31, 0x00	; 0
    1f4a:	53 95       	inc	r21
    1f4c:	c9 f7       	brne	.-14     	; 0x1f40 <__addsf3x+0x52>
    1f4e:	7e f4       	brtc	.+30     	; 0x1f6e <__addsf3x+0x80>
    1f50:	1f 16       	cp	r1, r31
    1f52:	ba 0b       	sbc	r27, r26
    1f54:	62 0b       	sbc	r22, r18
    1f56:	73 0b       	sbc	r23, r19
    1f58:	84 0b       	sbc	r24, r20
    1f5a:	ba f0       	brmi	.+46     	; 0x1f8a <__addsf3x+0x9c>
    1f5c:	91 50       	subi	r25, 0x01	; 1
    1f5e:	a1 f0       	breq	.+40     	; 0x1f88 <__addsf3x+0x9a>
    1f60:	ff 0f       	add	r31, r31
    1f62:	bb 1f       	adc	r27, r27
    1f64:	66 1f       	adc	r22, r22
    1f66:	77 1f       	adc	r23, r23
    1f68:	88 1f       	adc	r24, r24
    1f6a:	c2 f7       	brpl	.-16     	; 0x1f5c <__addsf3x+0x6e>
    1f6c:	0e c0       	rjmp	.+28     	; 0x1f8a <__addsf3x+0x9c>
    1f6e:	ba 0f       	add	r27, r26
    1f70:	62 1f       	adc	r22, r18
    1f72:	73 1f       	adc	r23, r19
    1f74:	84 1f       	adc	r24, r20
    1f76:	48 f4       	brcc	.+18     	; 0x1f8a <__addsf3x+0x9c>
    1f78:	87 95       	ror	r24
    1f7a:	77 95       	ror	r23
    1f7c:	67 95       	ror	r22
    1f7e:	b7 95       	ror	r27
    1f80:	f7 95       	ror	r31
    1f82:	9e 3f       	cpi	r25, 0xFE	; 254
    1f84:	08 f0       	brcs	.+2      	; 0x1f88 <__addsf3x+0x9a>
    1f86:	b0 cf       	rjmp	.-160    	; 0x1ee8 <__addsf3+0x28>
    1f88:	93 95       	inc	r25
    1f8a:	88 0f       	add	r24, r24
    1f8c:	08 f0       	brcs	.+2      	; 0x1f90 <__addsf3x+0xa2>
    1f8e:	99 27       	eor	r25, r25
    1f90:	ee 0f       	add	r30, r30
    1f92:	97 95       	ror	r25
    1f94:	87 95       	ror	r24
    1f96:	08 95       	ret

00001f98 <__cmpsf2>:
    1f98:	0e 94 b6 10 	call	0x216c	; 0x216c <__fp_cmp>
    1f9c:	08 f4       	brcc	.+2      	; 0x1fa0 <__cmpsf2+0x8>
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	08 95       	ret

00001fa2 <__divsf3>:
    1fa2:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <__divsf3x>
    1fa6:	0c 94 f1 10 	jmp	0x21e2	; 0x21e2 <__fp_round>
    1faa:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <__fp_pscB>
    1fae:	58 f0       	brcs	.+22     	; 0x1fc6 <__divsf3+0x24>
    1fb0:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <__fp_pscA>
    1fb4:	40 f0       	brcs	.+16     	; 0x1fc6 <__divsf3+0x24>
    1fb6:	29 f4       	brne	.+10     	; 0x1fc2 <__divsf3+0x20>
    1fb8:	5f 3f       	cpi	r21, 0xFF	; 255
    1fba:	29 f0       	breq	.+10     	; 0x1fc6 <__divsf3+0x24>
    1fbc:	0c 94 da 10 	jmp	0x21b4	; 0x21b4 <__fp_inf>
    1fc0:	51 11       	cpse	r21, r1
    1fc2:	0c 94 25 11 	jmp	0x224a	; 0x224a <__fp_szero>
    1fc6:	0c 94 e0 10 	jmp	0x21c0	; 0x21c0 <__fp_nan>

00001fca <__divsf3x>:
    1fca:	0e 94 02 11 	call	0x2204	; 0x2204 <__fp_split3>
    1fce:	68 f3       	brcs	.-38     	; 0x1faa <__divsf3+0x8>

00001fd0 <__divsf3_pse>:
    1fd0:	99 23       	and	r25, r25
    1fd2:	b1 f3       	breq	.-20     	; 0x1fc0 <__divsf3+0x1e>
    1fd4:	55 23       	and	r21, r21
    1fd6:	91 f3       	breq	.-28     	; 0x1fbc <__divsf3+0x1a>
    1fd8:	95 1b       	sub	r25, r21
    1fda:	55 0b       	sbc	r21, r21
    1fdc:	bb 27       	eor	r27, r27
    1fde:	aa 27       	eor	r26, r26
    1fe0:	62 17       	cp	r22, r18
    1fe2:	73 07       	cpc	r23, r19
    1fe4:	84 07       	cpc	r24, r20
    1fe6:	38 f0       	brcs	.+14     	; 0x1ff6 <__divsf3_pse+0x26>
    1fe8:	9f 5f       	subi	r25, 0xFF	; 255
    1fea:	5f 4f       	sbci	r21, 0xFF	; 255
    1fec:	22 0f       	add	r18, r18
    1fee:	33 1f       	adc	r19, r19
    1ff0:	44 1f       	adc	r20, r20
    1ff2:	aa 1f       	adc	r26, r26
    1ff4:	a9 f3       	breq	.-22     	; 0x1fe0 <__divsf3_pse+0x10>
    1ff6:	35 d0       	rcall	.+106    	; 0x2062 <__divsf3_pse+0x92>
    1ff8:	0e 2e       	mov	r0, r30
    1ffa:	3a f0       	brmi	.+14     	; 0x200a <__divsf3_pse+0x3a>
    1ffc:	e0 e8       	ldi	r30, 0x80	; 128
    1ffe:	32 d0       	rcall	.+100    	; 0x2064 <__divsf3_pse+0x94>
    2000:	91 50       	subi	r25, 0x01	; 1
    2002:	50 40       	sbci	r21, 0x00	; 0
    2004:	e6 95       	lsr	r30
    2006:	00 1c       	adc	r0, r0
    2008:	ca f7       	brpl	.-14     	; 0x1ffc <__divsf3_pse+0x2c>
    200a:	2b d0       	rcall	.+86     	; 0x2062 <__divsf3_pse+0x92>
    200c:	fe 2f       	mov	r31, r30
    200e:	29 d0       	rcall	.+82     	; 0x2062 <__divsf3_pse+0x92>
    2010:	66 0f       	add	r22, r22
    2012:	77 1f       	adc	r23, r23
    2014:	88 1f       	adc	r24, r24
    2016:	bb 1f       	adc	r27, r27
    2018:	26 17       	cp	r18, r22
    201a:	37 07       	cpc	r19, r23
    201c:	48 07       	cpc	r20, r24
    201e:	ab 07       	cpc	r26, r27
    2020:	b0 e8       	ldi	r27, 0x80	; 128
    2022:	09 f0       	breq	.+2      	; 0x2026 <__divsf3_pse+0x56>
    2024:	bb 0b       	sbc	r27, r27
    2026:	80 2d       	mov	r24, r0
    2028:	bf 01       	movw	r22, r30
    202a:	ff 27       	eor	r31, r31
    202c:	93 58       	subi	r25, 0x83	; 131
    202e:	5f 4f       	sbci	r21, 0xFF	; 255
    2030:	3a f0       	brmi	.+14     	; 0x2040 <__divsf3_pse+0x70>
    2032:	9e 3f       	cpi	r25, 0xFE	; 254
    2034:	51 05       	cpc	r21, r1
    2036:	78 f0       	brcs	.+30     	; 0x2056 <__divsf3_pse+0x86>
    2038:	0c 94 da 10 	jmp	0x21b4	; 0x21b4 <__fp_inf>
    203c:	0c 94 25 11 	jmp	0x224a	; 0x224a <__fp_szero>
    2040:	5f 3f       	cpi	r21, 0xFF	; 255
    2042:	e4 f3       	brlt	.-8      	; 0x203c <__divsf3_pse+0x6c>
    2044:	98 3e       	cpi	r25, 0xE8	; 232
    2046:	d4 f3       	brlt	.-12     	; 0x203c <__divsf3_pse+0x6c>
    2048:	86 95       	lsr	r24
    204a:	77 95       	ror	r23
    204c:	67 95       	ror	r22
    204e:	b7 95       	ror	r27
    2050:	f7 95       	ror	r31
    2052:	9f 5f       	subi	r25, 0xFF	; 255
    2054:	c9 f7       	brne	.-14     	; 0x2048 <__divsf3_pse+0x78>
    2056:	88 0f       	add	r24, r24
    2058:	91 1d       	adc	r25, r1
    205a:	96 95       	lsr	r25
    205c:	87 95       	ror	r24
    205e:	97 f9       	bld	r25, 7
    2060:	08 95       	ret
    2062:	e1 e0       	ldi	r30, 0x01	; 1
    2064:	66 0f       	add	r22, r22
    2066:	77 1f       	adc	r23, r23
    2068:	88 1f       	adc	r24, r24
    206a:	bb 1f       	adc	r27, r27
    206c:	62 17       	cp	r22, r18
    206e:	73 07       	cpc	r23, r19
    2070:	84 07       	cpc	r24, r20
    2072:	ba 07       	cpc	r27, r26
    2074:	20 f0       	brcs	.+8      	; 0x207e <__divsf3_pse+0xae>
    2076:	62 1b       	sub	r22, r18
    2078:	73 0b       	sbc	r23, r19
    207a:	84 0b       	sbc	r24, r20
    207c:	ba 0b       	sbc	r27, r26
    207e:	ee 1f       	adc	r30, r30
    2080:	88 f7       	brcc	.-30     	; 0x2064 <__divsf3_pse+0x94>
    2082:	e0 95       	com	r30
    2084:	08 95       	ret

00002086 <__fixsfsi>:
    2086:	0e 94 4a 10 	call	0x2094	; 0x2094 <__fixunssfsi>
    208a:	68 94       	set
    208c:	b1 11       	cpse	r27, r1
    208e:	0c 94 25 11 	jmp	0x224a	; 0x224a <__fp_szero>
    2092:	08 95       	ret

00002094 <__fixunssfsi>:
    2094:	0e 94 0a 11 	call	0x2214	; 0x2214 <__fp_splitA>
    2098:	88 f0       	brcs	.+34     	; 0x20bc <__fixunssfsi+0x28>
    209a:	9f 57       	subi	r25, 0x7F	; 127
    209c:	98 f0       	brcs	.+38     	; 0x20c4 <__fixunssfsi+0x30>
    209e:	b9 2f       	mov	r27, r25
    20a0:	99 27       	eor	r25, r25
    20a2:	b7 51       	subi	r27, 0x17	; 23
    20a4:	b0 f0       	brcs	.+44     	; 0x20d2 <__fixunssfsi+0x3e>
    20a6:	e1 f0       	breq	.+56     	; 0x20e0 <__fixunssfsi+0x4c>
    20a8:	66 0f       	add	r22, r22
    20aa:	77 1f       	adc	r23, r23
    20ac:	88 1f       	adc	r24, r24
    20ae:	99 1f       	adc	r25, r25
    20b0:	1a f0       	brmi	.+6      	; 0x20b8 <__fixunssfsi+0x24>
    20b2:	ba 95       	dec	r27
    20b4:	c9 f7       	brne	.-14     	; 0x20a8 <__fixunssfsi+0x14>
    20b6:	14 c0       	rjmp	.+40     	; 0x20e0 <__fixunssfsi+0x4c>
    20b8:	b1 30       	cpi	r27, 0x01	; 1
    20ba:	91 f0       	breq	.+36     	; 0x20e0 <__fixunssfsi+0x4c>
    20bc:	0e 94 24 11 	call	0x2248	; 0x2248 <__fp_zero>
    20c0:	b1 e0       	ldi	r27, 0x01	; 1
    20c2:	08 95       	ret
    20c4:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__fp_zero>
    20c8:	67 2f       	mov	r22, r23
    20ca:	78 2f       	mov	r23, r24
    20cc:	88 27       	eor	r24, r24
    20ce:	b8 5f       	subi	r27, 0xF8	; 248
    20d0:	39 f0       	breq	.+14     	; 0x20e0 <__fixunssfsi+0x4c>
    20d2:	b9 3f       	cpi	r27, 0xF9	; 249
    20d4:	cc f3       	brlt	.-14     	; 0x20c8 <__fixunssfsi+0x34>
    20d6:	86 95       	lsr	r24
    20d8:	77 95       	ror	r23
    20da:	67 95       	ror	r22
    20dc:	b3 95       	inc	r27
    20de:	d9 f7       	brne	.-10     	; 0x20d6 <__fixunssfsi+0x42>
    20e0:	3e f4       	brtc	.+14     	; 0x20f0 <__fixunssfsi+0x5c>
    20e2:	90 95       	com	r25
    20e4:	80 95       	com	r24
    20e6:	70 95       	com	r23
    20e8:	61 95       	neg	r22
    20ea:	7f 4f       	sbci	r23, 0xFF	; 255
    20ec:	8f 4f       	sbci	r24, 0xFF	; 255
    20ee:	9f 4f       	sbci	r25, 0xFF	; 255
    20f0:	08 95       	ret

000020f2 <__floatunsisf>:
    20f2:	e8 94       	clt
    20f4:	09 c0       	rjmp	.+18     	; 0x2108 <__floatsisf+0x12>

000020f6 <__floatsisf>:
    20f6:	97 fb       	bst	r25, 7
    20f8:	3e f4       	brtc	.+14     	; 0x2108 <__floatsisf+0x12>
    20fa:	90 95       	com	r25
    20fc:	80 95       	com	r24
    20fe:	70 95       	com	r23
    2100:	61 95       	neg	r22
    2102:	7f 4f       	sbci	r23, 0xFF	; 255
    2104:	8f 4f       	sbci	r24, 0xFF	; 255
    2106:	9f 4f       	sbci	r25, 0xFF	; 255
    2108:	99 23       	and	r25, r25
    210a:	a9 f0       	breq	.+42     	; 0x2136 <__floatsisf+0x40>
    210c:	f9 2f       	mov	r31, r25
    210e:	96 e9       	ldi	r25, 0x96	; 150
    2110:	bb 27       	eor	r27, r27
    2112:	93 95       	inc	r25
    2114:	f6 95       	lsr	r31
    2116:	87 95       	ror	r24
    2118:	77 95       	ror	r23
    211a:	67 95       	ror	r22
    211c:	b7 95       	ror	r27
    211e:	f1 11       	cpse	r31, r1
    2120:	f8 cf       	rjmp	.-16     	; 0x2112 <__floatsisf+0x1c>
    2122:	fa f4       	brpl	.+62     	; 0x2162 <__floatsisf+0x6c>
    2124:	bb 0f       	add	r27, r27
    2126:	11 f4       	brne	.+4      	; 0x212c <__floatsisf+0x36>
    2128:	60 ff       	sbrs	r22, 0
    212a:	1b c0       	rjmp	.+54     	; 0x2162 <__floatsisf+0x6c>
    212c:	6f 5f       	subi	r22, 0xFF	; 255
    212e:	7f 4f       	sbci	r23, 0xFF	; 255
    2130:	8f 4f       	sbci	r24, 0xFF	; 255
    2132:	9f 4f       	sbci	r25, 0xFF	; 255
    2134:	16 c0       	rjmp	.+44     	; 0x2162 <__floatsisf+0x6c>
    2136:	88 23       	and	r24, r24
    2138:	11 f0       	breq	.+4      	; 0x213e <__floatsisf+0x48>
    213a:	96 e9       	ldi	r25, 0x96	; 150
    213c:	11 c0       	rjmp	.+34     	; 0x2160 <__floatsisf+0x6a>
    213e:	77 23       	and	r23, r23
    2140:	21 f0       	breq	.+8      	; 0x214a <__floatsisf+0x54>
    2142:	9e e8       	ldi	r25, 0x8E	; 142
    2144:	87 2f       	mov	r24, r23
    2146:	76 2f       	mov	r23, r22
    2148:	05 c0       	rjmp	.+10     	; 0x2154 <__floatsisf+0x5e>
    214a:	66 23       	and	r22, r22
    214c:	71 f0       	breq	.+28     	; 0x216a <__floatsisf+0x74>
    214e:	96 e8       	ldi	r25, 0x86	; 134
    2150:	86 2f       	mov	r24, r22
    2152:	70 e0       	ldi	r23, 0x00	; 0
    2154:	60 e0       	ldi	r22, 0x00	; 0
    2156:	2a f0       	brmi	.+10     	; 0x2162 <__floatsisf+0x6c>
    2158:	9a 95       	dec	r25
    215a:	66 0f       	add	r22, r22
    215c:	77 1f       	adc	r23, r23
    215e:	88 1f       	adc	r24, r24
    2160:	da f7       	brpl	.-10     	; 0x2158 <__floatsisf+0x62>
    2162:	88 0f       	add	r24, r24
    2164:	96 95       	lsr	r25
    2166:	87 95       	ror	r24
    2168:	97 f9       	bld	r25, 7
    216a:	08 95       	ret

0000216c <__fp_cmp>:
    216c:	99 0f       	add	r25, r25
    216e:	00 08       	sbc	r0, r0
    2170:	55 0f       	add	r21, r21
    2172:	aa 0b       	sbc	r26, r26
    2174:	e0 e8       	ldi	r30, 0x80	; 128
    2176:	fe ef       	ldi	r31, 0xFE	; 254
    2178:	16 16       	cp	r1, r22
    217a:	17 06       	cpc	r1, r23
    217c:	e8 07       	cpc	r30, r24
    217e:	f9 07       	cpc	r31, r25
    2180:	c0 f0       	brcs	.+48     	; 0x21b2 <__fp_cmp+0x46>
    2182:	12 16       	cp	r1, r18
    2184:	13 06       	cpc	r1, r19
    2186:	e4 07       	cpc	r30, r20
    2188:	f5 07       	cpc	r31, r21
    218a:	98 f0       	brcs	.+38     	; 0x21b2 <__fp_cmp+0x46>
    218c:	62 1b       	sub	r22, r18
    218e:	73 0b       	sbc	r23, r19
    2190:	84 0b       	sbc	r24, r20
    2192:	95 0b       	sbc	r25, r21
    2194:	39 f4       	brne	.+14     	; 0x21a4 <__fp_cmp+0x38>
    2196:	0a 26       	eor	r0, r26
    2198:	61 f0       	breq	.+24     	; 0x21b2 <__fp_cmp+0x46>
    219a:	23 2b       	or	r18, r19
    219c:	24 2b       	or	r18, r20
    219e:	25 2b       	or	r18, r21
    21a0:	21 f4       	brne	.+8      	; 0x21aa <__fp_cmp+0x3e>
    21a2:	08 95       	ret
    21a4:	0a 26       	eor	r0, r26
    21a6:	09 f4       	brne	.+2      	; 0x21aa <__fp_cmp+0x3e>
    21a8:	a1 40       	sbci	r26, 0x01	; 1
    21aa:	a6 95       	lsr	r26
    21ac:	8f ef       	ldi	r24, 0xFF	; 255
    21ae:	81 1d       	adc	r24, r1
    21b0:	81 1d       	adc	r24, r1
    21b2:	08 95       	ret

000021b4 <__fp_inf>:
    21b4:	97 f9       	bld	r25, 7
    21b6:	9f 67       	ori	r25, 0x7F	; 127
    21b8:	80 e8       	ldi	r24, 0x80	; 128
    21ba:	70 e0       	ldi	r23, 0x00	; 0
    21bc:	60 e0       	ldi	r22, 0x00	; 0
    21be:	08 95       	ret

000021c0 <__fp_nan>:
    21c0:	9f ef       	ldi	r25, 0xFF	; 255
    21c2:	80 ec       	ldi	r24, 0xC0	; 192
    21c4:	08 95       	ret

000021c6 <__fp_pscA>:
    21c6:	00 24       	eor	r0, r0
    21c8:	0a 94       	dec	r0
    21ca:	16 16       	cp	r1, r22
    21cc:	17 06       	cpc	r1, r23
    21ce:	18 06       	cpc	r1, r24
    21d0:	09 06       	cpc	r0, r25
    21d2:	08 95       	ret

000021d4 <__fp_pscB>:
    21d4:	00 24       	eor	r0, r0
    21d6:	0a 94       	dec	r0
    21d8:	12 16       	cp	r1, r18
    21da:	13 06       	cpc	r1, r19
    21dc:	14 06       	cpc	r1, r20
    21de:	05 06       	cpc	r0, r21
    21e0:	08 95       	ret

000021e2 <__fp_round>:
    21e2:	09 2e       	mov	r0, r25
    21e4:	03 94       	inc	r0
    21e6:	00 0c       	add	r0, r0
    21e8:	11 f4       	brne	.+4      	; 0x21ee <__fp_round+0xc>
    21ea:	88 23       	and	r24, r24
    21ec:	52 f0       	brmi	.+20     	; 0x2202 <__fp_round+0x20>
    21ee:	bb 0f       	add	r27, r27
    21f0:	40 f4       	brcc	.+16     	; 0x2202 <__fp_round+0x20>
    21f2:	bf 2b       	or	r27, r31
    21f4:	11 f4       	brne	.+4      	; 0x21fa <__fp_round+0x18>
    21f6:	60 ff       	sbrs	r22, 0
    21f8:	04 c0       	rjmp	.+8      	; 0x2202 <__fp_round+0x20>
    21fa:	6f 5f       	subi	r22, 0xFF	; 255
    21fc:	7f 4f       	sbci	r23, 0xFF	; 255
    21fe:	8f 4f       	sbci	r24, 0xFF	; 255
    2200:	9f 4f       	sbci	r25, 0xFF	; 255
    2202:	08 95       	ret

00002204 <__fp_split3>:
    2204:	57 fd       	sbrc	r21, 7
    2206:	90 58       	subi	r25, 0x80	; 128
    2208:	44 0f       	add	r20, r20
    220a:	55 1f       	adc	r21, r21
    220c:	59 f0       	breq	.+22     	; 0x2224 <__fp_splitA+0x10>
    220e:	5f 3f       	cpi	r21, 0xFF	; 255
    2210:	71 f0       	breq	.+28     	; 0x222e <__fp_splitA+0x1a>
    2212:	47 95       	ror	r20

00002214 <__fp_splitA>:
    2214:	88 0f       	add	r24, r24
    2216:	97 fb       	bst	r25, 7
    2218:	99 1f       	adc	r25, r25
    221a:	61 f0       	breq	.+24     	; 0x2234 <__fp_splitA+0x20>
    221c:	9f 3f       	cpi	r25, 0xFF	; 255
    221e:	79 f0       	breq	.+30     	; 0x223e <__fp_splitA+0x2a>
    2220:	87 95       	ror	r24
    2222:	08 95       	ret
    2224:	12 16       	cp	r1, r18
    2226:	13 06       	cpc	r1, r19
    2228:	14 06       	cpc	r1, r20
    222a:	55 1f       	adc	r21, r21
    222c:	f2 cf       	rjmp	.-28     	; 0x2212 <__fp_split3+0xe>
    222e:	46 95       	lsr	r20
    2230:	f1 df       	rcall	.-30     	; 0x2214 <__fp_splitA>
    2232:	08 c0       	rjmp	.+16     	; 0x2244 <__fp_splitA+0x30>
    2234:	16 16       	cp	r1, r22
    2236:	17 06       	cpc	r1, r23
    2238:	18 06       	cpc	r1, r24
    223a:	99 1f       	adc	r25, r25
    223c:	f1 cf       	rjmp	.-30     	; 0x2220 <__fp_splitA+0xc>
    223e:	86 95       	lsr	r24
    2240:	71 05       	cpc	r23, r1
    2242:	61 05       	cpc	r22, r1
    2244:	08 94       	sec
    2246:	08 95       	ret

00002248 <__fp_zero>:
    2248:	e8 94       	clt

0000224a <__fp_szero>:
    224a:	bb 27       	eor	r27, r27
    224c:	66 27       	eor	r22, r22
    224e:	77 27       	eor	r23, r23
    2250:	cb 01       	movw	r24, r22
    2252:	97 f9       	bld	r25, 7
    2254:	08 95       	ret

00002256 <__gesf2>:
    2256:	0e 94 b6 10 	call	0x216c	; 0x216c <__fp_cmp>
    225a:	08 f4       	brcc	.+2      	; 0x225e <__gesf2+0x8>
    225c:	8f ef       	ldi	r24, 0xFF	; 255
    225e:	08 95       	ret

00002260 <__mulsf3>:
    2260:	0e 94 43 11 	call	0x2286	; 0x2286 <__mulsf3x>
    2264:	0c 94 f1 10 	jmp	0x21e2	; 0x21e2 <__fp_round>
    2268:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <__fp_pscA>
    226c:	38 f0       	brcs	.+14     	; 0x227c <__mulsf3+0x1c>
    226e:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <__fp_pscB>
    2272:	20 f0       	brcs	.+8      	; 0x227c <__mulsf3+0x1c>
    2274:	95 23       	and	r25, r21
    2276:	11 f0       	breq	.+4      	; 0x227c <__mulsf3+0x1c>
    2278:	0c 94 da 10 	jmp	0x21b4	; 0x21b4 <__fp_inf>
    227c:	0c 94 e0 10 	jmp	0x21c0	; 0x21c0 <__fp_nan>
    2280:	11 24       	eor	r1, r1
    2282:	0c 94 25 11 	jmp	0x224a	; 0x224a <__fp_szero>

00002286 <__mulsf3x>:
    2286:	0e 94 02 11 	call	0x2204	; 0x2204 <__fp_split3>
    228a:	70 f3       	brcs	.-36     	; 0x2268 <__mulsf3+0x8>

0000228c <__mulsf3_pse>:
    228c:	95 9f       	mul	r25, r21
    228e:	c1 f3       	breq	.-16     	; 0x2280 <__mulsf3+0x20>
    2290:	95 0f       	add	r25, r21
    2292:	50 e0       	ldi	r21, 0x00	; 0
    2294:	55 1f       	adc	r21, r21
    2296:	62 9f       	mul	r22, r18
    2298:	f0 01       	movw	r30, r0
    229a:	72 9f       	mul	r23, r18
    229c:	bb 27       	eor	r27, r27
    229e:	f0 0d       	add	r31, r0
    22a0:	b1 1d       	adc	r27, r1
    22a2:	63 9f       	mul	r22, r19
    22a4:	aa 27       	eor	r26, r26
    22a6:	f0 0d       	add	r31, r0
    22a8:	b1 1d       	adc	r27, r1
    22aa:	aa 1f       	adc	r26, r26
    22ac:	64 9f       	mul	r22, r20
    22ae:	66 27       	eor	r22, r22
    22b0:	b0 0d       	add	r27, r0
    22b2:	a1 1d       	adc	r26, r1
    22b4:	66 1f       	adc	r22, r22
    22b6:	82 9f       	mul	r24, r18
    22b8:	22 27       	eor	r18, r18
    22ba:	b0 0d       	add	r27, r0
    22bc:	a1 1d       	adc	r26, r1
    22be:	62 1f       	adc	r22, r18
    22c0:	73 9f       	mul	r23, r19
    22c2:	b0 0d       	add	r27, r0
    22c4:	a1 1d       	adc	r26, r1
    22c6:	62 1f       	adc	r22, r18
    22c8:	83 9f       	mul	r24, r19
    22ca:	a0 0d       	add	r26, r0
    22cc:	61 1d       	adc	r22, r1
    22ce:	22 1f       	adc	r18, r18
    22d0:	74 9f       	mul	r23, r20
    22d2:	33 27       	eor	r19, r19
    22d4:	a0 0d       	add	r26, r0
    22d6:	61 1d       	adc	r22, r1
    22d8:	23 1f       	adc	r18, r19
    22da:	84 9f       	mul	r24, r20
    22dc:	60 0d       	add	r22, r0
    22de:	21 1d       	adc	r18, r1
    22e0:	82 2f       	mov	r24, r18
    22e2:	76 2f       	mov	r23, r22
    22e4:	6a 2f       	mov	r22, r26
    22e6:	11 24       	eor	r1, r1
    22e8:	9f 57       	subi	r25, 0x7F	; 127
    22ea:	50 40       	sbci	r21, 0x00	; 0
    22ec:	9a f0       	brmi	.+38     	; 0x2314 <__mulsf3_pse+0x88>
    22ee:	f1 f0       	breq	.+60     	; 0x232c <__mulsf3_pse+0xa0>
    22f0:	88 23       	and	r24, r24
    22f2:	4a f0       	brmi	.+18     	; 0x2306 <__mulsf3_pse+0x7a>
    22f4:	ee 0f       	add	r30, r30
    22f6:	ff 1f       	adc	r31, r31
    22f8:	bb 1f       	adc	r27, r27
    22fa:	66 1f       	adc	r22, r22
    22fc:	77 1f       	adc	r23, r23
    22fe:	88 1f       	adc	r24, r24
    2300:	91 50       	subi	r25, 0x01	; 1
    2302:	50 40       	sbci	r21, 0x00	; 0
    2304:	a9 f7       	brne	.-22     	; 0x22f0 <__mulsf3_pse+0x64>
    2306:	9e 3f       	cpi	r25, 0xFE	; 254
    2308:	51 05       	cpc	r21, r1
    230a:	80 f0       	brcs	.+32     	; 0x232c <__mulsf3_pse+0xa0>
    230c:	0c 94 da 10 	jmp	0x21b4	; 0x21b4 <__fp_inf>
    2310:	0c 94 25 11 	jmp	0x224a	; 0x224a <__fp_szero>
    2314:	5f 3f       	cpi	r21, 0xFF	; 255
    2316:	e4 f3       	brlt	.-8      	; 0x2310 <__mulsf3_pse+0x84>
    2318:	98 3e       	cpi	r25, 0xE8	; 232
    231a:	d4 f3       	brlt	.-12     	; 0x2310 <__mulsf3_pse+0x84>
    231c:	86 95       	lsr	r24
    231e:	77 95       	ror	r23
    2320:	67 95       	ror	r22
    2322:	b7 95       	ror	r27
    2324:	f7 95       	ror	r31
    2326:	e7 95       	ror	r30
    2328:	9f 5f       	subi	r25, 0xFF	; 255
    232a:	c1 f7       	brne	.-16     	; 0x231c <__mulsf3_pse+0x90>
    232c:	fe 2b       	or	r31, r30
    232e:	88 0f       	add	r24, r24
    2330:	91 1d       	adc	r25, r1
    2332:	96 95       	lsr	r25
    2334:	87 95       	ror	r24
    2336:	97 f9       	bld	r25, 7
    2338:	08 95       	ret

0000233a <vfprintf>:
    233a:	a3 e1       	ldi	r26, 0x13	; 19
    233c:	b0 e0       	ldi	r27, 0x00	; 0
    233e:	e3 ea       	ldi	r30, 0xA3	; 163
    2340:	f1 e1       	ldi	r31, 0x11	; 17
    2342:	0c 94 46 15 	jmp	0x2a8c	; 0x2a8c <__prologue_saves__>
    2346:	6c 01       	movw	r12, r24
    2348:	4b 01       	movw	r8, r22
    234a:	2a 01       	movw	r4, r20
    234c:	fc 01       	movw	r30, r24
    234e:	17 82       	std	Z+7, r1	; 0x07
    2350:	16 82       	std	Z+6, r1	; 0x06
    2352:	83 81       	ldd	r24, Z+3	; 0x03
    2354:	81 ff       	sbrs	r24, 1
    2356:	43 c3       	rjmp	.+1670   	; 0x29de <vfprintf+0x6a4>
    2358:	ae 01       	movw	r20, r28
    235a:	4f 5f       	subi	r20, 0xFF	; 255
    235c:	5f 4f       	sbci	r21, 0xFF	; 255
    235e:	3a 01       	movw	r6, r20
    2360:	f6 01       	movw	r30, r12
    2362:	93 81       	ldd	r25, Z+3	; 0x03
    2364:	f4 01       	movw	r30, r8
    2366:	93 fd       	sbrc	r25, 3
    2368:	85 91       	lpm	r24, Z+
    236a:	93 ff       	sbrs	r25, 3
    236c:	81 91       	ld	r24, Z+
    236e:	4f 01       	movw	r8, r30
    2370:	88 23       	and	r24, r24
    2372:	09 f4       	brne	.+2      	; 0x2376 <vfprintf+0x3c>
    2374:	30 c3       	rjmp	.+1632   	; 0x29d6 <vfprintf+0x69c>
    2376:	85 32       	cpi	r24, 0x25	; 37
    2378:	39 f4       	brne	.+14     	; 0x2388 <vfprintf+0x4e>
    237a:	93 fd       	sbrc	r25, 3
    237c:	85 91       	lpm	r24, Z+
    237e:	93 ff       	sbrs	r25, 3
    2380:	81 91       	ld	r24, Z+
    2382:	4f 01       	movw	r8, r30
    2384:	85 32       	cpi	r24, 0x25	; 37
    2386:	39 f4       	brne	.+14     	; 0x2396 <vfprintf+0x5c>
    2388:	b6 01       	movw	r22, r12
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <fputc>
    2390:	52 01       	movw	r10, r4
    2392:	25 01       	movw	r4, r10
    2394:	e5 cf       	rjmp	.-54     	; 0x2360 <vfprintf+0x26>
    2396:	10 e0       	ldi	r17, 0x00	; 0
    2398:	f1 2c       	mov	r15, r1
    239a:	20 e0       	ldi	r18, 0x00	; 0
    239c:	20 32       	cpi	r18, 0x20	; 32
    239e:	a0 f4       	brcc	.+40     	; 0x23c8 <vfprintf+0x8e>
    23a0:	8b 32       	cpi	r24, 0x2B	; 43
    23a2:	69 f0       	breq	.+26     	; 0x23be <vfprintf+0x84>
    23a4:	30 f4       	brcc	.+12     	; 0x23b2 <vfprintf+0x78>
    23a6:	80 32       	cpi	r24, 0x20	; 32
    23a8:	59 f0       	breq	.+22     	; 0x23c0 <vfprintf+0x86>
    23aa:	83 32       	cpi	r24, 0x23	; 35
    23ac:	69 f4       	brne	.+26     	; 0x23c8 <vfprintf+0x8e>
    23ae:	20 61       	ori	r18, 0x10	; 16
    23b0:	2c c0       	rjmp	.+88     	; 0x240a <vfprintf+0xd0>
    23b2:	8d 32       	cpi	r24, 0x2D	; 45
    23b4:	39 f0       	breq	.+14     	; 0x23c4 <vfprintf+0x8a>
    23b6:	80 33       	cpi	r24, 0x30	; 48
    23b8:	39 f4       	brne	.+14     	; 0x23c8 <vfprintf+0x8e>
    23ba:	21 60       	ori	r18, 0x01	; 1
    23bc:	26 c0       	rjmp	.+76     	; 0x240a <vfprintf+0xd0>
    23be:	22 60       	ori	r18, 0x02	; 2
    23c0:	24 60       	ori	r18, 0x04	; 4
    23c2:	23 c0       	rjmp	.+70     	; 0x240a <vfprintf+0xd0>
    23c4:	28 60       	ori	r18, 0x08	; 8
    23c6:	21 c0       	rjmp	.+66     	; 0x240a <vfprintf+0xd0>
    23c8:	27 fd       	sbrc	r18, 7
    23ca:	27 c0       	rjmp	.+78     	; 0x241a <vfprintf+0xe0>
    23cc:	30 ed       	ldi	r19, 0xD0	; 208
    23ce:	38 0f       	add	r19, r24
    23d0:	3a 30       	cpi	r19, 0x0A	; 10
    23d2:	78 f4       	brcc	.+30     	; 0x23f2 <vfprintf+0xb8>
    23d4:	26 ff       	sbrs	r18, 6
    23d6:	06 c0       	rjmp	.+12     	; 0x23e4 <vfprintf+0xaa>
    23d8:	fa e0       	ldi	r31, 0x0A	; 10
    23da:	1f 9f       	mul	r17, r31
    23dc:	30 0d       	add	r19, r0
    23de:	11 24       	eor	r1, r1
    23e0:	13 2f       	mov	r17, r19
    23e2:	13 c0       	rjmp	.+38     	; 0x240a <vfprintf+0xd0>
    23e4:	4a e0       	ldi	r20, 0x0A	; 10
    23e6:	f4 9e       	mul	r15, r20
    23e8:	30 0d       	add	r19, r0
    23ea:	11 24       	eor	r1, r1
    23ec:	f3 2e       	mov	r15, r19
    23ee:	20 62       	ori	r18, 0x20	; 32
    23f0:	0c c0       	rjmp	.+24     	; 0x240a <vfprintf+0xd0>
    23f2:	8e 32       	cpi	r24, 0x2E	; 46
    23f4:	21 f4       	brne	.+8      	; 0x23fe <vfprintf+0xc4>
    23f6:	26 fd       	sbrc	r18, 6
    23f8:	ee c2       	rjmp	.+1500   	; 0x29d6 <vfprintf+0x69c>
    23fa:	20 64       	ori	r18, 0x40	; 64
    23fc:	06 c0       	rjmp	.+12     	; 0x240a <vfprintf+0xd0>
    23fe:	8c 36       	cpi	r24, 0x6C	; 108
    2400:	11 f4       	brne	.+4      	; 0x2406 <vfprintf+0xcc>
    2402:	20 68       	ori	r18, 0x80	; 128
    2404:	02 c0       	rjmp	.+4      	; 0x240a <vfprintf+0xd0>
    2406:	88 36       	cpi	r24, 0x68	; 104
    2408:	41 f4       	brne	.+16     	; 0x241a <vfprintf+0xe0>
    240a:	f4 01       	movw	r30, r8
    240c:	93 fd       	sbrc	r25, 3
    240e:	85 91       	lpm	r24, Z+
    2410:	93 ff       	sbrs	r25, 3
    2412:	81 91       	ld	r24, Z+
    2414:	4f 01       	movw	r8, r30
    2416:	81 11       	cpse	r24, r1
    2418:	c1 cf       	rjmp	.-126    	; 0x239c <vfprintf+0x62>
    241a:	9b eb       	ldi	r25, 0xBB	; 187
    241c:	98 0f       	add	r25, r24
    241e:	93 30       	cpi	r25, 0x03	; 3
    2420:	18 f4       	brcc	.+6      	; 0x2428 <vfprintf+0xee>
    2422:	20 61       	ori	r18, 0x10	; 16
    2424:	80 5e       	subi	r24, 0xE0	; 224
    2426:	06 c0       	rjmp	.+12     	; 0x2434 <vfprintf+0xfa>
    2428:	9b e9       	ldi	r25, 0x9B	; 155
    242a:	98 0f       	add	r25, r24
    242c:	93 30       	cpi	r25, 0x03	; 3
    242e:	08 f0       	brcs	.+2      	; 0x2432 <vfprintf+0xf8>
    2430:	71 c1       	rjmp	.+738    	; 0x2714 <vfprintf+0x3da>
    2432:	2f 7e       	andi	r18, 0xEF	; 239
    2434:	26 ff       	sbrs	r18, 6
    2436:	16 e0       	ldi	r17, 0x06	; 6
    2438:	2f 73       	andi	r18, 0x3F	; 63
    243a:	32 2e       	mov	r3, r18
    243c:	85 36       	cpi	r24, 0x65	; 101
    243e:	19 f4       	brne	.+6      	; 0x2446 <vfprintf+0x10c>
    2440:	20 64       	ori	r18, 0x40	; 64
    2442:	32 2e       	mov	r3, r18
    2444:	08 c0       	rjmp	.+16     	; 0x2456 <vfprintf+0x11c>
    2446:	86 36       	cpi	r24, 0x66	; 102
    2448:	21 f4       	brne	.+8      	; 0x2452 <vfprintf+0x118>
    244a:	f2 2f       	mov	r31, r18
    244c:	f0 68       	ori	r31, 0x80	; 128
    244e:	3f 2e       	mov	r3, r31
    2450:	02 c0       	rjmp	.+4      	; 0x2456 <vfprintf+0x11c>
    2452:	11 11       	cpse	r17, r1
    2454:	11 50       	subi	r17, 0x01	; 1
    2456:	37 fe       	sbrs	r3, 7
    2458:	07 c0       	rjmp	.+14     	; 0x2468 <vfprintf+0x12e>
    245a:	1c 33       	cpi	r17, 0x3C	; 60
    245c:	50 f4       	brcc	.+20     	; 0x2472 <vfprintf+0x138>
    245e:	ee 24       	eor	r14, r14
    2460:	e3 94       	inc	r14
    2462:	e1 0e       	add	r14, r17
    2464:	27 e0       	ldi	r18, 0x07	; 7
    2466:	0b c0       	rjmp	.+22     	; 0x247e <vfprintf+0x144>
    2468:	18 30       	cpi	r17, 0x08	; 8
    246a:	38 f0       	brcs	.+14     	; 0x247a <vfprintf+0x140>
    246c:	27 e0       	ldi	r18, 0x07	; 7
    246e:	17 e0       	ldi	r17, 0x07	; 7
    2470:	05 c0       	rjmp	.+10     	; 0x247c <vfprintf+0x142>
    2472:	27 e0       	ldi	r18, 0x07	; 7
    2474:	4c e3       	ldi	r20, 0x3C	; 60
    2476:	e4 2e       	mov	r14, r20
    2478:	02 c0       	rjmp	.+4      	; 0x247e <vfprintf+0x144>
    247a:	21 2f       	mov	r18, r17
    247c:	e1 2c       	mov	r14, r1
    247e:	52 01       	movw	r10, r4
    2480:	44 e0       	ldi	r20, 0x04	; 4
    2482:	a4 0e       	add	r10, r20
    2484:	b1 1c       	adc	r11, r1
    2486:	f2 01       	movw	r30, r4
    2488:	60 81       	ld	r22, Z
    248a:	71 81       	ldd	r23, Z+1	; 0x01
    248c:	82 81       	ldd	r24, Z+2	; 0x02
    248e:	93 81       	ldd	r25, Z+3	; 0x03
    2490:	0e 2d       	mov	r16, r14
    2492:	a3 01       	movw	r20, r6
    2494:	0e 94 92 15 	call	0x2b24	; 0x2b24 <__ftoa_engine>
    2498:	2c 01       	movw	r4, r24
    249a:	09 81       	ldd	r16, Y+1	; 0x01
    249c:	00 ff       	sbrs	r16, 0
    249e:	02 c0       	rjmp	.+4      	; 0x24a4 <vfprintf+0x16a>
    24a0:	03 ff       	sbrs	r16, 3
    24a2:	07 c0       	rjmp	.+14     	; 0x24b2 <vfprintf+0x178>
    24a4:	31 fc       	sbrc	r3, 1
    24a6:	08 c0       	rjmp	.+16     	; 0x24b8 <vfprintf+0x17e>
    24a8:	32 fe       	sbrs	r3, 2
    24aa:	09 c0       	rjmp	.+18     	; 0x24be <vfprintf+0x184>
    24ac:	30 e2       	ldi	r19, 0x20	; 32
    24ae:	23 2e       	mov	r2, r19
    24b0:	07 c0       	rjmp	.+14     	; 0x24c0 <vfprintf+0x186>
    24b2:	2d e2       	ldi	r18, 0x2D	; 45
    24b4:	22 2e       	mov	r2, r18
    24b6:	04 c0       	rjmp	.+8      	; 0x24c0 <vfprintf+0x186>
    24b8:	9b e2       	ldi	r25, 0x2B	; 43
    24ba:	29 2e       	mov	r2, r25
    24bc:	01 c0       	rjmp	.+2      	; 0x24c0 <vfprintf+0x186>
    24be:	21 2c       	mov	r2, r1
    24c0:	80 2f       	mov	r24, r16
    24c2:	8c 70       	andi	r24, 0x0C	; 12
    24c4:	19 f0       	breq	.+6      	; 0x24cc <vfprintf+0x192>
    24c6:	21 10       	cpse	r2, r1
    24c8:	68 c2       	rjmp	.+1232   	; 0x299a <vfprintf+0x660>
    24ca:	a8 c2       	rjmp	.+1360   	; 0x2a1c <vfprintf+0x6e2>
    24cc:	37 fe       	sbrs	r3, 7
    24ce:	0f c0       	rjmp	.+30     	; 0x24ee <vfprintf+0x1b4>
    24d0:	e4 0c       	add	r14, r4
    24d2:	04 ff       	sbrs	r16, 4
    24d4:	04 c0       	rjmp	.+8      	; 0x24de <vfprintf+0x1a4>
    24d6:	8a 81       	ldd	r24, Y+2	; 0x02
    24d8:	81 33       	cpi	r24, 0x31	; 49
    24da:	09 f4       	brne	.+2      	; 0x24de <vfprintf+0x1a4>
    24dc:	ea 94       	dec	r14
    24de:	1e 14       	cp	r1, r14
    24e0:	74 f5       	brge	.+92     	; 0x253e <vfprintf+0x204>
    24e2:	f8 e0       	ldi	r31, 0x08	; 8
    24e4:	fe 15       	cp	r31, r14
    24e6:	78 f5       	brcc	.+94     	; 0x2546 <vfprintf+0x20c>
    24e8:	88 e0       	ldi	r24, 0x08	; 8
    24ea:	e8 2e       	mov	r14, r24
    24ec:	2c c0       	rjmp	.+88     	; 0x2546 <vfprintf+0x20c>
    24ee:	36 fc       	sbrc	r3, 6
    24f0:	2a c0       	rjmp	.+84     	; 0x2546 <vfprintf+0x20c>
    24f2:	81 2f       	mov	r24, r17
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	84 15       	cp	r24, r4
    24f8:	95 05       	cpc	r25, r5
    24fa:	9c f0       	brlt	.+38     	; 0x2522 <vfprintf+0x1e8>
    24fc:	2c ef       	ldi	r18, 0xFC	; 252
    24fe:	42 16       	cp	r4, r18
    2500:	2f ef       	ldi	r18, 0xFF	; 255
    2502:	52 06       	cpc	r5, r18
    2504:	74 f0       	brlt	.+28     	; 0x2522 <vfprintf+0x1e8>
    2506:	43 2d       	mov	r20, r3
    2508:	40 68       	ori	r20, 0x80	; 128
    250a:	34 2e       	mov	r3, r20
    250c:	0a c0       	rjmp	.+20     	; 0x2522 <vfprintf+0x1e8>
    250e:	e2 e0       	ldi	r30, 0x02	; 2
    2510:	f0 e0       	ldi	r31, 0x00	; 0
    2512:	ec 0f       	add	r30, r28
    2514:	fd 1f       	adc	r31, r29
    2516:	e1 0f       	add	r30, r17
    2518:	f1 1d       	adc	r31, r1
    251a:	80 81       	ld	r24, Z
    251c:	80 33       	cpi	r24, 0x30	; 48
    251e:	19 f4       	brne	.+6      	; 0x2526 <vfprintf+0x1ec>
    2520:	11 50       	subi	r17, 0x01	; 1
    2522:	11 11       	cpse	r17, r1
    2524:	f4 cf       	rjmp	.-24     	; 0x250e <vfprintf+0x1d4>
    2526:	37 fe       	sbrs	r3, 7
    2528:	0e c0       	rjmp	.+28     	; 0x2546 <vfprintf+0x20c>
    252a:	ee 24       	eor	r14, r14
    252c:	e3 94       	inc	r14
    252e:	e1 0e       	add	r14, r17
    2530:	81 2f       	mov	r24, r17
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	48 16       	cp	r4, r24
    2536:	59 06       	cpc	r5, r25
    2538:	2c f4       	brge	.+10     	; 0x2544 <vfprintf+0x20a>
    253a:	14 19       	sub	r17, r4
    253c:	04 c0       	rjmp	.+8      	; 0x2546 <vfprintf+0x20c>
    253e:	ee 24       	eor	r14, r14
    2540:	e3 94       	inc	r14
    2542:	01 c0       	rjmp	.+2      	; 0x2546 <vfprintf+0x20c>
    2544:	10 e0       	ldi	r17, 0x00	; 0
    2546:	37 fe       	sbrs	r3, 7
    2548:	06 c0       	rjmp	.+12     	; 0x2556 <vfprintf+0x21c>
    254a:	14 14       	cp	r1, r4
    254c:	15 04       	cpc	r1, r5
    254e:	34 f4       	brge	.+12     	; 0x255c <vfprintf+0x222>
    2550:	c2 01       	movw	r24, r4
    2552:	01 96       	adiw	r24, 0x01	; 1
    2554:	05 c0       	rjmp	.+10     	; 0x2560 <vfprintf+0x226>
    2556:	85 e0       	ldi	r24, 0x05	; 5
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	02 c0       	rjmp	.+4      	; 0x2560 <vfprintf+0x226>
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	21 10       	cpse	r2, r1
    2562:	01 96       	adiw	r24, 0x01	; 1
    2564:	11 23       	and	r17, r17
    2566:	31 f0       	breq	.+12     	; 0x2574 <vfprintf+0x23a>
    2568:	21 2f       	mov	r18, r17
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	2f 5f       	subi	r18, 0xFF	; 255
    256e:	3f 4f       	sbci	r19, 0xFF	; 255
    2570:	82 0f       	add	r24, r18
    2572:	93 1f       	adc	r25, r19
    2574:	2f 2d       	mov	r18, r15
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	82 17       	cp	r24, r18
    257a:	93 07       	cpc	r25, r19
    257c:	14 f4       	brge	.+4      	; 0x2582 <vfprintf+0x248>
    257e:	f8 1a       	sub	r15, r24
    2580:	01 c0       	rjmp	.+2      	; 0x2584 <vfprintf+0x24a>
    2582:	f1 2c       	mov	r15, r1
    2584:	83 2d       	mov	r24, r3
    2586:	89 70       	andi	r24, 0x09	; 9
    2588:	49 f4       	brne	.+18     	; 0x259c <vfprintf+0x262>
    258a:	ff 20       	and	r15, r15
    258c:	39 f0       	breq	.+14     	; 0x259c <vfprintf+0x262>
    258e:	b6 01       	movw	r22, r12
    2590:	80 e2       	ldi	r24, 0x20	; 32
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <fputc>
    2598:	fa 94       	dec	r15
    259a:	f7 cf       	rjmp	.-18     	; 0x258a <vfprintf+0x250>
    259c:	22 20       	and	r2, r2
    259e:	29 f0       	breq	.+10     	; 0x25aa <vfprintf+0x270>
    25a0:	b6 01       	movw	r22, r12
    25a2:	82 2d       	mov	r24, r2
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <fputc>
    25aa:	33 fc       	sbrc	r3, 3
    25ac:	09 c0       	rjmp	.+18     	; 0x25c0 <vfprintf+0x286>
    25ae:	ff 20       	and	r15, r15
    25b0:	39 f0       	breq	.+14     	; 0x25c0 <vfprintf+0x286>
    25b2:	b6 01       	movw	r22, r12
    25b4:	80 e3       	ldi	r24, 0x30	; 48
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <fputc>
    25bc:	fa 94       	dec	r15
    25be:	f7 cf       	rjmp	.-18     	; 0x25ae <vfprintf+0x274>
    25c0:	37 fe       	sbrs	r3, 7
    25c2:	5a c0       	rjmp	.+180    	; 0x2678 <vfprintf+0x33e>
    25c4:	94 2d       	mov	r25, r4
    25c6:	85 2d       	mov	r24, r5
    25c8:	57 fe       	sbrs	r5, 7
    25ca:	02 c0       	rjmp	.+4      	; 0x25d0 <vfprintf+0x296>
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	80 e0       	ldi	r24, 0x00	; 0
    25d0:	29 2e       	mov	r2, r25
    25d2:	38 2e       	mov	r3, r24
    25d4:	20 e0       	ldi	r18, 0x00	; 0
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	a2 01       	movw	r20, r4
    25da:	4e 19       	sub	r20, r14
    25dc:	51 09       	sbc	r21, r1
    25de:	5d 87       	std	Y+13, r21	; 0x0d
    25e0:	4c 87       	std	Y+12, r20	; 0x0c
    25e2:	a2 01       	movw	r20, r4
    25e4:	42 19       	sub	r20, r2
    25e6:	53 09       	sbc	r21, r3
    25e8:	5f 87       	std	Y+15, r21	; 0x0f
    25ea:	4e 87       	std	Y+14, r20	; 0x0e
    25ec:	61 2f       	mov	r22, r17
    25ee:	70 e0       	ldi	r23, 0x00	; 0
    25f0:	44 27       	eor	r20, r20
    25f2:	55 27       	eor	r21, r21
    25f4:	46 1b       	sub	r20, r22
    25f6:	57 0b       	sbc	r21, r23
    25f8:	59 8b       	std	Y+17, r21	; 0x11
    25fa:	48 8b       	std	Y+16, r20	; 0x10
    25fc:	5f ef       	ldi	r21, 0xFF	; 255
    25fe:	25 16       	cp	r2, r21
    2600:	35 06       	cpc	r3, r21
    2602:	49 f4       	brne	.+18     	; 0x2616 <vfprintf+0x2dc>
    2604:	b6 01       	movw	r22, r12
    2606:	8e e2       	ldi	r24, 0x2E	; 46
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	2a 8b       	std	Y+18, r18	; 0x12
    260c:	3b 8b       	std	Y+19, r19	; 0x13
    260e:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <fputc>
    2612:	3b 89       	ldd	r19, Y+19	; 0x13
    2614:	2a 89       	ldd	r18, Y+18	; 0x12
    2616:	42 14       	cp	r4, r2
    2618:	53 04       	cpc	r5, r3
    261a:	6c f0       	brlt	.+26     	; 0x2636 <vfprintf+0x2fc>
    261c:	4c 85       	ldd	r20, Y+12	; 0x0c
    261e:	5d 85       	ldd	r21, Y+13	; 0x0d
    2620:	42 15       	cp	r20, r2
    2622:	53 05       	cpc	r21, r3
    2624:	44 f4       	brge	.+16     	; 0x2636 <vfprintf+0x2fc>
    2626:	ee 85       	ldd	r30, Y+14	; 0x0e
    2628:	ff 85       	ldd	r31, Y+15	; 0x0f
    262a:	e2 0f       	add	r30, r18
    262c:	f3 1f       	adc	r31, r19
    262e:	e6 0d       	add	r30, r6
    2630:	f7 1d       	adc	r31, r7
    2632:	81 81       	ldd	r24, Z+1	; 0x01
    2634:	01 c0       	rjmp	.+2      	; 0x2638 <vfprintf+0x2fe>
    2636:	80 e3       	ldi	r24, 0x30	; 48
    2638:	51 e0       	ldi	r21, 0x01	; 1
    263a:	25 1a       	sub	r2, r21
    263c:	31 08       	sbc	r3, r1
    263e:	2f 5f       	subi	r18, 0xFF	; 255
    2640:	3f 4f       	sbci	r19, 0xFF	; 255
    2642:	48 89       	ldd	r20, Y+16	; 0x10
    2644:	59 89       	ldd	r21, Y+17	; 0x11
    2646:	24 16       	cp	r2, r20
    2648:	35 06       	cpc	r3, r21
    264a:	4c f0       	brlt	.+18     	; 0x265e <vfprintf+0x324>
    264c:	b6 01       	movw	r22, r12
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	2a 8b       	std	Y+18, r18	; 0x12
    2652:	3b 8b       	std	Y+19, r19	; 0x13
    2654:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <fputc>
    2658:	2a 89       	ldd	r18, Y+18	; 0x12
    265a:	3b 89       	ldd	r19, Y+19	; 0x13
    265c:	cf cf       	rjmp	.-98     	; 0x25fc <vfprintf+0x2c2>
    265e:	24 14       	cp	r2, r4
    2660:	35 04       	cpc	r3, r5
    2662:	39 f4       	brne	.+14     	; 0x2672 <vfprintf+0x338>
    2664:	9a 81       	ldd	r25, Y+2	; 0x02
    2666:	96 33       	cpi	r25, 0x36	; 54
    2668:	18 f4       	brcc	.+6      	; 0x2670 <vfprintf+0x336>
    266a:	95 33       	cpi	r25, 0x35	; 53
    266c:	11 f4       	brne	.+4      	; 0x2672 <vfprintf+0x338>
    266e:	04 ff       	sbrs	r16, 4
    2670:	81 e3       	ldi	r24, 0x31	; 49
    2672:	b6 01       	movw	r22, r12
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	4b c0       	rjmp	.+150    	; 0x270e <vfprintf+0x3d4>
    2678:	8a 81       	ldd	r24, Y+2	; 0x02
    267a:	81 33       	cpi	r24, 0x31	; 49
    267c:	09 f0       	breq	.+2      	; 0x2680 <vfprintf+0x346>
    267e:	0f 7e       	andi	r16, 0xEF	; 239
    2680:	b6 01       	movw	r22, r12
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <fputc>
    2688:	11 11       	cpse	r17, r1
    268a:	05 c0       	rjmp	.+10     	; 0x2696 <vfprintf+0x35c>
    268c:	34 fc       	sbrc	r3, 4
    268e:	18 c0       	rjmp	.+48     	; 0x26c0 <vfprintf+0x386>
    2690:	85 e6       	ldi	r24, 0x65	; 101
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	17 c0       	rjmp	.+46     	; 0x26c4 <vfprintf+0x38a>
    2696:	b6 01       	movw	r22, r12
    2698:	8e e2       	ldi	r24, 0x2E	; 46
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <fputc>
    26a0:	82 e0       	ldi	r24, 0x02	; 2
    26a2:	ee 24       	eor	r14, r14
    26a4:	e3 94       	inc	r14
    26a6:	e8 0e       	add	r14, r24
    26a8:	f3 01       	movw	r30, r6
    26aa:	e8 0f       	add	r30, r24
    26ac:	f1 1d       	adc	r31, r1
    26ae:	80 81       	ld	r24, Z
    26b0:	b6 01       	movw	r22, r12
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <fputc>
    26b8:	11 50       	subi	r17, 0x01	; 1
    26ba:	8e 2d       	mov	r24, r14
    26bc:	91 f7       	brne	.-28     	; 0x26a2 <vfprintf+0x368>
    26be:	e6 cf       	rjmp	.-52     	; 0x268c <vfprintf+0x352>
    26c0:	85 e4       	ldi	r24, 0x45	; 69
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	b6 01       	movw	r22, r12
    26c6:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <fputc>
    26ca:	57 fc       	sbrc	r5, 7
    26cc:	05 c0       	rjmp	.+10     	; 0x26d8 <vfprintf+0x39e>
    26ce:	41 14       	cp	r4, r1
    26d0:	51 04       	cpc	r5, r1
    26d2:	39 f4       	brne	.+14     	; 0x26e2 <vfprintf+0x3a8>
    26d4:	04 ff       	sbrs	r16, 4
    26d6:	05 c0       	rjmp	.+10     	; 0x26e2 <vfprintf+0x3a8>
    26d8:	51 94       	neg	r5
    26da:	41 94       	neg	r4
    26dc:	51 08       	sbc	r5, r1
    26de:	8d e2       	ldi	r24, 0x2D	; 45
    26e0:	01 c0       	rjmp	.+2      	; 0x26e4 <vfprintf+0x3aa>
    26e2:	8b e2       	ldi	r24, 0x2B	; 43
    26e4:	b6 01       	movw	r22, r12
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <fputc>
    26ec:	80 e3       	ldi	r24, 0x30	; 48
    26ee:	9a e0       	ldi	r25, 0x0A	; 10
    26f0:	49 16       	cp	r4, r25
    26f2:	51 04       	cpc	r5, r1
    26f4:	2c f0       	brlt	.+10     	; 0x2700 <vfprintf+0x3c6>
    26f6:	8f 5f       	subi	r24, 0xFF	; 255
    26f8:	5a e0       	ldi	r21, 0x0A	; 10
    26fa:	45 1a       	sub	r4, r21
    26fc:	51 08       	sbc	r5, r1
    26fe:	f7 cf       	rjmp	.-18     	; 0x26ee <vfprintf+0x3b4>
    2700:	b6 01       	movw	r22, r12
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <fputc>
    2708:	b6 01       	movw	r22, r12
    270a:	c2 01       	movw	r24, r4
    270c:	c0 96       	adiw	r24, 0x30	; 48
    270e:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <fputc>
    2712:	57 c1       	rjmp	.+686    	; 0x29c2 <vfprintf+0x688>
    2714:	83 36       	cpi	r24, 0x63	; 99
    2716:	31 f0       	breq	.+12     	; 0x2724 <vfprintf+0x3ea>
    2718:	83 37       	cpi	r24, 0x73	; 115
    271a:	79 f0       	breq	.+30     	; 0x273a <vfprintf+0x400>
    271c:	83 35       	cpi	r24, 0x53	; 83
    271e:	09 f0       	breq	.+2      	; 0x2722 <vfprintf+0x3e8>
    2720:	58 c0       	rjmp	.+176    	; 0x27d2 <vfprintf+0x498>
    2722:	21 c0       	rjmp	.+66     	; 0x2766 <vfprintf+0x42c>
    2724:	52 01       	movw	r10, r4
    2726:	e2 e0       	ldi	r30, 0x02	; 2
    2728:	ae 0e       	add	r10, r30
    272a:	b1 1c       	adc	r11, r1
    272c:	f2 01       	movw	r30, r4
    272e:	80 81       	ld	r24, Z
    2730:	89 83       	std	Y+1, r24	; 0x01
    2732:	01 e0       	ldi	r16, 0x01	; 1
    2734:	10 e0       	ldi	r17, 0x00	; 0
    2736:	23 01       	movw	r4, r6
    2738:	14 c0       	rjmp	.+40     	; 0x2762 <vfprintf+0x428>
    273a:	52 01       	movw	r10, r4
    273c:	f2 e0       	ldi	r31, 0x02	; 2
    273e:	af 0e       	add	r10, r31
    2740:	b1 1c       	adc	r11, r1
    2742:	f2 01       	movw	r30, r4
    2744:	40 80       	ld	r4, Z
    2746:	51 80       	ldd	r5, Z+1	; 0x01
    2748:	26 ff       	sbrs	r18, 6
    274a:	03 c0       	rjmp	.+6      	; 0x2752 <vfprintf+0x418>
    274c:	61 2f       	mov	r22, r17
    274e:	70 e0       	ldi	r23, 0x00	; 0
    2750:	02 c0       	rjmp	.+4      	; 0x2756 <vfprintf+0x41c>
    2752:	6f ef       	ldi	r22, 0xFF	; 255
    2754:	7f ef       	ldi	r23, 0xFF	; 255
    2756:	c2 01       	movw	r24, r4
    2758:	2a 8b       	std	Y+18, r18	; 0x12
    275a:	0e 94 80 16 	call	0x2d00	; 0x2d00 <strnlen>
    275e:	8c 01       	movw	r16, r24
    2760:	2a 89       	ldd	r18, Y+18	; 0x12
    2762:	2f 77       	andi	r18, 0x7F	; 127
    2764:	15 c0       	rjmp	.+42     	; 0x2790 <vfprintf+0x456>
    2766:	52 01       	movw	r10, r4
    2768:	f2 e0       	ldi	r31, 0x02	; 2
    276a:	af 0e       	add	r10, r31
    276c:	b1 1c       	adc	r11, r1
    276e:	f2 01       	movw	r30, r4
    2770:	40 80       	ld	r4, Z
    2772:	51 80       	ldd	r5, Z+1	; 0x01
    2774:	26 ff       	sbrs	r18, 6
    2776:	03 c0       	rjmp	.+6      	; 0x277e <vfprintf+0x444>
    2778:	61 2f       	mov	r22, r17
    277a:	70 e0       	ldi	r23, 0x00	; 0
    277c:	02 c0       	rjmp	.+4      	; 0x2782 <vfprintf+0x448>
    277e:	6f ef       	ldi	r22, 0xFF	; 255
    2780:	7f ef       	ldi	r23, 0xFF	; 255
    2782:	c2 01       	movw	r24, r4
    2784:	2a 8b       	std	Y+18, r18	; 0x12
    2786:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <strnlen_P>
    278a:	8c 01       	movw	r16, r24
    278c:	2a 89       	ldd	r18, Y+18	; 0x12
    278e:	20 68       	ori	r18, 0x80	; 128
    2790:	32 2e       	mov	r3, r18
    2792:	23 fd       	sbrc	r18, 3
    2794:	1a c0       	rjmp	.+52     	; 0x27ca <vfprintf+0x490>
    2796:	8f 2d       	mov	r24, r15
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	08 17       	cp	r16, r24
    279c:	19 07       	cpc	r17, r25
    279e:	a8 f4       	brcc	.+42     	; 0x27ca <vfprintf+0x490>
    27a0:	b6 01       	movw	r22, r12
    27a2:	80 e2       	ldi	r24, 0x20	; 32
    27a4:	90 e0       	ldi	r25, 0x00	; 0
    27a6:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <fputc>
    27aa:	fa 94       	dec	r15
    27ac:	f4 cf       	rjmp	.-24     	; 0x2796 <vfprintf+0x45c>
    27ae:	f2 01       	movw	r30, r4
    27b0:	37 fc       	sbrc	r3, 7
    27b2:	85 91       	lpm	r24, Z+
    27b4:	37 fe       	sbrs	r3, 7
    27b6:	81 91       	ld	r24, Z+
    27b8:	2f 01       	movw	r4, r30
    27ba:	b6 01       	movw	r22, r12
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <fputc>
    27c2:	f1 10       	cpse	r15, r1
    27c4:	fa 94       	dec	r15
    27c6:	01 50       	subi	r16, 0x01	; 1
    27c8:	11 09       	sbc	r17, r1
    27ca:	01 15       	cp	r16, r1
    27cc:	11 05       	cpc	r17, r1
    27ce:	79 f7       	brne	.-34     	; 0x27ae <vfprintf+0x474>
    27d0:	f8 c0       	rjmp	.+496    	; 0x29c2 <vfprintf+0x688>
    27d2:	84 36       	cpi	r24, 0x64	; 100
    27d4:	11 f0       	breq	.+4      	; 0x27da <vfprintf+0x4a0>
    27d6:	89 36       	cpi	r24, 0x69	; 105
    27d8:	59 f5       	brne	.+86     	; 0x2830 <vfprintf+0x4f6>
    27da:	52 01       	movw	r10, r4
    27dc:	27 ff       	sbrs	r18, 7
    27de:	09 c0       	rjmp	.+18     	; 0x27f2 <vfprintf+0x4b8>
    27e0:	f4 e0       	ldi	r31, 0x04	; 4
    27e2:	af 0e       	add	r10, r31
    27e4:	b1 1c       	adc	r11, r1
    27e6:	f2 01       	movw	r30, r4
    27e8:	60 81       	ld	r22, Z
    27ea:	71 81       	ldd	r23, Z+1	; 0x01
    27ec:	82 81       	ldd	r24, Z+2	; 0x02
    27ee:	93 81       	ldd	r25, Z+3	; 0x03
    27f0:	0a c0       	rjmp	.+20     	; 0x2806 <vfprintf+0x4cc>
    27f2:	f2 e0       	ldi	r31, 0x02	; 2
    27f4:	af 0e       	add	r10, r31
    27f6:	b1 1c       	adc	r11, r1
    27f8:	f2 01       	movw	r30, r4
    27fa:	60 81       	ld	r22, Z
    27fc:	71 81       	ldd	r23, Z+1	; 0x01
    27fe:	07 2e       	mov	r0, r23
    2800:	00 0c       	add	r0, r0
    2802:	88 0b       	sbc	r24, r24
    2804:	99 0b       	sbc	r25, r25
    2806:	2f 76       	andi	r18, 0x6F	; 111
    2808:	32 2e       	mov	r3, r18
    280a:	97 ff       	sbrs	r25, 7
    280c:	09 c0       	rjmp	.+18     	; 0x2820 <vfprintf+0x4e6>
    280e:	90 95       	com	r25
    2810:	80 95       	com	r24
    2812:	70 95       	com	r23
    2814:	61 95       	neg	r22
    2816:	7f 4f       	sbci	r23, 0xFF	; 255
    2818:	8f 4f       	sbci	r24, 0xFF	; 255
    281a:	9f 4f       	sbci	r25, 0xFF	; 255
    281c:	20 68       	ori	r18, 0x80	; 128
    281e:	32 2e       	mov	r3, r18
    2820:	2a e0       	ldi	r18, 0x0A	; 10
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	a3 01       	movw	r20, r6
    2826:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <__ultoa_invert>
    282a:	e8 2e       	mov	r14, r24
    282c:	e6 18       	sub	r14, r6
    282e:	3f c0       	rjmp	.+126    	; 0x28ae <vfprintf+0x574>
    2830:	02 2f       	mov	r16, r18
    2832:	85 37       	cpi	r24, 0x75	; 117
    2834:	21 f4       	brne	.+8      	; 0x283e <vfprintf+0x504>
    2836:	0f 7e       	andi	r16, 0xEF	; 239
    2838:	2a e0       	ldi	r18, 0x0A	; 10
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	1d c0       	rjmp	.+58     	; 0x2878 <vfprintf+0x53e>
    283e:	09 7f       	andi	r16, 0xF9	; 249
    2840:	8f 36       	cpi	r24, 0x6F	; 111
    2842:	91 f0       	breq	.+36     	; 0x2868 <vfprintf+0x52e>
    2844:	18 f4       	brcc	.+6      	; 0x284c <vfprintf+0x512>
    2846:	88 35       	cpi	r24, 0x58	; 88
    2848:	59 f0       	breq	.+22     	; 0x2860 <vfprintf+0x526>
    284a:	c5 c0       	rjmp	.+394    	; 0x29d6 <vfprintf+0x69c>
    284c:	80 37       	cpi	r24, 0x70	; 112
    284e:	19 f0       	breq	.+6      	; 0x2856 <vfprintf+0x51c>
    2850:	88 37       	cpi	r24, 0x78	; 120
    2852:	11 f0       	breq	.+4      	; 0x2858 <vfprintf+0x51e>
    2854:	c0 c0       	rjmp	.+384    	; 0x29d6 <vfprintf+0x69c>
    2856:	00 61       	ori	r16, 0x10	; 16
    2858:	04 ff       	sbrs	r16, 4
    285a:	09 c0       	rjmp	.+18     	; 0x286e <vfprintf+0x534>
    285c:	04 60       	ori	r16, 0x04	; 4
    285e:	07 c0       	rjmp	.+14     	; 0x286e <vfprintf+0x534>
    2860:	24 ff       	sbrs	r18, 4
    2862:	08 c0       	rjmp	.+16     	; 0x2874 <vfprintf+0x53a>
    2864:	06 60       	ori	r16, 0x06	; 6
    2866:	06 c0       	rjmp	.+12     	; 0x2874 <vfprintf+0x53a>
    2868:	28 e0       	ldi	r18, 0x08	; 8
    286a:	30 e0       	ldi	r19, 0x00	; 0
    286c:	05 c0       	rjmp	.+10     	; 0x2878 <vfprintf+0x53e>
    286e:	20 e1       	ldi	r18, 0x10	; 16
    2870:	30 e0       	ldi	r19, 0x00	; 0
    2872:	02 c0       	rjmp	.+4      	; 0x2878 <vfprintf+0x53e>
    2874:	20 e1       	ldi	r18, 0x10	; 16
    2876:	32 e0       	ldi	r19, 0x02	; 2
    2878:	52 01       	movw	r10, r4
    287a:	07 ff       	sbrs	r16, 7
    287c:	09 c0       	rjmp	.+18     	; 0x2890 <vfprintf+0x556>
    287e:	f4 e0       	ldi	r31, 0x04	; 4
    2880:	af 0e       	add	r10, r31
    2882:	b1 1c       	adc	r11, r1
    2884:	f2 01       	movw	r30, r4
    2886:	60 81       	ld	r22, Z
    2888:	71 81       	ldd	r23, Z+1	; 0x01
    288a:	82 81       	ldd	r24, Z+2	; 0x02
    288c:	93 81       	ldd	r25, Z+3	; 0x03
    288e:	08 c0       	rjmp	.+16     	; 0x28a0 <vfprintf+0x566>
    2890:	f2 e0       	ldi	r31, 0x02	; 2
    2892:	af 0e       	add	r10, r31
    2894:	b1 1c       	adc	r11, r1
    2896:	f2 01       	movw	r30, r4
    2898:	60 81       	ld	r22, Z
    289a:	71 81       	ldd	r23, Z+1	; 0x01
    289c:	80 e0       	ldi	r24, 0x00	; 0
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	a3 01       	movw	r20, r6
    28a2:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <__ultoa_invert>
    28a6:	e8 2e       	mov	r14, r24
    28a8:	e6 18       	sub	r14, r6
    28aa:	0f 77       	andi	r16, 0x7F	; 127
    28ac:	30 2e       	mov	r3, r16
    28ae:	36 fe       	sbrs	r3, 6
    28b0:	0b c0       	rjmp	.+22     	; 0x28c8 <vfprintf+0x58e>
    28b2:	33 2d       	mov	r19, r3
    28b4:	3e 7f       	andi	r19, 0xFE	; 254
    28b6:	e1 16       	cp	r14, r17
    28b8:	50 f4       	brcc	.+20     	; 0x28ce <vfprintf+0x594>
    28ba:	34 fe       	sbrs	r3, 4
    28bc:	0a c0       	rjmp	.+20     	; 0x28d2 <vfprintf+0x598>
    28be:	32 fc       	sbrc	r3, 2
    28c0:	08 c0       	rjmp	.+16     	; 0x28d2 <vfprintf+0x598>
    28c2:	33 2d       	mov	r19, r3
    28c4:	3e 7e       	andi	r19, 0xEE	; 238
    28c6:	05 c0       	rjmp	.+10     	; 0x28d2 <vfprintf+0x598>
    28c8:	0e 2d       	mov	r16, r14
    28ca:	33 2d       	mov	r19, r3
    28cc:	03 c0       	rjmp	.+6      	; 0x28d4 <vfprintf+0x59a>
    28ce:	0e 2d       	mov	r16, r14
    28d0:	01 c0       	rjmp	.+2      	; 0x28d4 <vfprintf+0x59a>
    28d2:	01 2f       	mov	r16, r17
    28d4:	34 ff       	sbrs	r19, 4
    28d6:	0c c0       	rjmp	.+24     	; 0x28f0 <vfprintf+0x5b6>
    28d8:	fe 01       	movw	r30, r28
    28da:	ee 0d       	add	r30, r14
    28dc:	f1 1d       	adc	r31, r1
    28de:	80 81       	ld	r24, Z
    28e0:	80 33       	cpi	r24, 0x30	; 48
    28e2:	11 f4       	brne	.+4      	; 0x28e8 <vfprintf+0x5ae>
    28e4:	39 7e       	andi	r19, 0xE9	; 233
    28e6:	08 c0       	rjmp	.+16     	; 0x28f8 <vfprintf+0x5be>
    28e8:	32 ff       	sbrs	r19, 2
    28ea:	05 c0       	rjmp	.+10     	; 0x28f6 <vfprintf+0x5bc>
    28ec:	0e 5f       	subi	r16, 0xFE	; 254
    28ee:	04 c0       	rjmp	.+8      	; 0x28f8 <vfprintf+0x5be>
    28f0:	83 2f       	mov	r24, r19
    28f2:	86 78       	andi	r24, 0x86	; 134
    28f4:	09 f0       	breq	.+2      	; 0x28f8 <vfprintf+0x5be>
    28f6:	0f 5f       	subi	r16, 0xFF	; 255
    28f8:	33 fd       	sbrc	r19, 3
    28fa:	13 c0       	rjmp	.+38     	; 0x2922 <vfprintf+0x5e8>
    28fc:	30 ff       	sbrs	r19, 0
    28fe:	06 c0       	rjmp	.+12     	; 0x290c <vfprintf+0x5d2>
    2900:	1e 2d       	mov	r17, r14
    2902:	0f 15       	cp	r16, r15
    2904:	18 f4       	brcc	.+6      	; 0x290c <vfprintf+0x5d2>
    2906:	1f 0d       	add	r17, r15
    2908:	10 1b       	sub	r17, r16
    290a:	0f 2d       	mov	r16, r15
    290c:	0f 15       	cp	r16, r15
    290e:	68 f4       	brcc	.+26     	; 0x292a <vfprintf+0x5f0>
    2910:	b6 01       	movw	r22, r12
    2912:	80 e2       	ldi	r24, 0x20	; 32
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	3b 8b       	std	Y+19, r19	; 0x13
    2918:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <fputc>
    291c:	0f 5f       	subi	r16, 0xFF	; 255
    291e:	3b 89       	ldd	r19, Y+19	; 0x13
    2920:	f5 cf       	rjmp	.-22     	; 0x290c <vfprintf+0x5d2>
    2922:	0f 15       	cp	r16, r15
    2924:	10 f4       	brcc	.+4      	; 0x292a <vfprintf+0x5f0>
    2926:	f0 1a       	sub	r15, r16
    2928:	01 c0       	rjmp	.+2      	; 0x292c <vfprintf+0x5f2>
    292a:	f1 2c       	mov	r15, r1
    292c:	34 ff       	sbrs	r19, 4
    292e:	12 c0       	rjmp	.+36     	; 0x2954 <vfprintf+0x61a>
    2930:	b6 01       	movw	r22, r12
    2932:	80 e3       	ldi	r24, 0x30	; 48
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	3b 8b       	std	Y+19, r19	; 0x13
    2938:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <fputc>
    293c:	3b 89       	ldd	r19, Y+19	; 0x13
    293e:	32 ff       	sbrs	r19, 2
    2940:	17 c0       	rjmp	.+46     	; 0x2970 <vfprintf+0x636>
    2942:	31 fd       	sbrc	r19, 1
    2944:	03 c0       	rjmp	.+6      	; 0x294c <vfprintf+0x612>
    2946:	88 e7       	ldi	r24, 0x78	; 120
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	02 c0       	rjmp	.+4      	; 0x2950 <vfprintf+0x616>
    294c:	88 e5       	ldi	r24, 0x58	; 88
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	b6 01       	movw	r22, r12
    2952:	0c c0       	rjmp	.+24     	; 0x296c <vfprintf+0x632>
    2954:	83 2f       	mov	r24, r19
    2956:	86 78       	andi	r24, 0x86	; 134
    2958:	59 f0       	breq	.+22     	; 0x2970 <vfprintf+0x636>
    295a:	31 ff       	sbrs	r19, 1
    295c:	02 c0       	rjmp	.+4      	; 0x2962 <vfprintf+0x628>
    295e:	8b e2       	ldi	r24, 0x2B	; 43
    2960:	01 c0       	rjmp	.+2      	; 0x2964 <vfprintf+0x62a>
    2962:	80 e2       	ldi	r24, 0x20	; 32
    2964:	37 fd       	sbrc	r19, 7
    2966:	8d e2       	ldi	r24, 0x2D	; 45
    2968:	b6 01       	movw	r22, r12
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <fputc>
    2970:	e1 16       	cp	r14, r17
    2972:	38 f4       	brcc	.+14     	; 0x2982 <vfprintf+0x648>
    2974:	b6 01       	movw	r22, r12
    2976:	80 e3       	ldi	r24, 0x30	; 48
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <fputc>
    297e:	11 50       	subi	r17, 0x01	; 1
    2980:	f7 cf       	rjmp	.-18     	; 0x2970 <vfprintf+0x636>
    2982:	ea 94       	dec	r14
    2984:	f3 01       	movw	r30, r6
    2986:	ee 0d       	add	r30, r14
    2988:	f1 1d       	adc	r31, r1
    298a:	80 81       	ld	r24, Z
    298c:	b6 01       	movw	r22, r12
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <fputc>
    2994:	e1 10       	cpse	r14, r1
    2996:	f5 cf       	rjmp	.-22     	; 0x2982 <vfprintf+0x648>
    2998:	14 c0       	rjmp	.+40     	; 0x29c2 <vfprintf+0x688>
    299a:	f4 e0       	ldi	r31, 0x04	; 4
    299c:	ff 15       	cp	r31, r15
    299e:	58 f5       	brcc	.+86     	; 0x29f6 <vfprintf+0x6bc>
    29a0:	84 e0       	ldi	r24, 0x04	; 4
    29a2:	f8 1a       	sub	r15, r24
    29a4:	33 fe       	sbrs	r3, 3
    29a6:	1e c0       	rjmp	.+60     	; 0x29e4 <vfprintf+0x6aa>
    29a8:	21 10       	cpse	r2, r1
    29aa:	26 c0       	rjmp	.+76     	; 0x29f8 <vfprintf+0x6be>
    29ac:	03 ff       	sbrs	r16, 3
    29ae:	2a c0       	rjmp	.+84     	; 0x2a04 <vfprintf+0x6ca>
    29b0:	08 e6       	ldi	r16, 0x68	; 104
    29b2:	10 e0       	ldi	r17, 0x00	; 0
    29b4:	f3 2d       	mov	r31, r3
    29b6:	f0 71       	andi	r31, 0x10	; 16
    29b8:	3f 2e       	mov	r3, r31
    29ba:	f8 01       	movw	r30, r16
    29bc:	84 91       	lpm	r24, Z
    29be:	81 11       	cpse	r24, r1
    29c0:	24 c0       	rjmp	.+72     	; 0x2a0a <vfprintf+0x6d0>
    29c2:	ff 20       	and	r15, r15
    29c4:	09 f4       	brne	.+2      	; 0x29c8 <vfprintf+0x68e>
    29c6:	e5 cc       	rjmp	.-1590   	; 0x2392 <vfprintf+0x58>
    29c8:	b6 01       	movw	r22, r12
    29ca:	80 e2       	ldi	r24, 0x20	; 32
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <fputc>
    29d2:	fa 94       	dec	r15
    29d4:	f6 cf       	rjmp	.-20     	; 0x29c2 <vfprintf+0x688>
    29d6:	f6 01       	movw	r30, r12
    29d8:	86 81       	ldd	r24, Z+6	; 0x06
    29da:	97 81       	ldd	r25, Z+7	; 0x07
    29dc:	26 c0       	rjmp	.+76     	; 0x2a2a <vfprintf+0x6f0>
    29de:	8f ef       	ldi	r24, 0xFF	; 255
    29e0:	9f ef       	ldi	r25, 0xFF	; 255
    29e2:	23 c0       	rjmp	.+70     	; 0x2a2a <vfprintf+0x6f0>
    29e4:	b6 01       	movw	r22, r12
    29e6:	80 e2       	ldi	r24, 0x20	; 32
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <fputc>
    29ee:	fa 94       	dec	r15
    29f0:	f1 10       	cpse	r15, r1
    29f2:	f8 cf       	rjmp	.-16     	; 0x29e4 <vfprintf+0x6aa>
    29f4:	d9 cf       	rjmp	.-78     	; 0x29a8 <vfprintf+0x66e>
    29f6:	f1 2c       	mov	r15, r1
    29f8:	b6 01       	movw	r22, r12
    29fa:	82 2d       	mov	r24, r2
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <fputc>
    2a02:	d4 cf       	rjmp	.-88     	; 0x29ac <vfprintf+0x672>
    2a04:	0c e6       	ldi	r16, 0x6C	; 108
    2a06:	10 e0       	ldi	r17, 0x00	; 0
    2a08:	d5 cf       	rjmp	.-86     	; 0x29b4 <vfprintf+0x67a>
    2a0a:	31 10       	cpse	r3, r1
    2a0c:	80 52       	subi	r24, 0x20	; 32
    2a0e:	b6 01       	movw	r22, r12
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <fputc>
    2a16:	0f 5f       	subi	r16, 0xFF	; 255
    2a18:	1f 4f       	sbci	r17, 0xFF	; 255
    2a1a:	cf cf       	rjmp	.-98     	; 0x29ba <vfprintf+0x680>
    2a1c:	23 e0       	ldi	r18, 0x03	; 3
    2a1e:	2f 15       	cp	r18, r15
    2a20:	10 f4       	brcc	.+4      	; 0x2a26 <vfprintf+0x6ec>
    2a22:	83 e0       	ldi	r24, 0x03	; 3
    2a24:	be cf       	rjmp	.-132    	; 0x29a2 <vfprintf+0x668>
    2a26:	f1 2c       	mov	r15, r1
    2a28:	c1 cf       	rjmp	.-126    	; 0x29ac <vfprintf+0x672>
    2a2a:	63 96       	adiw	r28, 0x13	; 19
    2a2c:	e2 e1       	ldi	r30, 0x12	; 18
    2a2e:	0c 94 62 15 	jmp	0x2ac4	; 0x2ac4 <__epilogue_restores__>

00002a32 <__udivmodsi4>:
    2a32:	a1 e2       	ldi	r26, 0x21	; 33
    2a34:	1a 2e       	mov	r1, r26
    2a36:	aa 1b       	sub	r26, r26
    2a38:	bb 1b       	sub	r27, r27
    2a3a:	fd 01       	movw	r30, r26
    2a3c:	0d c0       	rjmp	.+26     	; 0x2a58 <__udivmodsi4_ep>

00002a3e <__udivmodsi4_loop>:
    2a3e:	aa 1f       	adc	r26, r26
    2a40:	bb 1f       	adc	r27, r27
    2a42:	ee 1f       	adc	r30, r30
    2a44:	ff 1f       	adc	r31, r31
    2a46:	a2 17       	cp	r26, r18
    2a48:	b3 07       	cpc	r27, r19
    2a4a:	e4 07       	cpc	r30, r20
    2a4c:	f5 07       	cpc	r31, r21
    2a4e:	20 f0       	brcs	.+8      	; 0x2a58 <__udivmodsi4_ep>
    2a50:	a2 1b       	sub	r26, r18
    2a52:	b3 0b       	sbc	r27, r19
    2a54:	e4 0b       	sbc	r30, r20
    2a56:	f5 0b       	sbc	r31, r21

00002a58 <__udivmodsi4_ep>:
    2a58:	66 1f       	adc	r22, r22
    2a5a:	77 1f       	adc	r23, r23
    2a5c:	88 1f       	adc	r24, r24
    2a5e:	99 1f       	adc	r25, r25
    2a60:	1a 94       	dec	r1
    2a62:	69 f7       	brne	.-38     	; 0x2a3e <__udivmodsi4_loop>
    2a64:	60 95       	com	r22
    2a66:	70 95       	com	r23
    2a68:	80 95       	com	r24
    2a6a:	90 95       	com	r25
    2a6c:	9b 01       	movw	r18, r22
    2a6e:	ac 01       	movw	r20, r24
    2a70:	bd 01       	movw	r22, r26
    2a72:	cf 01       	movw	r24, r30
    2a74:	08 95       	ret

00002a76 <__muluhisi3>:
    2a76:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__umulhisi3>
    2a7a:	a5 9f       	mul	r26, r21
    2a7c:	90 0d       	add	r25, r0
    2a7e:	b4 9f       	mul	r27, r20
    2a80:	90 0d       	add	r25, r0
    2a82:	a4 9f       	mul	r26, r20
    2a84:	80 0d       	add	r24, r0
    2a86:	91 1d       	adc	r25, r1
    2a88:	11 24       	eor	r1, r1
    2a8a:	08 95       	ret

00002a8c <__prologue_saves__>:
    2a8c:	2f 92       	push	r2
    2a8e:	3f 92       	push	r3
    2a90:	4f 92       	push	r4
    2a92:	5f 92       	push	r5
    2a94:	6f 92       	push	r6
    2a96:	7f 92       	push	r7
    2a98:	8f 92       	push	r8
    2a9a:	9f 92       	push	r9
    2a9c:	af 92       	push	r10
    2a9e:	bf 92       	push	r11
    2aa0:	cf 92       	push	r12
    2aa2:	df 92       	push	r13
    2aa4:	ef 92       	push	r14
    2aa6:	ff 92       	push	r15
    2aa8:	0f 93       	push	r16
    2aaa:	1f 93       	push	r17
    2aac:	cf 93       	push	r28
    2aae:	df 93       	push	r29
    2ab0:	cd b7       	in	r28, 0x3d	; 61
    2ab2:	de b7       	in	r29, 0x3e	; 62
    2ab4:	ca 1b       	sub	r28, r26
    2ab6:	db 0b       	sbc	r29, r27
    2ab8:	0f b6       	in	r0, 0x3f	; 63
    2aba:	f8 94       	cli
    2abc:	de bf       	out	0x3e, r29	; 62
    2abe:	0f be       	out	0x3f, r0	; 63
    2ac0:	cd bf       	out	0x3d, r28	; 61
    2ac2:	09 94       	ijmp

00002ac4 <__epilogue_restores__>:
    2ac4:	2a 88       	ldd	r2, Y+18	; 0x12
    2ac6:	39 88       	ldd	r3, Y+17	; 0x11
    2ac8:	48 88       	ldd	r4, Y+16	; 0x10
    2aca:	5f 84       	ldd	r5, Y+15	; 0x0f
    2acc:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ace:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ad0:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ad2:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ad4:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ad6:	b9 84       	ldd	r11, Y+9	; 0x09
    2ad8:	c8 84       	ldd	r12, Y+8	; 0x08
    2ada:	df 80       	ldd	r13, Y+7	; 0x07
    2adc:	ee 80       	ldd	r14, Y+6	; 0x06
    2ade:	fd 80       	ldd	r15, Y+5	; 0x05
    2ae0:	0c 81       	ldd	r16, Y+4	; 0x04
    2ae2:	1b 81       	ldd	r17, Y+3	; 0x03
    2ae4:	aa 81       	ldd	r26, Y+2	; 0x02
    2ae6:	b9 81       	ldd	r27, Y+1	; 0x01
    2ae8:	ce 0f       	add	r28, r30
    2aea:	d1 1d       	adc	r29, r1
    2aec:	0f b6       	in	r0, 0x3f	; 63
    2aee:	f8 94       	cli
    2af0:	de bf       	out	0x3e, r29	; 62
    2af2:	0f be       	out	0x3f, r0	; 63
    2af4:	cd bf       	out	0x3d, r28	; 61
    2af6:	ed 01       	movw	r28, r26
    2af8:	08 95       	ret

00002afa <__tablejump2__>:
    2afa:	ee 0f       	add	r30, r30
    2afc:	ff 1f       	adc	r31, r31
    2afe:	05 90       	lpm	r0, Z+
    2b00:	f4 91       	lpm	r31, Z
    2b02:	e0 2d       	mov	r30, r0
    2b04:	09 94       	ijmp

00002b06 <__umulhisi3>:
    2b06:	a2 9f       	mul	r26, r18
    2b08:	b0 01       	movw	r22, r0
    2b0a:	b3 9f       	mul	r27, r19
    2b0c:	c0 01       	movw	r24, r0
    2b0e:	a3 9f       	mul	r26, r19
    2b10:	70 0d       	add	r23, r0
    2b12:	81 1d       	adc	r24, r1
    2b14:	11 24       	eor	r1, r1
    2b16:	91 1d       	adc	r25, r1
    2b18:	b2 9f       	mul	r27, r18
    2b1a:	70 0d       	add	r23, r0
    2b1c:	81 1d       	adc	r24, r1
    2b1e:	11 24       	eor	r1, r1
    2b20:	91 1d       	adc	r25, r1
    2b22:	08 95       	ret

00002b24 <__ftoa_engine>:
    2b24:	28 30       	cpi	r18, 0x08	; 8
    2b26:	08 f0       	brcs	.+2      	; 0x2b2a <__ftoa_engine+0x6>
    2b28:	27 e0       	ldi	r18, 0x07	; 7
    2b2a:	33 27       	eor	r19, r19
    2b2c:	da 01       	movw	r26, r20
    2b2e:	99 0f       	add	r25, r25
    2b30:	31 1d       	adc	r19, r1
    2b32:	87 fd       	sbrc	r24, 7
    2b34:	91 60       	ori	r25, 0x01	; 1
    2b36:	00 96       	adiw	r24, 0x00	; 0
    2b38:	61 05       	cpc	r22, r1
    2b3a:	71 05       	cpc	r23, r1
    2b3c:	39 f4       	brne	.+14     	; 0x2b4c <__ftoa_engine+0x28>
    2b3e:	32 60       	ori	r19, 0x02	; 2
    2b40:	2e 5f       	subi	r18, 0xFE	; 254
    2b42:	3d 93       	st	X+, r19
    2b44:	30 e3       	ldi	r19, 0x30	; 48
    2b46:	2a 95       	dec	r18
    2b48:	e1 f7       	brne	.-8      	; 0x2b42 <__ftoa_engine+0x1e>
    2b4a:	08 95       	ret
    2b4c:	9f 3f       	cpi	r25, 0xFF	; 255
    2b4e:	30 f0       	brcs	.+12     	; 0x2b5c <__ftoa_engine+0x38>
    2b50:	80 38       	cpi	r24, 0x80	; 128
    2b52:	71 05       	cpc	r23, r1
    2b54:	61 05       	cpc	r22, r1
    2b56:	09 f0       	breq	.+2      	; 0x2b5a <__ftoa_engine+0x36>
    2b58:	3c 5f       	subi	r19, 0xFC	; 252
    2b5a:	3c 5f       	subi	r19, 0xFC	; 252
    2b5c:	3d 93       	st	X+, r19
    2b5e:	91 30       	cpi	r25, 0x01	; 1
    2b60:	08 f0       	brcs	.+2      	; 0x2b64 <__ftoa_engine+0x40>
    2b62:	80 68       	ori	r24, 0x80	; 128
    2b64:	91 1d       	adc	r25, r1
    2b66:	df 93       	push	r29
    2b68:	cf 93       	push	r28
    2b6a:	1f 93       	push	r17
    2b6c:	0f 93       	push	r16
    2b6e:	ff 92       	push	r15
    2b70:	ef 92       	push	r14
    2b72:	19 2f       	mov	r17, r25
    2b74:	98 7f       	andi	r25, 0xF8	; 248
    2b76:	96 95       	lsr	r25
    2b78:	e9 2f       	mov	r30, r25
    2b7a:	96 95       	lsr	r25
    2b7c:	96 95       	lsr	r25
    2b7e:	e9 0f       	add	r30, r25
    2b80:	ff 27       	eor	r31, r31
    2b82:	e6 53       	subi	r30, 0x36	; 54
    2b84:	ff 4f       	sbci	r31, 0xFF	; 255
    2b86:	99 27       	eor	r25, r25
    2b88:	33 27       	eor	r19, r19
    2b8a:	ee 24       	eor	r14, r14
    2b8c:	ff 24       	eor	r15, r15
    2b8e:	a7 01       	movw	r20, r14
    2b90:	e7 01       	movw	r28, r14
    2b92:	05 90       	lpm	r0, Z+
    2b94:	08 94       	sec
    2b96:	07 94       	ror	r0
    2b98:	28 f4       	brcc	.+10     	; 0x2ba4 <__ftoa_engine+0x80>
    2b9a:	36 0f       	add	r19, r22
    2b9c:	e7 1e       	adc	r14, r23
    2b9e:	f8 1e       	adc	r15, r24
    2ba0:	49 1f       	adc	r20, r25
    2ba2:	51 1d       	adc	r21, r1
    2ba4:	66 0f       	add	r22, r22
    2ba6:	77 1f       	adc	r23, r23
    2ba8:	88 1f       	adc	r24, r24
    2baa:	99 1f       	adc	r25, r25
    2bac:	06 94       	lsr	r0
    2bae:	a1 f7       	brne	.-24     	; 0x2b98 <__ftoa_engine+0x74>
    2bb0:	05 90       	lpm	r0, Z+
    2bb2:	07 94       	ror	r0
    2bb4:	28 f4       	brcc	.+10     	; 0x2bc0 <__ftoa_engine+0x9c>
    2bb6:	e7 0e       	add	r14, r23
    2bb8:	f8 1e       	adc	r15, r24
    2bba:	49 1f       	adc	r20, r25
    2bbc:	56 1f       	adc	r21, r22
    2bbe:	c1 1d       	adc	r28, r1
    2bc0:	77 0f       	add	r23, r23
    2bc2:	88 1f       	adc	r24, r24
    2bc4:	99 1f       	adc	r25, r25
    2bc6:	66 1f       	adc	r22, r22
    2bc8:	06 94       	lsr	r0
    2bca:	a1 f7       	brne	.-24     	; 0x2bb4 <__ftoa_engine+0x90>
    2bcc:	05 90       	lpm	r0, Z+
    2bce:	07 94       	ror	r0
    2bd0:	28 f4       	brcc	.+10     	; 0x2bdc <__ftoa_engine+0xb8>
    2bd2:	f8 0e       	add	r15, r24
    2bd4:	49 1f       	adc	r20, r25
    2bd6:	56 1f       	adc	r21, r22
    2bd8:	c7 1f       	adc	r28, r23
    2bda:	d1 1d       	adc	r29, r1
    2bdc:	88 0f       	add	r24, r24
    2bde:	99 1f       	adc	r25, r25
    2be0:	66 1f       	adc	r22, r22
    2be2:	77 1f       	adc	r23, r23
    2be4:	06 94       	lsr	r0
    2be6:	a1 f7       	brne	.-24     	; 0x2bd0 <__ftoa_engine+0xac>
    2be8:	05 90       	lpm	r0, Z+
    2bea:	07 94       	ror	r0
    2bec:	20 f4       	brcc	.+8      	; 0x2bf6 <__ftoa_engine+0xd2>
    2bee:	49 0f       	add	r20, r25
    2bf0:	56 1f       	adc	r21, r22
    2bf2:	c7 1f       	adc	r28, r23
    2bf4:	d8 1f       	adc	r29, r24
    2bf6:	99 0f       	add	r25, r25
    2bf8:	66 1f       	adc	r22, r22
    2bfa:	77 1f       	adc	r23, r23
    2bfc:	88 1f       	adc	r24, r24
    2bfe:	06 94       	lsr	r0
    2c00:	a9 f7       	brne	.-22     	; 0x2bec <__ftoa_engine+0xc8>
    2c02:	84 91       	lpm	r24, Z
    2c04:	10 95       	com	r17
    2c06:	17 70       	andi	r17, 0x07	; 7
    2c08:	41 f0       	breq	.+16     	; 0x2c1a <__ftoa_engine+0xf6>
    2c0a:	d6 95       	lsr	r29
    2c0c:	c7 95       	ror	r28
    2c0e:	57 95       	ror	r21
    2c10:	47 95       	ror	r20
    2c12:	f7 94       	ror	r15
    2c14:	e7 94       	ror	r14
    2c16:	1a 95       	dec	r17
    2c18:	c1 f7       	brne	.-16     	; 0x2c0a <__ftoa_engine+0xe6>
    2c1a:	e0 e7       	ldi	r30, 0x70	; 112
    2c1c:	f0 e0       	ldi	r31, 0x00	; 0
    2c1e:	68 94       	set
    2c20:	15 90       	lpm	r1, Z+
    2c22:	15 91       	lpm	r17, Z+
    2c24:	35 91       	lpm	r19, Z+
    2c26:	65 91       	lpm	r22, Z+
    2c28:	95 91       	lpm	r25, Z+
    2c2a:	05 90       	lpm	r0, Z+
    2c2c:	7f e2       	ldi	r23, 0x2F	; 47
    2c2e:	73 95       	inc	r23
    2c30:	e1 18       	sub	r14, r1
    2c32:	f1 0a       	sbc	r15, r17
    2c34:	43 0b       	sbc	r20, r19
    2c36:	56 0b       	sbc	r21, r22
    2c38:	c9 0b       	sbc	r28, r25
    2c3a:	d0 09       	sbc	r29, r0
    2c3c:	c0 f7       	brcc	.-16     	; 0x2c2e <__ftoa_engine+0x10a>
    2c3e:	e1 0c       	add	r14, r1
    2c40:	f1 1e       	adc	r15, r17
    2c42:	43 1f       	adc	r20, r19
    2c44:	56 1f       	adc	r21, r22
    2c46:	c9 1f       	adc	r28, r25
    2c48:	d0 1d       	adc	r29, r0
    2c4a:	7e f4       	brtc	.+30     	; 0x2c6a <__ftoa_engine+0x146>
    2c4c:	70 33       	cpi	r23, 0x30	; 48
    2c4e:	11 f4       	brne	.+4      	; 0x2c54 <__ftoa_engine+0x130>
    2c50:	8a 95       	dec	r24
    2c52:	e6 cf       	rjmp	.-52     	; 0x2c20 <__ftoa_engine+0xfc>
    2c54:	e8 94       	clt
    2c56:	01 50       	subi	r16, 0x01	; 1
    2c58:	30 f0       	brcs	.+12     	; 0x2c66 <__ftoa_engine+0x142>
    2c5a:	08 0f       	add	r16, r24
    2c5c:	0a f4       	brpl	.+2      	; 0x2c60 <__ftoa_engine+0x13c>
    2c5e:	00 27       	eor	r16, r16
    2c60:	02 17       	cp	r16, r18
    2c62:	08 f4       	brcc	.+2      	; 0x2c66 <__ftoa_engine+0x142>
    2c64:	20 2f       	mov	r18, r16
    2c66:	23 95       	inc	r18
    2c68:	02 2f       	mov	r16, r18
    2c6a:	7a 33       	cpi	r23, 0x3A	; 58
    2c6c:	28 f0       	brcs	.+10     	; 0x2c78 <__ftoa_engine+0x154>
    2c6e:	79 e3       	ldi	r23, 0x39	; 57
    2c70:	7d 93       	st	X+, r23
    2c72:	2a 95       	dec	r18
    2c74:	e9 f7       	brne	.-6      	; 0x2c70 <__ftoa_engine+0x14c>
    2c76:	10 c0       	rjmp	.+32     	; 0x2c98 <__ftoa_engine+0x174>
    2c78:	7d 93       	st	X+, r23
    2c7a:	2a 95       	dec	r18
    2c7c:	89 f6       	brne	.-94     	; 0x2c20 <__ftoa_engine+0xfc>
    2c7e:	06 94       	lsr	r0
    2c80:	97 95       	ror	r25
    2c82:	67 95       	ror	r22
    2c84:	37 95       	ror	r19
    2c86:	17 95       	ror	r17
    2c88:	17 94       	ror	r1
    2c8a:	e1 18       	sub	r14, r1
    2c8c:	f1 0a       	sbc	r15, r17
    2c8e:	43 0b       	sbc	r20, r19
    2c90:	56 0b       	sbc	r21, r22
    2c92:	c9 0b       	sbc	r28, r25
    2c94:	d0 09       	sbc	r29, r0
    2c96:	98 f0       	brcs	.+38     	; 0x2cbe <__ftoa_engine+0x19a>
    2c98:	23 95       	inc	r18
    2c9a:	7e 91       	ld	r23, -X
    2c9c:	73 95       	inc	r23
    2c9e:	7a 33       	cpi	r23, 0x3A	; 58
    2ca0:	08 f0       	brcs	.+2      	; 0x2ca4 <__ftoa_engine+0x180>
    2ca2:	70 e3       	ldi	r23, 0x30	; 48
    2ca4:	7c 93       	st	X, r23
    2ca6:	20 13       	cpse	r18, r16
    2ca8:	b8 f7       	brcc	.-18     	; 0x2c98 <__ftoa_engine+0x174>
    2caa:	7e 91       	ld	r23, -X
    2cac:	70 61       	ori	r23, 0x10	; 16
    2cae:	7d 93       	st	X+, r23
    2cb0:	30 f0       	brcs	.+12     	; 0x2cbe <__ftoa_engine+0x19a>
    2cb2:	83 95       	inc	r24
    2cb4:	71 e3       	ldi	r23, 0x31	; 49
    2cb6:	7d 93       	st	X+, r23
    2cb8:	70 e3       	ldi	r23, 0x30	; 48
    2cba:	2a 95       	dec	r18
    2cbc:	e1 f7       	brne	.-8      	; 0x2cb6 <__ftoa_engine+0x192>
    2cbe:	11 24       	eor	r1, r1
    2cc0:	ef 90       	pop	r14
    2cc2:	ff 90       	pop	r15
    2cc4:	0f 91       	pop	r16
    2cc6:	1f 91       	pop	r17
    2cc8:	cf 91       	pop	r28
    2cca:	df 91       	pop	r29
    2ccc:	99 27       	eor	r25, r25
    2cce:	87 fd       	sbrc	r24, 7
    2cd0:	90 95       	com	r25
    2cd2:	08 95       	ret

00002cd4 <strnlen_P>:
    2cd4:	fc 01       	movw	r30, r24
    2cd6:	05 90       	lpm	r0, Z+
    2cd8:	61 50       	subi	r22, 0x01	; 1
    2cda:	70 40       	sbci	r23, 0x00	; 0
    2cdc:	01 10       	cpse	r0, r1
    2cde:	d8 f7       	brcc	.-10     	; 0x2cd6 <strnlen_P+0x2>
    2ce0:	80 95       	com	r24
    2ce2:	90 95       	com	r25
    2ce4:	8e 0f       	add	r24, r30
    2ce6:	9f 1f       	adc	r25, r31
    2ce8:	08 95       	ret

00002cea <strcat>:
    2cea:	fb 01       	movw	r30, r22
    2cec:	dc 01       	movw	r26, r24
    2cee:	0d 90       	ld	r0, X+
    2cf0:	00 20       	and	r0, r0
    2cf2:	e9 f7       	brne	.-6      	; 0x2cee <strcat+0x4>
    2cf4:	11 97       	sbiw	r26, 0x01	; 1
    2cf6:	01 90       	ld	r0, Z+
    2cf8:	0d 92       	st	X+, r0
    2cfa:	00 20       	and	r0, r0
    2cfc:	e1 f7       	brne	.-8      	; 0x2cf6 <strcat+0xc>
    2cfe:	08 95       	ret

00002d00 <strnlen>:
    2d00:	fc 01       	movw	r30, r24
    2d02:	61 50       	subi	r22, 0x01	; 1
    2d04:	70 40       	sbci	r23, 0x00	; 0
    2d06:	01 90       	ld	r0, Z+
    2d08:	01 10       	cpse	r0, r1
    2d0a:	d8 f7       	brcc	.-10     	; 0x2d02 <strnlen+0x2>
    2d0c:	80 95       	com	r24
    2d0e:	90 95       	com	r25
    2d10:	8e 0f       	add	r24, r30
    2d12:	9f 1f       	adc	r25, r31
    2d14:	08 95       	ret

00002d16 <fputc>:
    2d16:	0f 93       	push	r16
    2d18:	1f 93       	push	r17
    2d1a:	cf 93       	push	r28
    2d1c:	df 93       	push	r29
    2d1e:	fb 01       	movw	r30, r22
    2d20:	23 81       	ldd	r18, Z+3	; 0x03
    2d22:	21 fd       	sbrc	r18, 1
    2d24:	03 c0       	rjmp	.+6      	; 0x2d2c <fputc+0x16>
    2d26:	8f ef       	ldi	r24, 0xFF	; 255
    2d28:	9f ef       	ldi	r25, 0xFF	; 255
    2d2a:	28 c0       	rjmp	.+80     	; 0x2d7c <fputc+0x66>
    2d2c:	22 ff       	sbrs	r18, 2
    2d2e:	16 c0       	rjmp	.+44     	; 0x2d5c <fputc+0x46>
    2d30:	46 81       	ldd	r20, Z+6	; 0x06
    2d32:	57 81       	ldd	r21, Z+7	; 0x07
    2d34:	24 81       	ldd	r18, Z+4	; 0x04
    2d36:	35 81       	ldd	r19, Z+5	; 0x05
    2d38:	42 17       	cp	r20, r18
    2d3a:	53 07       	cpc	r21, r19
    2d3c:	44 f4       	brge	.+16     	; 0x2d4e <fputc+0x38>
    2d3e:	a0 81       	ld	r26, Z
    2d40:	b1 81       	ldd	r27, Z+1	; 0x01
    2d42:	9d 01       	movw	r18, r26
    2d44:	2f 5f       	subi	r18, 0xFF	; 255
    2d46:	3f 4f       	sbci	r19, 0xFF	; 255
    2d48:	31 83       	std	Z+1, r19	; 0x01
    2d4a:	20 83       	st	Z, r18
    2d4c:	8c 93       	st	X, r24
    2d4e:	26 81       	ldd	r18, Z+6	; 0x06
    2d50:	37 81       	ldd	r19, Z+7	; 0x07
    2d52:	2f 5f       	subi	r18, 0xFF	; 255
    2d54:	3f 4f       	sbci	r19, 0xFF	; 255
    2d56:	37 83       	std	Z+7, r19	; 0x07
    2d58:	26 83       	std	Z+6, r18	; 0x06
    2d5a:	10 c0       	rjmp	.+32     	; 0x2d7c <fputc+0x66>
    2d5c:	eb 01       	movw	r28, r22
    2d5e:	09 2f       	mov	r16, r25
    2d60:	18 2f       	mov	r17, r24
    2d62:	00 84       	ldd	r0, Z+8	; 0x08
    2d64:	f1 85       	ldd	r31, Z+9	; 0x09
    2d66:	e0 2d       	mov	r30, r0
    2d68:	09 95       	icall
    2d6a:	89 2b       	or	r24, r25
    2d6c:	e1 f6       	brne	.-72     	; 0x2d26 <fputc+0x10>
    2d6e:	8e 81       	ldd	r24, Y+6	; 0x06
    2d70:	9f 81       	ldd	r25, Y+7	; 0x07
    2d72:	01 96       	adiw	r24, 0x01	; 1
    2d74:	9f 83       	std	Y+7, r25	; 0x07
    2d76:	8e 83       	std	Y+6, r24	; 0x06
    2d78:	81 2f       	mov	r24, r17
    2d7a:	90 2f       	mov	r25, r16
    2d7c:	df 91       	pop	r29
    2d7e:	cf 91       	pop	r28
    2d80:	1f 91       	pop	r17
    2d82:	0f 91       	pop	r16
    2d84:	08 95       	ret

00002d86 <sprintf>:
    2d86:	ae e0       	ldi	r26, 0x0E	; 14
    2d88:	b0 e0       	ldi	r27, 0x00	; 0
    2d8a:	e9 ec       	ldi	r30, 0xC9	; 201
    2d8c:	f6 e1       	ldi	r31, 0x16	; 22
    2d8e:	0c 94 54 15 	jmp	0x2aa8	; 0x2aa8 <__prologue_saves__+0x1c>
    2d92:	0d 89       	ldd	r16, Y+21	; 0x15
    2d94:	1e 89       	ldd	r17, Y+22	; 0x16
    2d96:	86 e0       	ldi	r24, 0x06	; 6
    2d98:	8c 83       	std	Y+4, r24	; 0x04
    2d9a:	1a 83       	std	Y+2, r17	; 0x02
    2d9c:	09 83       	std	Y+1, r16	; 0x01
    2d9e:	8f ef       	ldi	r24, 0xFF	; 255
    2da0:	9f e7       	ldi	r25, 0x7F	; 127
    2da2:	9e 83       	std	Y+6, r25	; 0x06
    2da4:	8d 83       	std	Y+5, r24	; 0x05
    2da6:	ae 01       	movw	r20, r28
    2da8:	47 5e       	subi	r20, 0xE7	; 231
    2daa:	5f 4f       	sbci	r21, 0xFF	; 255
    2dac:	6f 89       	ldd	r22, Y+23	; 0x17
    2dae:	78 8d       	ldd	r23, Y+24	; 0x18
    2db0:	ce 01       	movw	r24, r28
    2db2:	01 96       	adiw	r24, 0x01	; 1
    2db4:	0e 94 9d 11 	call	0x233a	; 0x233a <vfprintf>
    2db8:	2f 81       	ldd	r18, Y+7	; 0x07
    2dba:	38 85       	ldd	r19, Y+8	; 0x08
    2dbc:	f8 01       	movw	r30, r16
    2dbe:	e2 0f       	add	r30, r18
    2dc0:	f3 1f       	adc	r31, r19
    2dc2:	10 82       	st	Z, r1
    2dc4:	2e 96       	adiw	r28, 0x0e	; 14
    2dc6:	e4 e0       	ldi	r30, 0x04	; 4
    2dc8:	0c 94 70 15 	jmp	0x2ae0	; 0x2ae0 <__epilogue_restores__+0x1c>

00002dcc <__ultoa_invert>:
    2dcc:	fa 01       	movw	r30, r20
    2dce:	aa 27       	eor	r26, r26
    2dd0:	28 30       	cpi	r18, 0x08	; 8
    2dd2:	51 f1       	breq	.+84     	; 0x2e28 <__ultoa_invert+0x5c>
    2dd4:	20 31       	cpi	r18, 0x10	; 16
    2dd6:	81 f1       	breq	.+96     	; 0x2e38 <__ultoa_invert+0x6c>
    2dd8:	e8 94       	clt
    2dda:	6f 93       	push	r22
    2ddc:	6e 7f       	andi	r22, 0xFE	; 254
    2dde:	6e 5f       	subi	r22, 0xFE	; 254
    2de0:	7f 4f       	sbci	r23, 0xFF	; 255
    2de2:	8f 4f       	sbci	r24, 0xFF	; 255
    2de4:	9f 4f       	sbci	r25, 0xFF	; 255
    2de6:	af 4f       	sbci	r26, 0xFF	; 255
    2de8:	b1 e0       	ldi	r27, 0x01	; 1
    2dea:	3e d0       	rcall	.+124    	; 0x2e68 <__ultoa_invert+0x9c>
    2dec:	b4 e0       	ldi	r27, 0x04	; 4
    2dee:	3c d0       	rcall	.+120    	; 0x2e68 <__ultoa_invert+0x9c>
    2df0:	67 0f       	add	r22, r23
    2df2:	78 1f       	adc	r23, r24
    2df4:	89 1f       	adc	r24, r25
    2df6:	9a 1f       	adc	r25, r26
    2df8:	a1 1d       	adc	r26, r1
    2dfa:	68 0f       	add	r22, r24
    2dfc:	79 1f       	adc	r23, r25
    2dfe:	8a 1f       	adc	r24, r26
    2e00:	91 1d       	adc	r25, r1
    2e02:	a1 1d       	adc	r26, r1
    2e04:	6a 0f       	add	r22, r26
    2e06:	71 1d       	adc	r23, r1
    2e08:	81 1d       	adc	r24, r1
    2e0a:	91 1d       	adc	r25, r1
    2e0c:	a1 1d       	adc	r26, r1
    2e0e:	20 d0       	rcall	.+64     	; 0x2e50 <__ultoa_invert+0x84>
    2e10:	09 f4       	brne	.+2      	; 0x2e14 <__ultoa_invert+0x48>
    2e12:	68 94       	set
    2e14:	3f 91       	pop	r19
    2e16:	2a e0       	ldi	r18, 0x0A	; 10
    2e18:	26 9f       	mul	r18, r22
    2e1a:	11 24       	eor	r1, r1
    2e1c:	30 19       	sub	r19, r0
    2e1e:	30 5d       	subi	r19, 0xD0	; 208
    2e20:	31 93       	st	Z+, r19
    2e22:	de f6       	brtc	.-74     	; 0x2dda <__ultoa_invert+0xe>
    2e24:	cf 01       	movw	r24, r30
    2e26:	08 95       	ret
    2e28:	46 2f       	mov	r20, r22
    2e2a:	47 70       	andi	r20, 0x07	; 7
    2e2c:	40 5d       	subi	r20, 0xD0	; 208
    2e2e:	41 93       	st	Z+, r20
    2e30:	b3 e0       	ldi	r27, 0x03	; 3
    2e32:	0f d0       	rcall	.+30     	; 0x2e52 <__ultoa_invert+0x86>
    2e34:	c9 f7       	brne	.-14     	; 0x2e28 <__ultoa_invert+0x5c>
    2e36:	f6 cf       	rjmp	.-20     	; 0x2e24 <__ultoa_invert+0x58>
    2e38:	46 2f       	mov	r20, r22
    2e3a:	4f 70       	andi	r20, 0x0F	; 15
    2e3c:	40 5d       	subi	r20, 0xD0	; 208
    2e3e:	4a 33       	cpi	r20, 0x3A	; 58
    2e40:	18 f0       	brcs	.+6      	; 0x2e48 <__ultoa_invert+0x7c>
    2e42:	49 5d       	subi	r20, 0xD9	; 217
    2e44:	31 fd       	sbrc	r19, 1
    2e46:	40 52       	subi	r20, 0x20	; 32
    2e48:	41 93       	st	Z+, r20
    2e4a:	02 d0       	rcall	.+4      	; 0x2e50 <__ultoa_invert+0x84>
    2e4c:	a9 f7       	brne	.-22     	; 0x2e38 <__ultoa_invert+0x6c>
    2e4e:	ea cf       	rjmp	.-44     	; 0x2e24 <__ultoa_invert+0x58>
    2e50:	b4 e0       	ldi	r27, 0x04	; 4
    2e52:	a6 95       	lsr	r26
    2e54:	97 95       	ror	r25
    2e56:	87 95       	ror	r24
    2e58:	77 95       	ror	r23
    2e5a:	67 95       	ror	r22
    2e5c:	ba 95       	dec	r27
    2e5e:	c9 f7       	brne	.-14     	; 0x2e52 <__ultoa_invert+0x86>
    2e60:	00 97       	sbiw	r24, 0x00	; 0
    2e62:	61 05       	cpc	r22, r1
    2e64:	71 05       	cpc	r23, r1
    2e66:	08 95       	ret
    2e68:	9b 01       	movw	r18, r22
    2e6a:	ac 01       	movw	r20, r24
    2e6c:	0a 2e       	mov	r0, r26
    2e6e:	06 94       	lsr	r0
    2e70:	57 95       	ror	r21
    2e72:	47 95       	ror	r20
    2e74:	37 95       	ror	r19
    2e76:	27 95       	ror	r18
    2e78:	ba 95       	dec	r27
    2e7a:	c9 f7       	brne	.-14     	; 0x2e6e <__ultoa_invert+0xa2>
    2e7c:	62 0f       	add	r22, r18
    2e7e:	73 1f       	adc	r23, r19
    2e80:	84 1f       	adc	r24, r20
    2e82:	95 1f       	adc	r25, r21
    2e84:	a0 1d       	adc	r26, r0
    2e86:	08 95       	ret

00002e88 <_exit>:
    2e88:	f8 94       	cli

00002e8a <__stop_program>:
    2e8a:	ff cf       	rjmp	.-2      	; 0x2e8a <__stop_program>
