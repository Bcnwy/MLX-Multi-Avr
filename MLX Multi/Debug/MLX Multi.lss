
MLX Multi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b6  00800100  00001608  0000169c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001608  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004d  008001b6  008001b6  00001752  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001752  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000017b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d0  00000000  00000000  000017f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000066b5  00000000  00000000  00001ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000115c  00000000  00000000  00008175  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ff0  00000000  00000000  000092d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a8c  00000000  00000000  0000a2c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001a9e  00000000  00000000  0000ad50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003627  00000000  00000000  0000c7ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005b0  00000000  00000000  0000fe15  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__ctors_end>
       4:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
       8:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
       c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      10:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      14:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      18:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      1c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      20:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      24:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      28:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      2c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      30:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      34:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__vector_13>
      38:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__vector_14>
      3c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      40:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      44:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      48:	0c 94 57 03 	jmp	0x6ae	; 0x6ae <__vector_18>
      4c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      50:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      54:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      58:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      5c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      60:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      64:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	6e 61       	ori	r22, 0x1E	; 30
      6a:	6e 00       	.word	0x006e	; ????

0000006c <__c.2177>:
      6c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      7c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      8c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      9c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      ac:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      bc:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      cc:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      dc:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      ec:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      fc:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     10c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     11c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     12c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     13c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     14c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     15c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000016a <__ctors_start>:
     16a:	06 03       	mulsu	r16, r22
     16c:	21 04       	cpc	r2, r1

0000016e <__ctors_end>:
     16e:	11 24       	eor	r1, r1
     170:	1f be       	out	0x3f, r1	; 63
     172:	cf ef       	ldi	r28, 0xFF	; 255
     174:	d8 e0       	ldi	r29, 0x08	; 8
     176:	de bf       	out	0x3e, r29	; 62
     178:	cd bf       	out	0x3d, r28	; 61

0000017a <__do_copy_data>:
     17a:	11 e0       	ldi	r17, 0x01	; 1
     17c:	a0 e0       	ldi	r26, 0x00	; 0
     17e:	b1 e0       	ldi	r27, 0x01	; 1
     180:	e8 e0       	ldi	r30, 0x08	; 8
     182:	f6 e1       	ldi	r31, 0x16	; 22
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x10>
     186:	05 90       	lpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	a6 3b       	cpi	r26, 0xB6	; 182
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0xc>

00000190 <__do_clear_bss>:
     190:	22 e0       	ldi	r18, 0x02	; 2
     192:	a6 eb       	ldi	r26, 0xB6	; 182
     194:	b1 e0       	ldi	r27, 0x01	; 1
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	a3 30       	cpi	r26, 0x03	; 3
     19c:	b2 07       	cpc	r27, r18
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>

000001a0 <__do_global_ctors>:
     1a0:	10 e0       	ldi	r17, 0x00	; 0
     1a2:	c7 eb       	ldi	r28, 0xB7	; 183
     1a4:	d0 e0       	ldi	r29, 0x00	; 0
     1a6:	04 c0       	rjmp	.+8      	; 0x1b0 <__do_global_ctors+0x10>
     1a8:	21 97       	sbiw	r28, 0x01	; 1
     1aa:	fe 01       	movw	r30, r28
     1ac:	0e 94 55 09 	call	0x12aa	; 0x12aa <__tablejump2__>
     1b0:	c5 3b       	cpi	r28, 0xB5	; 181
     1b2:	d1 07       	cpc	r29, r17
     1b4:	c9 f7       	brne	.-14     	; 0x1a8 <__do_global_ctors+0x8>
     1b6:	0e 94 81 02 	call	0x502	; 0x502 <main>
     1ba:	0c 94 02 0b 	jmp	0x1604	; 0x1604 <_exit>

000001be <__bad_interrupt>:
     1be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001c2 <_ZN17Adafruit_MLX90614C1Eh>:
template<typename V>
inline V constrain(V x, V a, V b) {
	return((x < a)?a:(b<x)?b:x);
}
/*********************************************************************/
Adafruit_MLX90614::Adafruit_MLX90614(uint8_t i2caddr) {
     1c2:	1f 93       	push	r17
     1c4:	cf 93       	push	r28
     1c6:	df 93       	push	r29
     1c8:	ec 01       	movw	r28, r24
     1ca:	16 2f       	mov	r17, r22
	  }
 class I2c
 {
 public:
    I2c()
    {
     1cc:	18 86       	std	Y+8, r1	; 0x08
     1ce:	19 86       	std	Y+9, r1	; 0x09
	    i2c_init();
     1d0:	0e 94 11 03 	call	0x622	; 0x622 <i2c_init>
  _addr = i2caddr;
     1d4:	1a 87       	std	Y+10, r17	; 0x0a
}
     1d6:	df 91       	pop	r29
     1d8:	cf 91       	pop	r28
     1da:	1f 91       	pop	r17
     1dc:	08 95       	ret

000001de <_ZN17Adafruit_MLX906144crc8Ehh>:

uint8_t Adafruit_MLX90614::crc8 (uint8_t inCrc, uint8_t inData)
{
	uint8_t i;
	uint8_t data;
	data = inCrc ^ inData;
     1de:	86 2f       	mov	r24, r22
     1e0:	84 27       	eor	r24, r20
     1e2:	98 e0       	ldi	r25, 0x08	; 8
	for ( i = 0; i < 8; i++ )
	{
		if (( data & 0x80 ) != 0 )
		{
			data <<= 1;
			data ^= 0x07;
     1e4:	27 e0       	ldi	r18, 0x07	; 7
	uint8_t i;
	uint8_t data;
	data = inCrc ^ inData;
	for ( i = 0; i < 8; i++ )
	{
		if (( data & 0x80 ) != 0 )
     1e6:	88 23       	and	r24, r24
     1e8:	1c f4       	brge	.+6      	; 0x1f0 <_ZN17Adafruit_MLX906144crc8Ehh+0x12>
		{
			data <<= 1;
     1ea:	88 0f       	add	r24, r24
			data ^= 0x07;
     1ec:	82 27       	eor	r24, r18
     1ee:	01 c0       	rjmp	.+2      	; 0x1f2 <_ZN17Adafruit_MLX906144crc8Ehh+0x14>
		}
		else
		{
			data <<= 1;
     1f0:	88 0f       	add	r24, r24
     1f2:	91 50       	subi	r25, 0x01	; 1
uint8_t Adafruit_MLX90614::crc8 (uint8_t inCrc, uint8_t inData)
{
	uint8_t i;
	uint8_t data;
	data = inCrc ^ inData;
	for ( i = 0; i < 8; i++ )
     1f4:	c1 f7       	brne	.-16     	; 0x1e6 <_ZN17Adafruit_MLX906144crc8Ehh+0x8>
		{
			data <<= 1;
		}
	}
	return data;
}
     1f6:	08 95       	ret

000001f8 <_ZN17Adafruit_MLX906147write16Ehi>:
	*d = ret;
	return 0;
}

uint8_t Adafruit_MLX90614::write16(uint8_t reg, int16_t data)
{
     1f8:	df 92       	push	r13
     1fa:	ef 92       	push	r14
     1fc:	ff 92       	push	r15
     1fe:	0f 93       	push	r16
     200:	1f 93       	push	r17
     202:	cf 93       	push	r28
     204:	df 93       	push	r29
     206:	8c 01       	movw	r16, r24
     208:	e6 2e       	mov	r14, r22
     20a:	f4 2e       	mov	r15, r20
     20c:	d5 2f       	mov	r29, r21
	uint8_t crc;
	uint8_t lsb = data & 0x00FF;
	uint8_t msb = (data >> 8);
	
	crc = crc8(0, (_addr << 1));
     20e:	fc 01       	movw	r30, r24
     210:	c2 85       	ldd	r28, Z+10	; 0x0a
     212:	cc 0f       	add	r28, r28
     214:	4c 2f       	mov	r20, r28
     216:	60 e0       	ldi	r22, 0x00	; 0
     218:	0e 94 ef 00 	call	0x1de	; 0x1de <_ZN17Adafruit_MLX906144crc8Ehh>
	crc = crc8(crc, reg);
     21c:	4e 2d       	mov	r20, r14
     21e:	68 2f       	mov	r22, r24
     220:	c8 01       	movw	r24, r16
     222:	0e 94 ef 00 	call	0x1de	; 0x1de <_ZN17Adafruit_MLX906144crc8Ehh>
	crc = crc8(crc, lsb);
     226:	4f 2d       	mov	r20, r15
     228:	68 2f       	mov	r22, r24
     22a:	c8 01       	movw	r24, r16
     22c:	0e 94 ef 00 	call	0x1de	; 0x1de <_ZN17Adafruit_MLX906144crc8Ehh>
	crc = crc8(crc, msb);
     230:	4d 2f       	mov	r20, r29
     232:	68 2f       	mov	r22, r24
     234:	c8 01       	movw	r24, r16
     236:	0e 94 ef 00 	call	0x1de	; 0x1de <_ZN17Adafruit_MLX906144crc8Ehh>
     23a:	d8 2e       	mov	r13, r24
    }
     void beginTransmission(uint8_t address)
     {
         m_bufferIndex = 0;
     23c:	f8 01       	movw	r30, r16
     23e:	10 86       	std	Z+8, r1	; 0x08

         i2c_start((address << 1) | I2C_WRITE);
     240:	8c 2f       	mov	r24, r28
     242:	0e 94 1a 03 	call	0x634	; 0x634 <i2c_start>
     }

     void write(uint8_t byte)
     {
         if (m_bufferIndex == c_bufferSize)
     246:	f8 01       	movw	r30, r16
     248:	90 85       	ldd	r25, Z+8	; 0x08
     24a:	98 30       	cpi	r25, 0x08	; 8
     24c:	21 f1       	breq	.+72     	; 0x296 <_ZN17Adafruit_MLX906147write16Ehi+0x9e>
             return;

         m_buffer[m_bufferIndex++] = byte;
     24e:	81 e0       	ldi	r24, 0x01	; 1
     250:	89 0f       	add	r24, r25
     252:	80 87       	std	Z+8, r24	; 0x08
     254:	e9 0f       	add	r30, r25
     256:	f1 1d       	adc	r31, r1
     258:	e0 82       	st	Z, r14
         i2c_start((address << 1) | I2C_WRITE);
     }

     void write(uint8_t byte)
     {
         if (m_bufferIndex == c_bufferSize)
     25a:	f8 01       	movw	r30, r16
     25c:	90 85       	ldd	r25, Z+8	; 0x08
     25e:	98 30       	cpi	r25, 0x08	; 8
     260:	f1 f0       	breq	.+60     	; 0x29e <_ZN17Adafruit_MLX906147write16Ehi+0xa6>
             return;

         m_buffer[m_bufferIndex++] = byte;
     262:	81 e0       	ldi	r24, 0x01	; 1
     264:	89 0f       	add	r24, r25
     266:	80 87       	std	Z+8, r24	; 0x08
     268:	e9 0f       	add	r30, r25
     26a:	f1 1d       	adc	r31, r1
     26c:	f0 82       	st	Z, r15
         i2c_start((address << 1) | I2C_WRITE);
     }

     void write(uint8_t byte)
     {
         if (m_bufferIndex == c_bufferSize)
     26e:	f8 01       	movw	r30, r16
     270:	90 85       	ldd	r25, Z+8	; 0x08
     272:	98 30       	cpi	r25, 0x08	; 8
     274:	a1 f0       	breq	.+40     	; 0x29e <_ZN17Adafruit_MLX906147write16Ehi+0xa6>
             return;

         m_buffer[m_bufferIndex++] = byte;
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	89 0f       	add	r24, r25
     27a:	80 87       	std	Z+8, r24	; 0x08
     27c:	e9 0f       	add	r30, r25
     27e:	f1 1d       	adc	r31, r1
     280:	d0 83       	st	Z, r29
         i2c_start((address << 1) | I2C_WRITE);
     }

     void write(uint8_t byte)
     {
         if (m_bufferIndex == c_bufferSize)
     282:	f8 01       	movw	r30, r16
     284:	90 85       	ldd	r25, Z+8	; 0x08
     286:	98 30       	cpi	r25, 0x08	; 8
     288:	51 f0       	breq	.+20     	; 0x29e <_ZN17Adafruit_MLX906147write16Ehi+0xa6>
             return;

         m_buffer[m_bufferIndex++] = byte;
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	89 0f       	add	r24, r25
     28e:	80 87       	std	Z+8, r24	; 0x08
     290:	e9 0f       	add	r30, r25
     292:	f1 1d       	adc	r31, r1
     294:	d0 82       	st	Z, r13
    }

    uint8_t endTransmission(bool stop = true)
    {
         for (uint8_t index = 0; index < m_bufferIndex; ++index) {
     296:	f8 01       	movw	r30, r16
     298:	80 85       	ldd	r24, Z+8	; 0x08
     29a:	88 23       	and	r24, r24
     29c:	71 f0       	breq	.+28     	; 0x2ba <_ZN17Adafruit_MLX906147write16Ehi+0xc2>
	*d = ret;
	return 0;
}

uint8_t Adafruit_MLX90614::write16(uint8_t reg, int16_t data)
{
     29e:	c0 e0       	ldi	r28, 0x00	; 0
             if (i2c_write(m_buffer[index]) != 0)
     2a0:	f8 01       	movw	r30, r16
     2a2:	ec 0f       	add	r30, r28
     2a4:	f1 1d       	adc	r31, r1
     2a6:	80 81       	ld	r24, Z
     2a8:	0e 94 45 03 	call	0x68a	; 0x68a <i2c_write>
     2ac:	81 11       	cpse	r24, r1
     2ae:	09 c0       	rjmp	.+18     	; 0x2c2 <_ZN17Adafruit_MLX906147write16Ehi+0xca>
         m_buffer[m_bufferIndex++] = byte;
    }

    uint8_t endTransmission(bool stop = true)
    {
         for (uint8_t index = 0; index < m_bufferIndex; ++index) {
     2b0:	cf 5f       	subi	r28, 0xFF	; 255
     2b2:	f8 01       	movw	r30, r16
     2b4:	80 85       	ldd	r24, Z+8	; 0x08
     2b6:	c8 17       	cp	r28, r24
     2b8:	98 f3       	brcs	.-26     	; 0x2a0 <_ZN17Adafruit_MLX906147write16Ehi+0xa8>
             if (i2c_write(m_buffer[index]) != 0)
                 return 1;
         }

        if (stop)i2c_stop();
     2ba:	0e 94 41 03 	call	0x682	; 0x682 <i2c_stop>
			 
		return 0;	
     2be:	80 e0       	ldi	r24, 0x00	; 0
     2c0:	01 c0       	rjmp	.+2      	; 0x2c4 <_ZN17Adafruit_MLX906147write16Ehi+0xcc>

    uint8_t endTransmission(bool stop = true)
    {
         for (uint8_t index = 0; index < m_bufferIndex; ++index) {
             if (i2c_write(m_buffer[index]) != 0)
                 return 1;
     2c2:	81 e0       	ldi	r24, 0x01	; 1
	Wire.write(reg);
	Wire.write(lsb);
	Wire.write(msb);
	Wire.write(crc);
	return Wire.endTransmission(true);
}
     2c4:	df 91       	pop	r29
     2c6:	cf 91       	pop	r28
     2c8:	1f 91       	pop	r17
     2ca:	0f 91       	pop	r16
     2cc:	ff 90       	pop	r15
     2ce:	ef 90       	pop	r14
     2d0:	df 90       	pop	r13
     2d2:	08 95       	ret

000002d4 <_ZN17Adafruit_MLX9061411writeEEPROMEhi>:
uint8_t Adafruit_MLX90614::writeEEPROM(uint8_t reg, int16_t data)
{
     2d4:	ef 92       	push	r14
     2d6:	ff 92       	push	r15
     2d8:	1f 93       	push	r17
     2da:	cf 93       	push	r28
     2dc:	df 93       	push	r29
     2de:	ec 01       	movw	r28, r24
     2e0:	16 2f       	mov	r17, r22
     2e2:	7a 01       	movw	r14, r20
	// Clear out EEPROM first:
	if (write16(reg, 0) != 0)
     2e4:	40 e0       	ldi	r20, 0x00	; 0
     2e6:	50 e0       	ldi	r21, 0x00	; 0
     2e8:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <_ZN17Adafruit_MLX906147write16Ehi>
     2ec:	81 11       	cpse	r24, r1
     2ee:	17 c0       	rjmp	.+46     	; 0x31e <_ZN17Adafruit_MLX9061411writeEEPROMEhi+0x4a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2f0:	8f e1       	ldi	r24, 0x1F	; 31
     2f2:	9e e4       	ldi	r25, 0x4E	; 78
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	f1 f7       	brne	.-4      	; 0x2f4 <_ZN17Adafruit_MLX9061411writeEEPROMEhi+0x20>
     2f8:	00 c0       	rjmp	.+0      	; 0x2fa <_ZN17Adafruit_MLX9061411writeEEPROMEhi+0x26>
     2fa:	00 00       	nop
	return 1; // If the write failed, return 1
	_delay_ms(5); // Delay tErase
	
	uint8_t i2cRet = write16(reg, data);
     2fc:	a7 01       	movw	r20, r14
     2fe:	61 2f       	mov	r22, r17
     300:	ce 01       	movw	r24, r28
     302:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <_ZN17Adafruit_MLX906147write16Ehi>
     306:	98 2f       	mov	r25, r24
     308:	ef e1       	ldi	r30, 0x1F	; 31
     30a:	fe e4       	ldi	r31, 0x4E	; 78
     30c:	31 97       	sbiw	r30, 0x01	; 1
     30e:	f1 f7       	brne	.-4      	; 0x30c <_ZN17Adafruit_MLX9061411writeEEPROMEhi+0x38>
     310:	00 c0       	rjmp	.+0      	; 0x312 <_ZN17Adafruit_MLX9061411writeEEPROMEhi+0x3e>
     312:	00 00       	nop
	_delay_ms(5); // Delay tWrite
	
	if (i2cRet == 0)
     314:	81 e0       	ldi	r24, 0x01	; 1
     316:	91 11       	cpse	r25, r1
     318:	03 c0       	rjmp	.+6      	; 0x320 <_ZN17Adafruit_MLX9061411writeEEPROMEhi+0x4c>
     31a:	80 e0       	ldi	r24, 0x00	; 0
     31c:	01 c0       	rjmp	.+2      	; 0x320 <_ZN17Adafruit_MLX9061411writeEEPROMEhi+0x4c>
}
uint8_t Adafruit_MLX90614::writeEEPROM(uint8_t reg, int16_t data)
{
	// Clear out EEPROM first:
	if (write16(reg, 0) != 0)
	return 1; // If the write failed, return 1
     31e:	81 e0       	ldi	r24, 0x01	; 1
	
	if (i2cRet == 0)
	return 0;
	else
	return 1;
}
     320:	df 91       	pop	r29
     322:	cf 91       	pop	r28
     324:	1f 91       	pop	r17
     326:	ff 90       	pop	r15
     328:	ef 90       	pop	r14
     32a:	08 95       	ret

0000032c <_ZN17Adafruit_MLX9061413setEmissivityEf>:
  return temp;
}
/*********************************************************************/
/*********************************************************************/
uint8_t Adafruit_MLX90614::setEmissivity(float emis)
{
     32c:	cf 92       	push	r12
     32e:	df 92       	push	r13
     330:	ef 92       	push	r14
     332:	ff 92       	push	r15
     334:	cf 93       	push	r28
     336:	df 93       	push	r29
     338:	ec 01       	movw	r28, r24
     33a:	6a 01       	movw	r12, r20
     33c:	7b 01       	movw	r14, r22
	// Make sure emissivity is between 0.1 and 1.0
	if ((emis > 1.0) || (emis < 0.1)) return 0; // Return fail if not
     33e:	20 e0       	ldi	r18, 0x00	; 0
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	40 e8       	ldi	r20, 0x80	; 128
     344:	5f e3       	ldi	r21, 0x3F	; 63
     346:	c7 01       	movw	r24, r14
     348:	b6 01       	movw	r22, r12
     34a:	0e 94 0e 05 	call	0xa1c	; 0xa1c <__gesf2>
     34e:	18 16       	cp	r1, r24
     350:	0c f1       	brlt	.+66     	; 0x394 <_ZN17Adafruit_MLX9061413setEmissivityEf+0x68>
     352:	2d ec       	ldi	r18, 0xCD	; 205
     354:	3c ec       	ldi	r19, 0xCC	; 204
     356:	4c ec       	ldi	r20, 0xCC	; 204
     358:	5d e3       	ldi	r21, 0x3D	; 61
     35a:	c7 01       	movw	r24, r14
     35c:	b6 01       	movw	r22, r12
     35e:	0e 94 28 04 	call	0x850	; 0x850 <__cmpsf2>
     362:	88 23       	and	r24, r24
     364:	cc f0       	brlt	.+50     	; 0x398 <_ZN17Adafruit_MLX9061413setEmissivityEf+0x6c>
	
	// Calculate the raw 16-bit value:
	uint16_t ke = uint16_t(65535.0 * emis);
     366:	20 e0       	ldi	r18, 0x00	; 0
     368:	3f ef       	ldi	r19, 0xFF	; 255
     36a:	4f e7       	ldi	r20, 0x7F	; 127
     36c:	57 e4       	ldi	r21, 0x47	; 71
     36e:	c7 01       	movw	r24, r14
     370:	b6 01       	movw	r22, r12
     372:	0e 94 13 05 	call	0xa26	; 0xa26 <__mulsf3>
     376:	0e 94 2d 04 	call	0x85a	; 0x85a <__fixunssfsi>
#include "util/delay.h"
  
/*********************************************************************/
template<typename V>
inline V constrain(V x, V a, V b) {
	return((x < a)?a:(b<x)?b:x);
     37a:	61 15       	cp	r22, r1
     37c:	20 e2       	ldi	r18, 0x20	; 32
     37e:	72 07       	cpc	r23, r18
     380:	10 f0       	brcs	.+4      	; 0x386 <_ZN17Adafruit_MLX9061413setEmissivityEf+0x5a>
     382:	ab 01       	movw	r20, r22
     384:	02 c0       	rjmp	.+4      	; 0x38a <_ZN17Adafruit_MLX9061413setEmissivityEf+0x5e>
     386:	40 e0       	ldi	r20, 0x00	; 0
     388:	50 e2       	ldi	r21, 0x20	; 32
	// Calculate the raw 16-bit value:
	uint16_t ke = uint16_t(65535.0 * emis);
	ke = constrain<uint16_t>(ke, 0x2000, 0xFFFF);

	// Write that value to the ke register
	return writeEEPROM(MLX90614_EMISS, (int16_t)ke);
     38a:	64 e2       	ldi	r22, 0x24	; 36
     38c:	ce 01       	movw	r24, r28
     38e:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <_ZN17Adafruit_MLX9061411writeEEPROMEhi>
     392:	03 c0       	rjmp	.+6      	; 0x39a <_ZN17Adafruit_MLX9061413setEmissivityEf+0x6e>
/*********************************************************************/
/*********************************************************************/
uint8_t Adafruit_MLX90614::setEmissivity(float emis)
{
	// Make sure emissivity is between 0.1 and 1.0
	if ((emis > 1.0) || (emis < 0.1)) return 0; // Return fail if not
     394:	80 e0       	ldi	r24, 0x00	; 0
     396:	01 c0       	rjmp	.+2      	; 0x39a <_ZN17Adafruit_MLX9061413setEmissivityEf+0x6e>
     398:	80 e0       	ldi	r24, 0x00	; 0
	uint16_t ke = uint16_t(65535.0 * emis);
	ke = constrain<uint16_t>(ke, 0x2000, 0xFFFF);

	// Write that value to the ke register
	return writeEEPROM(MLX90614_EMISS, (int16_t)ke);
}
     39a:	df 91       	pop	r29
     39c:	cf 91       	pop	r28
     39e:	ff 90       	pop	r15
     3a0:	ef 90       	pop	r14
     3a2:	df 90       	pop	r13
     3a4:	cf 90       	pop	r12
     3a6:	08 95       	ret

000003a8 <_ZN7HC_SR044initEv>:
// Anything over 400/500 cm (23200/29410 us pulse) is "out of range"
const unsigned long MAX_DIST = 23200;
  
void HC_SR04::init() {
  // The Trigger pin will tell the sensor to range find
  DDRD = 0x20;
     3a8:	80 e2       	ldi	r24, 0x20	; 32
     3aa:	8a b9       	out	0x0a, r24	; 10
  PORTD = 0x00;
     3ac:	1b b8       	out	0x0b, r1	; 11
  clr_pin(PORTD, TRIG_PIN);  
     3ae:	5d 98       	cbi	0x0b, 5	; 11
     3b0:	08 95       	ret

000003b2 <__vector_14>:
#endif // Sonic
#ifdef _TOF
	VL53L0X TOF;
#endif // TOF
volatile unsigned long int count = 0; 
ISR(TIMER0_COMPA_vect){
     3b2:	1f 92       	push	r1
     3b4:	0f 92       	push	r0
     3b6:	0f b6       	in	r0, 0x3f	; 63
     3b8:	0f 92       	push	r0
     3ba:	11 24       	eor	r1, r1
     3bc:	8f 93       	push	r24
     3be:	9f 93       	push	r25
     3c0:	af 93       	push	r26
     3c2:	bf 93       	push	r27
	count++;
     3c4:	80 91 b6 01 	lds	r24, 0x01B6
     3c8:	90 91 b7 01 	lds	r25, 0x01B7
     3cc:	a0 91 b8 01 	lds	r26, 0x01B8
     3d0:	b0 91 b9 01 	lds	r27, 0x01B9
     3d4:	01 96       	adiw	r24, 0x01	; 1
     3d6:	a1 1d       	adc	r26, r1
     3d8:	b1 1d       	adc	r27, r1
     3da:	80 93 b6 01 	sts	0x01B6, r24
     3de:	90 93 b7 01 	sts	0x01B7, r25
     3e2:	a0 93 b8 01 	sts	0x01B8, r26
     3e6:	b0 93 b9 01 	sts	0x01B9, r27
}
     3ea:	bf 91       	pop	r27
     3ec:	af 91       	pop	r26
     3ee:	9f 91       	pop	r25
     3f0:	8f 91       	pop	r24
     3f2:	0f 90       	pop	r0
     3f4:	0f be       	out	0x3f, r0	; 63
     3f6:	0f 90       	pop	r0
     3f8:	1f 90       	pop	r1
     3fa:	18 95       	reti

000003fc <__vector_13>:
ISR(TIMER1_OVF_vect){}
     3fc:	1f 92       	push	r1
     3fe:	0f 92       	push	r0
     400:	0f b6       	in	r0, 0x3f	; 63
     402:	0f 92       	push	r0
     404:	11 24       	eor	r1, r1
     406:	0f 90       	pop	r0
     408:	0f be       	out	0x3f, r0	; 63
     40a:	0f 90       	pop	r0
     40c:	1f 90       	pop	r1
     40e:	18 95       	reti

00000410 <_Z5setupv>:
unsigned long int millis(void){
	return count;
}
/*********************************************************************/
void setup(void)
{		
     410:	cf 93       	push	r28
	cli();
     412:	f8 94       	cli
	#ifdef _DEBUG
		uint8_t rflag = MCUSR;
     414:	c4 b7       	in	r28, 0x34	; 52
		MCUSR = 0;
     416:	14 be       	out	0x34, r1	; 52
	#endif // _DEBUG
	
	//DDRB |= _BV(PORTB5);
	//PORTB &= ~_BV(PORTB5);
	TCNT0 = 0;
     418:	16 bc       	out	0x26, r1	; 38
	TCNT1 = 0;
     41a:	10 92 85 00 	sts	0x0085, r1
     41e:	10 92 84 00 	sts	0x0084, r1
	TCCR0A |= (1<<WGM01);
     422:	84 b5       	in	r24, 0x24	; 36
     424:	82 60       	ori	r24, 0x02	; 2
     426:	84 bd       	out	0x24, r24	; 36
	OCR0A = 249;
     428:	89 ef       	ldi	r24, 0xF9	; 249
     42a:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1 << OCIE0A);
     42c:	ee e6       	ldi	r30, 0x6E	; 110
     42e:	f0 e0       	ldi	r31, 0x00	; 0
     430:	80 81       	ld	r24, Z
     432:	82 60       	ori	r24, 0x02	; 2
     434:	80 83       	st	Z, r24
	TIMSK1 |= _BV(TOIE1);
     436:	ef e6       	ldi	r30, 0x6F	; 111
     438:	f0 e0       	ldi	r31, 0x00	; 0
     43a:	80 81       	ld	r24, Z
     43c:	81 60       	ori	r24, 0x01	; 1
     43e:	80 83       	st	Z, r24
	TCCR0B |= (1<<CS01) | (1<<CS00);
     440:	85 b5       	in	r24, 0x25	; 37
     442:	83 60       	ori	r24, 0x03	; 3
     444:	85 bd       	out	0x25, r24	; 37
	TCCR1B |= (1<<CS11);
     446:	e1 e8       	ldi	r30, 0x81	; 129
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	80 81       	ld	r24, Z
     44c:	82 60       	ori	r24, 0x02	; 2
     44e:	80 83       	st	Z, r24
	sei();
     450:	78 94       	sei
	Serial.init(9600);
     452:	60 e8       	ldi	r22, 0x80	; 128
     454:	75 e2       	ldi	r23, 0x25	; 37
     456:	88 ed       	ldi	r24, 0xD8	; 216
     458:	91 e0       	ldi	r25, 0x01	; 1
     45a:	0e 94 61 03 	call	0x6c2	; 0x6c2 <_ZN5USART4initEi>

	#ifdef _DEBUG
		Serial.send( rflag ,HEX);
     45e:	40 e1       	ldi	r20, 0x10	; 16
     460:	50 e0       	ldi	r21, 0x00	; 0
     462:	6c 2f       	mov	r22, r28
     464:	88 ed       	ldi	r24, 0xD8	; 216
     466:	91 e0       	ldi	r25, 0x01	; 1
     468:	0e 94 df 03 	call	0x7be	; 0x7be <_ZN5USART4sendEhi>
		void send(const char* StringPtr);
		void send(uint8_t data, int base);
		void send(double data, int base);
			
		void sendln(void) {send("\r\n");};
		void sendln(const char* c) {send(c);send("\r\n");};
     46c:	60 e0       	ldi	r22, 0x00	; 0
     46e:	71 e0       	ldi	r23, 0x01	; 1
     470:	88 ed       	ldi	r24, 0xD8	; 216
     472:	91 e0       	ldi	r25, 0x01	; 1
     474:	0e 94 ca 03 	call	0x794	; 0x794 <_ZN5USART4sendEPKc>
     478:	6d e0       	ldi	r22, 0x0D	; 13
     47a:	71 e0       	ldi	r23, 0x01	; 1
     47c:	88 ed       	ldi	r24, 0xD8	; 216
     47e:	91 e0       	ldi	r25, 0x01	; 1
     480:	0e 94 ca 03 	call	0x794	; 0x794 <_ZN5USART4sendEPKc>
		Serial.sendln("> Booting...");	
	#endif // _DEBUG	
	#ifdef _Sonic
		Sonic.init();
     484:	8a eb       	ldi	r24, 0xBA	; 186
     486:	91 e0       	ldi	r25, 0x01	; 1
     488:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <_ZN7HC_SR044initEv>
 		TOF.setVcselPulsePeriod(VL53L0X::VcselPeriodFinalRange, 12);
		#ifdef _DEBUG
		Serial.sendln("> TOF Started");
		#endif // _DEBUG 
	#endif // TOF
}
     48c:	cf 91       	pop	r28
     48e:	08 95       	ret

00000490 <_Z9cal_emissv>:
     490:	69 e5       	ldi	r22, 0x59	; 89
     492:	71 e0       	ldi	r23, 0x01	; 1
     494:	88 ed       	ldi	r24, 0xD8	; 216
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	0e 94 ca 03 	call	0x794	; 0x794 <_ZN5USART4sendEPKc>
     49c:	6d e0       	ldi	r22, 0x0D	; 13
     49e:	71 e0       	ldi	r23, 0x01	; 1
     4a0:	88 ed       	ldi	r24, 0xD8	; 216
     4a2:	91 e0       	ldi	r25, 0x01	; 1
     4a4:	0e 94 ca 03 	call	0x794	; 0x794 <_ZN5USART4sendEPKc>
     4a8:	08 95       	ret

000004aa <_Z9set_emissh>:
{
	// TODO: Cal routine
	Serial.sendln("cal...");
}
void set_emiss(uint8_t e)
{
     4aa:	cf 92       	push	r12
     4ac:	df 92       	push	r13
     4ae:	ef 92       	push	r14
     4b0:	ff 92       	push	r15
     4b2:	cf 93       	push	r28
     4b4:	c8 2f       	mov	r28, r24
     4b6:	60 e6       	ldi	r22, 0x60	; 96
     4b8:	71 e0       	ldi	r23, 0x01	; 1
     4ba:	88 ed       	ldi	r24, 0xD8	; 216
     4bc:	91 e0       	ldi	r25, 0x01	; 1
     4be:	0e 94 ca 03 	call	0x794	; 0x794 <_ZN5USART4sendEPKc>
     4c2:	6d e0       	ldi	r22, 0x0D	; 13
     4c4:	71 e0       	ldi	r23, 0x01	; 1
     4c6:	88 ed       	ldi	r24, 0xD8	; 216
     4c8:	91 e0       	ldi	r25, 0x01	; 1
     4ca:	0e 94 ca 03 	call	0x794	; 0x794 <_ZN5USART4sendEPKc>
	// TODO: Cal routine
	Serial.sendln("emiss...");
	for(int i=0;i<m_sensorsCount; i++){
		MLX[i].setEmissivity(e);
     4ce:	6c 2f       	mov	r22, r28
     4d0:	70 e0       	ldi	r23, 0x00	; 0
     4d2:	80 e0       	ldi	r24, 0x00	; 0
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <__floatunsisf>
     4da:	6b 01       	movw	r12, r22
     4dc:	7c 01       	movw	r14, r24
     4de:	ab 01       	movw	r20, r22
     4e0:	bc 01       	movw	r22, r24
     4e2:	82 ec       	ldi	r24, 0xC2	; 194
     4e4:	91 e0       	ldi	r25, 0x01	; 1
     4e6:	0e 94 96 01 	call	0x32c	; 0x32c <_ZN17Adafruit_MLX9061413setEmissivityEf>
     4ea:	b7 01       	movw	r22, r14
     4ec:	a6 01       	movw	r20, r12
     4ee:	8d ec       	ldi	r24, 0xCD	; 205
     4f0:	91 e0       	ldi	r25, 0x01	; 1
     4f2:	0e 94 96 01 	call	0x32c	; 0x32c <_ZN17Adafruit_MLX9061413setEmissivityEf>
	}		
}
     4f6:	cf 91       	pop	r28
     4f8:	ff 90       	pop	r15
     4fa:	ef 90       	pop	r14
     4fc:	df 90       	pop	r13
     4fe:	cf 90       	pop	r12
     500:	08 95       	ret

00000502 <main>:
/*********************************************************************/
int main(void)
{			
	unsigned long int start_time;
	setup();
     502:	0e 94 08 02 	call	0x410	; 0x410 <_Z5setupv>
	count++;
}
ISR(TIMER1_OVF_vect){}
/*********************************************************************/
unsigned long int millis(void){
	return count;
     506:	c0 90 b6 01 	lds	r12, 0x01B6
     50a:	d0 90 b7 01 	lds	r13, 0x01B7
     50e:	e0 90 b8 01 	lds	r14, 0x01B8
     512:	f0 90 b9 01 	lds	r15, 0x01B9
     516:	69 e6       	ldi	r22, 0x69	; 105
     518:	71 e0       	ldi	r23, 0x01	; 1
     51a:	88 ed       	ldi	r24, 0xD8	; 216
     51c:	91 e0       	ldi	r25, 0x01	; 1
     51e:	0e 94 ca 03 	call	0x794	; 0x794 <_ZN5USART4sendEPKc>
     522:	6d e0       	ldi	r22, 0x0D	; 13
     524:	71 e0       	ldi	r23, 0x01	; 1
     526:	88 ed       	ldi	r24, 0xD8	; 216
     528:	91 e0       	ldi	r25, 0x01	; 1
     52a:	0e 94 ca 03 	call	0x794	; 0x794 <_ZN5USART4sendEPKc>
		#ifdef _DEBUG
			Serial.sendln("> Read Sensors...");
		#endif
		//IR_sensorRead();
		
		if (Serial.available())
     52e:	88 ed       	ldi	r24, 0xD8	; 216
     530:	91 e0       	ldi	r25, 0x01	; 1
     532:	0e 94 93 03 	call	0x726	; 0x726 <_ZN5USART9availableEv>
     536:	88 23       	and	r24, r24
     538:	09 f4       	brne	.+2      	; 0x53c <main+0x3a>
     53a:	56 c0       	rjmp	.+172    	; 0x5e8 <main+0xe6>
		{
			char* d_str;
			d_str = Serial.readln();
     53c:	88 ed       	ldi	r24, 0xD8	; 216
     53e:	91 e0       	ldi	r25, 0x01	; 1
     540:	0e 94 a1 03 	call	0x742	; 0x742 <_ZN5USART6readlnEv>
     544:	ec 01       	movw	r28, r24
     546:	bc 01       	movw	r22, r24
     548:	88 ed       	ldi	r24, 0xD8	; 216
     54a:	91 e0       	ldi	r25, 0x01	; 1
     54c:	0e 94 ca 03 	call	0x794	; 0x794 <_ZN5USART4sendEPKc>
     550:	6d e0       	ldi	r22, 0x0D	; 13
     552:	71 e0       	ldi	r23, 0x01	; 1
     554:	88 ed       	ldi	r24, 0xD8	; 216
     556:	91 e0       	ldi	r25, 0x01	; 1
     558:	0e 94 ca 03 	call	0x794	; 0x794 <_ZN5USART4sendEPKc>
			Serial.sendln(d_str);	
			if(d_str[0] == 's'){
     55c:	88 81       	ld	r24, Y
     55e:	83 37       	cpi	r24, 0x73	; 115
     560:	09 f0       	breq	.+2      	; 0x564 <main+0x62>
     562:	42 c0       	rjmp	.+132    	; 0x5e8 <main+0xe6>
     564:	6b e7       	ldi	r22, 0x7B	; 123
     566:	71 e0       	ldi	r23, 0x01	; 1
     568:	88 ed       	ldi	r24, 0xD8	; 216
     56a:	91 e0       	ldi	r25, 0x01	; 1
     56c:	0e 94 ca 03 	call	0x794	; 0x794 <_ZN5USART4sendEPKc>
     570:	6d e0       	ldi	r22, 0x0D	; 13
     572:	71 e0       	ldi	r23, 0x01	; 1
     574:	88 ed       	ldi	r24, 0xD8	; 216
     576:	91 e0       	ldi	r25, 0x01	; 1
     578:	0e 94 ca 03 	call	0x794	; 0x794 <_ZN5USART4sendEPKc>
     57c:	66 e8       	ldi	r22, 0x86	; 134
     57e:	71 e0       	ldi	r23, 0x01	; 1
     580:	88 ed       	ldi	r24, 0xD8	; 216
     582:	91 e0       	ldi	r25, 0x01	; 1
     584:	0e 94 ca 03 	call	0x794	; 0x794 <_ZN5USART4sendEPKc>
     588:	6d e0       	ldi	r22, 0x0D	; 13
     58a:	71 e0       	ldi	r23, 0x01	; 1
     58c:	88 ed       	ldi	r24, 0xD8	; 216
     58e:	91 e0       	ldi	r25, 0x01	; 1
     590:	0e 94 ca 03 	call	0x794	; 0x794 <_ZN5USART4sendEPKc>
     594:	63 e9       	ldi	r22, 0x93	; 147
     596:	71 e0       	ldi	r23, 0x01	; 1
     598:	88 ed       	ldi	r24, 0xD8	; 216
     59a:	91 e0       	ldi	r25, 0x01	; 1
     59c:	0e 94 ca 03 	call	0x794	; 0x794 <_ZN5USART4sendEPKc>
     5a0:	6d e0       	ldi	r22, 0x0D	; 13
     5a2:	71 e0       	ldi	r23, 0x01	; 1
     5a4:	88 ed       	ldi	r24, 0xD8	; 216
     5a6:	91 e0       	ldi	r25, 0x01	; 1
     5a8:	0e 94 ca 03 	call	0x794	; 0x794 <_ZN5USART4sendEPKc>
				char inbyte;
				// TODO: Implement settings menu 
				Serial.sendln("> Settings");
				Serial.sendln("1) Calibrate");
				Serial.sendln("2) Set Emissivity");
				inbyte = Serial.read();
     5ac:	88 ed       	ldi	r24, 0xD8	; 216
     5ae:	91 e0       	ldi	r25, 0x01	; 1
     5b0:	0e 94 99 03 	call	0x732	; 0x732 <_ZN5USART4readEv>
				switch ((uint8_t)inbyte)
     5b4:	81 30       	cpi	r24, 0x01	; 1
     5b6:	19 f0       	breq	.+6      	; 0x5be <main+0xbc>
     5b8:	82 30       	cpi	r24, 0x02	; 2
     5ba:	21 f0       	breq	.+8      	; 0x5c4 <main+0xc2>
     5bc:	15 c0       	rjmp	.+42     	; 0x5e8 <main+0xe6>
				{
				case 1: 
					cal_emiss();
     5be:	0e 94 48 02 	call	0x490	; 0x490 <_Z9cal_emissv>
					break;
     5c2:	12 c0       	rjmp	.+36     	; 0x5e8 <main+0xe6>
     5c4:	65 ea       	ldi	r22, 0xA5	; 165
     5c6:	71 e0       	ldi	r23, 0x01	; 1
     5c8:	88 ed       	ldi	r24, 0xD8	; 216
     5ca:	91 e0       	ldi	r25, 0x01	; 1
     5cc:	0e 94 ca 03 	call	0x794	; 0x794 <_ZN5USART4sendEPKc>
     5d0:	6d e0       	ldi	r22, 0x0D	; 13
     5d2:	71 e0       	ldi	r23, 0x01	; 1
     5d4:	88 ed       	ldi	r24, 0xD8	; 216
     5d6:	91 e0       	ldi	r25, 0x01	; 1
     5d8:	0e 94 ca 03 	call	0x794	; 0x794 <_ZN5USART4sendEPKc>
				case 2: 
					Serial.sendln("Set E: ");
					inbyte = Serial.read();
     5dc:	88 ed       	ldi	r24, 0xD8	; 216
     5de:	91 e0       	ldi	r25, 0x01	; 1
     5e0:	0e 94 99 03 	call	0x732	; 0x732 <_ZN5USART4readEv>
					set_emiss((uint8_t)inbyte);
     5e4:	0e 94 55 02 	call	0x4aa	; 0x4aa <_Z9set_emissh>
	count++;
}
ISR(TIMER1_OVF_vect){}
/*********************************************************************/
unsigned long int millis(void){
	return count;
     5e8:	80 91 b6 01 	lds	r24, 0x01B6
     5ec:	90 91 b7 01 	lds	r25, 0x01B7
     5f0:	a0 91 b8 01 	lds	r26, 0x01B8
     5f4:	b0 91 b9 01 	lds	r27, 0x01B9
					set_emiss((uint8_t)inbyte);
					break;
				}
			}
		}
		while((millis()-start_time) <= 1000);
     5f8:	8c 19       	sub	r24, r12
     5fa:	9d 09       	sbc	r25, r13
     5fc:	ae 09       	sbc	r26, r14
     5fe:	bf 09       	sbc	r27, r15
     600:	89 3e       	cpi	r24, 0xE9	; 233
     602:	93 40       	sbci	r25, 0x03	; 3
     604:	a1 05       	cpc	r26, r1
     606:	b1 05       	cpc	r27, r1
     608:	78 f3       	brcs	.-34     	; 0x5e8 <main+0xe6>
     60a:	7d cf       	rjmp	.-262    	; 0x506 <main+0x4>

0000060c <_GLOBAL__sub_I_MLX>:
// Adafruit_MLX90614 MLX_5b(0x5E);
// Adafruit_MLX90614 MLX_5c(0x5C);
// Adafruit_MLX90614 MLX_5d(0x5D);

const int m_sensorsCount = 2;
Adafruit_MLX90614 MLX[m_sensorsCount] = {0x5A,0x5B};//,0x5C,0x5D};
     60c:	6a e5       	ldi	r22, 0x5A	; 90
     60e:	82 ec       	ldi	r24, 0xC2	; 194
     610:	91 e0       	ldi	r25, 0x01	; 1
     612:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_ZN17Adafruit_MLX90614C1Eh>
     616:	6b e5       	ldi	r22, 0x5B	; 91
     618:	8d ec       	ldi	r24, 0xCD	; 205
     61a:	91 e0       	ldi	r25, 0x01	; 1
     61c:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_ZN17Adafruit_MLX90614C1Eh>
     620:	08 95       	ret

00000622 <i2c_init>:
 Initialization of the I2C bus interface. Need to be called only once
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  DDRC = 0;
     622:	17 b8       	out	0x07, r1	; 7
  PORTC = (1 << PORTC4) | (1 << PORTC5);//enable pull up
     624:	80 e3       	ldi	r24, 0x30	; 48
     626:	88 b9       	out	0x08, r24	; 8
  TWSR = 0;                         /* no prescaler */
     628:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
     62c:	88 e4       	ldi	r24, 0x48	; 72
     62e:	80 93 b8 00 	sts	0x00B8, r24
     632:	08 95       	ret

00000634 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     634:	94 ea       	ldi	r25, 0xA4	; 164
     636:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     63a:	ec eb       	ldi	r30, 0xBC	; 188
     63c:	f0 e0       	ldi	r31, 0x00	; 0
     63e:	90 81       	ld	r25, Z
     640:	99 23       	and	r25, r25
     642:	ec f7       	brge	.-6      	; 0x63e <i2c_start+0xa>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     644:	90 91 b9 00 	lds	r25, 0x00B9
     648:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     64a:	98 30       	cpi	r25, 0x08	; 8
     64c:	11 f0       	breq	.+4      	; 0x652 <i2c_start+0x1e>
     64e:	90 31       	cpi	r25, 0x10	; 16
     650:	a1 f4       	brne	.+40     	; 0x67a <i2c_start+0x46>

	// send device address
	TWDR = address;
     652:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     656:	84 e8       	ldi	r24, 0x84	; 132
     658:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
     65c:	ec eb       	ldi	r30, 0xBC	; 188
     65e:	f0 e0       	ldi	r31, 0x00	; 0
     660:	80 81       	ld	r24, Z
     662:	88 23       	and	r24, r24
     664:	ec f7       	brge	.-6      	; 0x660 <i2c_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     666:	90 91 b9 00 	lds	r25, 0x00B9
     66a:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     66c:	98 31       	cpi	r25, 0x18	; 24
     66e:	39 f0       	breq	.+14     	; 0x67e <i2c_start+0x4a>
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	90 34       	cpi	r25, 0x40	; 64
     674:	29 f4       	brne	.+10     	; 0x680 <i2c_start+0x4c>
     676:	80 e0       	ldi	r24, 0x00	; 0
     678:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
     67e:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
     680:	08 95       	ret

00000682 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     682:	84 e9       	ldi	r24, 0x94	; 148
     684:	80 93 bc 00 	sts	0x00BC, r24
     688:	08 95       	ret

0000068a <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     68a:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     68e:	84 e8       	ldi	r24, 0x84	; 132
     690:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     694:	ec eb       	ldi	r30, 0xBC	; 188
     696:	f0 e0       	ldi	r31, 0x00	; 0
     698:	80 81       	ld	r24, Z
     69a:	88 23       	and	r24, r24
     69c:	ec f7       	brge	.-6      	; 0x698 <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     69e:	90 91 b9 00 	lds	r25, 0x00B9
     6a2:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	98 32       	cpi	r25, 0x28	; 40
     6a8:	09 f4       	brne	.+2      	; 0x6ac <i2c_write+0x22>
     6aa:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
     6ac:	08 95       	ret

000006ae <__vector_18>:
char buff[32];

USART Serial; //Initialize new instance of the serial class
//Setup Baud rate in header file
//set to 8 bits, no stop bit, no parity
ISR(USART_RX_vect){}
     6ae:	1f 92       	push	r1
     6b0:	0f 92       	push	r0
     6b2:	0f b6       	in	r0, 0x3f	; 63
     6b4:	0f 92       	push	r0
     6b6:	11 24       	eor	r1, r1
     6b8:	0f 90       	pop	r0
     6ba:	0f be       	out	0x3f, r0	; 63
     6bc:	0f 90       	pop	r0
     6be:	1f 90       	pop	r1
     6c0:	18 95       	reti

000006c2 <_ZN5USART4initEi>:

/*********************************************************************/
void USART::init(int BAUDRATE){
	UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);
     6c2:	cb 01       	movw	r24, r22
     6c4:	77 0f       	add	r23, r23
     6c6:	aa 0b       	sbc	r26, r26
     6c8:	bb 0b       	sbc	r27, r27
     6ca:	88 0f       	add	r24, r24
     6cc:	99 1f       	adc	r25, r25
     6ce:	aa 1f       	adc	r26, r26
     6d0:	bb 1f       	adc	r27, r27
     6d2:	88 0f       	add	r24, r24
     6d4:	99 1f       	adc	r25, r25
     6d6:	aa 1f       	adc	r26, r26
     6d8:	bb 1f       	adc	r27, r27
     6da:	9c 01       	movw	r18, r24
     6dc:	ad 01       	movw	r20, r26
     6de:	22 0f       	add	r18, r18
     6e0:	33 1f       	adc	r19, r19
     6e2:	44 1f       	adc	r20, r20
     6e4:	55 1f       	adc	r21, r21
     6e6:	22 0f       	add	r18, r18
     6e8:	33 1f       	adc	r19, r19
     6ea:	44 1f       	adc	r20, r20
     6ec:	55 1f       	adc	r21, r21
     6ee:	60 e0       	ldi	r22, 0x00	; 0
     6f0:	74 e2       	ldi	r23, 0x24	; 36
     6f2:	84 ef       	ldi	r24, 0xF4	; 244
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <__udivmodsi4>
     6fa:	da 01       	movw	r26, r20
     6fc:	c9 01       	movw	r24, r18
     6fe:	01 97       	sbiw	r24, 0x01	; 1
     700:	a1 09       	sbc	r26, r1
     702:	b1 09       	sbc	r27, r1
     704:	89 2f       	mov	r24, r25
     706:	9a 2f       	mov	r25, r26
     708:	ab 2f       	mov	r26, r27
     70a:	bb 27       	eor	r27, r27
     70c:	80 93 c5 00 	sts	0x00C5, r24
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);
     710:	21 50       	subi	r18, 0x01	; 1
     712:	20 93 c4 00 	sts	0x00C4, r18
	UCSR0B = (1<<RXEN0) | (1<<TXEN0) | (1 << RXCIE0); // Enable the USART Receive Complete interrupt (USART_RXC)
     716:	88 e9       	ldi	r24, 0x98	; 152
     718:	80 93 c1 00 	sts	0x00C1, r24
	(0 << UMSEL00) |
	/* one stop bit */
	(0 << USBS0) |
	/* 8-bits of data */
	(1 << UCSZ01) |
	(1 << UCSZ00);
     71c:	86 e0       	ldi	r24, 0x06	; 6
     71e:	80 93 c2 00 	sts	0x00C2, r24

	sei();
     722:	78 94       	sei
     724:	08 95       	ret

00000726 <_ZN5USART9availableEv>:
}
/*********************************************************************/
bool USART::available(void)
{
	 if (UCSR0A & (1<<RXC0)) {
     726:	80 91 c0 00 	lds	r24, 0x00C0
		 return true;
	 }
	 return false;
}
     72a:	88 1f       	adc	r24, r24
     72c:	88 27       	eor	r24, r24
     72e:	88 1f       	adc	r24, r24
     730:	08 95       	ret

00000732 <_ZN5USART4readEv>:
	return false;
}
/*********************************************************************/
unsigned char USART::read(void){

	while(!(UCSR0A & (1<<RXC0))); //wait until data is in buffer
     732:	e0 ec       	ldi	r30, 0xC0	; 192
     734:	f0 e0       	ldi	r31, 0x00	; 0
     736:	80 81       	ld	r24, Z
     738:	88 23       	and	r24, r24
     73a:	ec f7       	brge	.-6      	; 0x736 <_ZN5USART4readEv+0x4>
	return UDR0;// read buffer
     73c:	80 91 c6 00 	lds	r24, 0x00C6
}
     740:	08 95       	ret

00000742 <_ZN5USART6readlnEv>:
char* USART::readln(void){
     742:	0f 93       	push	r16
     744:	1f 93       	push	r17
     746:	cf 93       	push	r28
     748:	df 93       	push	r29
     74a:	c9 ed       	ldi	r28, 0xD9	; 217
     74c:	d1 e0       	ldi	r29, 0x01	; 1
     74e:	09 ef       	ldi	r16, 0xF9	; 249
     750:	11 e0       	ldi	r17, 0x01	; 1
	char inbyte;
	for (int i= 0; i< 32; i++){
		inbyte = Serial.read();
     752:	88 ed       	ldi	r24, 0xD8	; 216
     754:	91 e0       	ldi	r25, 0x01	; 1
     756:	0e 94 99 03 	call	0x732	; 0x732 <_ZN5USART4readEv>
		if (inbyte != 0x0D && inbyte != 0x0A){
     75a:	8d 30       	cpi	r24, 0x0D	; 13
     75c:	49 f0       	breq	.+18     	; 0x770 <_ZN5USART6readlnEv+0x2e>
     75e:	8a 30       	cpi	r24, 0x0A	; 10
     760:	51 f0       	breq	.+20     	; 0x776 <_ZN5USART6readlnEv+0x34>
			buff[i] = inbyte;
     762:	89 93       	st	Y+, r24
	while(!(UCSR0A & (1<<RXC0))); //wait until data is in buffer
	return UDR0;// read buffer
}
char* USART::readln(void){
	char inbyte;
	for (int i= 0; i< 32; i++){
     764:	c0 17       	cp	r28, r16
     766:	d1 07       	cpc	r29, r17
     768:	a1 f7       	brne	.-24     	; 0x752 <_ZN5USART6readlnEv+0x10>
		if (inbyte != 0x0D && inbyte != 0x0A){
			buff[i] = inbyte;
		}
		else {return 0;}	
	}
	return buff;
     76a:	89 ed       	ldi	r24, 0xD9	; 217
     76c:	91 e0       	ldi	r25, 0x01	; 1
     76e:	05 c0       	rjmp	.+10     	; 0x77a <_ZN5USART6readlnEv+0x38>
	for (int i= 0; i< 32; i++){
		inbyte = Serial.read();
		if (inbyte != 0x0D && inbyte != 0x0A){
			buff[i] = inbyte;
		}
		else {return 0;}	
     770:	80 e0       	ldi	r24, 0x00	; 0
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	02 c0       	rjmp	.+4      	; 0x77a <_ZN5USART6readlnEv+0x38>
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	90 e0       	ldi	r25, 0x00	; 0
	}
	return buff;
}
     77a:	df 91       	pop	r29
     77c:	cf 91       	pop	r28
     77e:	1f 91       	pop	r17
     780:	0f 91       	pop	r16
     782:	08 95       	ret

00000784 <_ZN5USART4sendEh>:

/*********************************************************************/
void USART::send(uint8_t data){

	while(!(UCSR0A & (1<<UDRE0))); //wait until buffer is empty
     784:	e0 ec       	ldi	r30, 0xC0	; 192
     786:	f0 e0       	ldi	r31, 0x00	; 0
     788:	80 81       	ld	r24, Z
     78a:	85 ff       	sbrs	r24, 5
     78c:	fd cf       	rjmp	.-6      	; 0x788 <_ZN5USART4sendEh+0x4>
	UDR0 = data; //Load data into buffer
     78e:	60 93 c6 00 	sts	0x00C6, r22
     792:	08 95       	ret

00000794 <_ZN5USART4sendEPKc>:
}
/*********************************************************************/
//send one char at a time
void USART::send(const char* StringPtr)
{
     794:	0f 93       	push	r16
     796:	1f 93       	push	r17
     798:	cf 93       	push	r28
     79a:	df 93       	push	r29
     79c:	eb 01       	movw	r28, r22
	while(*StringPtr != 0x00)
     79e:	68 81       	ld	r22, Y
     7a0:	66 23       	and	r22, r22
     7a2:	41 f0       	breq	.+16     	; 0x7b4 <_ZN5USART4sendEPKc+0x20>
     7a4:	8c 01       	movw	r16, r24
     7a6:	21 96       	adiw	r28, 0x01	; 1
		bool available(void);
		unsigned char read(void);
		char* readln(void);
		bool flush(void);
		void send(uint8_t data);
		void send(char data) {send((uint8_t)data); };
     7a8:	c8 01       	movw	r24, r16
     7aa:	0e 94 c2 03 	call	0x784	; 0x784 <_ZN5USART4sendEh>
     7ae:	69 91       	ld	r22, Y+
     7b0:	61 11       	cpse	r22, r1
     7b2:	fa cf       	rjmp	.-12     	; 0x7a8 <_ZN5USART4sendEPKc+0x14>
	{
		send(*StringPtr++);
	}
}
     7b4:	df 91       	pop	r29
     7b6:	cf 91       	pop	r28
     7b8:	1f 91       	pop	r17
     7ba:	0f 91       	pop	r16
     7bc:	08 95       	ret

000007be <_ZN5USART4sendEhi>:
	send(str);
}
/*********************************************************************/
//convert int to ASCII number, display in decimal or hex
void USART::send(uint8_t data, int base)
{
     7be:	0f 93       	push	r16
     7c0:	1f 93       	push	r17
     7c2:	cf 93       	push	r28
     7c4:	df 93       	push	r29
     7c6:	00 d0       	rcall	.+0      	; 0x7c8 <_ZN5USART4sendEhi+0xa>
     7c8:	00 d0       	rcall	.+0      	; 0x7ca <_ZN5USART4sendEhi+0xc>
     7ca:	1f 92       	push	r1
     7cc:	cd b7       	in	r28, 0x3d	; 61
     7ce:	de b7       	in	r29, 0x3e	; 62
     7d0:	8c 01       	movw	r16, r24
	char str[5];
	if (base == DEC){
     7d2:	4a 30       	cpi	r20, 0x0A	; 10
     7d4:	51 05       	cpc	r21, r1
     7d6:	99 f4       	brne	.+38     	; 0x7fe <_ZN5USART4sendEhi+0x40>
		sprintf(str,"%d",data);
     7d8:	1f 92       	push	r1
     7da:	6f 93       	push	r22
     7dc:	80 eb       	ldi	r24, 0xB0	; 176
     7de:	91 e0       	ldi	r25, 0x01	; 1
     7e0:	9f 93       	push	r25
     7e2:	8f 93       	push	r24
     7e4:	ce 01       	movw	r24, r28
     7e6:	01 96       	adiw	r24, 0x01	; 1
     7e8:	9f 93       	push	r25
     7ea:	8f 93       	push	r24
     7ec:	0e 94 81 0a 	call	0x1502	; 0x1502 <sprintf>
     7f0:	0f 90       	pop	r0
     7f2:	0f 90       	pop	r0
     7f4:	0f 90       	pop	r0
     7f6:	0f 90       	pop	r0
     7f8:	0f 90       	pop	r0
     7fa:	0f 90       	pop	r0
     7fc:	12 c0       	rjmp	.+36     	; 0x822 <_ZN5USART4sendEhi+0x64>
	}else{
		sprintf(str,"%x",data);	
     7fe:	1f 92       	push	r1
     800:	6f 93       	push	r22
     802:	23 eb       	ldi	r18, 0xB3	; 179
     804:	31 e0       	ldi	r19, 0x01	; 1
     806:	3f 93       	push	r19
     808:	2f 93       	push	r18
     80a:	ce 01       	movw	r24, r28
     80c:	01 96       	adiw	r24, 0x01	; 1
     80e:	9f 93       	push	r25
     810:	8f 93       	push	r24
     812:	0e 94 81 0a 	call	0x1502	; 0x1502 <sprintf>
     816:	0f 90       	pop	r0
     818:	0f 90       	pop	r0
     81a:	0f 90       	pop	r0
     81c:	0f 90       	pop	r0
     81e:	0f 90       	pop	r0
     820:	0f 90       	pop	r0
	}
	send(str);
     822:	be 01       	movw	r22, r28
     824:	6f 5f       	subi	r22, 0xFF	; 255
     826:	7f 4f       	sbci	r23, 0xFF	; 255
     828:	c8 01       	movw	r24, r16
     82a:	0e 94 ca 03 	call	0x794	; 0x794 <_ZN5USART4sendEPKc>
}
     82e:	0f 90       	pop	r0
     830:	0f 90       	pop	r0
     832:	0f 90       	pop	r0
     834:	0f 90       	pop	r0
     836:	0f 90       	pop	r0
     838:	df 91       	pop	r29
     83a:	cf 91       	pop	r28
     83c:	1f 91       	pop	r17
     83e:	0f 91       	pop	r16
     840:	08 95       	ret

00000842 <_GLOBAL__sub_I_Wire>:
	  }
 class I2c
 {
 public:
    I2c()
    {
     842:	e9 ef       	ldi	r30, 0xF9	; 249
     844:	f1 e0       	ldi	r31, 0x01	; 1
     846:	10 86       	std	Z+8, r1	; 0x08
     848:	11 86       	std	Z+9, r1	; 0x09
	    i2c_init();
     84a:	0e 94 11 03 	call	0x622	; 0x622 <i2c_init>
     84e:	08 95       	ret

00000850 <__cmpsf2>:
     850:	0e 94 99 04 	call	0x932	; 0x932 <__fp_cmp>
     854:	08 f4       	brcc	.+2      	; 0x858 <__cmpsf2+0x8>
     856:	81 e0       	ldi	r24, 0x01	; 1
     858:	08 95       	ret

0000085a <__fixunssfsi>:
     85a:	0e 94 ed 04 	call	0x9da	; 0x9da <__fp_splitA>
     85e:	88 f0       	brcs	.+34     	; 0x882 <__fixunssfsi+0x28>
     860:	9f 57       	subi	r25, 0x7F	; 127
     862:	98 f0       	brcs	.+38     	; 0x88a <__fixunssfsi+0x30>
     864:	b9 2f       	mov	r27, r25
     866:	99 27       	eor	r25, r25
     868:	b7 51       	subi	r27, 0x17	; 23
     86a:	b0 f0       	brcs	.+44     	; 0x898 <__fixunssfsi+0x3e>
     86c:	e1 f0       	breq	.+56     	; 0x8a6 <__fixunssfsi+0x4c>
     86e:	66 0f       	add	r22, r22
     870:	77 1f       	adc	r23, r23
     872:	88 1f       	adc	r24, r24
     874:	99 1f       	adc	r25, r25
     876:	1a f0       	brmi	.+6      	; 0x87e <__fixunssfsi+0x24>
     878:	ba 95       	dec	r27
     87a:	c9 f7       	brne	.-14     	; 0x86e <__fixunssfsi+0x14>
     87c:	14 c0       	rjmp	.+40     	; 0x8a6 <__fixunssfsi+0x4c>
     87e:	b1 30       	cpi	r27, 0x01	; 1
     880:	91 f0       	breq	.+36     	; 0x8a6 <__fixunssfsi+0x4c>
     882:	0e 94 07 05 	call	0xa0e	; 0xa0e <__fp_zero>
     886:	b1 e0       	ldi	r27, 0x01	; 1
     888:	08 95       	ret
     88a:	0c 94 07 05 	jmp	0xa0e	; 0xa0e <__fp_zero>
     88e:	67 2f       	mov	r22, r23
     890:	78 2f       	mov	r23, r24
     892:	88 27       	eor	r24, r24
     894:	b8 5f       	subi	r27, 0xF8	; 248
     896:	39 f0       	breq	.+14     	; 0x8a6 <__fixunssfsi+0x4c>
     898:	b9 3f       	cpi	r27, 0xF9	; 249
     89a:	cc f3       	brlt	.-14     	; 0x88e <__fixunssfsi+0x34>
     89c:	86 95       	lsr	r24
     89e:	77 95       	ror	r23
     8a0:	67 95       	ror	r22
     8a2:	b3 95       	inc	r27
     8a4:	d9 f7       	brne	.-10     	; 0x89c <__fixunssfsi+0x42>
     8a6:	3e f4       	brtc	.+14     	; 0x8b6 <__fixunssfsi+0x5c>
     8a8:	90 95       	com	r25
     8aa:	80 95       	com	r24
     8ac:	70 95       	com	r23
     8ae:	61 95       	neg	r22
     8b0:	7f 4f       	sbci	r23, 0xFF	; 255
     8b2:	8f 4f       	sbci	r24, 0xFF	; 255
     8b4:	9f 4f       	sbci	r25, 0xFF	; 255
     8b6:	08 95       	ret

000008b8 <__floatunsisf>:
     8b8:	e8 94       	clt
     8ba:	09 c0       	rjmp	.+18     	; 0x8ce <__floatsisf+0x12>

000008bc <__floatsisf>:
     8bc:	97 fb       	bst	r25, 7
     8be:	3e f4       	brtc	.+14     	; 0x8ce <__floatsisf+0x12>
     8c0:	90 95       	com	r25
     8c2:	80 95       	com	r24
     8c4:	70 95       	com	r23
     8c6:	61 95       	neg	r22
     8c8:	7f 4f       	sbci	r23, 0xFF	; 255
     8ca:	8f 4f       	sbci	r24, 0xFF	; 255
     8cc:	9f 4f       	sbci	r25, 0xFF	; 255
     8ce:	99 23       	and	r25, r25
     8d0:	a9 f0       	breq	.+42     	; 0x8fc <__floatsisf+0x40>
     8d2:	f9 2f       	mov	r31, r25
     8d4:	96 e9       	ldi	r25, 0x96	; 150
     8d6:	bb 27       	eor	r27, r27
     8d8:	93 95       	inc	r25
     8da:	f6 95       	lsr	r31
     8dc:	87 95       	ror	r24
     8de:	77 95       	ror	r23
     8e0:	67 95       	ror	r22
     8e2:	b7 95       	ror	r27
     8e4:	f1 11       	cpse	r31, r1
     8e6:	f8 cf       	rjmp	.-16     	; 0x8d8 <__floatsisf+0x1c>
     8e8:	fa f4       	brpl	.+62     	; 0x928 <__stack+0x29>
     8ea:	bb 0f       	add	r27, r27
     8ec:	11 f4       	brne	.+4      	; 0x8f2 <__floatsisf+0x36>
     8ee:	60 ff       	sbrs	r22, 0
     8f0:	1b c0       	rjmp	.+54     	; 0x928 <__stack+0x29>
     8f2:	6f 5f       	subi	r22, 0xFF	; 255
     8f4:	7f 4f       	sbci	r23, 0xFF	; 255
     8f6:	8f 4f       	sbci	r24, 0xFF	; 255
     8f8:	9f 4f       	sbci	r25, 0xFF	; 255
     8fa:	16 c0       	rjmp	.+44     	; 0x928 <__stack+0x29>
     8fc:	88 23       	and	r24, r24
     8fe:	11 f0       	breq	.+4      	; 0x904 <__stack+0x5>
     900:	96 e9       	ldi	r25, 0x96	; 150
     902:	11 c0       	rjmp	.+34     	; 0x926 <__stack+0x27>
     904:	77 23       	and	r23, r23
     906:	21 f0       	breq	.+8      	; 0x910 <__stack+0x11>
     908:	9e e8       	ldi	r25, 0x8E	; 142
     90a:	87 2f       	mov	r24, r23
     90c:	76 2f       	mov	r23, r22
     90e:	05 c0       	rjmp	.+10     	; 0x91a <__stack+0x1b>
     910:	66 23       	and	r22, r22
     912:	71 f0       	breq	.+28     	; 0x930 <__stack+0x31>
     914:	96 e8       	ldi	r25, 0x86	; 134
     916:	86 2f       	mov	r24, r22
     918:	70 e0       	ldi	r23, 0x00	; 0
     91a:	60 e0       	ldi	r22, 0x00	; 0
     91c:	2a f0       	brmi	.+10     	; 0x928 <__stack+0x29>
     91e:	9a 95       	dec	r25
     920:	66 0f       	add	r22, r22
     922:	77 1f       	adc	r23, r23
     924:	88 1f       	adc	r24, r24
     926:	da f7       	brpl	.-10     	; 0x91e <__stack+0x1f>
     928:	88 0f       	add	r24, r24
     92a:	96 95       	lsr	r25
     92c:	87 95       	ror	r24
     92e:	97 f9       	bld	r25, 7
     930:	08 95       	ret

00000932 <__fp_cmp>:
     932:	99 0f       	add	r25, r25
     934:	00 08       	sbc	r0, r0
     936:	55 0f       	add	r21, r21
     938:	aa 0b       	sbc	r26, r26
     93a:	e0 e8       	ldi	r30, 0x80	; 128
     93c:	fe ef       	ldi	r31, 0xFE	; 254
     93e:	16 16       	cp	r1, r22
     940:	17 06       	cpc	r1, r23
     942:	e8 07       	cpc	r30, r24
     944:	f9 07       	cpc	r31, r25
     946:	c0 f0       	brcs	.+48     	; 0x978 <__fp_cmp+0x46>
     948:	12 16       	cp	r1, r18
     94a:	13 06       	cpc	r1, r19
     94c:	e4 07       	cpc	r30, r20
     94e:	f5 07       	cpc	r31, r21
     950:	98 f0       	brcs	.+38     	; 0x978 <__fp_cmp+0x46>
     952:	62 1b       	sub	r22, r18
     954:	73 0b       	sbc	r23, r19
     956:	84 0b       	sbc	r24, r20
     958:	95 0b       	sbc	r25, r21
     95a:	39 f4       	brne	.+14     	; 0x96a <__fp_cmp+0x38>
     95c:	0a 26       	eor	r0, r26
     95e:	61 f0       	breq	.+24     	; 0x978 <__fp_cmp+0x46>
     960:	23 2b       	or	r18, r19
     962:	24 2b       	or	r18, r20
     964:	25 2b       	or	r18, r21
     966:	21 f4       	brne	.+8      	; 0x970 <__fp_cmp+0x3e>
     968:	08 95       	ret
     96a:	0a 26       	eor	r0, r26
     96c:	09 f4       	brne	.+2      	; 0x970 <__fp_cmp+0x3e>
     96e:	a1 40       	sbci	r26, 0x01	; 1
     970:	a6 95       	lsr	r26
     972:	8f ef       	ldi	r24, 0xFF	; 255
     974:	81 1d       	adc	r24, r1
     976:	81 1d       	adc	r24, r1
     978:	08 95       	ret

0000097a <__fp_inf>:
     97a:	97 f9       	bld	r25, 7
     97c:	9f 67       	ori	r25, 0x7F	; 127
     97e:	80 e8       	ldi	r24, 0x80	; 128
     980:	70 e0       	ldi	r23, 0x00	; 0
     982:	60 e0       	ldi	r22, 0x00	; 0
     984:	08 95       	ret

00000986 <__fp_nan>:
     986:	9f ef       	ldi	r25, 0xFF	; 255
     988:	80 ec       	ldi	r24, 0xC0	; 192
     98a:	08 95       	ret

0000098c <__fp_pscA>:
     98c:	00 24       	eor	r0, r0
     98e:	0a 94       	dec	r0
     990:	16 16       	cp	r1, r22
     992:	17 06       	cpc	r1, r23
     994:	18 06       	cpc	r1, r24
     996:	09 06       	cpc	r0, r25
     998:	08 95       	ret

0000099a <__fp_pscB>:
     99a:	00 24       	eor	r0, r0
     99c:	0a 94       	dec	r0
     99e:	12 16       	cp	r1, r18
     9a0:	13 06       	cpc	r1, r19
     9a2:	14 06       	cpc	r1, r20
     9a4:	05 06       	cpc	r0, r21
     9a6:	08 95       	ret

000009a8 <__fp_round>:
     9a8:	09 2e       	mov	r0, r25
     9aa:	03 94       	inc	r0
     9ac:	00 0c       	add	r0, r0
     9ae:	11 f4       	brne	.+4      	; 0x9b4 <__fp_round+0xc>
     9b0:	88 23       	and	r24, r24
     9b2:	52 f0       	brmi	.+20     	; 0x9c8 <__fp_round+0x20>
     9b4:	bb 0f       	add	r27, r27
     9b6:	40 f4       	brcc	.+16     	; 0x9c8 <__fp_round+0x20>
     9b8:	bf 2b       	or	r27, r31
     9ba:	11 f4       	brne	.+4      	; 0x9c0 <__fp_round+0x18>
     9bc:	60 ff       	sbrs	r22, 0
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__fp_round+0x20>
     9c0:	6f 5f       	subi	r22, 0xFF	; 255
     9c2:	7f 4f       	sbci	r23, 0xFF	; 255
     9c4:	8f 4f       	sbci	r24, 0xFF	; 255
     9c6:	9f 4f       	sbci	r25, 0xFF	; 255
     9c8:	08 95       	ret

000009ca <__fp_split3>:
     9ca:	57 fd       	sbrc	r21, 7
     9cc:	90 58       	subi	r25, 0x80	; 128
     9ce:	44 0f       	add	r20, r20
     9d0:	55 1f       	adc	r21, r21
     9d2:	59 f0       	breq	.+22     	; 0x9ea <__fp_splitA+0x10>
     9d4:	5f 3f       	cpi	r21, 0xFF	; 255
     9d6:	71 f0       	breq	.+28     	; 0x9f4 <__fp_splitA+0x1a>
     9d8:	47 95       	ror	r20

000009da <__fp_splitA>:
     9da:	88 0f       	add	r24, r24
     9dc:	97 fb       	bst	r25, 7
     9de:	99 1f       	adc	r25, r25
     9e0:	61 f0       	breq	.+24     	; 0x9fa <__fp_splitA+0x20>
     9e2:	9f 3f       	cpi	r25, 0xFF	; 255
     9e4:	79 f0       	breq	.+30     	; 0xa04 <__fp_splitA+0x2a>
     9e6:	87 95       	ror	r24
     9e8:	08 95       	ret
     9ea:	12 16       	cp	r1, r18
     9ec:	13 06       	cpc	r1, r19
     9ee:	14 06       	cpc	r1, r20
     9f0:	55 1f       	adc	r21, r21
     9f2:	f2 cf       	rjmp	.-28     	; 0x9d8 <__fp_split3+0xe>
     9f4:	46 95       	lsr	r20
     9f6:	f1 df       	rcall	.-30     	; 0x9da <__fp_splitA>
     9f8:	08 c0       	rjmp	.+16     	; 0xa0a <__fp_splitA+0x30>
     9fa:	16 16       	cp	r1, r22
     9fc:	17 06       	cpc	r1, r23
     9fe:	18 06       	cpc	r1, r24
     a00:	99 1f       	adc	r25, r25
     a02:	f1 cf       	rjmp	.-30     	; 0x9e6 <__fp_splitA+0xc>
     a04:	86 95       	lsr	r24
     a06:	71 05       	cpc	r23, r1
     a08:	61 05       	cpc	r22, r1
     a0a:	08 94       	sec
     a0c:	08 95       	ret

00000a0e <__fp_zero>:
     a0e:	e8 94       	clt

00000a10 <__fp_szero>:
     a10:	bb 27       	eor	r27, r27
     a12:	66 27       	eor	r22, r22
     a14:	77 27       	eor	r23, r23
     a16:	cb 01       	movw	r24, r22
     a18:	97 f9       	bld	r25, 7
     a1a:	08 95       	ret

00000a1c <__gesf2>:
     a1c:	0e 94 99 04 	call	0x932	; 0x932 <__fp_cmp>
     a20:	08 f4       	brcc	.+2      	; 0xa24 <__gesf2+0x8>
     a22:	8f ef       	ldi	r24, 0xFF	; 255
     a24:	08 95       	ret

00000a26 <__mulsf3>:
     a26:	0e 94 26 05 	call	0xa4c	; 0xa4c <__mulsf3x>
     a2a:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__fp_round>
     a2e:	0e 94 c6 04 	call	0x98c	; 0x98c <__fp_pscA>
     a32:	38 f0       	brcs	.+14     	; 0xa42 <__mulsf3+0x1c>
     a34:	0e 94 cd 04 	call	0x99a	; 0x99a <__fp_pscB>
     a38:	20 f0       	brcs	.+8      	; 0xa42 <__mulsf3+0x1c>
     a3a:	95 23       	and	r25, r21
     a3c:	11 f0       	breq	.+4      	; 0xa42 <__mulsf3+0x1c>
     a3e:	0c 94 bd 04 	jmp	0x97a	; 0x97a <__fp_inf>
     a42:	0c 94 c3 04 	jmp	0x986	; 0x986 <__fp_nan>
     a46:	11 24       	eor	r1, r1
     a48:	0c 94 08 05 	jmp	0xa10	; 0xa10 <__fp_szero>

00000a4c <__mulsf3x>:
     a4c:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__fp_split3>
     a50:	70 f3       	brcs	.-36     	; 0xa2e <__mulsf3+0x8>

00000a52 <__mulsf3_pse>:
     a52:	95 9f       	mul	r25, r21
     a54:	c1 f3       	breq	.-16     	; 0xa46 <__mulsf3+0x20>
     a56:	95 0f       	add	r25, r21
     a58:	50 e0       	ldi	r21, 0x00	; 0
     a5a:	55 1f       	adc	r21, r21
     a5c:	62 9f       	mul	r22, r18
     a5e:	f0 01       	movw	r30, r0
     a60:	72 9f       	mul	r23, r18
     a62:	bb 27       	eor	r27, r27
     a64:	f0 0d       	add	r31, r0
     a66:	b1 1d       	adc	r27, r1
     a68:	63 9f       	mul	r22, r19
     a6a:	aa 27       	eor	r26, r26
     a6c:	f0 0d       	add	r31, r0
     a6e:	b1 1d       	adc	r27, r1
     a70:	aa 1f       	adc	r26, r26
     a72:	64 9f       	mul	r22, r20
     a74:	66 27       	eor	r22, r22
     a76:	b0 0d       	add	r27, r0
     a78:	a1 1d       	adc	r26, r1
     a7a:	66 1f       	adc	r22, r22
     a7c:	82 9f       	mul	r24, r18
     a7e:	22 27       	eor	r18, r18
     a80:	b0 0d       	add	r27, r0
     a82:	a1 1d       	adc	r26, r1
     a84:	62 1f       	adc	r22, r18
     a86:	73 9f       	mul	r23, r19
     a88:	b0 0d       	add	r27, r0
     a8a:	a1 1d       	adc	r26, r1
     a8c:	62 1f       	adc	r22, r18
     a8e:	83 9f       	mul	r24, r19
     a90:	a0 0d       	add	r26, r0
     a92:	61 1d       	adc	r22, r1
     a94:	22 1f       	adc	r18, r18
     a96:	74 9f       	mul	r23, r20
     a98:	33 27       	eor	r19, r19
     a9a:	a0 0d       	add	r26, r0
     a9c:	61 1d       	adc	r22, r1
     a9e:	23 1f       	adc	r18, r19
     aa0:	84 9f       	mul	r24, r20
     aa2:	60 0d       	add	r22, r0
     aa4:	21 1d       	adc	r18, r1
     aa6:	82 2f       	mov	r24, r18
     aa8:	76 2f       	mov	r23, r22
     aaa:	6a 2f       	mov	r22, r26
     aac:	11 24       	eor	r1, r1
     aae:	9f 57       	subi	r25, 0x7F	; 127
     ab0:	50 40       	sbci	r21, 0x00	; 0
     ab2:	9a f0       	brmi	.+38     	; 0xada <__mulsf3_pse+0x88>
     ab4:	f1 f0       	breq	.+60     	; 0xaf2 <__mulsf3_pse+0xa0>
     ab6:	88 23       	and	r24, r24
     ab8:	4a f0       	brmi	.+18     	; 0xacc <__mulsf3_pse+0x7a>
     aba:	ee 0f       	add	r30, r30
     abc:	ff 1f       	adc	r31, r31
     abe:	bb 1f       	adc	r27, r27
     ac0:	66 1f       	adc	r22, r22
     ac2:	77 1f       	adc	r23, r23
     ac4:	88 1f       	adc	r24, r24
     ac6:	91 50       	subi	r25, 0x01	; 1
     ac8:	50 40       	sbci	r21, 0x00	; 0
     aca:	a9 f7       	brne	.-22     	; 0xab6 <__mulsf3_pse+0x64>
     acc:	9e 3f       	cpi	r25, 0xFE	; 254
     ace:	51 05       	cpc	r21, r1
     ad0:	80 f0       	brcs	.+32     	; 0xaf2 <__mulsf3_pse+0xa0>
     ad2:	0c 94 bd 04 	jmp	0x97a	; 0x97a <__fp_inf>
     ad6:	0c 94 08 05 	jmp	0xa10	; 0xa10 <__fp_szero>
     ada:	5f 3f       	cpi	r21, 0xFF	; 255
     adc:	e4 f3       	brlt	.-8      	; 0xad6 <__mulsf3_pse+0x84>
     ade:	98 3e       	cpi	r25, 0xE8	; 232
     ae0:	d4 f3       	brlt	.-12     	; 0xad6 <__mulsf3_pse+0x84>
     ae2:	86 95       	lsr	r24
     ae4:	77 95       	ror	r23
     ae6:	67 95       	ror	r22
     ae8:	b7 95       	ror	r27
     aea:	f7 95       	ror	r31
     aec:	e7 95       	ror	r30
     aee:	9f 5f       	subi	r25, 0xFF	; 255
     af0:	c1 f7       	brne	.-16     	; 0xae2 <__mulsf3_pse+0x90>
     af2:	fe 2b       	or	r31, r30
     af4:	88 0f       	add	r24, r24
     af6:	91 1d       	adc	r25, r1
     af8:	96 95       	lsr	r25
     afa:	87 95       	ror	r24
     afc:	97 f9       	bld	r25, 7
     afe:	08 95       	ret

00000b00 <vfprintf>:
     b00:	a3 e1       	ldi	r26, 0x13	; 19
     b02:	b0 e0       	ldi	r27, 0x00	; 0
     b04:	e6 e8       	ldi	r30, 0x86	; 134
     b06:	f5 e0       	ldi	r31, 0x05	; 5
     b08:	0c 94 1e 09 	jmp	0x123c	; 0x123c <__prologue_saves__>
     b0c:	6c 01       	movw	r12, r24
     b0e:	4b 01       	movw	r8, r22
     b10:	2a 01       	movw	r4, r20
     b12:	fc 01       	movw	r30, r24
     b14:	17 82       	std	Z+7, r1	; 0x07
     b16:	16 82       	std	Z+6, r1	; 0x06
     b18:	83 81       	ldd	r24, Z+3	; 0x03
     b1a:	81 ff       	sbrs	r24, 1
     b1c:	43 c3       	rjmp	.+1670   	; 0x11a4 <vfprintf+0x6a4>
     b1e:	ae 01       	movw	r20, r28
     b20:	4f 5f       	subi	r20, 0xFF	; 255
     b22:	5f 4f       	sbci	r21, 0xFF	; 255
     b24:	3a 01       	movw	r6, r20
     b26:	f6 01       	movw	r30, r12
     b28:	93 81       	ldd	r25, Z+3	; 0x03
     b2a:	f4 01       	movw	r30, r8
     b2c:	93 fd       	sbrc	r25, 3
     b2e:	85 91       	lpm	r24, Z+
     b30:	93 ff       	sbrs	r25, 3
     b32:	81 91       	ld	r24, Z+
     b34:	4f 01       	movw	r8, r30
     b36:	88 23       	and	r24, r24
     b38:	09 f4       	brne	.+2      	; 0xb3c <vfprintf+0x3c>
     b3a:	30 c3       	rjmp	.+1632   	; 0x119c <vfprintf+0x69c>
     b3c:	85 32       	cpi	r24, 0x25	; 37
     b3e:	39 f4       	brne	.+14     	; 0xb4e <vfprintf+0x4e>
     b40:	93 fd       	sbrc	r25, 3
     b42:	85 91       	lpm	r24, Z+
     b44:	93 ff       	sbrs	r25, 3
     b46:	81 91       	ld	r24, Z+
     b48:	4f 01       	movw	r8, r30
     b4a:	85 32       	cpi	r24, 0x25	; 37
     b4c:	39 f4       	brne	.+14     	; 0xb5c <vfprintf+0x5c>
     b4e:	b6 01       	movw	r22, r12
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	0e 94 49 0a 	call	0x1492	; 0x1492 <fputc>
     b56:	52 01       	movw	r10, r4
     b58:	25 01       	movw	r4, r10
     b5a:	e5 cf       	rjmp	.-54     	; 0xb26 <vfprintf+0x26>
     b5c:	10 e0       	ldi	r17, 0x00	; 0
     b5e:	f1 2c       	mov	r15, r1
     b60:	20 e0       	ldi	r18, 0x00	; 0
     b62:	20 32       	cpi	r18, 0x20	; 32
     b64:	a0 f4       	brcc	.+40     	; 0xb8e <vfprintf+0x8e>
     b66:	8b 32       	cpi	r24, 0x2B	; 43
     b68:	69 f0       	breq	.+26     	; 0xb84 <vfprintf+0x84>
     b6a:	30 f4       	brcc	.+12     	; 0xb78 <vfprintf+0x78>
     b6c:	80 32       	cpi	r24, 0x20	; 32
     b6e:	59 f0       	breq	.+22     	; 0xb86 <vfprintf+0x86>
     b70:	83 32       	cpi	r24, 0x23	; 35
     b72:	69 f4       	brne	.+26     	; 0xb8e <vfprintf+0x8e>
     b74:	20 61       	ori	r18, 0x10	; 16
     b76:	2c c0       	rjmp	.+88     	; 0xbd0 <vfprintf+0xd0>
     b78:	8d 32       	cpi	r24, 0x2D	; 45
     b7a:	39 f0       	breq	.+14     	; 0xb8a <vfprintf+0x8a>
     b7c:	80 33       	cpi	r24, 0x30	; 48
     b7e:	39 f4       	brne	.+14     	; 0xb8e <vfprintf+0x8e>
     b80:	21 60       	ori	r18, 0x01	; 1
     b82:	26 c0       	rjmp	.+76     	; 0xbd0 <vfprintf+0xd0>
     b84:	22 60       	ori	r18, 0x02	; 2
     b86:	24 60       	ori	r18, 0x04	; 4
     b88:	23 c0       	rjmp	.+70     	; 0xbd0 <vfprintf+0xd0>
     b8a:	28 60       	ori	r18, 0x08	; 8
     b8c:	21 c0       	rjmp	.+66     	; 0xbd0 <vfprintf+0xd0>
     b8e:	27 fd       	sbrc	r18, 7
     b90:	27 c0       	rjmp	.+78     	; 0xbe0 <vfprintf+0xe0>
     b92:	30 ed       	ldi	r19, 0xD0	; 208
     b94:	38 0f       	add	r19, r24
     b96:	3a 30       	cpi	r19, 0x0A	; 10
     b98:	78 f4       	brcc	.+30     	; 0xbb8 <vfprintf+0xb8>
     b9a:	26 ff       	sbrs	r18, 6
     b9c:	06 c0       	rjmp	.+12     	; 0xbaa <vfprintf+0xaa>
     b9e:	fa e0       	ldi	r31, 0x0A	; 10
     ba0:	1f 9f       	mul	r17, r31
     ba2:	30 0d       	add	r19, r0
     ba4:	11 24       	eor	r1, r1
     ba6:	13 2f       	mov	r17, r19
     ba8:	13 c0       	rjmp	.+38     	; 0xbd0 <vfprintf+0xd0>
     baa:	4a e0       	ldi	r20, 0x0A	; 10
     bac:	f4 9e       	mul	r15, r20
     bae:	30 0d       	add	r19, r0
     bb0:	11 24       	eor	r1, r1
     bb2:	f3 2e       	mov	r15, r19
     bb4:	20 62       	ori	r18, 0x20	; 32
     bb6:	0c c0       	rjmp	.+24     	; 0xbd0 <vfprintf+0xd0>
     bb8:	8e 32       	cpi	r24, 0x2E	; 46
     bba:	21 f4       	brne	.+8      	; 0xbc4 <vfprintf+0xc4>
     bbc:	26 fd       	sbrc	r18, 6
     bbe:	ee c2       	rjmp	.+1500   	; 0x119c <vfprintf+0x69c>
     bc0:	20 64       	ori	r18, 0x40	; 64
     bc2:	06 c0       	rjmp	.+12     	; 0xbd0 <vfprintf+0xd0>
     bc4:	8c 36       	cpi	r24, 0x6C	; 108
     bc6:	11 f4       	brne	.+4      	; 0xbcc <vfprintf+0xcc>
     bc8:	20 68       	ori	r18, 0x80	; 128
     bca:	02 c0       	rjmp	.+4      	; 0xbd0 <vfprintf+0xd0>
     bcc:	88 36       	cpi	r24, 0x68	; 104
     bce:	41 f4       	brne	.+16     	; 0xbe0 <vfprintf+0xe0>
     bd0:	f4 01       	movw	r30, r8
     bd2:	93 fd       	sbrc	r25, 3
     bd4:	85 91       	lpm	r24, Z+
     bd6:	93 ff       	sbrs	r25, 3
     bd8:	81 91       	ld	r24, Z+
     bda:	4f 01       	movw	r8, r30
     bdc:	81 11       	cpse	r24, r1
     bde:	c1 cf       	rjmp	.-126    	; 0xb62 <vfprintf+0x62>
     be0:	9b eb       	ldi	r25, 0xBB	; 187
     be2:	98 0f       	add	r25, r24
     be4:	93 30       	cpi	r25, 0x03	; 3
     be6:	18 f4       	brcc	.+6      	; 0xbee <vfprintf+0xee>
     be8:	20 61       	ori	r18, 0x10	; 16
     bea:	80 5e       	subi	r24, 0xE0	; 224
     bec:	06 c0       	rjmp	.+12     	; 0xbfa <vfprintf+0xfa>
     bee:	9b e9       	ldi	r25, 0x9B	; 155
     bf0:	98 0f       	add	r25, r24
     bf2:	93 30       	cpi	r25, 0x03	; 3
     bf4:	08 f0       	brcs	.+2      	; 0xbf8 <vfprintf+0xf8>
     bf6:	71 c1       	rjmp	.+738    	; 0xeda <vfprintf+0x3da>
     bf8:	2f 7e       	andi	r18, 0xEF	; 239
     bfa:	26 ff       	sbrs	r18, 6
     bfc:	16 e0       	ldi	r17, 0x06	; 6
     bfe:	2f 73       	andi	r18, 0x3F	; 63
     c00:	32 2e       	mov	r3, r18
     c02:	85 36       	cpi	r24, 0x65	; 101
     c04:	19 f4       	brne	.+6      	; 0xc0c <vfprintf+0x10c>
     c06:	20 64       	ori	r18, 0x40	; 64
     c08:	32 2e       	mov	r3, r18
     c0a:	08 c0       	rjmp	.+16     	; 0xc1c <vfprintf+0x11c>
     c0c:	86 36       	cpi	r24, 0x66	; 102
     c0e:	21 f4       	brne	.+8      	; 0xc18 <vfprintf+0x118>
     c10:	f2 2f       	mov	r31, r18
     c12:	f0 68       	ori	r31, 0x80	; 128
     c14:	3f 2e       	mov	r3, r31
     c16:	02 c0       	rjmp	.+4      	; 0xc1c <vfprintf+0x11c>
     c18:	11 11       	cpse	r17, r1
     c1a:	11 50       	subi	r17, 0x01	; 1
     c1c:	37 fe       	sbrs	r3, 7
     c1e:	07 c0       	rjmp	.+14     	; 0xc2e <vfprintf+0x12e>
     c20:	1c 33       	cpi	r17, 0x3C	; 60
     c22:	50 f4       	brcc	.+20     	; 0xc38 <vfprintf+0x138>
     c24:	ee 24       	eor	r14, r14
     c26:	e3 94       	inc	r14
     c28:	e1 0e       	add	r14, r17
     c2a:	27 e0       	ldi	r18, 0x07	; 7
     c2c:	0b c0       	rjmp	.+22     	; 0xc44 <vfprintf+0x144>
     c2e:	18 30       	cpi	r17, 0x08	; 8
     c30:	38 f0       	brcs	.+14     	; 0xc40 <vfprintf+0x140>
     c32:	27 e0       	ldi	r18, 0x07	; 7
     c34:	17 e0       	ldi	r17, 0x07	; 7
     c36:	05 c0       	rjmp	.+10     	; 0xc42 <vfprintf+0x142>
     c38:	27 e0       	ldi	r18, 0x07	; 7
     c3a:	4c e3       	ldi	r20, 0x3C	; 60
     c3c:	e4 2e       	mov	r14, r20
     c3e:	02 c0       	rjmp	.+4      	; 0xc44 <vfprintf+0x144>
     c40:	21 2f       	mov	r18, r17
     c42:	e1 2c       	mov	r14, r1
     c44:	52 01       	movw	r10, r4
     c46:	44 e0       	ldi	r20, 0x04	; 4
     c48:	a4 0e       	add	r10, r20
     c4a:	b1 1c       	adc	r11, r1
     c4c:	f2 01       	movw	r30, r4
     c4e:	60 81       	ld	r22, Z
     c50:	71 81       	ldd	r23, Z+1	; 0x01
     c52:	82 81       	ldd	r24, Z+2	; 0x02
     c54:	93 81       	ldd	r25, Z+3	; 0x03
     c56:	0e 2d       	mov	r16, r14
     c58:	a3 01       	movw	r20, r6
     c5a:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <__ftoa_engine>
     c5e:	2c 01       	movw	r4, r24
     c60:	09 81       	ldd	r16, Y+1	; 0x01
     c62:	00 ff       	sbrs	r16, 0
     c64:	02 c0       	rjmp	.+4      	; 0xc6a <vfprintf+0x16a>
     c66:	03 ff       	sbrs	r16, 3
     c68:	07 c0       	rjmp	.+14     	; 0xc78 <vfprintf+0x178>
     c6a:	31 fc       	sbrc	r3, 1
     c6c:	08 c0       	rjmp	.+16     	; 0xc7e <vfprintf+0x17e>
     c6e:	32 fe       	sbrs	r3, 2
     c70:	09 c0       	rjmp	.+18     	; 0xc84 <vfprintf+0x184>
     c72:	30 e2       	ldi	r19, 0x20	; 32
     c74:	23 2e       	mov	r2, r19
     c76:	07 c0       	rjmp	.+14     	; 0xc86 <vfprintf+0x186>
     c78:	2d e2       	ldi	r18, 0x2D	; 45
     c7a:	22 2e       	mov	r2, r18
     c7c:	04 c0       	rjmp	.+8      	; 0xc86 <vfprintf+0x186>
     c7e:	9b e2       	ldi	r25, 0x2B	; 43
     c80:	29 2e       	mov	r2, r25
     c82:	01 c0       	rjmp	.+2      	; 0xc86 <vfprintf+0x186>
     c84:	21 2c       	mov	r2, r1
     c86:	80 2f       	mov	r24, r16
     c88:	8c 70       	andi	r24, 0x0C	; 12
     c8a:	19 f0       	breq	.+6      	; 0xc92 <vfprintf+0x192>
     c8c:	21 10       	cpse	r2, r1
     c8e:	68 c2       	rjmp	.+1232   	; 0x1160 <vfprintf+0x660>
     c90:	a8 c2       	rjmp	.+1360   	; 0x11e2 <vfprintf+0x6e2>
     c92:	37 fe       	sbrs	r3, 7
     c94:	0f c0       	rjmp	.+30     	; 0xcb4 <vfprintf+0x1b4>
     c96:	e4 0c       	add	r14, r4
     c98:	04 ff       	sbrs	r16, 4
     c9a:	04 c0       	rjmp	.+8      	; 0xca4 <vfprintf+0x1a4>
     c9c:	8a 81       	ldd	r24, Y+2	; 0x02
     c9e:	81 33       	cpi	r24, 0x31	; 49
     ca0:	09 f4       	brne	.+2      	; 0xca4 <vfprintf+0x1a4>
     ca2:	ea 94       	dec	r14
     ca4:	1e 14       	cp	r1, r14
     ca6:	74 f5       	brge	.+92     	; 0xd04 <vfprintf+0x204>
     ca8:	f8 e0       	ldi	r31, 0x08	; 8
     caa:	fe 15       	cp	r31, r14
     cac:	78 f5       	brcc	.+94     	; 0xd0c <vfprintf+0x20c>
     cae:	88 e0       	ldi	r24, 0x08	; 8
     cb0:	e8 2e       	mov	r14, r24
     cb2:	2c c0       	rjmp	.+88     	; 0xd0c <vfprintf+0x20c>
     cb4:	36 fc       	sbrc	r3, 6
     cb6:	2a c0       	rjmp	.+84     	; 0xd0c <vfprintf+0x20c>
     cb8:	81 2f       	mov	r24, r17
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	84 15       	cp	r24, r4
     cbe:	95 05       	cpc	r25, r5
     cc0:	9c f0       	brlt	.+38     	; 0xce8 <vfprintf+0x1e8>
     cc2:	2c ef       	ldi	r18, 0xFC	; 252
     cc4:	42 16       	cp	r4, r18
     cc6:	2f ef       	ldi	r18, 0xFF	; 255
     cc8:	52 06       	cpc	r5, r18
     cca:	74 f0       	brlt	.+28     	; 0xce8 <vfprintf+0x1e8>
     ccc:	43 2d       	mov	r20, r3
     cce:	40 68       	ori	r20, 0x80	; 128
     cd0:	34 2e       	mov	r3, r20
     cd2:	0a c0       	rjmp	.+20     	; 0xce8 <vfprintf+0x1e8>
     cd4:	e2 e0       	ldi	r30, 0x02	; 2
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	ec 0f       	add	r30, r28
     cda:	fd 1f       	adc	r31, r29
     cdc:	e1 0f       	add	r30, r17
     cde:	f1 1d       	adc	r31, r1
     ce0:	80 81       	ld	r24, Z
     ce2:	80 33       	cpi	r24, 0x30	; 48
     ce4:	19 f4       	brne	.+6      	; 0xcec <vfprintf+0x1ec>
     ce6:	11 50       	subi	r17, 0x01	; 1
     ce8:	11 11       	cpse	r17, r1
     cea:	f4 cf       	rjmp	.-24     	; 0xcd4 <vfprintf+0x1d4>
     cec:	37 fe       	sbrs	r3, 7
     cee:	0e c0       	rjmp	.+28     	; 0xd0c <vfprintf+0x20c>
     cf0:	ee 24       	eor	r14, r14
     cf2:	e3 94       	inc	r14
     cf4:	e1 0e       	add	r14, r17
     cf6:	81 2f       	mov	r24, r17
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	48 16       	cp	r4, r24
     cfc:	59 06       	cpc	r5, r25
     cfe:	2c f4       	brge	.+10     	; 0xd0a <vfprintf+0x20a>
     d00:	14 19       	sub	r17, r4
     d02:	04 c0       	rjmp	.+8      	; 0xd0c <vfprintf+0x20c>
     d04:	ee 24       	eor	r14, r14
     d06:	e3 94       	inc	r14
     d08:	01 c0       	rjmp	.+2      	; 0xd0c <vfprintf+0x20c>
     d0a:	10 e0       	ldi	r17, 0x00	; 0
     d0c:	37 fe       	sbrs	r3, 7
     d0e:	06 c0       	rjmp	.+12     	; 0xd1c <vfprintf+0x21c>
     d10:	14 14       	cp	r1, r4
     d12:	15 04       	cpc	r1, r5
     d14:	34 f4       	brge	.+12     	; 0xd22 <vfprintf+0x222>
     d16:	c2 01       	movw	r24, r4
     d18:	01 96       	adiw	r24, 0x01	; 1
     d1a:	05 c0       	rjmp	.+10     	; 0xd26 <vfprintf+0x226>
     d1c:	85 e0       	ldi	r24, 0x05	; 5
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	02 c0       	rjmp	.+4      	; 0xd26 <vfprintf+0x226>
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	21 10       	cpse	r2, r1
     d28:	01 96       	adiw	r24, 0x01	; 1
     d2a:	11 23       	and	r17, r17
     d2c:	31 f0       	breq	.+12     	; 0xd3a <vfprintf+0x23a>
     d2e:	21 2f       	mov	r18, r17
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	2f 5f       	subi	r18, 0xFF	; 255
     d34:	3f 4f       	sbci	r19, 0xFF	; 255
     d36:	82 0f       	add	r24, r18
     d38:	93 1f       	adc	r25, r19
     d3a:	2f 2d       	mov	r18, r15
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	82 17       	cp	r24, r18
     d40:	93 07       	cpc	r25, r19
     d42:	14 f4       	brge	.+4      	; 0xd48 <vfprintf+0x248>
     d44:	f8 1a       	sub	r15, r24
     d46:	01 c0       	rjmp	.+2      	; 0xd4a <vfprintf+0x24a>
     d48:	f1 2c       	mov	r15, r1
     d4a:	83 2d       	mov	r24, r3
     d4c:	89 70       	andi	r24, 0x09	; 9
     d4e:	49 f4       	brne	.+18     	; 0xd62 <vfprintf+0x262>
     d50:	ff 20       	and	r15, r15
     d52:	39 f0       	breq	.+14     	; 0xd62 <vfprintf+0x262>
     d54:	b6 01       	movw	r22, r12
     d56:	80 e2       	ldi	r24, 0x20	; 32
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	0e 94 49 0a 	call	0x1492	; 0x1492 <fputc>
     d5e:	fa 94       	dec	r15
     d60:	f7 cf       	rjmp	.-18     	; 0xd50 <vfprintf+0x250>
     d62:	22 20       	and	r2, r2
     d64:	29 f0       	breq	.+10     	; 0xd70 <vfprintf+0x270>
     d66:	b6 01       	movw	r22, r12
     d68:	82 2d       	mov	r24, r2
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	0e 94 49 0a 	call	0x1492	; 0x1492 <fputc>
     d70:	33 fc       	sbrc	r3, 3
     d72:	09 c0       	rjmp	.+18     	; 0xd86 <vfprintf+0x286>
     d74:	ff 20       	and	r15, r15
     d76:	39 f0       	breq	.+14     	; 0xd86 <vfprintf+0x286>
     d78:	b6 01       	movw	r22, r12
     d7a:	80 e3       	ldi	r24, 0x30	; 48
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	0e 94 49 0a 	call	0x1492	; 0x1492 <fputc>
     d82:	fa 94       	dec	r15
     d84:	f7 cf       	rjmp	.-18     	; 0xd74 <vfprintf+0x274>
     d86:	37 fe       	sbrs	r3, 7
     d88:	5a c0       	rjmp	.+180    	; 0xe3e <vfprintf+0x33e>
     d8a:	94 2d       	mov	r25, r4
     d8c:	85 2d       	mov	r24, r5
     d8e:	57 fe       	sbrs	r5, 7
     d90:	02 c0       	rjmp	.+4      	; 0xd96 <vfprintf+0x296>
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	29 2e       	mov	r2, r25
     d98:	38 2e       	mov	r3, r24
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	a2 01       	movw	r20, r4
     da0:	4e 19       	sub	r20, r14
     da2:	51 09       	sbc	r21, r1
     da4:	5d 87       	std	Y+13, r21	; 0x0d
     da6:	4c 87       	std	Y+12, r20	; 0x0c
     da8:	a2 01       	movw	r20, r4
     daa:	42 19       	sub	r20, r2
     dac:	53 09       	sbc	r21, r3
     dae:	5f 87       	std	Y+15, r21	; 0x0f
     db0:	4e 87       	std	Y+14, r20	; 0x0e
     db2:	61 2f       	mov	r22, r17
     db4:	70 e0       	ldi	r23, 0x00	; 0
     db6:	44 27       	eor	r20, r20
     db8:	55 27       	eor	r21, r21
     dba:	46 1b       	sub	r20, r22
     dbc:	57 0b       	sbc	r21, r23
     dbe:	59 8b       	std	Y+17, r21	; 0x11
     dc0:	48 8b       	std	Y+16, r20	; 0x10
     dc2:	5f ef       	ldi	r21, 0xFF	; 255
     dc4:	25 16       	cp	r2, r21
     dc6:	35 06       	cpc	r3, r21
     dc8:	49 f4       	brne	.+18     	; 0xddc <vfprintf+0x2dc>
     dca:	b6 01       	movw	r22, r12
     dcc:	8e e2       	ldi	r24, 0x2E	; 46
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	2a 8b       	std	Y+18, r18	; 0x12
     dd2:	3b 8b       	std	Y+19, r19	; 0x13
     dd4:	0e 94 49 0a 	call	0x1492	; 0x1492 <fputc>
     dd8:	3b 89       	ldd	r19, Y+19	; 0x13
     dda:	2a 89       	ldd	r18, Y+18	; 0x12
     ddc:	42 14       	cp	r4, r2
     dde:	53 04       	cpc	r5, r3
     de0:	6c f0       	brlt	.+26     	; 0xdfc <vfprintf+0x2fc>
     de2:	4c 85       	ldd	r20, Y+12	; 0x0c
     de4:	5d 85       	ldd	r21, Y+13	; 0x0d
     de6:	42 15       	cp	r20, r2
     de8:	53 05       	cpc	r21, r3
     dea:	44 f4       	brge	.+16     	; 0xdfc <vfprintf+0x2fc>
     dec:	ee 85       	ldd	r30, Y+14	; 0x0e
     dee:	ff 85       	ldd	r31, Y+15	; 0x0f
     df0:	e2 0f       	add	r30, r18
     df2:	f3 1f       	adc	r31, r19
     df4:	e6 0d       	add	r30, r6
     df6:	f7 1d       	adc	r31, r7
     df8:	81 81       	ldd	r24, Z+1	; 0x01
     dfa:	01 c0       	rjmp	.+2      	; 0xdfe <vfprintf+0x2fe>
     dfc:	80 e3       	ldi	r24, 0x30	; 48
     dfe:	51 e0       	ldi	r21, 0x01	; 1
     e00:	25 1a       	sub	r2, r21
     e02:	31 08       	sbc	r3, r1
     e04:	2f 5f       	subi	r18, 0xFF	; 255
     e06:	3f 4f       	sbci	r19, 0xFF	; 255
     e08:	48 89       	ldd	r20, Y+16	; 0x10
     e0a:	59 89       	ldd	r21, Y+17	; 0x11
     e0c:	24 16       	cp	r2, r20
     e0e:	35 06       	cpc	r3, r21
     e10:	4c f0       	brlt	.+18     	; 0xe24 <vfprintf+0x324>
     e12:	b6 01       	movw	r22, r12
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	2a 8b       	std	Y+18, r18	; 0x12
     e18:	3b 8b       	std	Y+19, r19	; 0x13
     e1a:	0e 94 49 0a 	call	0x1492	; 0x1492 <fputc>
     e1e:	2a 89       	ldd	r18, Y+18	; 0x12
     e20:	3b 89       	ldd	r19, Y+19	; 0x13
     e22:	cf cf       	rjmp	.-98     	; 0xdc2 <vfprintf+0x2c2>
     e24:	24 14       	cp	r2, r4
     e26:	35 04       	cpc	r3, r5
     e28:	39 f4       	brne	.+14     	; 0xe38 <vfprintf+0x338>
     e2a:	9a 81       	ldd	r25, Y+2	; 0x02
     e2c:	96 33       	cpi	r25, 0x36	; 54
     e2e:	18 f4       	brcc	.+6      	; 0xe36 <vfprintf+0x336>
     e30:	95 33       	cpi	r25, 0x35	; 53
     e32:	11 f4       	brne	.+4      	; 0xe38 <vfprintf+0x338>
     e34:	04 ff       	sbrs	r16, 4
     e36:	81 e3       	ldi	r24, 0x31	; 49
     e38:	b6 01       	movw	r22, r12
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	4b c0       	rjmp	.+150    	; 0xed4 <vfprintf+0x3d4>
     e3e:	8a 81       	ldd	r24, Y+2	; 0x02
     e40:	81 33       	cpi	r24, 0x31	; 49
     e42:	09 f0       	breq	.+2      	; 0xe46 <vfprintf+0x346>
     e44:	0f 7e       	andi	r16, 0xEF	; 239
     e46:	b6 01       	movw	r22, r12
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	0e 94 49 0a 	call	0x1492	; 0x1492 <fputc>
     e4e:	11 11       	cpse	r17, r1
     e50:	05 c0       	rjmp	.+10     	; 0xe5c <vfprintf+0x35c>
     e52:	34 fc       	sbrc	r3, 4
     e54:	18 c0       	rjmp	.+48     	; 0xe86 <vfprintf+0x386>
     e56:	85 e6       	ldi	r24, 0x65	; 101
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	17 c0       	rjmp	.+46     	; 0xe8a <vfprintf+0x38a>
     e5c:	b6 01       	movw	r22, r12
     e5e:	8e e2       	ldi	r24, 0x2E	; 46
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	0e 94 49 0a 	call	0x1492	; 0x1492 <fputc>
     e66:	82 e0       	ldi	r24, 0x02	; 2
     e68:	ee 24       	eor	r14, r14
     e6a:	e3 94       	inc	r14
     e6c:	e8 0e       	add	r14, r24
     e6e:	f3 01       	movw	r30, r6
     e70:	e8 0f       	add	r30, r24
     e72:	f1 1d       	adc	r31, r1
     e74:	80 81       	ld	r24, Z
     e76:	b6 01       	movw	r22, r12
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	0e 94 49 0a 	call	0x1492	; 0x1492 <fputc>
     e7e:	11 50       	subi	r17, 0x01	; 1
     e80:	8e 2d       	mov	r24, r14
     e82:	91 f7       	brne	.-28     	; 0xe68 <vfprintf+0x368>
     e84:	e6 cf       	rjmp	.-52     	; 0xe52 <vfprintf+0x352>
     e86:	85 e4       	ldi	r24, 0x45	; 69
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	b6 01       	movw	r22, r12
     e8c:	0e 94 49 0a 	call	0x1492	; 0x1492 <fputc>
     e90:	57 fc       	sbrc	r5, 7
     e92:	05 c0       	rjmp	.+10     	; 0xe9e <vfprintf+0x39e>
     e94:	41 14       	cp	r4, r1
     e96:	51 04       	cpc	r5, r1
     e98:	39 f4       	brne	.+14     	; 0xea8 <vfprintf+0x3a8>
     e9a:	04 ff       	sbrs	r16, 4
     e9c:	05 c0       	rjmp	.+10     	; 0xea8 <vfprintf+0x3a8>
     e9e:	51 94       	neg	r5
     ea0:	41 94       	neg	r4
     ea2:	51 08       	sbc	r5, r1
     ea4:	8d e2       	ldi	r24, 0x2D	; 45
     ea6:	01 c0       	rjmp	.+2      	; 0xeaa <vfprintf+0x3aa>
     ea8:	8b e2       	ldi	r24, 0x2B	; 43
     eaa:	b6 01       	movw	r22, r12
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	0e 94 49 0a 	call	0x1492	; 0x1492 <fputc>
     eb2:	80 e3       	ldi	r24, 0x30	; 48
     eb4:	9a e0       	ldi	r25, 0x0A	; 10
     eb6:	49 16       	cp	r4, r25
     eb8:	51 04       	cpc	r5, r1
     eba:	2c f0       	brlt	.+10     	; 0xec6 <vfprintf+0x3c6>
     ebc:	8f 5f       	subi	r24, 0xFF	; 255
     ebe:	5a e0       	ldi	r21, 0x0A	; 10
     ec0:	45 1a       	sub	r4, r21
     ec2:	51 08       	sbc	r5, r1
     ec4:	f7 cf       	rjmp	.-18     	; 0xeb4 <vfprintf+0x3b4>
     ec6:	b6 01       	movw	r22, r12
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	0e 94 49 0a 	call	0x1492	; 0x1492 <fputc>
     ece:	b6 01       	movw	r22, r12
     ed0:	c2 01       	movw	r24, r4
     ed2:	c0 96       	adiw	r24, 0x30	; 48
     ed4:	0e 94 49 0a 	call	0x1492	; 0x1492 <fputc>
     ed8:	57 c1       	rjmp	.+686    	; 0x1188 <vfprintf+0x688>
     eda:	83 36       	cpi	r24, 0x63	; 99
     edc:	31 f0       	breq	.+12     	; 0xeea <vfprintf+0x3ea>
     ede:	83 37       	cpi	r24, 0x73	; 115
     ee0:	79 f0       	breq	.+30     	; 0xf00 <vfprintf+0x400>
     ee2:	83 35       	cpi	r24, 0x53	; 83
     ee4:	09 f0       	breq	.+2      	; 0xee8 <vfprintf+0x3e8>
     ee6:	58 c0       	rjmp	.+176    	; 0xf98 <vfprintf+0x498>
     ee8:	21 c0       	rjmp	.+66     	; 0xf2c <vfprintf+0x42c>
     eea:	52 01       	movw	r10, r4
     eec:	e2 e0       	ldi	r30, 0x02	; 2
     eee:	ae 0e       	add	r10, r30
     ef0:	b1 1c       	adc	r11, r1
     ef2:	f2 01       	movw	r30, r4
     ef4:	80 81       	ld	r24, Z
     ef6:	89 83       	std	Y+1, r24	; 0x01
     ef8:	01 e0       	ldi	r16, 0x01	; 1
     efa:	10 e0       	ldi	r17, 0x00	; 0
     efc:	23 01       	movw	r4, r6
     efe:	14 c0       	rjmp	.+40     	; 0xf28 <vfprintf+0x428>
     f00:	52 01       	movw	r10, r4
     f02:	f2 e0       	ldi	r31, 0x02	; 2
     f04:	af 0e       	add	r10, r31
     f06:	b1 1c       	adc	r11, r1
     f08:	f2 01       	movw	r30, r4
     f0a:	40 80       	ld	r4, Z
     f0c:	51 80       	ldd	r5, Z+1	; 0x01
     f0e:	26 ff       	sbrs	r18, 6
     f10:	03 c0       	rjmp	.+6      	; 0xf18 <vfprintf+0x418>
     f12:	61 2f       	mov	r22, r17
     f14:	70 e0       	ldi	r23, 0x00	; 0
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <vfprintf+0x41c>
     f18:	6f ef       	ldi	r22, 0xFF	; 255
     f1a:	7f ef       	ldi	r23, 0xFF	; 255
     f1c:	c2 01       	movw	r24, r4
     f1e:	2a 8b       	std	Y+18, r18	; 0x12
     f20:	0e 94 3e 0a 	call	0x147c	; 0x147c <strnlen>
     f24:	8c 01       	movw	r16, r24
     f26:	2a 89       	ldd	r18, Y+18	; 0x12
     f28:	2f 77       	andi	r18, 0x7F	; 127
     f2a:	15 c0       	rjmp	.+42     	; 0xf56 <vfprintf+0x456>
     f2c:	52 01       	movw	r10, r4
     f2e:	f2 e0       	ldi	r31, 0x02	; 2
     f30:	af 0e       	add	r10, r31
     f32:	b1 1c       	adc	r11, r1
     f34:	f2 01       	movw	r30, r4
     f36:	40 80       	ld	r4, Z
     f38:	51 80       	ldd	r5, Z+1	; 0x01
     f3a:	26 ff       	sbrs	r18, 6
     f3c:	03 c0       	rjmp	.+6      	; 0xf44 <vfprintf+0x444>
     f3e:	61 2f       	mov	r22, r17
     f40:	70 e0       	ldi	r23, 0x00	; 0
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <vfprintf+0x448>
     f44:	6f ef       	ldi	r22, 0xFF	; 255
     f46:	7f ef       	ldi	r23, 0xFF	; 255
     f48:	c2 01       	movw	r24, r4
     f4a:	2a 8b       	std	Y+18, r18	; 0x12
     f4c:	0e 94 33 0a 	call	0x1466	; 0x1466 <strnlen_P>
     f50:	8c 01       	movw	r16, r24
     f52:	2a 89       	ldd	r18, Y+18	; 0x12
     f54:	20 68       	ori	r18, 0x80	; 128
     f56:	32 2e       	mov	r3, r18
     f58:	23 fd       	sbrc	r18, 3
     f5a:	1a c0       	rjmp	.+52     	; 0xf90 <vfprintf+0x490>
     f5c:	8f 2d       	mov	r24, r15
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	08 17       	cp	r16, r24
     f62:	19 07       	cpc	r17, r25
     f64:	a8 f4       	brcc	.+42     	; 0xf90 <vfprintf+0x490>
     f66:	b6 01       	movw	r22, r12
     f68:	80 e2       	ldi	r24, 0x20	; 32
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	0e 94 49 0a 	call	0x1492	; 0x1492 <fputc>
     f70:	fa 94       	dec	r15
     f72:	f4 cf       	rjmp	.-24     	; 0xf5c <vfprintf+0x45c>
     f74:	f2 01       	movw	r30, r4
     f76:	37 fc       	sbrc	r3, 7
     f78:	85 91       	lpm	r24, Z+
     f7a:	37 fe       	sbrs	r3, 7
     f7c:	81 91       	ld	r24, Z+
     f7e:	2f 01       	movw	r4, r30
     f80:	b6 01       	movw	r22, r12
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	0e 94 49 0a 	call	0x1492	; 0x1492 <fputc>
     f88:	f1 10       	cpse	r15, r1
     f8a:	fa 94       	dec	r15
     f8c:	01 50       	subi	r16, 0x01	; 1
     f8e:	11 09       	sbc	r17, r1
     f90:	01 15       	cp	r16, r1
     f92:	11 05       	cpc	r17, r1
     f94:	79 f7       	brne	.-34     	; 0xf74 <vfprintf+0x474>
     f96:	f8 c0       	rjmp	.+496    	; 0x1188 <vfprintf+0x688>
     f98:	84 36       	cpi	r24, 0x64	; 100
     f9a:	11 f0       	breq	.+4      	; 0xfa0 <vfprintf+0x4a0>
     f9c:	89 36       	cpi	r24, 0x69	; 105
     f9e:	59 f5       	brne	.+86     	; 0xff6 <vfprintf+0x4f6>
     fa0:	52 01       	movw	r10, r4
     fa2:	27 ff       	sbrs	r18, 7
     fa4:	09 c0       	rjmp	.+18     	; 0xfb8 <vfprintf+0x4b8>
     fa6:	f4 e0       	ldi	r31, 0x04	; 4
     fa8:	af 0e       	add	r10, r31
     faa:	b1 1c       	adc	r11, r1
     fac:	f2 01       	movw	r30, r4
     fae:	60 81       	ld	r22, Z
     fb0:	71 81       	ldd	r23, Z+1	; 0x01
     fb2:	82 81       	ldd	r24, Z+2	; 0x02
     fb4:	93 81       	ldd	r25, Z+3	; 0x03
     fb6:	0a c0       	rjmp	.+20     	; 0xfcc <vfprintf+0x4cc>
     fb8:	f2 e0       	ldi	r31, 0x02	; 2
     fba:	af 0e       	add	r10, r31
     fbc:	b1 1c       	adc	r11, r1
     fbe:	f2 01       	movw	r30, r4
     fc0:	60 81       	ld	r22, Z
     fc2:	71 81       	ldd	r23, Z+1	; 0x01
     fc4:	07 2e       	mov	r0, r23
     fc6:	00 0c       	add	r0, r0
     fc8:	88 0b       	sbc	r24, r24
     fca:	99 0b       	sbc	r25, r25
     fcc:	2f 76       	andi	r18, 0x6F	; 111
     fce:	32 2e       	mov	r3, r18
     fd0:	97 ff       	sbrs	r25, 7
     fd2:	09 c0       	rjmp	.+18     	; 0xfe6 <vfprintf+0x4e6>
     fd4:	90 95       	com	r25
     fd6:	80 95       	com	r24
     fd8:	70 95       	com	r23
     fda:	61 95       	neg	r22
     fdc:	7f 4f       	sbci	r23, 0xFF	; 255
     fde:	8f 4f       	sbci	r24, 0xFF	; 255
     fe0:	9f 4f       	sbci	r25, 0xFF	; 255
     fe2:	20 68       	ori	r18, 0x80	; 128
     fe4:	32 2e       	mov	r3, r18
     fe6:	2a e0       	ldi	r18, 0x0A	; 10
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	a3 01       	movw	r20, r6
     fec:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__ultoa_invert>
     ff0:	e8 2e       	mov	r14, r24
     ff2:	e6 18       	sub	r14, r6
     ff4:	3f c0       	rjmp	.+126    	; 0x1074 <vfprintf+0x574>
     ff6:	02 2f       	mov	r16, r18
     ff8:	85 37       	cpi	r24, 0x75	; 117
     ffa:	21 f4       	brne	.+8      	; 0x1004 <vfprintf+0x504>
     ffc:	0f 7e       	andi	r16, 0xEF	; 239
     ffe:	2a e0       	ldi	r18, 0x0A	; 10
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	1d c0       	rjmp	.+58     	; 0x103e <vfprintf+0x53e>
    1004:	09 7f       	andi	r16, 0xF9	; 249
    1006:	8f 36       	cpi	r24, 0x6F	; 111
    1008:	91 f0       	breq	.+36     	; 0x102e <vfprintf+0x52e>
    100a:	18 f4       	brcc	.+6      	; 0x1012 <vfprintf+0x512>
    100c:	88 35       	cpi	r24, 0x58	; 88
    100e:	59 f0       	breq	.+22     	; 0x1026 <vfprintf+0x526>
    1010:	c5 c0       	rjmp	.+394    	; 0x119c <vfprintf+0x69c>
    1012:	80 37       	cpi	r24, 0x70	; 112
    1014:	19 f0       	breq	.+6      	; 0x101c <vfprintf+0x51c>
    1016:	88 37       	cpi	r24, 0x78	; 120
    1018:	11 f0       	breq	.+4      	; 0x101e <vfprintf+0x51e>
    101a:	c0 c0       	rjmp	.+384    	; 0x119c <vfprintf+0x69c>
    101c:	00 61       	ori	r16, 0x10	; 16
    101e:	04 ff       	sbrs	r16, 4
    1020:	09 c0       	rjmp	.+18     	; 0x1034 <vfprintf+0x534>
    1022:	04 60       	ori	r16, 0x04	; 4
    1024:	07 c0       	rjmp	.+14     	; 0x1034 <vfprintf+0x534>
    1026:	24 ff       	sbrs	r18, 4
    1028:	08 c0       	rjmp	.+16     	; 0x103a <vfprintf+0x53a>
    102a:	06 60       	ori	r16, 0x06	; 6
    102c:	06 c0       	rjmp	.+12     	; 0x103a <vfprintf+0x53a>
    102e:	28 e0       	ldi	r18, 0x08	; 8
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	05 c0       	rjmp	.+10     	; 0x103e <vfprintf+0x53e>
    1034:	20 e1       	ldi	r18, 0x10	; 16
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	02 c0       	rjmp	.+4      	; 0x103e <vfprintf+0x53e>
    103a:	20 e1       	ldi	r18, 0x10	; 16
    103c:	32 e0       	ldi	r19, 0x02	; 2
    103e:	52 01       	movw	r10, r4
    1040:	07 ff       	sbrs	r16, 7
    1042:	09 c0       	rjmp	.+18     	; 0x1056 <vfprintf+0x556>
    1044:	f4 e0       	ldi	r31, 0x04	; 4
    1046:	af 0e       	add	r10, r31
    1048:	b1 1c       	adc	r11, r1
    104a:	f2 01       	movw	r30, r4
    104c:	60 81       	ld	r22, Z
    104e:	71 81       	ldd	r23, Z+1	; 0x01
    1050:	82 81       	ldd	r24, Z+2	; 0x02
    1052:	93 81       	ldd	r25, Z+3	; 0x03
    1054:	08 c0       	rjmp	.+16     	; 0x1066 <vfprintf+0x566>
    1056:	f2 e0       	ldi	r31, 0x02	; 2
    1058:	af 0e       	add	r10, r31
    105a:	b1 1c       	adc	r11, r1
    105c:	f2 01       	movw	r30, r4
    105e:	60 81       	ld	r22, Z
    1060:	71 81       	ldd	r23, Z+1	; 0x01
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	a3 01       	movw	r20, r6
    1068:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__ultoa_invert>
    106c:	e8 2e       	mov	r14, r24
    106e:	e6 18       	sub	r14, r6
    1070:	0f 77       	andi	r16, 0x7F	; 127
    1072:	30 2e       	mov	r3, r16
    1074:	36 fe       	sbrs	r3, 6
    1076:	0b c0       	rjmp	.+22     	; 0x108e <vfprintf+0x58e>
    1078:	33 2d       	mov	r19, r3
    107a:	3e 7f       	andi	r19, 0xFE	; 254
    107c:	e1 16       	cp	r14, r17
    107e:	50 f4       	brcc	.+20     	; 0x1094 <vfprintf+0x594>
    1080:	34 fe       	sbrs	r3, 4
    1082:	0a c0       	rjmp	.+20     	; 0x1098 <vfprintf+0x598>
    1084:	32 fc       	sbrc	r3, 2
    1086:	08 c0       	rjmp	.+16     	; 0x1098 <vfprintf+0x598>
    1088:	33 2d       	mov	r19, r3
    108a:	3e 7e       	andi	r19, 0xEE	; 238
    108c:	05 c0       	rjmp	.+10     	; 0x1098 <vfprintf+0x598>
    108e:	0e 2d       	mov	r16, r14
    1090:	33 2d       	mov	r19, r3
    1092:	03 c0       	rjmp	.+6      	; 0x109a <vfprintf+0x59a>
    1094:	0e 2d       	mov	r16, r14
    1096:	01 c0       	rjmp	.+2      	; 0x109a <vfprintf+0x59a>
    1098:	01 2f       	mov	r16, r17
    109a:	34 ff       	sbrs	r19, 4
    109c:	0c c0       	rjmp	.+24     	; 0x10b6 <vfprintf+0x5b6>
    109e:	fe 01       	movw	r30, r28
    10a0:	ee 0d       	add	r30, r14
    10a2:	f1 1d       	adc	r31, r1
    10a4:	80 81       	ld	r24, Z
    10a6:	80 33       	cpi	r24, 0x30	; 48
    10a8:	11 f4       	brne	.+4      	; 0x10ae <vfprintf+0x5ae>
    10aa:	39 7e       	andi	r19, 0xE9	; 233
    10ac:	08 c0       	rjmp	.+16     	; 0x10be <vfprintf+0x5be>
    10ae:	32 ff       	sbrs	r19, 2
    10b0:	05 c0       	rjmp	.+10     	; 0x10bc <vfprintf+0x5bc>
    10b2:	0e 5f       	subi	r16, 0xFE	; 254
    10b4:	04 c0       	rjmp	.+8      	; 0x10be <vfprintf+0x5be>
    10b6:	83 2f       	mov	r24, r19
    10b8:	86 78       	andi	r24, 0x86	; 134
    10ba:	09 f0       	breq	.+2      	; 0x10be <vfprintf+0x5be>
    10bc:	0f 5f       	subi	r16, 0xFF	; 255
    10be:	33 fd       	sbrc	r19, 3
    10c0:	13 c0       	rjmp	.+38     	; 0x10e8 <vfprintf+0x5e8>
    10c2:	30 ff       	sbrs	r19, 0
    10c4:	06 c0       	rjmp	.+12     	; 0x10d2 <vfprintf+0x5d2>
    10c6:	1e 2d       	mov	r17, r14
    10c8:	0f 15       	cp	r16, r15
    10ca:	18 f4       	brcc	.+6      	; 0x10d2 <vfprintf+0x5d2>
    10cc:	1f 0d       	add	r17, r15
    10ce:	10 1b       	sub	r17, r16
    10d0:	0f 2d       	mov	r16, r15
    10d2:	0f 15       	cp	r16, r15
    10d4:	68 f4       	brcc	.+26     	; 0x10f0 <vfprintf+0x5f0>
    10d6:	b6 01       	movw	r22, r12
    10d8:	80 e2       	ldi	r24, 0x20	; 32
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	3b 8b       	std	Y+19, r19	; 0x13
    10de:	0e 94 49 0a 	call	0x1492	; 0x1492 <fputc>
    10e2:	0f 5f       	subi	r16, 0xFF	; 255
    10e4:	3b 89       	ldd	r19, Y+19	; 0x13
    10e6:	f5 cf       	rjmp	.-22     	; 0x10d2 <vfprintf+0x5d2>
    10e8:	0f 15       	cp	r16, r15
    10ea:	10 f4       	brcc	.+4      	; 0x10f0 <vfprintf+0x5f0>
    10ec:	f0 1a       	sub	r15, r16
    10ee:	01 c0       	rjmp	.+2      	; 0x10f2 <vfprintf+0x5f2>
    10f0:	f1 2c       	mov	r15, r1
    10f2:	34 ff       	sbrs	r19, 4
    10f4:	12 c0       	rjmp	.+36     	; 0x111a <vfprintf+0x61a>
    10f6:	b6 01       	movw	r22, r12
    10f8:	80 e3       	ldi	r24, 0x30	; 48
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	3b 8b       	std	Y+19, r19	; 0x13
    10fe:	0e 94 49 0a 	call	0x1492	; 0x1492 <fputc>
    1102:	3b 89       	ldd	r19, Y+19	; 0x13
    1104:	32 ff       	sbrs	r19, 2
    1106:	17 c0       	rjmp	.+46     	; 0x1136 <vfprintf+0x636>
    1108:	31 fd       	sbrc	r19, 1
    110a:	03 c0       	rjmp	.+6      	; 0x1112 <vfprintf+0x612>
    110c:	88 e7       	ldi	r24, 0x78	; 120
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	02 c0       	rjmp	.+4      	; 0x1116 <vfprintf+0x616>
    1112:	88 e5       	ldi	r24, 0x58	; 88
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	b6 01       	movw	r22, r12
    1118:	0c c0       	rjmp	.+24     	; 0x1132 <vfprintf+0x632>
    111a:	83 2f       	mov	r24, r19
    111c:	86 78       	andi	r24, 0x86	; 134
    111e:	59 f0       	breq	.+22     	; 0x1136 <vfprintf+0x636>
    1120:	31 ff       	sbrs	r19, 1
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <vfprintf+0x628>
    1124:	8b e2       	ldi	r24, 0x2B	; 43
    1126:	01 c0       	rjmp	.+2      	; 0x112a <vfprintf+0x62a>
    1128:	80 e2       	ldi	r24, 0x20	; 32
    112a:	37 fd       	sbrc	r19, 7
    112c:	8d e2       	ldi	r24, 0x2D	; 45
    112e:	b6 01       	movw	r22, r12
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	0e 94 49 0a 	call	0x1492	; 0x1492 <fputc>
    1136:	e1 16       	cp	r14, r17
    1138:	38 f4       	brcc	.+14     	; 0x1148 <vfprintf+0x648>
    113a:	b6 01       	movw	r22, r12
    113c:	80 e3       	ldi	r24, 0x30	; 48
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	0e 94 49 0a 	call	0x1492	; 0x1492 <fputc>
    1144:	11 50       	subi	r17, 0x01	; 1
    1146:	f7 cf       	rjmp	.-18     	; 0x1136 <vfprintf+0x636>
    1148:	ea 94       	dec	r14
    114a:	f3 01       	movw	r30, r6
    114c:	ee 0d       	add	r30, r14
    114e:	f1 1d       	adc	r31, r1
    1150:	80 81       	ld	r24, Z
    1152:	b6 01       	movw	r22, r12
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	0e 94 49 0a 	call	0x1492	; 0x1492 <fputc>
    115a:	e1 10       	cpse	r14, r1
    115c:	f5 cf       	rjmp	.-22     	; 0x1148 <vfprintf+0x648>
    115e:	14 c0       	rjmp	.+40     	; 0x1188 <vfprintf+0x688>
    1160:	f4 e0       	ldi	r31, 0x04	; 4
    1162:	ff 15       	cp	r31, r15
    1164:	58 f5       	brcc	.+86     	; 0x11bc <vfprintf+0x6bc>
    1166:	84 e0       	ldi	r24, 0x04	; 4
    1168:	f8 1a       	sub	r15, r24
    116a:	33 fe       	sbrs	r3, 3
    116c:	1e c0       	rjmp	.+60     	; 0x11aa <vfprintf+0x6aa>
    116e:	21 10       	cpse	r2, r1
    1170:	26 c0       	rjmp	.+76     	; 0x11be <vfprintf+0x6be>
    1172:	03 ff       	sbrs	r16, 3
    1174:	2a c0       	rjmp	.+84     	; 0x11ca <vfprintf+0x6ca>
    1176:	08 e6       	ldi	r16, 0x68	; 104
    1178:	10 e0       	ldi	r17, 0x00	; 0
    117a:	f3 2d       	mov	r31, r3
    117c:	f0 71       	andi	r31, 0x10	; 16
    117e:	3f 2e       	mov	r3, r31
    1180:	f8 01       	movw	r30, r16
    1182:	84 91       	lpm	r24, Z
    1184:	81 11       	cpse	r24, r1
    1186:	24 c0       	rjmp	.+72     	; 0x11d0 <vfprintf+0x6d0>
    1188:	ff 20       	and	r15, r15
    118a:	09 f4       	brne	.+2      	; 0x118e <vfprintf+0x68e>
    118c:	e5 cc       	rjmp	.-1590   	; 0xb58 <vfprintf+0x58>
    118e:	b6 01       	movw	r22, r12
    1190:	80 e2       	ldi	r24, 0x20	; 32
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	0e 94 49 0a 	call	0x1492	; 0x1492 <fputc>
    1198:	fa 94       	dec	r15
    119a:	f6 cf       	rjmp	.-20     	; 0x1188 <vfprintf+0x688>
    119c:	f6 01       	movw	r30, r12
    119e:	86 81       	ldd	r24, Z+6	; 0x06
    11a0:	97 81       	ldd	r25, Z+7	; 0x07
    11a2:	26 c0       	rjmp	.+76     	; 0x11f0 <vfprintf+0x6f0>
    11a4:	8f ef       	ldi	r24, 0xFF	; 255
    11a6:	9f ef       	ldi	r25, 0xFF	; 255
    11a8:	23 c0       	rjmp	.+70     	; 0x11f0 <vfprintf+0x6f0>
    11aa:	b6 01       	movw	r22, r12
    11ac:	80 e2       	ldi	r24, 0x20	; 32
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	0e 94 49 0a 	call	0x1492	; 0x1492 <fputc>
    11b4:	fa 94       	dec	r15
    11b6:	f1 10       	cpse	r15, r1
    11b8:	f8 cf       	rjmp	.-16     	; 0x11aa <vfprintf+0x6aa>
    11ba:	d9 cf       	rjmp	.-78     	; 0x116e <vfprintf+0x66e>
    11bc:	f1 2c       	mov	r15, r1
    11be:	b6 01       	movw	r22, r12
    11c0:	82 2d       	mov	r24, r2
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	0e 94 49 0a 	call	0x1492	; 0x1492 <fputc>
    11c8:	d4 cf       	rjmp	.-88     	; 0x1172 <vfprintf+0x672>
    11ca:	0c e6       	ldi	r16, 0x6C	; 108
    11cc:	10 e0       	ldi	r17, 0x00	; 0
    11ce:	d5 cf       	rjmp	.-86     	; 0x117a <vfprintf+0x67a>
    11d0:	31 10       	cpse	r3, r1
    11d2:	80 52       	subi	r24, 0x20	; 32
    11d4:	b6 01       	movw	r22, r12
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	0e 94 49 0a 	call	0x1492	; 0x1492 <fputc>
    11dc:	0f 5f       	subi	r16, 0xFF	; 255
    11de:	1f 4f       	sbci	r17, 0xFF	; 255
    11e0:	cf cf       	rjmp	.-98     	; 0x1180 <vfprintf+0x680>
    11e2:	23 e0       	ldi	r18, 0x03	; 3
    11e4:	2f 15       	cp	r18, r15
    11e6:	10 f4       	brcc	.+4      	; 0x11ec <vfprintf+0x6ec>
    11e8:	83 e0       	ldi	r24, 0x03	; 3
    11ea:	be cf       	rjmp	.-132    	; 0x1168 <vfprintf+0x668>
    11ec:	f1 2c       	mov	r15, r1
    11ee:	c1 cf       	rjmp	.-126    	; 0x1172 <vfprintf+0x672>
    11f0:	63 96       	adiw	r28, 0x13	; 19
    11f2:	e2 e1       	ldi	r30, 0x12	; 18
    11f4:	0c 94 3a 09 	jmp	0x1274	; 0x1274 <__epilogue_restores__>

000011f8 <__udivmodsi4>:
    11f8:	a1 e2       	ldi	r26, 0x21	; 33
    11fa:	1a 2e       	mov	r1, r26
    11fc:	aa 1b       	sub	r26, r26
    11fe:	bb 1b       	sub	r27, r27
    1200:	fd 01       	movw	r30, r26
    1202:	0d c0       	rjmp	.+26     	; 0x121e <__udivmodsi4_ep>

00001204 <__udivmodsi4_loop>:
    1204:	aa 1f       	adc	r26, r26
    1206:	bb 1f       	adc	r27, r27
    1208:	ee 1f       	adc	r30, r30
    120a:	ff 1f       	adc	r31, r31
    120c:	a2 17       	cp	r26, r18
    120e:	b3 07       	cpc	r27, r19
    1210:	e4 07       	cpc	r30, r20
    1212:	f5 07       	cpc	r31, r21
    1214:	20 f0       	brcs	.+8      	; 0x121e <__udivmodsi4_ep>
    1216:	a2 1b       	sub	r26, r18
    1218:	b3 0b       	sbc	r27, r19
    121a:	e4 0b       	sbc	r30, r20
    121c:	f5 0b       	sbc	r31, r21

0000121e <__udivmodsi4_ep>:
    121e:	66 1f       	adc	r22, r22
    1220:	77 1f       	adc	r23, r23
    1222:	88 1f       	adc	r24, r24
    1224:	99 1f       	adc	r25, r25
    1226:	1a 94       	dec	r1
    1228:	69 f7       	brne	.-38     	; 0x1204 <__udivmodsi4_loop>
    122a:	60 95       	com	r22
    122c:	70 95       	com	r23
    122e:	80 95       	com	r24
    1230:	90 95       	com	r25
    1232:	9b 01       	movw	r18, r22
    1234:	ac 01       	movw	r20, r24
    1236:	bd 01       	movw	r22, r26
    1238:	cf 01       	movw	r24, r30
    123a:	08 95       	ret

0000123c <__prologue_saves__>:
    123c:	2f 92       	push	r2
    123e:	3f 92       	push	r3
    1240:	4f 92       	push	r4
    1242:	5f 92       	push	r5
    1244:	6f 92       	push	r6
    1246:	7f 92       	push	r7
    1248:	8f 92       	push	r8
    124a:	9f 92       	push	r9
    124c:	af 92       	push	r10
    124e:	bf 92       	push	r11
    1250:	cf 92       	push	r12
    1252:	df 92       	push	r13
    1254:	ef 92       	push	r14
    1256:	ff 92       	push	r15
    1258:	0f 93       	push	r16
    125a:	1f 93       	push	r17
    125c:	cf 93       	push	r28
    125e:	df 93       	push	r29
    1260:	cd b7       	in	r28, 0x3d	; 61
    1262:	de b7       	in	r29, 0x3e	; 62
    1264:	ca 1b       	sub	r28, r26
    1266:	db 0b       	sbc	r29, r27
    1268:	0f b6       	in	r0, 0x3f	; 63
    126a:	f8 94       	cli
    126c:	de bf       	out	0x3e, r29	; 62
    126e:	0f be       	out	0x3f, r0	; 63
    1270:	cd bf       	out	0x3d, r28	; 61
    1272:	09 94       	ijmp

00001274 <__epilogue_restores__>:
    1274:	2a 88       	ldd	r2, Y+18	; 0x12
    1276:	39 88       	ldd	r3, Y+17	; 0x11
    1278:	48 88       	ldd	r4, Y+16	; 0x10
    127a:	5f 84       	ldd	r5, Y+15	; 0x0f
    127c:	6e 84       	ldd	r6, Y+14	; 0x0e
    127e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1280:	8c 84       	ldd	r8, Y+12	; 0x0c
    1282:	9b 84       	ldd	r9, Y+11	; 0x0b
    1284:	aa 84       	ldd	r10, Y+10	; 0x0a
    1286:	b9 84       	ldd	r11, Y+9	; 0x09
    1288:	c8 84       	ldd	r12, Y+8	; 0x08
    128a:	df 80       	ldd	r13, Y+7	; 0x07
    128c:	ee 80       	ldd	r14, Y+6	; 0x06
    128e:	fd 80       	ldd	r15, Y+5	; 0x05
    1290:	0c 81       	ldd	r16, Y+4	; 0x04
    1292:	1b 81       	ldd	r17, Y+3	; 0x03
    1294:	aa 81       	ldd	r26, Y+2	; 0x02
    1296:	b9 81       	ldd	r27, Y+1	; 0x01
    1298:	ce 0f       	add	r28, r30
    129a:	d1 1d       	adc	r29, r1
    129c:	0f b6       	in	r0, 0x3f	; 63
    129e:	f8 94       	cli
    12a0:	de bf       	out	0x3e, r29	; 62
    12a2:	0f be       	out	0x3f, r0	; 63
    12a4:	cd bf       	out	0x3d, r28	; 61
    12a6:	ed 01       	movw	r28, r26
    12a8:	08 95       	ret

000012aa <__tablejump2__>:
    12aa:	ee 0f       	add	r30, r30
    12ac:	ff 1f       	adc	r31, r31
    12ae:	05 90       	lpm	r0, Z+
    12b0:	f4 91       	lpm	r31, Z
    12b2:	e0 2d       	mov	r30, r0
    12b4:	09 94       	ijmp

000012b6 <__ftoa_engine>:
    12b6:	28 30       	cpi	r18, 0x08	; 8
    12b8:	08 f0       	brcs	.+2      	; 0x12bc <__ftoa_engine+0x6>
    12ba:	27 e0       	ldi	r18, 0x07	; 7
    12bc:	33 27       	eor	r19, r19
    12be:	da 01       	movw	r26, r20
    12c0:	99 0f       	add	r25, r25
    12c2:	31 1d       	adc	r19, r1
    12c4:	87 fd       	sbrc	r24, 7
    12c6:	91 60       	ori	r25, 0x01	; 1
    12c8:	00 96       	adiw	r24, 0x00	; 0
    12ca:	61 05       	cpc	r22, r1
    12cc:	71 05       	cpc	r23, r1
    12ce:	39 f4       	brne	.+14     	; 0x12de <__ftoa_engine+0x28>
    12d0:	32 60       	ori	r19, 0x02	; 2
    12d2:	2e 5f       	subi	r18, 0xFE	; 254
    12d4:	3d 93       	st	X+, r19
    12d6:	30 e3       	ldi	r19, 0x30	; 48
    12d8:	2a 95       	dec	r18
    12da:	e1 f7       	brne	.-8      	; 0x12d4 <__ftoa_engine+0x1e>
    12dc:	08 95       	ret
    12de:	9f 3f       	cpi	r25, 0xFF	; 255
    12e0:	30 f0       	brcs	.+12     	; 0x12ee <__ftoa_engine+0x38>
    12e2:	80 38       	cpi	r24, 0x80	; 128
    12e4:	71 05       	cpc	r23, r1
    12e6:	61 05       	cpc	r22, r1
    12e8:	09 f0       	breq	.+2      	; 0x12ec <__ftoa_engine+0x36>
    12ea:	3c 5f       	subi	r19, 0xFC	; 252
    12ec:	3c 5f       	subi	r19, 0xFC	; 252
    12ee:	3d 93       	st	X+, r19
    12f0:	91 30       	cpi	r25, 0x01	; 1
    12f2:	08 f0       	brcs	.+2      	; 0x12f6 <__ftoa_engine+0x40>
    12f4:	80 68       	ori	r24, 0x80	; 128
    12f6:	91 1d       	adc	r25, r1
    12f8:	df 93       	push	r29
    12fa:	cf 93       	push	r28
    12fc:	1f 93       	push	r17
    12fe:	0f 93       	push	r16
    1300:	ff 92       	push	r15
    1302:	ef 92       	push	r14
    1304:	19 2f       	mov	r17, r25
    1306:	98 7f       	andi	r25, 0xF8	; 248
    1308:	96 95       	lsr	r25
    130a:	e9 2f       	mov	r30, r25
    130c:	96 95       	lsr	r25
    130e:	96 95       	lsr	r25
    1310:	e9 0f       	add	r30, r25
    1312:	ff 27       	eor	r31, r31
    1314:	e6 53       	subi	r30, 0x36	; 54
    1316:	ff 4f       	sbci	r31, 0xFF	; 255
    1318:	99 27       	eor	r25, r25
    131a:	33 27       	eor	r19, r19
    131c:	ee 24       	eor	r14, r14
    131e:	ff 24       	eor	r15, r15
    1320:	a7 01       	movw	r20, r14
    1322:	e7 01       	movw	r28, r14
    1324:	05 90       	lpm	r0, Z+
    1326:	08 94       	sec
    1328:	07 94       	ror	r0
    132a:	28 f4       	brcc	.+10     	; 0x1336 <__ftoa_engine+0x80>
    132c:	36 0f       	add	r19, r22
    132e:	e7 1e       	adc	r14, r23
    1330:	f8 1e       	adc	r15, r24
    1332:	49 1f       	adc	r20, r25
    1334:	51 1d       	adc	r21, r1
    1336:	66 0f       	add	r22, r22
    1338:	77 1f       	adc	r23, r23
    133a:	88 1f       	adc	r24, r24
    133c:	99 1f       	adc	r25, r25
    133e:	06 94       	lsr	r0
    1340:	a1 f7       	brne	.-24     	; 0x132a <__ftoa_engine+0x74>
    1342:	05 90       	lpm	r0, Z+
    1344:	07 94       	ror	r0
    1346:	28 f4       	brcc	.+10     	; 0x1352 <__ftoa_engine+0x9c>
    1348:	e7 0e       	add	r14, r23
    134a:	f8 1e       	adc	r15, r24
    134c:	49 1f       	adc	r20, r25
    134e:	56 1f       	adc	r21, r22
    1350:	c1 1d       	adc	r28, r1
    1352:	77 0f       	add	r23, r23
    1354:	88 1f       	adc	r24, r24
    1356:	99 1f       	adc	r25, r25
    1358:	66 1f       	adc	r22, r22
    135a:	06 94       	lsr	r0
    135c:	a1 f7       	brne	.-24     	; 0x1346 <__ftoa_engine+0x90>
    135e:	05 90       	lpm	r0, Z+
    1360:	07 94       	ror	r0
    1362:	28 f4       	brcc	.+10     	; 0x136e <__ftoa_engine+0xb8>
    1364:	f8 0e       	add	r15, r24
    1366:	49 1f       	adc	r20, r25
    1368:	56 1f       	adc	r21, r22
    136a:	c7 1f       	adc	r28, r23
    136c:	d1 1d       	adc	r29, r1
    136e:	88 0f       	add	r24, r24
    1370:	99 1f       	adc	r25, r25
    1372:	66 1f       	adc	r22, r22
    1374:	77 1f       	adc	r23, r23
    1376:	06 94       	lsr	r0
    1378:	a1 f7       	brne	.-24     	; 0x1362 <__ftoa_engine+0xac>
    137a:	05 90       	lpm	r0, Z+
    137c:	07 94       	ror	r0
    137e:	20 f4       	brcc	.+8      	; 0x1388 <__ftoa_engine+0xd2>
    1380:	49 0f       	add	r20, r25
    1382:	56 1f       	adc	r21, r22
    1384:	c7 1f       	adc	r28, r23
    1386:	d8 1f       	adc	r29, r24
    1388:	99 0f       	add	r25, r25
    138a:	66 1f       	adc	r22, r22
    138c:	77 1f       	adc	r23, r23
    138e:	88 1f       	adc	r24, r24
    1390:	06 94       	lsr	r0
    1392:	a9 f7       	brne	.-22     	; 0x137e <__ftoa_engine+0xc8>
    1394:	84 91       	lpm	r24, Z
    1396:	10 95       	com	r17
    1398:	17 70       	andi	r17, 0x07	; 7
    139a:	41 f0       	breq	.+16     	; 0x13ac <__ftoa_engine+0xf6>
    139c:	d6 95       	lsr	r29
    139e:	c7 95       	ror	r28
    13a0:	57 95       	ror	r21
    13a2:	47 95       	ror	r20
    13a4:	f7 94       	ror	r15
    13a6:	e7 94       	ror	r14
    13a8:	1a 95       	dec	r17
    13aa:	c1 f7       	brne	.-16     	; 0x139c <__ftoa_engine+0xe6>
    13ac:	e0 e7       	ldi	r30, 0x70	; 112
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	68 94       	set
    13b2:	15 90       	lpm	r1, Z+
    13b4:	15 91       	lpm	r17, Z+
    13b6:	35 91       	lpm	r19, Z+
    13b8:	65 91       	lpm	r22, Z+
    13ba:	95 91       	lpm	r25, Z+
    13bc:	05 90       	lpm	r0, Z+
    13be:	7f e2       	ldi	r23, 0x2F	; 47
    13c0:	73 95       	inc	r23
    13c2:	e1 18       	sub	r14, r1
    13c4:	f1 0a       	sbc	r15, r17
    13c6:	43 0b       	sbc	r20, r19
    13c8:	56 0b       	sbc	r21, r22
    13ca:	c9 0b       	sbc	r28, r25
    13cc:	d0 09       	sbc	r29, r0
    13ce:	c0 f7       	brcc	.-16     	; 0x13c0 <__ftoa_engine+0x10a>
    13d0:	e1 0c       	add	r14, r1
    13d2:	f1 1e       	adc	r15, r17
    13d4:	43 1f       	adc	r20, r19
    13d6:	56 1f       	adc	r21, r22
    13d8:	c9 1f       	adc	r28, r25
    13da:	d0 1d       	adc	r29, r0
    13dc:	7e f4       	brtc	.+30     	; 0x13fc <__ftoa_engine+0x146>
    13de:	70 33       	cpi	r23, 0x30	; 48
    13e0:	11 f4       	brne	.+4      	; 0x13e6 <__ftoa_engine+0x130>
    13e2:	8a 95       	dec	r24
    13e4:	e6 cf       	rjmp	.-52     	; 0x13b2 <__ftoa_engine+0xfc>
    13e6:	e8 94       	clt
    13e8:	01 50       	subi	r16, 0x01	; 1
    13ea:	30 f0       	brcs	.+12     	; 0x13f8 <__ftoa_engine+0x142>
    13ec:	08 0f       	add	r16, r24
    13ee:	0a f4       	brpl	.+2      	; 0x13f2 <__ftoa_engine+0x13c>
    13f0:	00 27       	eor	r16, r16
    13f2:	02 17       	cp	r16, r18
    13f4:	08 f4       	brcc	.+2      	; 0x13f8 <__ftoa_engine+0x142>
    13f6:	20 2f       	mov	r18, r16
    13f8:	23 95       	inc	r18
    13fa:	02 2f       	mov	r16, r18
    13fc:	7a 33       	cpi	r23, 0x3A	; 58
    13fe:	28 f0       	brcs	.+10     	; 0x140a <__ftoa_engine+0x154>
    1400:	79 e3       	ldi	r23, 0x39	; 57
    1402:	7d 93       	st	X+, r23
    1404:	2a 95       	dec	r18
    1406:	e9 f7       	brne	.-6      	; 0x1402 <__ftoa_engine+0x14c>
    1408:	10 c0       	rjmp	.+32     	; 0x142a <__ftoa_engine+0x174>
    140a:	7d 93       	st	X+, r23
    140c:	2a 95       	dec	r18
    140e:	89 f6       	brne	.-94     	; 0x13b2 <__ftoa_engine+0xfc>
    1410:	06 94       	lsr	r0
    1412:	97 95       	ror	r25
    1414:	67 95       	ror	r22
    1416:	37 95       	ror	r19
    1418:	17 95       	ror	r17
    141a:	17 94       	ror	r1
    141c:	e1 18       	sub	r14, r1
    141e:	f1 0a       	sbc	r15, r17
    1420:	43 0b       	sbc	r20, r19
    1422:	56 0b       	sbc	r21, r22
    1424:	c9 0b       	sbc	r28, r25
    1426:	d0 09       	sbc	r29, r0
    1428:	98 f0       	brcs	.+38     	; 0x1450 <__ftoa_engine+0x19a>
    142a:	23 95       	inc	r18
    142c:	7e 91       	ld	r23, -X
    142e:	73 95       	inc	r23
    1430:	7a 33       	cpi	r23, 0x3A	; 58
    1432:	08 f0       	brcs	.+2      	; 0x1436 <__ftoa_engine+0x180>
    1434:	70 e3       	ldi	r23, 0x30	; 48
    1436:	7c 93       	st	X, r23
    1438:	20 13       	cpse	r18, r16
    143a:	b8 f7       	brcc	.-18     	; 0x142a <__ftoa_engine+0x174>
    143c:	7e 91       	ld	r23, -X
    143e:	70 61       	ori	r23, 0x10	; 16
    1440:	7d 93       	st	X+, r23
    1442:	30 f0       	brcs	.+12     	; 0x1450 <__ftoa_engine+0x19a>
    1444:	83 95       	inc	r24
    1446:	71 e3       	ldi	r23, 0x31	; 49
    1448:	7d 93       	st	X+, r23
    144a:	70 e3       	ldi	r23, 0x30	; 48
    144c:	2a 95       	dec	r18
    144e:	e1 f7       	brne	.-8      	; 0x1448 <__ftoa_engine+0x192>
    1450:	11 24       	eor	r1, r1
    1452:	ef 90       	pop	r14
    1454:	ff 90       	pop	r15
    1456:	0f 91       	pop	r16
    1458:	1f 91       	pop	r17
    145a:	cf 91       	pop	r28
    145c:	df 91       	pop	r29
    145e:	99 27       	eor	r25, r25
    1460:	87 fd       	sbrc	r24, 7
    1462:	90 95       	com	r25
    1464:	08 95       	ret

00001466 <strnlen_P>:
    1466:	fc 01       	movw	r30, r24
    1468:	05 90       	lpm	r0, Z+
    146a:	61 50       	subi	r22, 0x01	; 1
    146c:	70 40       	sbci	r23, 0x00	; 0
    146e:	01 10       	cpse	r0, r1
    1470:	d8 f7       	brcc	.-10     	; 0x1468 <strnlen_P+0x2>
    1472:	80 95       	com	r24
    1474:	90 95       	com	r25
    1476:	8e 0f       	add	r24, r30
    1478:	9f 1f       	adc	r25, r31
    147a:	08 95       	ret

0000147c <strnlen>:
    147c:	fc 01       	movw	r30, r24
    147e:	61 50       	subi	r22, 0x01	; 1
    1480:	70 40       	sbci	r23, 0x00	; 0
    1482:	01 90       	ld	r0, Z+
    1484:	01 10       	cpse	r0, r1
    1486:	d8 f7       	brcc	.-10     	; 0x147e <strnlen+0x2>
    1488:	80 95       	com	r24
    148a:	90 95       	com	r25
    148c:	8e 0f       	add	r24, r30
    148e:	9f 1f       	adc	r25, r31
    1490:	08 95       	ret

00001492 <fputc>:
    1492:	0f 93       	push	r16
    1494:	1f 93       	push	r17
    1496:	cf 93       	push	r28
    1498:	df 93       	push	r29
    149a:	fb 01       	movw	r30, r22
    149c:	23 81       	ldd	r18, Z+3	; 0x03
    149e:	21 fd       	sbrc	r18, 1
    14a0:	03 c0       	rjmp	.+6      	; 0x14a8 <fputc+0x16>
    14a2:	8f ef       	ldi	r24, 0xFF	; 255
    14a4:	9f ef       	ldi	r25, 0xFF	; 255
    14a6:	28 c0       	rjmp	.+80     	; 0x14f8 <fputc+0x66>
    14a8:	22 ff       	sbrs	r18, 2
    14aa:	16 c0       	rjmp	.+44     	; 0x14d8 <fputc+0x46>
    14ac:	46 81       	ldd	r20, Z+6	; 0x06
    14ae:	57 81       	ldd	r21, Z+7	; 0x07
    14b0:	24 81       	ldd	r18, Z+4	; 0x04
    14b2:	35 81       	ldd	r19, Z+5	; 0x05
    14b4:	42 17       	cp	r20, r18
    14b6:	53 07       	cpc	r21, r19
    14b8:	44 f4       	brge	.+16     	; 0x14ca <fputc+0x38>
    14ba:	a0 81       	ld	r26, Z
    14bc:	b1 81       	ldd	r27, Z+1	; 0x01
    14be:	9d 01       	movw	r18, r26
    14c0:	2f 5f       	subi	r18, 0xFF	; 255
    14c2:	3f 4f       	sbci	r19, 0xFF	; 255
    14c4:	31 83       	std	Z+1, r19	; 0x01
    14c6:	20 83       	st	Z, r18
    14c8:	8c 93       	st	X, r24
    14ca:	26 81       	ldd	r18, Z+6	; 0x06
    14cc:	37 81       	ldd	r19, Z+7	; 0x07
    14ce:	2f 5f       	subi	r18, 0xFF	; 255
    14d0:	3f 4f       	sbci	r19, 0xFF	; 255
    14d2:	37 83       	std	Z+7, r19	; 0x07
    14d4:	26 83       	std	Z+6, r18	; 0x06
    14d6:	10 c0       	rjmp	.+32     	; 0x14f8 <fputc+0x66>
    14d8:	eb 01       	movw	r28, r22
    14da:	09 2f       	mov	r16, r25
    14dc:	18 2f       	mov	r17, r24
    14de:	00 84       	ldd	r0, Z+8	; 0x08
    14e0:	f1 85       	ldd	r31, Z+9	; 0x09
    14e2:	e0 2d       	mov	r30, r0
    14e4:	09 95       	icall
    14e6:	89 2b       	or	r24, r25
    14e8:	e1 f6       	brne	.-72     	; 0x14a2 <fputc+0x10>
    14ea:	8e 81       	ldd	r24, Y+6	; 0x06
    14ec:	9f 81       	ldd	r25, Y+7	; 0x07
    14ee:	01 96       	adiw	r24, 0x01	; 1
    14f0:	9f 83       	std	Y+7, r25	; 0x07
    14f2:	8e 83       	std	Y+6, r24	; 0x06
    14f4:	81 2f       	mov	r24, r17
    14f6:	90 2f       	mov	r25, r16
    14f8:	df 91       	pop	r29
    14fa:	cf 91       	pop	r28
    14fc:	1f 91       	pop	r17
    14fe:	0f 91       	pop	r16
    1500:	08 95       	ret

00001502 <sprintf>:
    1502:	ae e0       	ldi	r26, 0x0E	; 14
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	e7 e8       	ldi	r30, 0x87	; 135
    1508:	fa e0       	ldi	r31, 0x0A	; 10
    150a:	0c 94 2c 09 	jmp	0x1258	; 0x1258 <__prologue_saves__+0x1c>
    150e:	0d 89       	ldd	r16, Y+21	; 0x15
    1510:	1e 89       	ldd	r17, Y+22	; 0x16
    1512:	86 e0       	ldi	r24, 0x06	; 6
    1514:	8c 83       	std	Y+4, r24	; 0x04
    1516:	1a 83       	std	Y+2, r17	; 0x02
    1518:	09 83       	std	Y+1, r16	; 0x01
    151a:	8f ef       	ldi	r24, 0xFF	; 255
    151c:	9f e7       	ldi	r25, 0x7F	; 127
    151e:	9e 83       	std	Y+6, r25	; 0x06
    1520:	8d 83       	std	Y+5, r24	; 0x05
    1522:	ae 01       	movw	r20, r28
    1524:	47 5e       	subi	r20, 0xE7	; 231
    1526:	5f 4f       	sbci	r21, 0xFF	; 255
    1528:	6f 89       	ldd	r22, Y+23	; 0x17
    152a:	78 8d       	ldd	r23, Y+24	; 0x18
    152c:	ce 01       	movw	r24, r28
    152e:	01 96       	adiw	r24, 0x01	; 1
    1530:	0e 94 80 05 	call	0xb00	; 0xb00 <vfprintf>
    1534:	2f 81       	ldd	r18, Y+7	; 0x07
    1536:	38 85       	ldd	r19, Y+8	; 0x08
    1538:	f8 01       	movw	r30, r16
    153a:	e2 0f       	add	r30, r18
    153c:	f3 1f       	adc	r31, r19
    153e:	10 82       	st	Z, r1
    1540:	2e 96       	adiw	r28, 0x0e	; 14
    1542:	e4 e0       	ldi	r30, 0x04	; 4
    1544:	0c 94 48 09 	jmp	0x1290	; 0x1290 <__epilogue_restores__+0x1c>

00001548 <__ultoa_invert>:
    1548:	fa 01       	movw	r30, r20
    154a:	aa 27       	eor	r26, r26
    154c:	28 30       	cpi	r18, 0x08	; 8
    154e:	51 f1       	breq	.+84     	; 0x15a4 <__ultoa_invert+0x5c>
    1550:	20 31       	cpi	r18, 0x10	; 16
    1552:	81 f1       	breq	.+96     	; 0x15b4 <__ultoa_invert+0x6c>
    1554:	e8 94       	clt
    1556:	6f 93       	push	r22
    1558:	6e 7f       	andi	r22, 0xFE	; 254
    155a:	6e 5f       	subi	r22, 0xFE	; 254
    155c:	7f 4f       	sbci	r23, 0xFF	; 255
    155e:	8f 4f       	sbci	r24, 0xFF	; 255
    1560:	9f 4f       	sbci	r25, 0xFF	; 255
    1562:	af 4f       	sbci	r26, 0xFF	; 255
    1564:	b1 e0       	ldi	r27, 0x01	; 1
    1566:	3e d0       	rcall	.+124    	; 0x15e4 <__ultoa_invert+0x9c>
    1568:	b4 e0       	ldi	r27, 0x04	; 4
    156a:	3c d0       	rcall	.+120    	; 0x15e4 <__ultoa_invert+0x9c>
    156c:	67 0f       	add	r22, r23
    156e:	78 1f       	adc	r23, r24
    1570:	89 1f       	adc	r24, r25
    1572:	9a 1f       	adc	r25, r26
    1574:	a1 1d       	adc	r26, r1
    1576:	68 0f       	add	r22, r24
    1578:	79 1f       	adc	r23, r25
    157a:	8a 1f       	adc	r24, r26
    157c:	91 1d       	adc	r25, r1
    157e:	a1 1d       	adc	r26, r1
    1580:	6a 0f       	add	r22, r26
    1582:	71 1d       	adc	r23, r1
    1584:	81 1d       	adc	r24, r1
    1586:	91 1d       	adc	r25, r1
    1588:	a1 1d       	adc	r26, r1
    158a:	20 d0       	rcall	.+64     	; 0x15cc <__ultoa_invert+0x84>
    158c:	09 f4       	brne	.+2      	; 0x1590 <__ultoa_invert+0x48>
    158e:	68 94       	set
    1590:	3f 91       	pop	r19
    1592:	2a e0       	ldi	r18, 0x0A	; 10
    1594:	26 9f       	mul	r18, r22
    1596:	11 24       	eor	r1, r1
    1598:	30 19       	sub	r19, r0
    159a:	30 5d       	subi	r19, 0xD0	; 208
    159c:	31 93       	st	Z+, r19
    159e:	de f6       	brtc	.-74     	; 0x1556 <__ultoa_invert+0xe>
    15a0:	cf 01       	movw	r24, r30
    15a2:	08 95       	ret
    15a4:	46 2f       	mov	r20, r22
    15a6:	47 70       	andi	r20, 0x07	; 7
    15a8:	40 5d       	subi	r20, 0xD0	; 208
    15aa:	41 93       	st	Z+, r20
    15ac:	b3 e0       	ldi	r27, 0x03	; 3
    15ae:	0f d0       	rcall	.+30     	; 0x15ce <__ultoa_invert+0x86>
    15b0:	c9 f7       	brne	.-14     	; 0x15a4 <__ultoa_invert+0x5c>
    15b2:	f6 cf       	rjmp	.-20     	; 0x15a0 <__ultoa_invert+0x58>
    15b4:	46 2f       	mov	r20, r22
    15b6:	4f 70       	andi	r20, 0x0F	; 15
    15b8:	40 5d       	subi	r20, 0xD0	; 208
    15ba:	4a 33       	cpi	r20, 0x3A	; 58
    15bc:	18 f0       	brcs	.+6      	; 0x15c4 <__ultoa_invert+0x7c>
    15be:	49 5d       	subi	r20, 0xD9	; 217
    15c0:	31 fd       	sbrc	r19, 1
    15c2:	40 52       	subi	r20, 0x20	; 32
    15c4:	41 93       	st	Z+, r20
    15c6:	02 d0       	rcall	.+4      	; 0x15cc <__ultoa_invert+0x84>
    15c8:	a9 f7       	brne	.-22     	; 0x15b4 <__ultoa_invert+0x6c>
    15ca:	ea cf       	rjmp	.-44     	; 0x15a0 <__ultoa_invert+0x58>
    15cc:	b4 e0       	ldi	r27, 0x04	; 4
    15ce:	a6 95       	lsr	r26
    15d0:	97 95       	ror	r25
    15d2:	87 95       	ror	r24
    15d4:	77 95       	ror	r23
    15d6:	67 95       	ror	r22
    15d8:	ba 95       	dec	r27
    15da:	c9 f7       	brne	.-14     	; 0x15ce <__ultoa_invert+0x86>
    15dc:	00 97       	sbiw	r24, 0x00	; 0
    15de:	61 05       	cpc	r22, r1
    15e0:	71 05       	cpc	r23, r1
    15e2:	08 95       	ret
    15e4:	9b 01       	movw	r18, r22
    15e6:	ac 01       	movw	r20, r24
    15e8:	0a 2e       	mov	r0, r26
    15ea:	06 94       	lsr	r0
    15ec:	57 95       	ror	r21
    15ee:	47 95       	ror	r20
    15f0:	37 95       	ror	r19
    15f2:	27 95       	ror	r18
    15f4:	ba 95       	dec	r27
    15f6:	c9 f7       	brne	.-14     	; 0x15ea <__ultoa_invert+0xa2>
    15f8:	62 0f       	add	r22, r18
    15fa:	73 1f       	adc	r23, r19
    15fc:	84 1f       	adc	r24, r20
    15fe:	95 1f       	adc	r25, r21
    1600:	a0 1d       	adc	r26, r0
    1602:	08 95       	ret

00001604 <_exit>:
    1604:	f8 94       	cli

00001606 <__stop_program>:
    1606:	ff cf       	rjmp	.-2      	; 0x1606 <__stop_program>
