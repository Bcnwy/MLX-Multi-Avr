
MLX Multi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00800100  00001798  0000182c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001798  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000040  0080014c  0080014c  00001878  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001878  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000018d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c0  00000000  00000000  00001914  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000068d9  00000000  00000000  00001bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001189  00000000  00000000  000084ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f84  00000000  00000000  00009636  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a34  00000000  00000000  0000a5bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001a64  00000000  00000000  0000aff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003427  00000000  00000000  0000ca54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000588  00000000  00000000  0000fe7b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__ctors_end>
       4:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
       8:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
       c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      10:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      14:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      18:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      1c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      20:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      24:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      28:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      2c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      30:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      34:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__vector_13>
      38:	0c 94 f8 01 	jmp	0x3f0	; 0x3f0 <__vector_14>
      3c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      40:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      44:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      48:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      4c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      50:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      54:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      58:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      5c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      60:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      64:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	6e 61       	ori	r22, 0x1E	; 30
      6a:	6e 00       	.word	0x006e	; ????

0000006c <__c.2177>:
      6c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      7c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      8c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      9c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      ac:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      bc:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      cc:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      dc:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      ec:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      fc:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     10c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     11c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     12c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     13c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     14c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     15c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000016a <__ctors_start>:
     16a:	1c 03       	fmul	r17, r20
     16c:	fd 03       	fmulsu	r23, r21

0000016e <__ctors_end>:
     16e:	11 24       	eor	r1, r1
     170:	1f be       	out	0x3f, r1	; 63
     172:	cf ef       	ldi	r28, 0xFF	; 255
     174:	d8 e0       	ldi	r29, 0x08	; 8
     176:	de bf       	out	0x3e, r29	; 62
     178:	cd bf       	out	0x3d, r28	; 61

0000017a <__do_copy_data>:
     17a:	11 e0       	ldi	r17, 0x01	; 1
     17c:	a0 e0       	ldi	r26, 0x00	; 0
     17e:	b1 e0       	ldi	r27, 0x01	; 1
     180:	e8 e9       	ldi	r30, 0x98	; 152
     182:	f7 e1       	ldi	r31, 0x17	; 23
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x10>
     186:	05 90       	lpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	ac 34       	cpi	r26, 0x4C	; 76
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0xc>

00000190 <__do_clear_bss>:
     190:	21 e0       	ldi	r18, 0x01	; 1
     192:	ac e4       	ldi	r26, 0x4C	; 76
     194:	b1 e0       	ldi	r27, 0x01	; 1
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	ac 38       	cpi	r26, 0x8C	; 140
     19c:	b2 07       	cpc	r27, r18
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>

000001a0 <__do_global_ctors>:
     1a0:	10 e0       	ldi	r17, 0x00	; 0
     1a2:	c7 eb       	ldi	r28, 0xB7	; 183
     1a4:	d0 e0       	ldi	r29, 0x00	; 0
     1a6:	04 c0       	rjmp	.+8      	; 0x1b0 <__do_global_ctors+0x10>
     1a8:	21 97       	sbiw	r28, 0x01	; 1
     1aa:	fe 01       	movw	r30, r28
     1ac:	0e 94 12 0a 	call	0x1424	; 0x1424 <__tablejump2__>
     1b0:	c5 3b       	cpi	r28, 0xB5	; 181
     1b2:	d1 07       	cpc	r29, r17
     1b4:	c9 f7       	brne	.-14     	; 0x1a8 <__do_global_ctors+0x8>
     1b6:	0e 94 fe 02 	call	0x5fc	; 0x5fc <main>
     1ba:	0c 94 ca 0b 	jmp	0x1794	; 0x1794 <_exit>

000001be <__bad_interrupt>:
     1be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001c2 <_ZN17Adafruit_MLX90614C1Eh>:
template<typename V>
inline V constrain(V x, V a, V b) {
	return((x < a)?a:(b<x)?b:x);
}
/*********************************************************************/
Adafruit_MLX90614::Adafruit_MLX90614(uint8_t i2caddr) {
     1c2:	1f 93       	push	r17
     1c4:	cf 93       	push	r28
     1c6:	df 93       	push	r29
     1c8:	ec 01       	movw	r28, r24
     1ca:	16 2f       	mov	r17, r22
	  }
 class I2c
 {
 public:
    I2c()
    {
     1cc:	18 86       	std	Y+8, r1	; 0x08
     1ce:	19 86       	std	Y+9, r1	; 0x09
	    i2c_init();
     1d0:	0e 94 2b 03 	call	0x656	; 0x656 <i2c_init>
  _addr = i2caddr;
     1d4:	1a 87       	std	Y+10, r17	; 0x0a
}
     1d6:	df 91       	pop	r29
     1d8:	cf 91       	pop	r28
     1da:	1f 91       	pop	r17
     1dc:	08 95       	ret

000001de <_ZN17Adafruit_MLX906146read16EhPj>:
	// calculate the emissivity between 0.1 and 1.0:
	return (((float)ke) / 65535.0);
}

/*********************************************************************/
uint8_t Adafruit_MLX90614::read16(uint8_t a , uint16_t * d) {
     1de:	ef 92       	push	r14
     1e0:	ff 92       	push	r15
     1e2:	0f 93       	push	r16
     1e4:	1f 93       	push	r17
     1e6:	cf 93       	push	r28
     1e8:	8c 01       	movw	r16, r24
     1ea:	c6 2f       	mov	r28, r22
     1ec:	7a 01       	movw	r14, r20
	uint16_t ret;
	Wire.beginTransmission(_addr); // start transmission to device
     1ee:	fc 01       	movw	r30, r24
     1f0:	82 85       	ldd	r24, Z+10	; 0x0a
    }
     void beginTransmission(uint8_t address)
     {
         m_bufferIndex = 0;
     1f2:	10 86       	std	Z+8, r1	; 0x08

         i2c_start((address << 1) | I2C_WRITE);
     1f4:	88 0f       	add	r24, r24
     1f6:	0e 94 34 03 	call	0x668	; 0x668 <i2c_start>
     }

     void write(uint8_t byte)
     {
         if (m_bufferIndex == c_bufferSize)
     1fa:	f8 01       	movw	r30, r16
     1fc:	80 85       	ldd	r24, Z+8	; 0x08
     1fe:	88 30       	cpi	r24, 0x08	; 8
     200:	59 f0       	breq	.+22     	; 0x218 <_ZN17Adafruit_MLX906146read16EhPj+0x3a>
             return;

         m_buffer[m_bufferIndex++] = byte;
     202:	91 e0       	ldi	r25, 0x01	; 1
     204:	98 0f       	add	r25, r24
     206:	90 87       	std	Z+8, r25	; 0x08
     208:	e8 0f       	add	r30, r24
     20a:	f1 1d       	adc	r31, r1
     20c:	c0 83       	st	Z, r28
    }

    uint8_t endTransmission(bool stop = true)
    {
         for (uint8_t index = 0; index < m_bufferIndex; ++index) {
     20e:	f8 01       	movw	r30, r16
     210:	80 85       	ldd	r24, Z+8	; 0x08
     212:	88 23       	and	r24, r24
     214:	09 f4       	brne	.+2      	; 0x218 <_ZN17Adafruit_MLX906146read16EhPj+0x3a>
     216:	4e c0       	rjmp	.+156    	; 0x2b4 <_ZN17Adafruit_MLX906146read16EhPj+0xd6>
	// calculate the emissivity between 0.1 and 1.0:
	return (((float)ke) / 65535.0);
}

/*********************************************************************/
uint8_t Adafruit_MLX90614::read16(uint8_t a , uint16_t * d) {
     218:	c0 e0       	ldi	r28, 0x00	; 0
             if (i2c_write(m_buffer[index]) != 0)
     21a:	f8 01       	movw	r30, r16
     21c:	ec 0f       	add	r30, r28
     21e:	f1 1d       	adc	r31, r1
     220:	80 81       	ld	r24, Z
     222:	0e 94 5f 03 	call	0x6be	; 0x6be <i2c_write>
     226:	81 11       	cpse	r24, r1
     228:	45 c0       	rjmp	.+138    	; 0x2b4 <_ZN17Adafruit_MLX906146read16EhPj+0xd6>
         m_buffer[m_bufferIndex++] = byte;
    }

    uint8_t endTransmission(bool stop = true)
    {
         for (uint8_t index = 0; index < m_bufferIndex; ++index) {
     22a:	cf 5f       	subi	r28, 0xFF	; 255
     22c:	f8 01       	movw	r30, r16
     22e:	80 85       	ldd	r24, Z+8	; 0x08
     230:	c8 17       	cp	r28, r24
     232:	98 f3       	brcs	.-26     	; 0x21a <_ZN17Adafruit_MLX906146read16EhPj+0x3c>
     234:	3f c0       	rjmp	.+126    	; 0x2b4 <_ZN17Adafruit_MLX906146read16EhPj+0xd6>
         return m_bufferIndex;
     }

     uint8_t read()
     {
         if (m_bufferReadIndex == m_bufferIndex)
     236:	f8 01       	movw	r30, r16
     238:	81 85       	ldd	r24, Z+9	; 0x09
     23a:	90 85       	ldd	r25, Z+8	; 0x08
     23c:	89 17       	cp	r24, r25
     23e:	b1 f0       	breq	.+44     	; 0x26c <_ZN17Adafruit_MLX906146read16EhPj+0x8e>
             return 0;
        return m_buffer[m_bufferReadIndex++];
     240:	41 e0       	ldi	r20, 0x01	; 1
     242:	48 0f       	add	r20, r24
     244:	41 87       	std	Z+9, r20	; 0x09
     246:	e8 0f       	add	r30, r24
     248:	f1 1d       	adc	r31, r1
	Wire.beginTransmission(_addr); // start transmission to device
	Wire.write(a); // sends register address to read from
	Wire.endTransmission(false); // end transmission
	
	Wire.requestFrom(_addr, (uint8_t)3);// send data n-bytes read
	ret = Wire.read(); // receive DATA
     24a:	20 81       	ld	r18, Z
     24c:	30 e0       	ldi	r19, 0x00	; 0
         return m_bufferIndex;
     }

     uint8_t read()
     {
         if (m_bufferReadIndex == m_bufferIndex)
     24e:	94 17       	cp	r25, r20
     250:	d1 f1       	breq	.+116    	; 0x2c6 <_ZN17Adafruit_MLX906146read16EhPj+0xe8>
             return 0;
        return m_buffer[m_bufferReadIndex++];
     252:	8e 5f       	subi	r24, 0xFE	; 254
     254:	f8 01       	movw	r30, r16
     256:	81 87       	std	Z+9, r24	; 0x09
     258:	e4 0f       	add	r30, r20
     25a:	f1 1d       	adc	r31, r1
	ret |= Wire.read() << 8; // receive DATA
     25c:	40 81       	ld	r20, Z
     25e:	34 2b       	or	r19, r20
         return m_bufferIndex;
     }

     uint8_t read()
     {
         if (m_bufferReadIndex == m_bufferIndex)
     260:	89 17       	cp	r24, r25
     262:	89 f1       	breq	.+98     	; 0x2c6 <_ZN17Adafruit_MLX906146read16EhPj+0xe8>
             return 0;
        return m_buffer[m_bufferReadIndex++];
     264:	8f 5f       	subi	r24, 0xFF	; 255
     266:	f8 01       	movw	r30, r16
     268:	81 87       	std	Z+9, r24	; 0x09
     26a:	2d c0       	rjmp	.+90     	; 0x2c6 <_ZN17Adafruit_MLX906146read16EhPj+0xe8>
     26c:	20 e0       	ldi	r18, 0x00	; 0
     26e:	30 e0       	ldi	r19, 0x00	; 0
     270:	2a c0       	rjmp	.+84     	; 0x2c6 <_ZN17Adafruit_MLX906146read16EhPj+0xe8>
         if (i2c_start((address << 1) | I2C_READ) != 0)
             return 0;

        m_bufferIndex = 0;
         while (--quantity > 0) {
             m_buffer[m_bufferIndex++] = i2c_readAck();
     272:	81 e0       	ldi	r24, 0x01	; 1
     274:	f8 01       	movw	r30, r16
     276:	80 87       	std	Z+8, r24	; 0x08
     278:	0e 94 71 03 	call	0x6e2	; 0x6e2 <i2c_readAck>
     27c:	f8 01       	movw	r30, r16
     27e:	80 83       	st	Z, r24
     280:	c0 85       	ldd	r28, Z+8	; 0x08
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	8c 0f       	add	r24, r28
     286:	80 87       	std	Z+8, r24	; 0x08
     288:	0e 94 71 03 	call	0x6e2	; 0x6e2 <i2c_readAck>
     28c:	f8 01       	movw	r30, r16
     28e:	ec 0f       	add	r30, r28
     290:	f1 1d       	adc	r31, r1
     292:	80 83       	st	Z, r24
         }
         m_buffer[m_bufferIndex++] = i2c_readNak();
     294:	f8 01       	movw	r30, r16
     296:	c0 85       	ldd	r28, Z+8	; 0x08
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	8c 0f       	add	r24, r28
     29c:	80 87       	std	Z+8, r24	; 0x08
     29e:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <i2c_readNak>
     2a2:	f8 01       	movw	r30, r16
     2a4:	ec 0f       	add	r30, r28
     2a6:	f1 1d       	adc	r31, r1
     2a8:	80 83       	st	Z, r24
         m_bufferReadIndex = 0;
     2aa:	f8 01       	movw	r30, r16
     2ac:	11 86       	std	Z+9, r1	; 0x09

         if (stop)
             i2c_stop();
     2ae:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <i2c_stop>
     2b2:	c1 cf       	rjmp	.-126    	; 0x236 <_ZN17Adafruit_MLX906146read16EhPj+0x58>
     {
        // quantity = Sensors::min(quantity, c_bufferSize);
         if (quantity == 0)
             return 0;

         if (i2c_start((address << 1) | I2C_READ) != 0)
     2b4:	f8 01       	movw	r30, r16
     2b6:	82 85       	ldd	r24, Z+10	; 0x0a
     2b8:	88 0f       	add	r24, r24
     2ba:	81 60       	ori	r24, 0x01	; 1
     2bc:	0e 94 34 03 	call	0x668	; 0x668 <i2c_start>
     2c0:	88 23       	and	r24, r24
     2c2:	b9 f2       	breq	.-82     	; 0x272 <_ZN17Adafruit_MLX906146read16EhPj+0x94>
     2c4:	b8 cf       	rjmp	.-144    	; 0x236 <_ZN17Adafruit_MLX906146read16EhPj+0x58>

	uint8_t pec = Wire.read();
	*d = ret;
     2c6:	f7 01       	movw	r30, r14
     2c8:	31 83       	std	Z+1, r19	; 0x01
     2ca:	20 83       	st	Z, r18
	return 0;
}
     2cc:	80 e0       	ldi	r24, 0x00	; 0
     2ce:	cf 91       	pop	r28
     2d0:	1f 91       	pop	r17
     2d2:	0f 91       	pop	r16
     2d4:	ff 90       	pop	r15
     2d6:	ef 90       	pop	r14
     2d8:	08 95       	ret

000002da <_ZN17Adafruit_MLX906148readTempEh>:

double Adafruit_MLX90614::readAmbientTempC(void) {
  return readTemp(MLX90614_TA);
}

float Adafruit_MLX90614::readTemp(uint8_t reg) {
     2da:	cf 93       	push	r28
     2dc:	df 93       	push	r29
     2de:	00 d0       	rcall	.+0      	; 0x2e0 <_ZN17Adafruit_MLX906148readTempEh+0x6>
     2e0:	cd b7       	in	r28, 0x3d	; 61
     2e2:	de b7       	in	r29, 0x3e	; 62
  float temp;
  uint16_t t;
  temp = read16(reg, &t);
     2e4:	ae 01       	movw	r20, r28
     2e6:	4f 5f       	subi	r20, 0xFF	; 255
     2e8:	5f 4f       	sbci	r21, 0xFF	; 255
     2ea:	0e 94 ef 00 	call	0x1de	; 0x1de <_ZN17Adafruit_MLX906146read16EhPj>
  temp = t * .02;
     2ee:	69 81       	ldd	r22, Y+1	; 0x01
     2f0:	7a 81       	ldd	r23, Y+2	; 0x02
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	0e 94 19 05 	call	0xa32	; 0xa32 <__floatunsisf>
     2fa:	2a e0       	ldi	r18, 0x0A	; 10
     2fc:	37 ed       	ldi	r19, 0xD7	; 215
     2fe:	43 ea       	ldi	r20, 0xA3	; 163
     300:	5c e3       	ldi	r21, 0x3C	; 60
     302:	0e 94 d0 05 	call	0xba0	; 0xba0 <__mulsf3>
  temp  -= 273.15;
     306:	23 e3       	ldi	r18, 0x33	; 51
     308:	33 e9       	ldi	r19, 0x93	; 147
     30a:	48 e8       	ldi	r20, 0x88	; 136
     30c:	53 e4       	ldi	r21, 0x43	; 67
     30e:	0e 94 04 04 	call	0x808	; 0x808 <__subsf3>
  return temp;
}
     312:	0f 90       	pop	r0
     314:	0f 90       	pop	r0
     316:	df 91       	pop	r29
     318:	cf 91       	pop	r28
     31a:	08 95       	ret

0000031c <_ZN17Adafruit_MLX9061415readObjectTempCEv>:
  _addr = i2caddr;
}
/*********************************************************************/

double Adafruit_MLX90614::readObjectTempC(void) {
  return readTemp(MLX90614_TOBJ1);
     31c:	67 e0       	ldi	r22, 0x07	; 7
     31e:	0e 94 6d 01 	call	0x2da	; 0x2da <_ZN17Adafruit_MLX906148readTempEh>
}
     322:	08 95       	ret

00000324 <_ZN17Adafruit_MLX9061416readAmbientTempCEv>:

double Adafruit_MLX90614::readAmbientTempC(void) {
  return readTemp(MLX90614_TA);
     324:	66 e0       	ldi	r22, 0x06	; 6
     326:	0e 94 6d 01 	call	0x2da	; 0x2da <_ZN17Adafruit_MLX906148readTempEh>
}
     32a:	08 95       	ret

0000032c <_ZN7HC_SR044initEv>:
// Anything over 400/500 cm (23200/29410 us pulse) is "out of range"
const unsigned long MAX_DIST = 23200;
  
void HC_SR04::init() {
  // The Trigger pin will tell the sensor to range find
  DDRD = 0x20;
     32c:	80 e2       	ldi	r24, 0x20	; 32
     32e:	8a b9       	out	0x0a, r24	; 10
  PORTD = 0x00;
     330:	1b b8       	out	0x0b, r1	; 11
  clr_pin(PORTD, TRIG_PIN);  
     332:	5d 98       	cbi	0x0b, 5	; 11
     334:	08 95       	ret

00000336 <_ZN7HC_SR044readEv>:
}
uint8_t HC_SR04::read(){
     336:	cf 92       	push	r12
     338:	df 92       	push	r13
     33a:	ef 92       	push	r14
     33c:	ff 92       	push	r15
     33e:	0f 93       	push	r16
     340:	1f 93       	push	r17
     342:	cf 93       	push	r28
     344:	8c 01       	movw	r16, r24
	float t1;
	float t2;
	float pulse_width;
	
	//set_micro(0);
	clr_pin(PORTD, TRIG_PIN);
     346:	5d 98       	cbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     348:	8a e0       	ldi	r24, 0x0A	; 10
     34a:	8a 95       	dec	r24
     34c:	f1 f7       	brne	.-4      	; 0x34a <_ZN7HC_SR044readEv+0x14>
     34e:	00 c0       	rjmp	.+0      	; 0x350 <_ZN7HC_SR044readEv+0x1a>
	_delay_us(2);
	// Hold the trigger pin high for at least 10 us
	set_pin(PORTD, TRIG_PIN);
     350:	5d 9a       	sbi	0x0b, 5	; 11
     352:	ea e6       	ldi	r30, 0x6A	; 106
     354:	ea 95       	dec	r30
     356:	f1 f7       	brne	.-4      	; 0x354 <_ZN7HC_SR044readEv+0x1e>
     358:	00 c0       	rjmp	.+0      	; 0x35a <_ZN7HC_SR044readEv+0x24>
	_delay_us(20);
	clr_pin(PORTD, TRIG_PIN);
     35a:	5d 98       	cbi	0x0b, 5	; 11
	
	// Wait for pulse on echo pin
	while ((PIND & _BV(ECHO_PIN)) == 0 );
     35c:	4e 9b       	sbis	0x09, 6	; 9
     35e:	fe cf       	rjmp	.-4      	; 0x35c <_ZN7HC_SR044readEv+0x26>
	// Measure how long the echo pin was held high (pulse width)
	// Note: the micros() counter will overflow after ~70 min
	TCNT1 = 0;
     360:	e4 e8       	ldi	r30, 0x84	; 132
     362:	f0 e0       	ldi	r31, 0x00	; 0
     364:	11 82       	std	Z+1, r1	; 0x01
     366:	10 82       	st	Z, r1
	t1 = TCNT1 ;
     368:	60 81       	ld	r22, Z
     36a:	71 81       	ldd	r23, Z+1	; 0x01
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	0e 94 19 05 	call	0xa32	; 0xa32 <__floatunsisf>
     374:	6b 01       	movw	r12, r22
     376:	7c 01       	movw	r14, r24
	cli();
     378:	f8 94       	cli

	while ((PIND & _BV(ECHO_PIN)) != 0);
     37a:	99 b1       	in	r25, 0x09	; 9
     37c:	c9 2f       	mov	r28, r25
     37e:	c0 74       	andi	r28, 0x40	; 64
     380:	96 fd       	sbrc	r25, 6
     382:	fb cf       	rjmp	.-10     	; 0x37a <_ZN7HC_SR044readEv+0x44>
	sei();
     384:	78 94       	sei
	t2 = TCNT1 ;
     386:	40 91 84 00 	lds	r20, 0x0084
     38a:	50 91 85 00 	lds	r21, 0x0085
     38e:	ba 01       	movw	r22, r20
     390:	80 e0       	ldi	r24, 0x00	; 0
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	0e 94 19 05 	call	0xa32	; 0xa32 <__floatunsisf>
	
	pulse_width = (t2 - t1)* 0.5;
     398:	a7 01       	movw	r20, r14
     39a:	96 01       	movw	r18, r12
     39c:	0e 94 04 04 	call	0x808	; 0x808 <__subsf3>
     3a0:	20 e0       	ldi	r18, 0x00	; 0
     3a2:	30 e0       	ldi	r19, 0x00	; 0
     3a4:	40 e0       	ldi	r20, 0x00	; 0
     3a6:	5f e3       	ldi	r21, 0x3F	; 63
     3a8:	0e 94 d0 05 	call	0xba0	; 0xba0 <__mulsf3>
     3ac:	6b 01       	movw	r12, r22
     3ae:	7c 01       	movw	r14, r24
	
	if ( pulse_width > MAX_DIST ) {
     3b0:	20 e0       	ldi	r18, 0x00	; 0
     3b2:	30 e4       	ldi	r19, 0x40	; 64
     3b4:	45 eb       	ldi	r20, 0xB5	; 181
     3b6:	56 e4       	ldi	r21, 0x46	; 70
     3b8:	0e 94 cb 05 	call	0xb96	; 0xb96 <__gesf2>
     3bc:	18 16       	cp	r1, r24
     3be:	74 f0       	brlt	.+28     	; 0x3dc <_ZN7HC_SR044readEv+0xa6>
			return 1;
	}
	// Calculate distance in centimeters and inches. The constants
	// are found in the data-sheet, and calculated from the assumed speed 
	//of sound in air at sea level (~340 m/s).
	cm = pulse_width/ 58;
     3c0:	20 e0       	ldi	r18, 0x00	; 0
     3c2:	30 e0       	ldi	r19, 0x00	; 0
     3c4:	48 e6       	ldi	r20, 0x68	; 104
     3c6:	52 e4       	ldi	r21, 0x42	; 66
     3c8:	c7 01       	movw	r24, r14
     3ca:	b6 01       	movw	r22, r12
     3cc:	0e 94 71 04 	call	0x8e2	; 0x8e2 <__divsf3>
	Distance = cm;
     3d0:	f8 01       	movw	r30, r16
     3d2:	60 83       	st	Z, r22
     3d4:	71 83       	std	Z+1, r23	; 0x01
     3d6:	82 83       	std	Z+2, r24	; 0x02
     3d8:	93 83       	std	Z+3, r25	; 0x03
	return 0;
     3da:	01 c0       	rjmp	.+2      	; 0x3de <_ZN7HC_SR044readEv+0xa8>
	pulse_width = (t2 - t1)* 0.5;
	
	if ( pulse_width > MAX_DIST ) {
		
			pulse_width =8888;
			return 1;
     3dc:	c1 e0       	ldi	r28, 0x01	; 1
	// are found in the data-sheet, and calculated from the assumed speed 
	//of sound in air at sea level (~340 m/s).
	cm = pulse_width/ 58;
	Distance = cm;
	return 0;
}
     3de:	8c 2f       	mov	r24, r28
     3e0:	cf 91       	pop	r28
     3e2:	1f 91       	pop	r17
     3e4:	0f 91       	pop	r16
     3e6:	ff 90       	pop	r15
     3e8:	ef 90       	pop	r14
     3ea:	df 90       	pop	r13
     3ec:	cf 90       	pop	r12
     3ee:	08 95       	ret

000003f0 <__vector_14>:
Adafruit_MLX90614 MLX[m_sensorsCount] = {0x5A,0x5B};

HC_SR04 Sonic;
VL53L0X TOF;
volatile unsigned long int count = 0; 
ISR(TIMER0_COMPA_vect){
     3f0:	1f 92       	push	r1
     3f2:	0f 92       	push	r0
     3f4:	0f b6       	in	r0, 0x3f	; 63
     3f6:	0f 92       	push	r0
     3f8:	11 24       	eor	r1, r1
     3fa:	8f 93       	push	r24
     3fc:	9f 93       	push	r25
     3fe:	af 93       	push	r26
     400:	bf 93       	push	r27
	count++;
     402:	80 91 4c 01 	lds	r24, 0x014C
     406:	90 91 4d 01 	lds	r25, 0x014D
     40a:	a0 91 4e 01 	lds	r26, 0x014E
     40e:	b0 91 4f 01 	lds	r27, 0x014F
     412:	01 96       	adiw	r24, 0x01	; 1
     414:	a1 1d       	adc	r26, r1
     416:	b1 1d       	adc	r27, r1
     418:	80 93 4c 01 	sts	0x014C, r24
     41c:	90 93 4d 01 	sts	0x014D, r25
     420:	a0 93 4e 01 	sts	0x014E, r26
     424:	b0 93 4f 01 	sts	0x014F, r27
}
     428:	bf 91       	pop	r27
     42a:	af 91       	pop	r26
     42c:	9f 91       	pop	r25
     42e:	8f 91       	pop	r24
     430:	0f 90       	pop	r0
     432:	0f be       	out	0x3f, r0	; 63
     434:	0f 90       	pop	r0
     436:	1f 90       	pop	r1
     438:	18 95       	reti

0000043a <__vector_13>:
ISR(TIMER1_OVF_vect){}
     43a:	1f 92       	push	r1
     43c:	0f 92       	push	r0
     43e:	0f b6       	in	r0, 0x3f	; 63
     440:	0f 92       	push	r0
     442:	11 24       	eor	r1, r1
     444:	0f 90       	pop	r0
     446:	0f be       	out	0x3f, r0	; 63
     448:	0f 90       	pop	r0
     44a:	1f 90       	pop	r1
     44c:	18 95       	reti

0000044e <_Z5setupv>:
	return count;
}
/*********************************************************************/
void setup(void)
{		
	cli();
     44e:	f8 94       	cli
	#endif // _DEBUG
	
	//DDRB |= _BV(PORTB5);
	//PORTB &= ~_BV(PORTB5);
	
	TCNT0 = 0;
     450:	16 bc       	out	0x26, r1	; 38
	TCNT1 = 0;
     452:	10 92 85 00 	sts	0x0085, r1
     456:	10 92 84 00 	sts	0x0084, r1
	TCCR0A |= (1<<WGM01);
     45a:	84 b5       	in	r24, 0x24	; 36
     45c:	82 60       	ori	r24, 0x02	; 2
     45e:	84 bd       	out	0x24, r24	; 36
	OCR0A = 249;
     460:	89 ef       	ldi	r24, 0xF9	; 249
     462:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1 << OCIE0A);
     464:	ee e6       	ldi	r30, 0x6E	; 110
     466:	f0 e0       	ldi	r31, 0x00	; 0
     468:	80 81       	ld	r24, Z
     46a:	82 60       	ori	r24, 0x02	; 2
     46c:	80 83       	st	Z, r24
	TIMSK1 |= _BV(TOIE1);
     46e:	ef e6       	ldi	r30, 0x6F	; 111
     470:	f0 e0       	ldi	r31, 0x00	; 0
     472:	80 81       	ld	r24, Z
     474:	81 60       	ori	r24, 0x01	; 1
     476:	80 83       	st	Z, r24
	TCCR0B |= (1<<CS01) | (1<<CS00);
     478:	85 b5       	in	r24, 0x25	; 37
     47a:	83 60       	ori	r24, 0x03	; 3
     47c:	85 bd       	out	0x25, r24	; 37
	TCCR1B |= (1<<CS11);
     47e:	e1 e8       	ldi	r30, 0x81	; 129
     480:	f0 e0       	ldi	r31, 0x00	; 0
     482:	80 81       	ld	r24, Z
     484:	82 60       	ori	r24, 0x02	; 2
     486:	80 83       	st	Z, r24
	sei();
     488:	78 94       	sei
	Serial.init(9600);
     48a:	60 e8       	ldi	r22, 0x80	; 128
     48c:	75 e2       	ldi	r23, 0x25	; 37
     48e:	8a e7       	ldi	r24, 0x7A	; 122
     490:	91 e0       	ldi	r25, 0x01	; 1
     492:	0e 94 87 03 	call	0x70e	; 0x70e <_ZN5USART4initEi>
	Serial.read();
     496:	8a e7       	ldi	r24, 0x7A	; 122
     498:	91 e0       	ldi	r25, 0x01	; 1
     49a:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <_ZN5USART4readEv>
	Sonic.init();
     49e:	8c e5       	ldi	r24, 0x5C	; 92
     4a0:	91 e0       	ldi	r25, 0x01	; 1
     4a2:	0e 94 96 01 	call	0x32c	; 0x32c <_ZN7HC_SR044initEv>
     4a6:	08 95       	ret

000004a8 <_Z13IR_sensorReadv>:
	 	Serial.sendln("> TOF...");
	 	#endif // _DEBUG
}
/*********************************************************************/
void IR_sensorRead(void )
{
     4a8:	2f 92       	push	r2
     4aa:	3f 92       	push	r3
     4ac:	4f 92       	push	r4
     4ae:	5f 92       	push	r5
     4b0:	6f 92       	push	r6
     4b2:	7f 92       	push	r7
     4b4:	8f 92       	push	r8
     4b6:	9f 92       	push	r9
     4b8:	af 92       	push	r10
     4ba:	bf 92       	push	r11
     4bc:	cf 92       	push	r12
     4be:	df 92       	push	r13
     4c0:	ef 92       	push	r14
     4c2:	ff 92       	push	r15
     4c4:	0f 93       	push	r16
     4c6:	1f 93       	push	r17
     4c8:	cf 93       	push	r28
     4ca:	df 93       	push	r29
     4cc:	cd b7       	in	r28, 0x3d	; 61
     4ce:	de b7       	in	r29, 0x3e	; 62
     4d0:	c1 57       	subi	r28, 0x71	; 113
     4d2:	d2 40       	sbci	r29, 0x02	; 2
     4d4:	0f b6       	in	r0, 0x3f	; 63
     4d6:	f8 94       	cli
     4d8:	de bf       	out	0x3e, r29	; 62
     4da:	0f be       	out	0x3f, r0	; 63
     4dc:	cd bf       	out	0x3d, r28	; 61
	char str[125], str_out[500] = {""};
     4de:	19 82       	std	Y+1, r1	; 0x01
     4e0:	1a 82       	std	Y+2, r1	; 0x02
     4e2:	1b 82       	std	Y+3, r1	; 0x03
     4e4:	1c 82       	std	Y+4, r1	; 0x04
     4e6:	fe 01       	movw	r30, r28
     4e8:	35 96       	adiw	r30, 0x05	; 5
     4ea:	80 ef       	ldi	r24, 0xF0	; 240
     4ec:	91 e0       	ldi	r25, 0x01	; 1
     4ee:	df 01       	movw	r26, r30
     4f0:	9c 01       	movw	r18, r24
     4f2:	1d 92       	st	X+, r1
     4f4:	21 50       	subi	r18, 0x01	; 1
     4f6:	30 40       	sbci	r19, 0x00	; 0
     4f8:	e1 f7       	brne	.-8      	; 0x4f2 <_Z13IR_sensorReadv+0x4a>
	double obj[m_sensorsCount], amb[m_sensorsCount], mDistance = 0;
	unsigned long int m_read_time = 0;

 	Sonic.read();
     4fa:	8c e5       	ldi	r24, 0x5C	; 92
     4fc:	91 e0       	ldi	r25, 0x01	; 1
     4fe:	0e 94 9b 01 	call	0x336	; 0x336 <_ZN7HC_SR044readEv>
     502:	0f 2e       	mov	r0, r31
     504:	f4 e6       	ldi	r31, 0x64	; 100
     506:	ef 2e       	mov	r14, r31
     508:	f1 e0       	ldi	r31, 0x01	; 1
     50a:	ff 2e       	mov	r15, r31
     50c:	f0 2d       	mov	r31, r0
 	//mDistance = TOF.readRangeContinuousMillimeters();	

	for(int i=0;i<m_sensorsCount; i++){
     50e:	00 e0       	ldi	r16, 0x00	; 0
     510:	10 e0       	ldi	r17, 0x00	; 0
		obj[i] = MLX[i].readObjectTempC();
		amb[i] = MLX[i].readAmbientTempC();
	
 		sprintf(str, "[{\"Sensor\":%d,\"Obj\":%0.1f,\"Amb\":%0.1f,\"Distance\":[%i,%0.1f],\"uTime\":%lu}", i+1, obj[i], amb[i], (int)Sonic.Distance, mDistance, m_read_time);
     512:	0f 2e       	mov	r0, r31
     514:	f0 e0       	ldi	r31, 0x00	; 0
     516:	af 2e       	mov	r10, r31
     518:	f1 e0       	ldi	r31, 0x01	; 1
     51a:	bf 2e       	mov	r11, r31
     51c:	f0 2d       	mov	r31, r0
     51e:	6e 01       	movw	r12, r28
     520:	3b e0       	ldi	r19, 0x0B	; 11
     522:	c3 1a       	sub	r12, r19
     524:	3e ef       	ldi	r19, 0xFE	; 254
     526:	d3 0a       	sbc	r13, r19

 	Sonic.read();
 	//mDistance = TOF.readRangeContinuousMillimeters();	

	for(int i=0;i<m_sensorsCount; i++){
		obj[i] = MLX[i].readObjectTempC();
     528:	c7 01       	movw	r24, r14
     52a:	0e 94 8e 01 	call	0x31c	; 0x31c <_ZN17Adafruit_MLX9061415readObjectTempCEv>
     52e:	96 2e       	mov	r9, r22
     530:	87 2e       	mov	r8, r23
     532:	78 2e       	mov	r7, r24
     534:	69 2e       	mov	r6, r25
		amb[i] = MLX[i].readAmbientTempC();
     536:	c7 01       	movw	r24, r14
     538:	0e 94 92 01 	call	0x324	; 0x324 <_ZN17Adafruit_MLX9061416readAmbientTempCEv>
     53c:	56 2e       	mov	r5, r22
     53e:	47 2e       	mov	r4, r23
     540:	38 2e       	mov	r3, r24
     542:	29 2e       	mov	r2, r25
	
 		sprintf(str, "[{\"Sensor\":%d,\"Obj\":%0.1f,\"Amb\":%0.1f,\"Distance\":[%i,%0.1f],\"uTime\":%lu}", i+1, obj[i], amb[i], (int)Sonic.Distance, mDistance, m_read_time);
     544:	ac e5       	ldi	r26, 0x5C	; 92
     546:	b1 e0       	ldi	r27, 0x01	; 1
     548:	6d 91       	ld	r22, X+
     54a:	7d 91       	ld	r23, X+
     54c:	8d 91       	ld	r24, X+
     54e:	9c 91       	ld	r25, X
     550:	0f 5f       	subi	r16, 0xFF	; 255
     552:	1f 4f       	sbci	r17, 0xFF	; 255
     554:	1f 92       	push	r1
     556:	1f 92       	push	r1
     558:	1f 92       	push	r1
     55a:	1f 92       	push	r1
     55c:	1f 92       	push	r1
     55e:	1f 92       	push	r1
     560:	1f 92       	push	r1
     562:	1f 92       	push	r1
     564:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
     568:	7f 93       	push	r23
     56a:	6f 93       	push	r22
     56c:	2f 92       	push	r2
     56e:	3f 92       	push	r3
     570:	4f 92       	push	r4
     572:	5f 92       	push	r5
     574:	6f 92       	push	r6
     576:	7f 92       	push	r7
     578:	8f 92       	push	r8
     57a:	9f 92       	push	r9
     57c:	1f 93       	push	r17
     57e:	0f 93       	push	r16
     580:	bf 92       	push	r11
     582:	af 92       	push	r10
     584:	df 92       	push	r13
     586:	cf 92       	push	r12
     588:	0e 94 49 0b 	call	0x1692	; 0x1692 <sprintf>
   		strcat(str_out,str);
     58c:	b6 01       	movw	r22, r12
     58e:	ce 01       	movw	r24, r28
     590:	01 96       	adiw	r24, 0x01	; 1
     592:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <strcat>
     596:	bb e0       	ldi	r27, 0x0B	; 11
     598:	eb 0e       	add	r14, r27
     59a:	f1 1c       	adc	r15, r1
	unsigned long int m_read_time = 0;

 	Sonic.read();
 	//mDistance = TOF.readRangeContinuousMillimeters();	

	for(int i=0;i<m_sensorsCount; i++){
     59c:	0f b6       	in	r0, 0x3f	; 63
     59e:	f8 94       	cli
     5a0:	de bf       	out	0x3e, r29	; 62
     5a2:	0f be       	out	0x3f, r0	; 63
     5a4:	cd bf       	out	0x3d, r28	; 61
     5a6:	02 30       	cpi	r16, 0x02	; 2
     5a8:	11 05       	cpc	r17, r1
     5aa:	09 f0       	breq	.+2      	; 0x5ae <_Z13IR_sensorReadv+0x106>
     5ac:	bd cf       	rjmp	.-134    	; 0x528 <_Z13IR_sensorReadv+0x80>
		//void send_int(int d);
		void send(double data, int base);
		//void send(uint32_t str);
			
		void sendln(void) {send("\r\n");};
		void sendln(const char* c) {send(c);send("\r\n");};
     5ae:	be 01       	movw	r22, r28
     5b0:	6f 5f       	subi	r22, 0xFF	; 255
     5b2:	7f 4f       	sbci	r23, 0xFF	; 255
     5b4:	8a e7       	ldi	r24, 0x7A	; 122
     5b6:	91 e0       	ldi	r25, 0x01	; 1
     5b8:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <_ZN5USART4sendEPKc>
     5bc:	69 e4       	ldi	r22, 0x49	; 73
     5be:	71 e0       	ldi	r23, 0x01	; 1
     5c0:	8a e7       	ldi	r24, 0x7A	; 122
     5c2:	91 e0       	ldi	r25, 0x01	; 1
     5c4:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <_ZN5USART4sendEPKc>
	
 		sprintf(str, "[{\"Sensor\":%d,\"Obj\":%0.1f,\"Amb\":%0.1f,\"Distance\":[%i,%0.1f],\"uTime\":%lu}", i+1, obj[i], amb[i], (int)Sonic.Distance, mDistance, m_read_time);
   		strcat(str_out,str);
	}
	Serial.sendln(str_out);
}
     5c8:	cf 58       	subi	r28, 0x8F	; 143
     5ca:	dd 4f       	sbci	r29, 0xFD	; 253
     5cc:	0f b6       	in	r0, 0x3f	; 63
     5ce:	f8 94       	cli
     5d0:	de bf       	out	0x3e, r29	; 62
     5d2:	0f be       	out	0x3f, r0	; 63
     5d4:	cd bf       	out	0x3d, r28	; 61
     5d6:	df 91       	pop	r29
     5d8:	cf 91       	pop	r28
     5da:	1f 91       	pop	r17
     5dc:	0f 91       	pop	r16
     5de:	ff 90       	pop	r15
     5e0:	ef 90       	pop	r14
     5e2:	df 90       	pop	r13
     5e4:	cf 90       	pop	r12
     5e6:	bf 90       	pop	r11
     5e8:	af 90       	pop	r10
     5ea:	9f 90       	pop	r9
     5ec:	8f 90       	pop	r8
     5ee:	7f 90       	pop	r7
     5f0:	6f 90       	pop	r6
     5f2:	5f 90       	pop	r5
     5f4:	4f 90       	pop	r4
     5f6:	3f 90       	pop	r3
     5f8:	2f 90       	pop	r2
     5fa:	08 95       	ret

000005fc <main>:
/*********************************************************************/
int main(void)
{	
	setup();
     5fc:	0e 94 27 02 	call	0x44e	; 0x44e <_Z5setupv>
	count++;
}
ISR(TIMER1_OVF_vect){}
/*********************************************************************/
unsigned long int millis(void){
	return count;
     600:	c0 90 4c 01 	lds	r12, 0x014C
     604:	d0 90 4d 01 	lds	r13, 0x014D
     608:	e0 90 4e 01 	lds	r14, 0x014E
     60c:	f0 90 4f 01 	lds	r15, 0x014F
		unsigned long int start_time;
	    start_time = millis();	
		#ifdef _DEBUG
			Serial.sendln("> Read Sensors...");
		#endif
		IR_sensorRead();
     610:	0e 94 54 02 	call	0x4a8	; 0x4a8 <_Z13IR_sensorReadv>
	count++;
}
ISR(TIMER1_OVF_vect){}
/*********************************************************************/
unsigned long int millis(void){
	return count;
     614:	80 91 4c 01 	lds	r24, 0x014C
     618:	90 91 4d 01 	lds	r25, 0x014D
     61c:	a0 91 4e 01 	lds	r26, 0x014E
     620:	b0 91 4f 01 	lds	r27, 0x014F
		#ifdef _DEBUG
			Serial.sendln("> Read Sensors...");
		#endif
		IR_sensorRead();
		//_delay_ms(250);
		while((millis()-start_time) <= 250);
     624:	8c 19       	sub	r24, r12
     626:	9d 09       	sbc	r25, r13
     628:	ae 09       	sbc	r26, r14
     62a:	bf 09       	sbc	r27, r15
     62c:	8b 3f       	cpi	r24, 0xFB	; 251
     62e:	91 05       	cpc	r25, r1
     630:	a1 05       	cpc	r26, r1
     632:	b1 05       	cpc	r27, r1
     634:	78 f3       	brcs	.-34     	; 0x614 <main+0x18>
     636:	e4 cf       	rjmp	.-56     	; 0x600 <main+0x4>

00000638 <_GLOBAL__sub_I_MLX>:
// Adafruit_MLX90614 MLX_5b(0x5E);
// Adafruit_MLX90614 MLX_5c(0x5C);
// Adafruit_MLX90614 MLX_5d(0x5D);

const int m_sensorsCount = 2;
Adafruit_MLX90614 MLX[m_sensorsCount] = {0x5A,0x5B};
     638:	6a e5       	ldi	r22, 0x5A	; 90
     63a:	84 e6       	ldi	r24, 0x64	; 100
     63c:	91 e0       	ldi	r25, 0x01	; 1
     63e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_ZN17Adafruit_MLX90614C1Eh>
     642:	6b e5       	ldi	r22, 0x5B	; 91
     644:	8f e6       	ldi	r24, 0x6F	; 111
     646:	91 e0       	ldi	r25, 0x01	; 1
     648:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_ZN17Adafruit_MLX90614C1Eh>

HC_SR04 Sonic;
VL53L0X TOF;
     64c:	80 e5       	ldi	r24, 0x50	; 80
     64e:	91 e0       	ldi	r25, 0x01	; 1
     650:	0e 94 f6 03 	call	0x7ec	; 0x7ec <_ZN7VL53L0XC1Ev>
     654:	08 95       	ret

00000656 <i2c_init>:
 Initialization of the I2C bus interface. Need to be called only once
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  DDRC = 0;
     656:	17 b8       	out	0x07, r1	; 7
  PORTC = (1 << PORTC4) | (1 << PORTC5);//enable pull up
     658:	80 e3       	ldi	r24, 0x30	; 48
     65a:	88 b9       	out	0x08, r24	; 8
  TWSR = 0;                         /* no prescaler */
     65c:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
     660:	88 e4       	ldi	r24, 0x48	; 72
     662:	80 93 b8 00 	sts	0x00B8, r24
     666:	08 95       	ret

00000668 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     668:	94 ea       	ldi	r25, 0xA4	; 164
     66a:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     66e:	ec eb       	ldi	r30, 0xBC	; 188
     670:	f0 e0       	ldi	r31, 0x00	; 0
     672:	90 81       	ld	r25, Z
     674:	99 23       	and	r25, r25
     676:	ec f7       	brge	.-6      	; 0x672 <i2c_start+0xa>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     678:	90 91 b9 00 	lds	r25, 0x00B9
     67c:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     67e:	98 30       	cpi	r25, 0x08	; 8
     680:	11 f0       	breq	.+4      	; 0x686 <i2c_start+0x1e>
     682:	90 31       	cpi	r25, 0x10	; 16
     684:	a1 f4       	brne	.+40     	; 0x6ae <i2c_start+0x46>

	// send device address
	TWDR = address;
     686:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     68a:	84 e8       	ldi	r24, 0x84	; 132
     68c:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
     690:	ec eb       	ldi	r30, 0xBC	; 188
     692:	f0 e0       	ldi	r31, 0x00	; 0
     694:	80 81       	ld	r24, Z
     696:	88 23       	and	r24, r24
     698:	ec f7       	brge	.-6      	; 0x694 <i2c_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     69a:	90 91 b9 00 	lds	r25, 0x00B9
     69e:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     6a0:	98 31       	cpi	r25, 0x18	; 24
     6a2:	39 f0       	breq	.+14     	; 0x6b2 <i2c_start+0x4a>
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	90 34       	cpi	r25, 0x40	; 64
     6a8:	29 f4       	brne	.+10     	; 0x6b4 <i2c_start+0x4c>
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     6ae:	81 e0       	ldi	r24, 0x01	; 1
     6b0:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
     6b2:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
     6b4:	08 95       	ret

000006b6 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     6b6:	84 e9       	ldi	r24, 0x94	; 148
     6b8:	80 93 bc 00 	sts	0x00BC, r24
     6bc:	08 95       	ret

000006be <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     6be:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     6c2:	84 e8       	ldi	r24, 0x84	; 132
     6c4:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     6c8:	ec eb       	ldi	r30, 0xBC	; 188
     6ca:	f0 e0       	ldi	r31, 0x00	; 0
     6cc:	80 81       	ld	r24, Z
     6ce:	88 23       	and	r24, r24
     6d0:	ec f7       	brge	.-6      	; 0x6cc <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     6d2:	90 91 b9 00 	lds	r25, 0x00B9
     6d6:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
     6d8:	81 e0       	ldi	r24, 0x01	; 1
     6da:	98 32       	cpi	r25, 0x28	; 40
     6dc:	09 f4       	brne	.+2      	; 0x6e0 <i2c_write+0x22>
     6de:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
     6e0:	08 95       	ret

000006e2 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     6e2:	84 ec       	ldi	r24, 0xC4	; 196
     6e4:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
     6e8:	ec eb       	ldi	r30, 0xBC	; 188
     6ea:	f0 e0       	ldi	r31, 0x00	; 0
     6ec:	80 81       	ld	r24, Z
     6ee:	88 23       	and	r24, r24
     6f0:	ec f7       	brge	.-6      	; 0x6ec <i2c_readAck+0xa>
    return TWDR;
     6f2:	80 91 bb 00 	lds	r24, 0x00BB
}/* i2c_readAck */
     6f6:	08 95       	ret

000006f8 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     6f8:	84 e8       	ldi	r24, 0x84	; 132
     6fa:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
     6fe:	ec eb       	ldi	r30, 0xBC	; 188
     700:	f0 e0       	ldi	r31, 0x00	; 0
     702:	80 81       	ld	r24, Z
     704:	88 23       	and	r24, r24
     706:	ec f7       	brge	.-6      	; 0x702 <i2c_readNak+0xa>
    return TWDR;
     708:	80 91 bb 00 	lds	r24, 0x00BB
}/* i2c_readNak */
     70c:	08 95       	ret

0000070e <_ZN5USART4initEi>:
USART Serial; //Initialize new instance of the serial class
//Setup Baud rate in header file
//set to 8 bits, no stop bit, no parity

/*********************************************************************/
void USART::init(int BAUDRATE){
     70e:	0f 93       	push	r16
     710:	1f 93       	push	r17
	UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);
     712:	8b 01       	movw	r16, r22
     714:	77 0f       	add	r23, r23
     716:	22 0b       	sbc	r18, r18
     718:	33 0b       	sbc	r19, r19
     71a:	d9 01       	movw	r26, r18
     71c:	c8 01       	movw	r24, r16
     71e:	80 58       	subi	r24, 0x80	; 128
     720:	9b 47       	sbci	r25, 0x7B	; 123
     722:	a1 4e       	sbci	r26, 0xE1	; 225
     724:	bf 4f       	sbci	r27, 0xFF	; 255
     726:	88 0f       	add	r24, r24
     728:	99 1f       	adc	r25, r25
     72a:	aa 1f       	adc	r26, r26
     72c:	bb 1f       	adc	r27, r27
     72e:	88 0f       	add	r24, r24
     730:	99 1f       	adc	r25, r25
     732:	aa 1f       	adc	r26, r26
     734:	bb 1f       	adc	r27, r27
     736:	bc 01       	movw	r22, r24
     738:	cd 01       	movw	r24, r26
     73a:	66 0f       	add	r22, r22
     73c:	77 1f       	adc	r23, r23
     73e:	88 1f       	adc	r24, r24
     740:	99 1f       	adc	r25, r25
     742:	00 0f       	add	r16, r16
     744:	11 1f       	adc	r17, r17
     746:	22 1f       	adc	r18, r18
     748:	33 1f       	adc	r19, r19
     74a:	00 0f       	add	r16, r16
     74c:	11 1f       	adc	r17, r17
     74e:	22 1f       	adc	r18, r18
     750:	33 1f       	adc	r19, r19
     752:	a9 01       	movw	r20, r18
     754:	98 01       	movw	r18, r16
     756:	22 0f       	add	r18, r18
     758:	33 1f       	adc	r19, r19
     75a:	44 1f       	adc	r20, r20
     75c:	55 1f       	adc	r21, r21
     75e:	22 0f       	add	r18, r18
     760:	33 1f       	adc	r19, r19
     762:	44 1f       	adc	r20, r20
     764:	55 1f       	adc	r21, r21
     766:	0e 94 b9 09 	call	0x1372	; 0x1372 <__udivmodsi4>
     76a:	da 01       	movw	r26, r20
     76c:	c9 01       	movw	r24, r18
     76e:	01 97       	sbiw	r24, 0x01	; 1
     770:	a1 09       	sbc	r26, r1
     772:	b1 09       	sbc	r27, r1
     774:	89 2f       	mov	r24, r25
     776:	9a 2f       	mov	r25, r26
     778:	ab 2f       	mov	r26, r27
     77a:	bb 27       	eor	r27, r27
     77c:	80 93 c5 00 	sts	0x00C5, r24
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);
     780:	21 50       	subi	r18, 0x01	; 1
     782:	20 93 c4 00 	sts	0x00C4, r18
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     786:	e1 ec       	ldi	r30, 0xC1	; 193
     788:	f0 e0       	ldi	r31, 0x00	; 0
     78a:	88 e1       	ldi	r24, 0x18	; 24
     78c:	80 83       	st	Z, r24
	UCSR0C = (1<<UCSZ00)|(1<<UCSZ01);
     78e:	86 e0       	ldi	r24, 0x06	; 6
     790:	80 93 c2 00 	sts	0x00C2, r24

	UCSR0B |= (1 << RXCIE0); // Enable the USART Receive Complete interrupt (USART_RXC)
     794:	80 81       	ld	r24, Z
     796:	80 68       	ori	r24, 0x80	; 128
     798:	80 83       	st	Z, r24
	sei();
     79a:	78 94       	sei
}
     79c:	1f 91       	pop	r17
     79e:	0f 91       	pop	r16
     7a0:	08 95       	ret

000007a2 <_ZN5USART4readEv>:
	return false;
}
/*********************************************************************/
unsigned char USART::read(void){

 while(!(UCSR0A & (1<<RXC0))); //wait until data is in buffer
     7a2:	e0 ec       	ldi	r30, 0xC0	; 192
     7a4:	f0 e0       	ldi	r31, 0x00	; 0
     7a6:	80 81       	ld	r24, Z
     7a8:	88 23       	and	r24, r24
     7aa:	ec f7       	brge	.-6      	; 0x7a6 <_ZN5USART4readEv+0x4>
 return UDR0;// read buffer
     7ac:	80 91 c6 00 	lds	r24, 0x00C6
}
     7b0:	08 95       	ret

000007b2 <_ZN5USART4sendEh>:
/*********************************************************************/
void USART::send(uint8_t data){

	while(!(UCSR0A & (1<<UDRE0))); //wait until buffer is empty
     7b2:	e0 ec       	ldi	r30, 0xC0	; 192
     7b4:	f0 e0       	ldi	r31, 0x00	; 0
     7b6:	80 81       	ld	r24, Z
     7b8:	85 ff       	sbrs	r24, 5
     7ba:	fd cf       	rjmp	.-6      	; 0x7b6 <_ZN5USART4sendEh+0x4>
	UDR0 = data; //Load data into buffer
     7bc:	60 93 c6 00 	sts	0x00C6, r22
     7c0:	08 95       	ret

000007c2 <_ZN5USART4sendEPKc>:
}
/*********************************************************************/
//send one char at a time
void USART::send(const char* StringPtr)
{
     7c2:	0f 93       	push	r16
     7c4:	1f 93       	push	r17
     7c6:	cf 93       	push	r28
     7c8:	df 93       	push	r29
     7ca:	eb 01       	movw	r28, r22
	//st = millis();
	while(*StringPtr != 0x00)
     7cc:	68 81       	ld	r22, Y
     7ce:	66 23       	and	r22, r22
     7d0:	41 f0       	breq	.+16     	; 0x7e2 <_ZN5USART4sendEPKc+0x20>
     7d2:	8c 01       	movw	r16, r24
     7d4:	21 96       	adiw	r28, 0x01	; 1
		void init(int BAUDRATE = 9600); 
		bool available(void);
		unsigned char read(void);
		bool flush(void);
		void send(uint8_t data);
		void send(char data) {send((uint8_t)data); };
     7d6:	c8 01       	movw	r24, r16
     7d8:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <_ZN5USART4sendEh>
     7dc:	69 91       	ld	r22, Y+
     7de:	61 11       	cpse	r22, r1
     7e0:	fa cf       	rjmp	.-12     	; 0x7d6 <_ZN5USART4sendEPKc+0x14>
	{
		send(*StringPtr++);
	}
	//ft = millis();
}
     7e2:	df 91       	pop	r29
     7e4:	cf 91       	pop	r28
     7e6:	1f 91       	pop	r17
     7e8:	0f 91       	pop	r16
     7ea:	08 95       	ret

000007ec <_ZN7VL53L0XC1Ev>:
// PLL_period_ps = 1655; macro_period_vclks = 2304
#define calcMacroPeriod(vcsel_period_pclks) ((((uint32_t)2304 * (vcsel_period_pclks) * 1655) + 500) / 1000)

// Constructors ////////////////////////////////////////////////////////////////

VL53L0X::VL53L0X(void)
     7ec:	fc 01       	movw	r30, r24
  : address(ADDRESS_DEFAULT)
  , io_timeout(0) // no timeout
  , did_timeout(false)
     7ee:	89 e2       	ldi	r24, 0x29	; 41
     7f0:	81 83       	std	Z+1, r24	; 0x01
     7f2:	13 82       	std	Z+3, r1	; 0x03
     7f4:	12 82       	std	Z+2, r1	; 0x02
     7f6:	14 82       	std	Z+4, r1	; 0x04
     7f8:	08 95       	ret

000007fa <_GLOBAL__sub_I_Wire>:
	  }
 class I2c
 {
 public:
    I2c()
    {
     7fa:	e2 e8       	ldi	r30, 0x82	; 130
     7fc:	f1 e0       	ldi	r31, 0x01	; 1
     7fe:	10 86       	std	Z+8, r1	; 0x08
     800:	11 86       	std	Z+9, r1	; 0x09
	    i2c_init();
     802:	0e 94 2b 03 	call	0x656	; 0x656 <i2c_init>
     806:	08 95       	ret

00000808 <__subsf3>:
     808:	50 58       	subi	r21, 0x80	; 128

0000080a <__addsf3>:
     80a:	bb 27       	eor	r27, r27
     80c:	aa 27       	eor	r26, r26
     80e:	0e 94 1c 04 	call	0x838	; 0x838 <__addsf3x>
     812:	0c 94 91 05 	jmp	0xb22	; 0xb22 <__fp_round>
     816:	0e 94 83 05 	call	0xb06	; 0xb06 <__fp_pscA>
     81a:	38 f0       	brcs	.+14     	; 0x82a <__addsf3+0x20>
     81c:	0e 94 8a 05 	call	0xb14	; 0xb14 <__fp_pscB>
     820:	20 f0       	brcs	.+8      	; 0x82a <__addsf3+0x20>
     822:	39 f4       	brne	.+14     	; 0x832 <__addsf3+0x28>
     824:	9f 3f       	cpi	r25, 0xFF	; 255
     826:	19 f4       	brne	.+6      	; 0x82e <__addsf3+0x24>
     828:	26 f4       	brtc	.+8      	; 0x832 <__addsf3+0x28>
     82a:	0c 94 80 05 	jmp	0xb00	; 0xb00 <__fp_nan>
     82e:	0e f4       	brtc	.+2      	; 0x832 <__addsf3+0x28>
     830:	e0 95       	com	r30
     832:	e7 fb       	bst	r30, 7
     834:	0c 94 7a 05 	jmp	0xaf4	; 0xaf4 <__fp_inf>

00000838 <__addsf3x>:
     838:	e9 2f       	mov	r30, r25
     83a:	0e 94 a2 05 	call	0xb44	; 0xb44 <__fp_split3>
     83e:	58 f3       	brcs	.-42     	; 0x816 <__addsf3+0xc>
     840:	ba 17       	cp	r27, r26
     842:	62 07       	cpc	r22, r18
     844:	73 07       	cpc	r23, r19
     846:	84 07       	cpc	r24, r20
     848:	95 07       	cpc	r25, r21
     84a:	20 f0       	brcs	.+8      	; 0x854 <__addsf3x+0x1c>
     84c:	79 f4       	brne	.+30     	; 0x86c <__addsf3x+0x34>
     84e:	a6 f5       	brtc	.+104    	; 0x8b8 <__addsf3x+0x80>
     850:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__fp_zero>
     854:	0e f4       	brtc	.+2      	; 0x858 <__addsf3x+0x20>
     856:	e0 95       	com	r30
     858:	0b 2e       	mov	r0, r27
     85a:	ba 2f       	mov	r27, r26
     85c:	a0 2d       	mov	r26, r0
     85e:	0b 01       	movw	r0, r22
     860:	b9 01       	movw	r22, r18
     862:	90 01       	movw	r18, r0
     864:	0c 01       	movw	r0, r24
     866:	ca 01       	movw	r24, r20
     868:	a0 01       	movw	r20, r0
     86a:	11 24       	eor	r1, r1
     86c:	ff 27       	eor	r31, r31
     86e:	59 1b       	sub	r21, r25
     870:	99 f0       	breq	.+38     	; 0x898 <__addsf3x+0x60>
     872:	59 3f       	cpi	r21, 0xF9	; 249
     874:	50 f4       	brcc	.+20     	; 0x88a <__addsf3x+0x52>
     876:	50 3e       	cpi	r21, 0xE0	; 224
     878:	68 f1       	brcs	.+90     	; 0x8d4 <__addsf3x+0x9c>
     87a:	1a 16       	cp	r1, r26
     87c:	f0 40       	sbci	r31, 0x00	; 0
     87e:	a2 2f       	mov	r26, r18
     880:	23 2f       	mov	r18, r19
     882:	34 2f       	mov	r19, r20
     884:	44 27       	eor	r20, r20
     886:	58 5f       	subi	r21, 0xF8	; 248
     888:	f3 cf       	rjmp	.-26     	; 0x870 <__addsf3x+0x38>
     88a:	46 95       	lsr	r20
     88c:	37 95       	ror	r19
     88e:	27 95       	ror	r18
     890:	a7 95       	ror	r26
     892:	f0 40       	sbci	r31, 0x00	; 0
     894:	53 95       	inc	r21
     896:	c9 f7       	brne	.-14     	; 0x88a <__addsf3x+0x52>
     898:	7e f4       	brtc	.+30     	; 0x8b8 <__addsf3x+0x80>
     89a:	1f 16       	cp	r1, r31
     89c:	ba 0b       	sbc	r27, r26
     89e:	62 0b       	sbc	r22, r18
     8a0:	73 0b       	sbc	r23, r19
     8a2:	84 0b       	sbc	r24, r20
     8a4:	ba f0       	brmi	.+46     	; 0x8d4 <__addsf3x+0x9c>
     8a6:	91 50       	subi	r25, 0x01	; 1
     8a8:	a1 f0       	breq	.+40     	; 0x8d2 <__addsf3x+0x9a>
     8aa:	ff 0f       	add	r31, r31
     8ac:	bb 1f       	adc	r27, r27
     8ae:	66 1f       	adc	r22, r22
     8b0:	77 1f       	adc	r23, r23
     8b2:	88 1f       	adc	r24, r24
     8b4:	c2 f7       	brpl	.-16     	; 0x8a6 <__addsf3x+0x6e>
     8b6:	0e c0       	rjmp	.+28     	; 0x8d4 <__addsf3x+0x9c>
     8b8:	ba 0f       	add	r27, r26
     8ba:	62 1f       	adc	r22, r18
     8bc:	73 1f       	adc	r23, r19
     8be:	84 1f       	adc	r24, r20
     8c0:	48 f4       	brcc	.+18     	; 0x8d4 <__addsf3x+0x9c>
     8c2:	87 95       	ror	r24
     8c4:	77 95       	ror	r23
     8c6:	67 95       	ror	r22
     8c8:	b7 95       	ror	r27
     8ca:	f7 95       	ror	r31
     8cc:	9e 3f       	cpi	r25, 0xFE	; 254
     8ce:	08 f0       	brcs	.+2      	; 0x8d2 <__addsf3x+0x9a>
     8d0:	b0 cf       	rjmp	.-160    	; 0x832 <__addsf3+0x28>
     8d2:	93 95       	inc	r25
     8d4:	88 0f       	add	r24, r24
     8d6:	08 f0       	brcs	.+2      	; 0x8da <__addsf3x+0xa2>
     8d8:	99 27       	eor	r25, r25
     8da:	ee 0f       	add	r30, r30
     8dc:	97 95       	ror	r25
     8de:	87 95       	ror	r24
     8e0:	08 95       	ret

000008e2 <__divsf3>:
     8e2:	0e 94 85 04 	call	0x90a	; 0x90a <__divsf3x>
     8e6:	0c 94 91 05 	jmp	0xb22	; 0xb22 <__fp_round>
     8ea:	0e 94 8a 05 	call	0xb14	; 0xb14 <__fp_pscB>
     8ee:	58 f0       	brcs	.+22     	; 0x906 <__stack+0x7>
     8f0:	0e 94 83 05 	call	0xb06	; 0xb06 <__fp_pscA>
     8f4:	40 f0       	brcs	.+16     	; 0x906 <__stack+0x7>
     8f6:	29 f4       	brne	.+10     	; 0x902 <__stack+0x3>
     8f8:	5f 3f       	cpi	r21, 0xFF	; 255
     8fa:	29 f0       	breq	.+10     	; 0x906 <__stack+0x7>
     8fc:	0c 94 7a 05 	jmp	0xaf4	; 0xaf4 <__fp_inf>
     900:	51 11       	cpse	r21, r1
     902:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <__fp_szero>
     906:	0c 94 80 05 	jmp	0xb00	; 0xb00 <__fp_nan>

0000090a <__divsf3x>:
     90a:	0e 94 a2 05 	call	0xb44	; 0xb44 <__fp_split3>
     90e:	68 f3       	brcs	.-38     	; 0x8ea <__divsf3+0x8>

00000910 <__divsf3_pse>:
     910:	99 23       	and	r25, r25
     912:	b1 f3       	breq	.-20     	; 0x900 <__stack+0x1>
     914:	55 23       	and	r21, r21
     916:	91 f3       	breq	.-28     	; 0x8fc <__divsf3+0x1a>
     918:	95 1b       	sub	r25, r21
     91a:	55 0b       	sbc	r21, r21
     91c:	bb 27       	eor	r27, r27
     91e:	aa 27       	eor	r26, r26
     920:	62 17       	cp	r22, r18
     922:	73 07       	cpc	r23, r19
     924:	84 07       	cpc	r24, r20
     926:	38 f0       	brcs	.+14     	; 0x936 <__divsf3_pse+0x26>
     928:	9f 5f       	subi	r25, 0xFF	; 255
     92a:	5f 4f       	sbci	r21, 0xFF	; 255
     92c:	22 0f       	add	r18, r18
     92e:	33 1f       	adc	r19, r19
     930:	44 1f       	adc	r20, r20
     932:	aa 1f       	adc	r26, r26
     934:	a9 f3       	breq	.-22     	; 0x920 <__divsf3_pse+0x10>
     936:	35 d0       	rcall	.+106    	; 0x9a2 <__divsf3_pse+0x92>
     938:	0e 2e       	mov	r0, r30
     93a:	3a f0       	brmi	.+14     	; 0x94a <__divsf3_pse+0x3a>
     93c:	e0 e8       	ldi	r30, 0x80	; 128
     93e:	32 d0       	rcall	.+100    	; 0x9a4 <__divsf3_pse+0x94>
     940:	91 50       	subi	r25, 0x01	; 1
     942:	50 40       	sbci	r21, 0x00	; 0
     944:	e6 95       	lsr	r30
     946:	00 1c       	adc	r0, r0
     948:	ca f7       	brpl	.-14     	; 0x93c <__divsf3_pse+0x2c>
     94a:	2b d0       	rcall	.+86     	; 0x9a2 <__divsf3_pse+0x92>
     94c:	fe 2f       	mov	r31, r30
     94e:	29 d0       	rcall	.+82     	; 0x9a2 <__divsf3_pse+0x92>
     950:	66 0f       	add	r22, r22
     952:	77 1f       	adc	r23, r23
     954:	88 1f       	adc	r24, r24
     956:	bb 1f       	adc	r27, r27
     958:	26 17       	cp	r18, r22
     95a:	37 07       	cpc	r19, r23
     95c:	48 07       	cpc	r20, r24
     95e:	ab 07       	cpc	r26, r27
     960:	b0 e8       	ldi	r27, 0x80	; 128
     962:	09 f0       	breq	.+2      	; 0x966 <__divsf3_pse+0x56>
     964:	bb 0b       	sbc	r27, r27
     966:	80 2d       	mov	r24, r0
     968:	bf 01       	movw	r22, r30
     96a:	ff 27       	eor	r31, r31
     96c:	93 58       	subi	r25, 0x83	; 131
     96e:	5f 4f       	sbci	r21, 0xFF	; 255
     970:	3a f0       	brmi	.+14     	; 0x980 <__divsf3_pse+0x70>
     972:	9e 3f       	cpi	r25, 0xFE	; 254
     974:	51 05       	cpc	r21, r1
     976:	78 f0       	brcs	.+30     	; 0x996 <__divsf3_pse+0x86>
     978:	0c 94 7a 05 	jmp	0xaf4	; 0xaf4 <__fp_inf>
     97c:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <__fp_szero>
     980:	5f 3f       	cpi	r21, 0xFF	; 255
     982:	e4 f3       	brlt	.-8      	; 0x97c <__divsf3_pse+0x6c>
     984:	98 3e       	cpi	r25, 0xE8	; 232
     986:	d4 f3       	brlt	.-12     	; 0x97c <__divsf3_pse+0x6c>
     988:	86 95       	lsr	r24
     98a:	77 95       	ror	r23
     98c:	67 95       	ror	r22
     98e:	b7 95       	ror	r27
     990:	f7 95       	ror	r31
     992:	9f 5f       	subi	r25, 0xFF	; 255
     994:	c9 f7       	brne	.-14     	; 0x988 <__divsf3_pse+0x78>
     996:	88 0f       	add	r24, r24
     998:	91 1d       	adc	r25, r1
     99a:	96 95       	lsr	r25
     99c:	87 95       	ror	r24
     99e:	97 f9       	bld	r25, 7
     9a0:	08 95       	ret
     9a2:	e1 e0       	ldi	r30, 0x01	; 1
     9a4:	66 0f       	add	r22, r22
     9a6:	77 1f       	adc	r23, r23
     9a8:	88 1f       	adc	r24, r24
     9aa:	bb 1f       	adc	r27, r27
     9ac:	62 17       	cp	r22, r18
     9ae:	73 07       	cpc	r23, r19
     9b0:	84 07       	cpc	r24, r20
     9b2:	ba 07       	cpc	r27, r26
     9b4:	20 f0       	brcs	.+8      	; 0x9be <__divsf3_pse+0xae>
     9b6:	62 1b       	sub	r22, r18
     9b8:	73 0b       	sbc	r23, r19
     9ba:	84 0b       	sbc	r24, r20
     9bc:	ba 0b       	sbc	r27, r26
     9be:	ee 1f       	adc	r30, r30
     9c0:	88 f7       	brcc	.-30     	; 0x9a4 <__divsf3_pse+0x94>
     9c2:	e0 95       	com	r30
     9c4:	08 95       	ret

000009c6 <__fixsfsi>:
     9c6:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <__fixunssfsi>
     9ca:	68 94       	set
     9cc:	b1 11       	cpse	r27, r1
     9ce:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <__fp_szero>
     9d2:	08 95       	ret

000009d4 <__fixunssfsi>:
     9d4:	0e 94 aa 05 	call	0xb54	; 0xb54 <__fp_splitA>
     9d8:	88 f0       	brcs	.+34     	; 0x9fc <__fixunssfsi+0x28>
     9da:	9f 57       	subi	r25, 0x7F	; 127
     9dc:	98 f0       	brcs	.+38     	; 0xa04 <__fixunssfsi+0x30>
     9de:	b9 2f       	mov	r27, r25
     9e0:	99 27       	eor	r25, r25
     9e2:	b7 51       	subi	r27, 0x17	; 23
     9e4:	b0 f0       	brcs	.+44     	; 0xa12 <__fixunssfsi+0x3e>
     9e6:	e1 f0       	breq	.+56     	; 0xa20 <__fixunssfsi+0x4c>
     9e8:	66 0f       	add	r22, r22
     9ea:	77 1f       	adc	r23, r23
     9ec:	88 1f       	adc	r24, r24
     9ee:	99 1f       	adc	r25, r25
     9f0:	1a f0       	brmi	.+6      	; 0x9f8 <__fixunssfsi+0x24>
     9f2:	ba 95       	dec	r27
     9f4:	c9 f7       	brne	.-14     	; 0x9e8 <__fixunssfsi+0x14>
     9f6:	14 c0       	rjmp	.+40     	; 0xa20 <__fixunssfsi+0x4c>
     9f8:	b1 30       	cpi	r27, 0x01	; 1
     9fa:	91 f0       	breq	.+36     	; 0xa20 <__fixunssfsi+0x4c>
     9fc:	0e 94 c4 05 	call	0xb88	; 0xb88 <__fp_zero>
     a00:	b1 e0       	ldi	r27, 0x01	; 1
     a02:	08 95       	ret
     a04:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__fp_zero>
     a08:	67 2f       	mov	r22, r23
     a0a:	78 2f       	mov	r23, r24
     a0c:	88 27       	eor	r24, r24
     a0e:	b8 5f       	subi	r27, 0xF8	; 248
     a10:	39 f0       	breq	.+14     	; 0xa20 <__fixunssfsi+0x4c>
     a12:	b9 3f       	cpi	r27, 0xF9	; 249
     a14:	cc f3       	brlt	.-14     	; 0xa08 <__fixunssfsi+0x34>
     a16:	86 95       	lsr	r24
     a18:	77 95       	ror	r23
     a1a:	67 95       	ror	r22
     a1c:	b3 95       	inc	r27
     a1e:	d9 f7       	brne	.-10     	; 0xa16 <__fixunssfsi+0x42>
     a20:	3e f4       	brtc	.+14     	; 0xa30 <__fixunssfsi+0x5c>
     a22:	90 95       	com	r25
     a24:	80 95       	com	r24
     a26:	70 95       	com	r23
     a28:	61 95       	neg	r22
     a2a:	7f 4f       	sbci	r23, 0xFF	; 255
     a2c:	8f 4f       	sbci	r24, 0xFF	; 255
     a2e:	9f 4f       	sbci	r25, 0xFF	; 255
     a30:	08 95       	ret

00000a32 <__floatunsisf>:
     a32:	e8 94       	clt
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__floatsisf+0x12>

00000a36 <__floatsisf>:
     a36:	97 fb       	bst	r25, 7
     a38:	3e f4       	brtc	.+14     	; 0xa48 <__floatsisf+0x12>
     a3a:	90 95       	com	r25
     a3c:	80 95       	com	r24
     a3e:	70 95       	com	r23
     a40:	61 95       	neg	r22
     a42:	7f 4f       	sbci	r23, 0xFF	; 255
     a44:	8f 4f       	sbci	r24, 0xFF	; 255
     a46:	9f 4f       	sbci	r25, 0xFF	; 255
     a48:	99 23       	and	r25, r25
     a4a:	a9 f0       	breq	.+42     	; 0xa76 <__floatsisf+0x40>
     a4c:	f9 2f       	mov	r31, r25
     a4e:	96 e9       	ldi	r25, 0x96	; 150
     a50:	bb 27       	eor	r27, r27
     a52:	93 95       	inc	r25
     a54:	f6 95       	lsr	r31
     a56:	87 95       	ror	r24
     a58:	77 95       	ror	r23
     a5a:	67 95       	ror	r22
     a5c:	b7 95       	ror	r27
     a5e:	f1 11       	cpse	r31, r1
     a60:	f8 cf       	rjmp	.-16     	; 0xa52 <__floatsisf+0x1c>
     a62:	fa f4       	brpl	.+62     	; 0xaa2 <__floatsisf+0x6c>
     a64:	bb 0f       	add	r27, r27
     a66:	11 f4       	brne	.+4      	; 0xa6c <__floatsisf+0x36>
     a68:	60 ff       	sbrs	r22, 0
     a6a:	1b c0       	rjmp	.+54     	; 0xaa2 <__floatsisf+0x6c>
     a6c:	6f 5f       	subi	r22, 0xFF	; 255
     a6e:	7f 4f       	sbci	r23, 0xFF	; 255
     a70:	8f 4f       	sbci	r24, 0xFF	; 255
     a72:	9f 4f       	sbci	r25, 0xFF	; 255
     a74:	16 c0       	rjmp	.+44     	; 0xaa2 <__floatsisf+0x6c>
     a76:	88 23       	and	r24, r24
     a78:	11 f0       	breq	.+4      	; 0xa7e <__floatsisf+0x48>
     a7a:	96 e9       	ldi	r25, 0x96	; 150
     a7c:	11 c0       	rjmp	.+34     	; 0xaa0 <__floatsisf+0x6a>
     a7e:	77 23       	and	r23, r23
     a80:	21 f0       	breq	.+8      	; 0xa8a <__floatsisf+0x54>
     a82:	9e e8       	ldi	r25, 0x8E	; 142
     a84:	87 2f       	mov	r24, r23
     a86:	76 2f       	mov	r23, r22
     a88:	05 c0       	rjmp	.+10     	; 0xa94 <__floatsisf+0x5e>
     a8a:	66 23       	and	r22, r22
     a8c:	71 f0       	breq	.+28     	; 0xaaa <__floatsisf+0x74>
     a8e:	96 e8       	ldi	r25, 0x86	; 134
     a90:	86 2f       	mov	r24, r22
     a92:	70 e0       	ldi	r23, 0x00	; 0
     a94:	60 e0       	ldi	r22, 0x00	; 0
     a96:	2a f0       	brmi	.+10     	; 0xaa2 <__floatsisf+0x6c>
     a98:	9a 95       	dec	r25
     a9a:	66 0f       	add	r22, r22
     a9c:	77 1f       	adc	r23, r23
     a9e:	88 1f       	adc	r24, r24
     aa0:	da f7       	brpl	.-10     	; 0xa98 <__floatsisf+0x62>
     aa2:	88 0f       	add	r24, r24
     aa4:	96 95       	lsr	r25
     aa6:	87 95       	ror	r24
     aa8:	97 f9       	bld	r25, 7
     aaa:	08 95       	ret

00000aac <__fp_cmp>:
     aac:	99 0f       	add	r25, r25
     aae:	00 08       	sbc	r0, r0
     ab0:	55 0f       	add	r21, r21
     ab2:	aa 0b       	sbc	r26, r26
     ab4:	e0 e8       	ldi	r30, 0x80	; 128
     ab6:	fe ef       	ldi	r31, 0xFE	; 254
     ab8:	16 16       	cp	r1, r22
     aba:	17 06       	cpc	r1, r23
     abc:	e8 07       	cpc	r30, r24
     abe:	f9 07       	cpc	r31, r25
     ac0:	c0 f0       	brcs	.+48     	; 0xaf2 <__fp_cmp+0x46>
     ac2:	12 16       	cp	r1, r18
     ac4:	13 06       	cpc	r1, r19
     ac6:	e4 07       	cpc	r30, r20
     ac8:	f5 07       	cpc	r31, r21
     aca:	98 f0       	brcs	.+38     	; 0xaf2 <__fp_cmp+0x46>
     acc:	62 1b       	sub	r22, r18
     ace:	73 0b       	sbc	r23, r19
     ad0:	84 0b       	sbc	r24, r20
     ad2:	95 0b       	sbc	r25, r21
     ad4:	39 f4       	brne	.+14     	; 0xae4 <__fp_cmp+0x38>
     ad6:	0a 26       	eor	r0, r26
     ad8:	61 f0       	breq	.+24     	; 0xaf2 <__fp_cmp+0x46>
     ada:	23 2b       	or	r18, r19
     adc:	24 2b       	or	r18, r20
     ade:	25 2b       	or	r18, r21
     ae0:	21 f4       	brne	.+8      	; 0xaea <__fp_cmp+0x3e>
     ae2:	08 95       	ret
     ae4:	0a 26       	eor	r0, r26
     ae6:	09 f4       	brne	.+2      	; 0xaea <__fp_cmp+0x3e>
     ae8:	a1 40       	sbci	r26, 0x01	; 1
     aea:	a6 95       	lsr	r26
     aec:	8f ef       	ldi	r24, 0xFF	; 255
     aee:	81 1d       	adc	r24, r1
     af0:	81 1d       	adc	r24, r1
     af2:	08 95       	ret

00000af4 <__fp_inf>:
     af4:	97 f9       	bld	r25, 7
     af6:	9f 67       	ori	r25, 0x7F	; 127
     af8:	80 e8       	ldi	r24, 0x80	; 128
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	60 e0       	ldi	r22, 0x00	; 0
     afe:	08 95       	ret

00000b00 <__fp_nan>:
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	80 ec       	ldi	r24, 0xC0	; 192
     b04:	08 95       	ret

00000b06 <__fp_pscA>:
     b06:	00 24       	eor	r0, r0
     b08:	0a 94       	dec	r0
     b0a:	16 16       	cp	r1, r22
     b0c:	17 06       	cpc	r1, r23
     b0e:	18 06       	cpc	r1, r24
     b10:	09 06       	cpc	r0, r25
     b12:	08 95       	ret

00000b14 <__fp_pscB>:
     b14:	00 24       	eor	r0, r0
     b16:	0a 94       	dec	r0
     b18:	12 16       	cp	r1, r18
     b1a:	13 06       	cpc	r1, r19
     b1c:	14 06       	cpc	r1, r20
     b1e:	05 06       	cpc	r0, r21
     b20:	08 95       	ret

00000b22 <__fp_round>:
     b22:	09 2e       	mov	r0, r25
     b24:	03 94       	inc	r0
     b26:	00 0c       	add	r0, r0
     b28:	11 f4       	brne	.+4      	; 0xb2e <__fp_round+0xc>
     b2a:	88 23       	and	r24, r24
     b2c:	52 f0       	brmi	.+20     	; 0xb42 <__fp_round+0x20>
     b2e:	bb 0f       	add	r27, r27
     b30:	40 f4       	brcc	.+16     	; 0xb42 <__fp_round+0x20>
     b32:	bf 2b       	or	r27, r31
     b34:	11 f4       	brne	.+4      	; 0xb3a <__fp_round+0x18>
     b36:	60 ff       	sbrs	r22, 0
     b38:	04 c0       	rjmp	.+8      	; 0xb42 <__fp_round+0x20>
     b3a:	6f 5f       	subi	r22, 0xFF	; 255
     b3c:	7f 4f       	sbci	r23, 0xFF	; 255
     b3e:	8f 4f       	sbci	r24, 0xFF	; 255
     b40:	9f 4f       	sbci	r25, 0xFF	; 255
     b42:	08 95       	ret

00000b44 <__fp_split3>:
     b44:	57 fd       	sbrc	r21, 7
     b46:	90 58       	subi	r25, 0x80	; 128
     b48:	44 0f       	add	r20, r20
     b4a:	55 1f       	adc	r21, r21
     b4c:	59 f0       	breq	.+22     	; 0xb64 <__fp_splitA+0x10>
     b4e:	5f 3f       	cpi	r21, 0xFF	; 255
     b50:	71 f0       	breq	.+28     	; 0xb6e <__fp_splitA+0x1a>
     b52:	47 95       	ror	r20

00000b54 <__fp_splitA>:
     b54:	88 0f       	add	r24, r24
     b56:	97 fb       	bst	r25, 7
     b58:	99 1f       	adc	r25, r25
     b5a:	61 f0       	breq	.+24     	; 0xb74 <__fp_splitA+0x20>
     b5c:	9f 3f       	cpi	r25, 0xFF	; 255
     b5e:	79 f0       	breq	.+30     	; 0xb7e <__fp_splitA+0x2a>
     b60:	87 95       	ror	r24
     b62:	08 95       	ret
     b64:	12 16       	cp	r1, r18
     b66:	13 06       	cpc	r1, r19
     b68:	14 06       	cpc	r1, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	f2 cf       	rjmp	.-28     	; 0xb52 <__fp_split3+0xe>
     b6e:	46 95       	lsr	r20
     b70:	f1 df       	rcall	.-30     	; 0xb54 <__fp_splitA>
     b72:	08 c0       	rjmp	.+16     	; 0xb84 <__fp_splitA+0x30>
     b74:	16 16       	cp	r1, r22
     b76:	17 06       	cpc	r1, r23
     b78:	18 06       	cpc	r1, r24
     b7a:	99 1f       	adc	r25, r25
     b7c:	f1 cf       	rjmp	.-30     	; 0xb60 <__fp_splitA+0xc>
     b7e:	86 95       	lsr	r24
     b80:	71 05       	cpc	r23, r1
     b82:	61 05       	cpc	r22, r1
     b84:	08 94       	sec
     b86:	08 95       	ret

00000b88 <__fp_zero>:
     b88:	e8 94       	clt

00000b8a <__fp_szero>:
     b8a:	bb 27       	eor	r27, r27
     b8c:	66 27       	eor	r22, r22
     b8e:	77 27       	eor	r23, r23
     b90:	cb 01       	movw	r24, r22
     b92:	97 f9       	bld	r25, 7
     b94:	08 95       	ret

00000b96 <__gesf2>:
     b96:	0e 94 56 05 	call	0xaac	; 0xaac <__fp_cmp>
     b9a:	08 f4       	brcc	.+2      	; 0xb9e <__gesf2+0x8>
     b9c:	8f ef       	ldi	r24, 0xFF	; 255
     b9e:	08 95       	ret

00000ba0 <__mulsf3>:
     ba0:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__mulsf3x>
     ba4:	0c 94 91 05 	jmp	0xb22	; 0xb22 <__fp_round>
     ba8:	0e 94 83 05 	call	0xb06	; 0xb06 <__fp_pscA>
     bac:	38 f0       	brcs	.+14     	; 0xbbc <__mulsf3+0x1c>
     bae:	0e 94 8a 05 	call	0xb14	; 0xb14 <__fp_pscB>
     bb2:	20 f0       	brcs	.+8      	; 0xbbc <__mulsf3+0x1c>
     bb4:	95 23       	and	r25, r21
     bb6:	11 f0       	breq	.+4      	; 0xbbc <__mulsf3+0x1c>
     bb8:	0c 94 7a 05 	jmp	0xaf4	; 0xaf4 <__fp_inf>
     bbc:	0c 94 80 05 	jmp	0xb00	; 0xb00 <__fp_nan>
     bc0:	11 24       	eor	r1, r1
     bc2:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <__fp_szero>

00000bc6 <__mulsf3x>:
     bc6:	0e 94 a2 05 	call	0xb44	; 0xb44 <__fp_split3>
     bca:	70 f3       	brcs	.-36     	; 0xba8 <__mulsf3+0x8>

00000bcc <__mulsf3_pse>:
     bcc:	95 9f       	mul	r25, r21
     bce:	c1 f3       	breq	.-16     	; 0xbc0 <__mulsf3+0x20>
     bd0:	95 0f       	add	r25, r21
     bd2:	50 e0       	ldi	r21, 0x00	; 0
     bd4:	55 1f       	adc	r21, r21
     bd6:	62 9f       	mul	r22, r18
     bd8:	f0 01       	movw	r30, r0
     bda:	72 9f       	mul	r23, r18
     bdc:	bb 27       	eor	r27, r27
     bde:	f0 0d       	add	r31, r0
     be0:	b1 1d       	adc	r27, r1
     be2:	63 9f       	mul	r22, r19
     be4:	aa 27       	eor	r26, r26
     be6:	f0 0d       	add	r31, r0
     be8:	b1 1d       	adc	r27, r1
     bea:	aa 1f       	adc	r26, r26
     bec:	64 9f       	mul	r22, r20
     bee:	66 27       	eor	r22, r22
     bf0:	b0 0d       	add	r27, r0
     bf2:	a1 1d       	adc	r26, r1
     bf4:	66 1f       	adc	r22, r22
     bf6:	82 9f       	mul	r24, r18
     bf8:	22 27       	eor	r18, r18
     bfa:	b0 0d       	add	r27, r0
     bfc:	a1 1d       	adc	r26, r1
     bfe:	62 1f       	adc	r22, r18
     c00:	73 9f       	mul	r23, r19
     c02:	b0 0d       	add	r27, r0
     c04:	a1 1d       	adc	r26, r1
     c06:	62 1f       	adc	r22, r18
     c08:	83 9f       	mul	r24, r19
     c0a:	a0 0d       	add	r26, r0
     c0c:	61 1d       	adc	r22, r1
     c0e:	22 1f       	adc	r18, r18
     c10:	74 9f       	mul	r23, r20
     c12:	33 27       	eor	r19, r19
     c14:	a0 0d       	add	r26, r0
     c16:	61 1d       	adc	r22, r1
     c18:	23 1f       	adc	r18, r19
     c1a:	84 9f       	mul	r24, r20
     c1c:	60 0d       	add	r22, r0
     c1e:	21 1d       	adc	r18, r1
     c20:	82 2f       	mov	r24, r18
     c22:	76 2f       	mov	r23, r22
     c24:	6a 2f       	mov	r22, r26
     c26:	11 24       	eor	r1, r1
     c28:	9f 57       	subi	r25, 0x7F	; 127
     c2a:	50 40       	sbci	r21, 0x00	; 0
     c2c:	9a f0       	brmi	.+38     	; 0xc54 <__mulsf3_pse+0x88>
     c2e:	f1 f0       	breq	.+60     	; 0xc6c <__mulsf3_pse+0xa0>
     c30:	88 23       	and	r24, r24
     c32:	4a f0       	brmi	.+18     	; 0xc46 <__mulsf3_pse+0x7a>
     c34:	ee 0f       	add	r30, r30
     c36:	ff 1f       	adc	r31, r31
     c38:	bb 1f       	adc	r27, r27
     c3a:	66 1f       	adc	r22, r22
     c3c:	77 1f       	adc	r23, r23
     c3e:	88 1f       	adc	r24, r24
     c40:	91 50       	subi	r25, 0x01	; 1
     c42:	50 40       	sbci	r21, 0x00	; 0
     c44:	a9 f7       	brne	.-22     	; 0xc30 <__mulsf3_pse+0x64>
     c46:	9e 3f       	cpi	r25, 0xFE	; 254
     c48:	51 05       	cpc	r21, r1
     c4a:	80 f0       	brcs	.+32     	; 0xc6c <__mulsf3_pse+0xa0>
     c4c:	0c 94 7a 05 	jmp	0xaf4	; 0xaf4 <__fp_inf>
     c50:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <__fp_szero>
     c54:	5f 3f       	cpi	r21, 0xFF	; 255
     c56:	e4 f3       	brlt	.-8      	; 0xc50 <__mulsf3_pse+0x84>
     c58:	98 3e       	cpi	r25, 0xE8	; 232
     c5a:	d4 f3       	brlt	.-12     	; 0xc50 <__mulsf3_pse+0x84>
     c5c:	86 95       	lsr	r24
     c5e:	77 95       	ror	r23
     c60:	67 95       	ror	r22
     c62:	b7 95       	ror	r27
     c64:	f7 95       	ror	r31
     c66:	e7 95       	ror	r30
     c68:	9f 5f       	subi	r25, 0xFF	; 255
     c6a:	c1 f7       	brne	.-16     	; 0xc5c <__mulsf3_pse+0x90>
     c6c:	fe 2b       	or	r31, r30
     c6e:	88 0f       	add	r24, r24
     c70:	91 1d       	adc	r25, r1
     c72:	96 95       	lsr	r25
     c74:	87 95       	ror	r24
     c76:	97 f9       	bld	r25, 7
     c78:	08 95       	ret

00000c7a <vfprintf>:
     c7a:	a3 e1       	ldi	r26, 0x13	; 19
     c7c:	b0 e0       	ldi	r27, 0x00	; 0
     c7e:	e3 e4       	ldi	r30, 0x43	; 67
     c80:	f6 e0       	ldi	r31, 0x06	; 6
     c82:	0c 94 db 09 	jmp	0x13b6	; 0x13b6 <__prologue_saves__>
     c86:	6c 01       	movw	r12, r24
     c88:	4b 01       	movw	r8, r22
     c8a:	2a 01       	movw	r4, r20
     c8c:	fc 01       	movw	r30, r24
     c8e:	17 82       	std	Z+7, r1	; 0x07
     c90:	16 82       	std	Z+6, r1	; 0x06
     c92:	83 81       	ldd	r24, Z+3	; 0x03
     c94:	81 ff       	sbrs	r24, 1
     c96:	43 c3       	rjmp	.+1670   	; 0x131e <vfprintf+0x6a4>
     c98:	ae 01       	movw	r20, r28
     c9a:	4f 5f       	subi	r20, 0xFF	; 255
     c9c:	5f 4f       	sbci	r21, 0xFF	; 255
     c9e:	3a 01       	movw	r6, r20
     ca0:	f6 01       	movw	r30, r12
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	f4 01       	movw	r30, r8
     ca6:	93 fd       	sbrc	r25, 3
     ca8:	85 91       	lpm	r24, Z+
     caa:	93 ff       	sbrs	r25, 3
     cac:	81 91       	ld	r24, Z+
     cae:	4f 01       	movw	r8, r30
     cb0:	88 23       	and	r24, r24
     cb2:	09 f4       	brne	.+2      	; 0xcb6 <vfprintf+0x3c>
     cb4:	30 c3       	rjmp	.+1632   	; 0x1316 <vfprintf+0x69c>
     cb6:	85 32       	cpi	r24, 0x25	; 37
     cb8:	39 f4       	brne	.+14     	; 0xcc8 <vfprintf+0x4e>
     cba:	93 fd       	sbrc	r25, 3
     cbc:	85 91       	lpm	r24, Z+
     cbe:	93 ff       	sbrs	r25, 3
     cc0:	81 91       	ld	r24, Z+
     cc2:	4f 01       	movw	r8, r30
     cc4:	85 32       	cpi	r24, 0x25	; 37
     cc6:	39 f4       	brne	.+14     	; 0xcd6 <vfprintf+0x5c>
     cc8:	b6 01       	movw	r22, r12
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	0e 94 11 0b 	call	0x1622	; 0x1622 <fputc>
     cd0:	52 01       	movw	r10, r4
     cd2:	25 01       	movw	r4, r10
     cd4:	e5 cf       	rjmp	.-54     	; 0xca0 <vfprintf+0x26>
     cd6:	10 e0       	ldi	r17, 0x00	; 0
     cd8:	f1 2c       	mov	r15, r1
     cda:	20 e0       	ldi	r18, 0x00	; 0
     cdc:	20 32       	cpi	r18, 0x20	; 32
     cde:	a0 f4       	brcc	.+40     	; 0xd08 <vfprintf+0x8e>
     ce0:	8b 32       	cpi	r24, 0x2B	; 43
     ce2:	69 f0       	breq	.+26     	; 0xcfe <vfprintf+0x84>
     ce4:	30 f4       	brcc	.+12     	; 0xcf2 <vfprintf+0x78>
     ce6:	80 32       	cpi	r24, 0x20	; 32
     ce8:	59 f0       	breq	.+22     	; 0xd00 <vfprintf+0x86>
     cea:	83 32       	cpi	r24, 0x23	; 35
     cec:	69 f4       	brne	.+26     	; 0xd08 <vfprintf+0x8e>
     cee:	20 61       	ori	r18, 0x10	; 16
     cf0:	2c c0       	rjmp	.+88     	; 0xd4a <vfprintf+0xd0>
     cf2:	8d 32       	cpi	r24, 0x2D	; 45
     cf4:	39 f0       	breq	.+14     	; 0xd04 <vfprintf+0x8a>
     cf6:	80 33       	cpi	r24, 0x30	; 48
     cf8:	39 f4       	brne	.+14     	; 0xd08 <vfprintf+0x8e>
     cfa:	21 60       	ori	r18, 0x01	; 1
     cfc:	26 c0       	rjmp	.+76     	; 0xd4a <vfprintf+0xd0>
     cfe:	22 60       	ori	r18, 0x02	; 2
     d00:	24 60       	ori	r18, 0x04	; 4
     d02:	23 c0       	rjmp	.+70     	; 0xd4a <vfprintf+0xd0>
     d04:	28 60       	ori	r18, 0x08	; 8
     d06:	21 c0       	rjmp	.+66     	; 0xd4a <vfprintf+0xd0>
     d08:	27 fd       	sbrc	r18, 7
     d0a:	27 c0       	rjmp	.+78     	; 0xd5a <vfprintf+0xe0>
     d0c:	30 ed       	ldi	r19, 0xD0	; 208
     d0e:	38 0f       	add	r19, r24
     d10:	3a 30       	cpi	r19, 0x0A	; 10
     d12:	78 f4       	brcc	.+30     	; 0xd32 <vfprintf+0xb8>
     d14:	26 ff       	sbrs	r18, 6
     d16:	06 c0       	rjmp	.+12     	; 0xd24 <vfprintf+0xaa>
     d18:	fa e0       	ldi	r31, 0x0A	; 10
     d1a:	1f 9f       	mul	r17, r31
     d1c:	30 0d       	add	r19, r0
     d1e:	11 24       	eor	r1, r1
     d20:	13 2f       	mov	r17, r19
     d22:	13 c0       	rjmp	.+38     	; 0xd4a <vfprintf+0xd0>
     d24:	4a e0       	ldi	r20, 0x0A	; 10
     d26:	f4 9e       	mul	r15, r20
     d28:	30 0d       	add	r19, r0
     d2a:	11 24       	eor	r1, r1
     d2c:	f3 2e       	mov	r15, r19
     d2e:	20 62       	ori	r18, 0x20	; 32
     d30:	0c c0       	rjmp	.+24     	; 0xd4a <vfprintf+0xd0>
     d32:	8e 32       	cpi	r24, 0x2E	; 46
     d34:	21 f4       	brne	.+8      	; 0xd3e <vfprintf+0xc4>
     d36:	26 fd       	sbrc	r18, 6
     d38:	ee c2       	rjmp	.+1500   	; 0x1316 <vfprintf+0x69c>
     d3a:	20 64       	ori	r18, 0x40	; 64
     d3c:	06 c0       	rjmp	.+12     	; 0xd4a <vfprintf+0xd0>
     d3e:	8c 36       	cpi	r24, 0x6C	; 108
     d40:	11 f4       	brne	.+4      	; 0xd46 <vfprintf+0xcc>
     d42:	20 68       	ori	r18, 0x80	; 128
     d44:	02 c0       	rjmp	.+4      	; 0xd4a <vfprintf+0xd0>
     d46:	88 36       	cpi	r24, 0x68	; 104
     d48:	41 f4       	brne	.+16     	; 0xd5a <vfprintf+0xe0>
     d4a:	f4 01       	movw	r30, r8
     d4c:	93 fd       	sbrc	r25, 3
     d4e:	85 91       	lpm	r24, Z+
     d50:	93 ff       	sbrs	r25, 3
     d52:	81 91       	ld	r24, Z+
     d54:	4f 01       	movw	r8, r30
     d56:	81 11       	cpse	r24, r1
     d58:	c1 cf       	rjmp	.-126    	; 0xcdc <vfprintf+0x62>
     d5a:	9b eb       	ldi	r25, 0xBB	; 187
     d5c:	98 0f       	add	r25, r24
     d5e:	93 30       	cpi	r25, 0x03	; 3
     d60:	18 f4       	brcc	.+6      	; 0xd68 <vfprintf+0xee>
     d62:	20 61       	ori	r18, 0x10	; 16
     d64:	80 5e       	subi	r24, 0xE0	; 224
     d66:	06 c0       	rjmp	.+12     	; 0xd74 <vfprintf+0xfa>
     d68:	9b e9       	ldi	r25, 0x9B	; 155
     d6a:	98 0f       	add	r25, r24
     d6c:	93 30       	cpi	r25, 0x03	; 3
     d6e:	08 f0       	brcs	.+2      	; 0xd72 <vfprintf+0xf8>
     d70:	71 c1       	rjmp	.+738    	; 0x1054 <vfprintf+0x3da>
     d72:	2f 7e       	andi	r18, 0xEF	; 239
     d74:	26 ff       	sbrs	r18, 6
     d76:	16 e0       	ldi	r17, 0x06	; 6
     d78:	2f 73       	andi	r18, 0x3F	; 63
     d7a:	32 2e       	mov	r3, r18
     d7c:	85 36       	cpi	r24, 0x65	; 101
     d7e:	19 f4       	brne	.+6      	; 0xd86 <vfprintf+0x10c>
     d80:	20 64       	ori	r18, 0x40	; 64
     d82:	32 2e       	mov	r3, r18
     d84:	08 c0       	rjmp	.+16     	; 0xd96 <vfprintf+0x11c>
     d86:	86 36       	cpi	r24, 0x66	; 102
     d88:	21 f4       	brne	.+8      	; 0xd92 <vfprintf+0x118>
     d8a:	f2 2f       	mov	r31, r18
     d8c:	f0 68       	ori	r31, 0x80	; 128
     d8e:	3f 2e       	mov	r3, r31
     d90:	02 c0       	rjmp	.+4      	; 0xd96 <vfprintf+0x11c>
     d92:	11 11       	cpse	r17, r1
     d94:	11 50       	subi	r17, 0x01	; 1
     d96:	37 fe       	sbrs	r3, 7
     d98:	07 c0       	rjmp	.+14     	; 0xda8 <vfprintf+0x12e>
     d9a:	1c 33       	cpi	r17, 0x3C	; 60
     d9c:	50 f4       	brcc	.+20     	; 0xdb2 <vfprintf+0x138>
     d9e:	ee 24       	eor	r14, r14
     da0:	e3 94       	inc	r14
     da2:	e1 0e       	add	r14, r17
     da4:	27 e0       	ldi	r18, 0x07	; 7
     da6:	0b c0       	rjmp	.+22     	; 0xdbe <vfprintf+0x144>
     da8:	18 30       	cpi	r17, 0x08	; 8
     daa:	38 f0       	brcs	.+14     	; 0xdba <vfprintf+0x140>
     dac:	27 e0       	ldi	r18, 0x07	; 7
     dae:	17 e0       	ldi	r17, 0x07	; 7
     db0:	05 c0       	rjmp	.+10     	; 0xdbc <vfprintf+0x142>
     db2:	27 e0       	ldi	r18, 0x07	; 7
     db4:	4c e3       	ldi	r20, 0x3C	; 60
     db6:	e4 2e       	mov	r14, r20
     db8:	02 c0       	rjmp	.+4      	; 0xdbe <vfprintf+0x144>
     dba:	21 2f       	mov	r18, r17
     dbc:	e1 2c       	mov	r14, r1
     dbe:	52 01       	movw	r10, r4
     dc0:	44 e0       	ldi	r20, 0x04	; 4
     dc2:	a4 0e       	add	r10, r20
     dc4:	b1 1c       	adc	r11, r1
     dc6:	f2 01       	movw	r30, r4
     dc8:	60 81       	ld	r22, Z
     dca:	71 81       	ldd	r23, Z+1	; 0x01
     dcc:	82 81       	ldd	r24, Z+2	; 0x02
     dce:	93 81       	ldd	r25, Z+3	; 0x03
     dd0:	0e 2d       	mov	r16, r14
     dd2:	a3 01       	movw	r20, r6
     dd4:	0e 94 18 0a 	call	0x1430	; 0x1430 <__ftoa_engine>
     dd8:	2c 01       	movw	r4, r24
     dda:	09 81       	ldd	r16, Y+1	; 0x01
     ddc:	00 ff       	sbrs	r16, 0
     dde:	02 c0       	rjmp	.+4      	; 0xde4 <vfprintf+0x16a>
     de0:	03 ff       	sbrs	r16, 3
     de2:	07 c0       	rjmp	.+14     	; 0xdf2 <vfprintf+0x178>
     de4:	31 fc       	sbrc	r3, 1
     de6:	08 c0       	rjmp	.+16     	; 0xdf8 <vfprintf+0x17e>
     de8:	32 fe       	sbrs	r3, 2
     dea:	09 c0       	rjmp	.+18     	; 0xdfe <vfprintf+0x184>
     dec:	30 e2       	ldi	r19, 0x20	; 32
     dee:	23 2e       	mov	r2, r19
     df0:	07 c0       	rjmp	.+14     	; 0xe00 <vfprintf+0x186>
     df2:	2d e2       	ldi	r18, 0x2D	; 45
     df4:	22 2e       	mov	r2, r18
     df6:	04 c0       	rjmp	.+8      	; 0xe00 <vfprintf+0x186>
     df8:	9b e2       	ldi	r25, 0x2B	; 43
     dfa:	29 2e       	mov	r2, r25
     dfc:	01 c0       	rjmp	.+2      	; 0xe00 <vfprintf+0x186>
     dfe:	21 2c       	mov	r2, r1
     e00:	80 2f       	mov	r24, r16
     e02:	8c 70       	andi	r24, 0x0C	; 12
     e04:	19 f0       	breq	.+6      	; 0xe0c <vfprintf+0x192>
     e06:	21 10       	cpse	r2, r1
     e08:	68 c2       	rjmp	.+1232   	; 0x12da <vfprintf+0x660>
     e0a:	a8 c2       	rjmp	.+1360   	; 0x135c <vfprintf+0x6e2>
     e0c:	37 fe       	sbrs	r3, 7
     e0e:	0f c0       	rjmp	.+30     	; 0xe2e <vfprintf+0x1b4>
     e10:	e4 0c       	add	r14, r4
     e12:	04 ff       	sbrs	r16, 4
     e14:	04 c0       	rjmp	.+8      	; 0xe1e <vfprintf+0x1a4>
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	81 33       	cpi	r24, 0x31	; 49
     e1a:	09 f4       	brne	.+2      	; 0xe1e <vfprintf+0x1a4>
     e1c:	ea 94       	dec	r14
     e1e:	1e 14       	cp	r1, r14
     e20:	74 f5       	brge	.+92     	; 0xe7e <vfprintf+0x204>
     e22:	f8 e0       	ldi	r31, 0x08	; 8
     e24:	fe 15       	cp	r31, r14
     e26:	78 f5       	brcc	.+94     	; 0xe86 <vfprintf+0x20c>
     e28:	88 e0       	ldi	r24, 0x08	; 8
     e2a:	e8 2e       	mov	r14, r24
     e2c:	2c c0       	rjmp	.+88     	; 0xe86 <vfprintf+0x20c>
     e2e:	36 fc       	sbrc	r3, 6
     e30:	2a c0       	rjmp	.+84     	; 0xe86 <vfprintf+0x20c>
     e32:	81 2f       	mov	r24, r17
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	84 15       	cp	r24, r4
     e38:	95 05       	cpc	r25, r5
     e3a:	9c f0       	brlt	.+38     	; 0xe62 <vfprintf+0x1e8>
     e3c:	2c ef       	ldi	r18, 0xFC	; 252
     e3e:	42 16       	cp	r4, r18
     e40:	2f ef       	ldi	r18, 0xFF	; 255
     e42:	52 06       	cpc	r5, r18
     e44:	74 f0       	brlt	.+28     	; 0xe62 <vfprintf+0x1e8>
     e46:	43 2d       	mov	r20, r3
     e48:	40 68       	ori	r20, 0x80	; 128
     e4a:	34 2e       	mov	r3, r20
     e4c:	0a c0       	rjmp	.+20     	; 0xe62 <vfprintf+0x1e8>
     e4e:	e2 e0       	ldi	r30, 0x02	; 2
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	ec 0f       	add	r30, r28
     e54:	fd 1f       	adc	r31, r29
     e56:	e1 0f       	add	r30, r17
     e58:	f1 1d       	adc	r31, r1
     e5a:	80 81       	ld	r24, Z
     e5c:	80 33       	cpi	r24, 0x30	; 48
     e5e:	19 f4       	brne	.+6      	; 0xe66 <vfprintf+0x1ec>
     e60:	11 50       	subi	r17, 0x01	; 1
     e62:	11 11       	cpse	r17, r1
     e64:	f4 cf       	rjmp	.-24     	; 0xe4e <vfprintf+0x1d4>
     e66:	37 fe       	sbrs	r3, 7
     e68:	0e c0       	rjmp	.+28     	; 0xe86 <vfprintf+0x20c>
     e6a:	ee 24       	eor	r14, r14
     e6c:	e3 94       	inc	r14
     e6e:	e1 0e       	add	r14, r17
     e70:	81 2f       	mov	r24, r17
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	48 16       	cp	r4, r24
     e76:	59 06       	cpc	r5, r25
     e78:	2c f4       	brge	.+10     	; 0xe84 <vfprintf+0x20a>
     e7a:	14 19       	sub	r17, r4
     e7c:	04 c0       	rjmp	.+8      	; 0xe86 <vfprintf+0x20c>
     e7e:	ee 24       	eor	r14, r14
     e80:	e3 94       	inc	r14
     e82:	01 c0       	rjmp	.+2      	; 0xe86 <vfprintf+0x20c>
     e84:	10 e0       	ldi	r17, 0x00	; 0
     e86:	37 fe       	sbrs	r3, 7
     e88:	06 c0       	rjmp	.+12     	; 0xe96 <vfprintf+0x21c>
     e8a:	14 14       	cp	r1, r4
     e8c:	15 04       	cpc	r1, r5
     e8e:	34 f4       	brge	.+12     	; 0xe9c <vfprintf+0x222>
     e90:	c2 01       	movw	r24, r4
     e92:	01 96       	adiw	r24, 0x01	; 1
     e94:	05 c0       	rjmp	.+10     	; 0xea0 <vfprintf+0x226>
     e96:	85 e0       	ldi	r24, 0x05	; 5
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	02 c0       	rjmp	.+4      	; 0xea0 <vfprintf+0x226>
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	21 10       	cpse	r2, r1
     ea2:	01 96       	adiw	r24, 0x01	; 1
     ea4:	11 23       	and	r17, r17
     ea6:	31 f0       	breq	.+12     	; 0xeb4 <vfprintf+0x23a>
     ea8:	21 2f       	mov	r18, r17
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	2f 5f       	subi	r18, 0xFF	; 255
     eae:	3f 4f       	sbci	r19, 0xFF	; 255
     eb0:	82 0f       	add	r24, r18
     eb2:	93 1f       	adc	r25, r19
     eb4:	2f 2d       	mov	r18, r15
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	82 17       	cp	r24, r18
     eba:	93 07       	cpc	r25, r19
     ebc:	14 f4       	brge	.+4      	; 0xec2 <vfprintf+0x248>
     ebe:	f8 1a       	sub	r15, r24
     ec0:	01 c0       	rjmp	.+2      	; 0xec4 <vfprintf+0x24a>
     ec2:	f1 2c       	mov	r15, r1
     ec4:	83 2d       	mov	r24, r3
     ec6:	89 70       	andi	r24, 0x09	; 9
     ec8:	49 f4       	brne	.+18     	; 0xedc <vfprintf+0x262>
     eca:	ff 20       	and	r15, r15
     ecc:	39 f0       	breq	.+14     	; 0xedc <vfprintf+0x262>
     ece:	b6 01       	movw	r22, r12
     ed0:	80 e2       	ldi	r24, 0x20	; 32
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	0e 94 11 0b 	call	0x1622	; 0x1622 <fputc>
     ed8:	fa 94       	dec	r15
     eda:	f7 cf       	rjmp	.-18     	; 0xeca <vfprintf+0x250>
     edc:	22 20       	and	r2, r2
     ede:	29 f0       	breq	.+10     	; 0xeea <vfprintf+0x270>
     ee0:	b6 01       	movw	r22, r12
     ee2:	82 2d       	mov	r24, r2
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	0e 94 11 0b 	call	0x1622	; 0x1622 <fputc>
     eea:	33 fc       	sbrc	r3, 3
     eec:	09 c0       	rjmp	.+18     	; 0xf00 <vfprintf+0x286>
     eee:	ff 20       	and	r15, r15
     ef0:	39 f0       	breq	.+14     	; 0xf00 <vfprintf+0x286>
     ef2:	b6 01       	movw	r22, r12
     ef4:	80 e3       	ldi	r24, 0x30	; 48
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	0e 94 11 0b 	call	0x1622	; 0x1622 <fputc>
     efc:	fa 94       	dec	r15
     efe:	f7 cf       	rjmp	.-18     	; 0xeee <vfprintf+0x274>
     f00:	37 fe       	sbrs	r3, 7
     f02:	5a c0       	rjmp	.+180    	; 0xfb8 <vfprintf+0x33e>
     f04:	94 2d       	mov	r25, r4
     f06:	85 2d       	mov	r24, r5
     f08:	57 fe       	sbrs	r5, 7
     f0a:	02 c0       	rjmp	.+4      	; 0xf10 <vfprintf+0x296>
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	80 e0       	ldi	r24, 0x00	; 0
     f10:	29 2e       	mov	r2, r25
     f12:	38 2e       	mov	r3, r24
     f14:	20 e0       	ldi	r18, 0x00	; 0
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	a2 01       	movw	r20, r4
     f1a:	4e 19       	sub	r20, r14
     f1c:	51 09       	sbc	r21, r1
     f1e:	5d 87       	std	Y+13, r21	; 0x0d
     f20:	4c 87       	std	Y+12, r20	; 0x0c
     f22:	a2 01       	movw	r20, r4
     f24:	42 19       	sub	r20, r2
     f26:	53 09       	sbc	r21, r3
     f28:	5f 87       	std	Y+15, r21	; 0x0f
     f2a:	4e 87       	std	Y+14, r20	; 0x0e
     f2c:	61 2f       	mov	r22, r17
     f2e:	70 e0       	ldi	r23, 0x00	; 0
     f30:	44 27       	eor	r20, r20
     f32:	55 27       	eor	r21, r21
     f34:	46 1b       	sub	r20, r22
     f36:	57 0b       	sbc	r21, r23
     f38:	59 8b       	std	Y+17, r21	; 0x11
     f3a:	48 8b       	std	Y+16, r20	; 0x10
     f3c:	5f ef       	ldi	r21, 0xFF	; 255
     f3e:	25 16       	cp	r2, r21
     f40:	35 06       	cpc	r3, r21
     f42:	49 f4       	brne	.+18     	; 0xf56 <vfprintf+0x2dc>
     f44:	b6 01       	movw	r22, r12
     f46:	8e e2       	ldi	r24, 0x2E	; 46
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	2a 8b       	std	Y+18, r18	; 0x12
     f4c:	3b 8b       	std	Y+19, r19	; 0x13
     f4e:	0e 94 11 0b 	call	0x1622	; 0x1622 <fputc>
     f52:	3b 89       	ldd	r19, Y+19	; 0x13
     f54:	2a 89       	ldd	r18, Y+18	; 0x12
     f56:	42 14       	cp	r4, r2
     f58:	53 04       	cpc	r5, r3
     f5a:	6c f0       	brlt	.+26     	; 0xf76 <vfprintf+0x2fc>
     f5c:	4c 85       	ldd	r20, Y+12	; 0x0c
     f5e:	5d 85       	ldd	r21, Y+13	; 0x0d
     f60:	42 15       	cp	r20, r2
     f62:	53 05       	cpc	r21, r3
     f64:	44 f4       	brge	.+16     	; 0xf76 <vfprintf+0x2fc>
     f66:	ee 85       	ldd	r30, Y+14	; 0x0e
     f68:	ff 85       	ldd	r31, Y+15	; 0x0f
     f6a:	e2 0f       	add	r30, r18
     f6c:	f3 1f       	adc	r31, r19
     f6e:	e6 0d       	add	r30, r6
     f70:	f7 1d       	adc	r31, r7
     f72:	81 81       	ldd	r24, Z+1	; 0x01
     f74:	01 c0       	rjmp	.+2      	; 0xf78 <vfprintf+0x2fe>
     f76:	80 e3       	ldi	r24, 0x30	; 48
     f78:	51 e0       	ldi	r21, 0x01	; 1
     f7a:	25 1a       	sub	r2, r21
     f7c:	31 08       	sbc	r3, r1
     f7e:	2f 5f       	subi	r18, 0xFF	; 255
     f80:	3f 4f       	sbci	r19, 0xFF	; 255
     f82:	48 89       	ldd	r20, Y+16	; 0x10
     f84:	59 89       	ldd	r21, Y+17	; 0x11
     f86:	24 16       	cp	r2, r20
     f88:	35 06       	cpc	r3, r21
     f8a:	4c f0       	brlt	.+18     	; 0xf9e <vfprintf+0x324>
     f8c:	b6 01       	movw	r22, r12
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	2a 8b       	std	Y+18, r18	; 0x12
     f92:	3b 8b       	std	Y+19, r19	; 0x13
     f94:	0e 94 11 0b 	call	0x1622	; 0x1622 <fputc>
     f98:	2a 89       	ldd	r18, Y+18	; 0x12
     f9a:	3b 89       	ldd	r19, Y+19	; 0x13
     f9c:	cf cf       	rjmp	.-98     	; 0xf3c <vfprintf+0x2c2>
     f9e:	24 14       	cp	r2, r4
     fa0:	35 04       	cpc	r3, r5
     fa2:	39 f4       	brne	.+14     	; 0xfb2 <vfprintf+0x338>
     fa4:	9a 81       	ldd	r25, Y+2	; 0x02
     fa6:	96 33       	cpi	r25, 0x36	; 54
     fa8:	18 f4       	brcc	.+6      	; 0xfb0 <vfprintf+0x336>
     faa:	95 33       	cpi	r25, 0x35	; 53
     fac:	11 f4       	brne	.+4      	; 0xfb2 <vfprintf+0x338>
     fae:	04 ff       	sbrs	r16, 4
     fb0:	81 e3       	ldi	r24, 0x31	; 49
     fb2:	b6 01       	movw	r22, r12
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	4b c0       	rjmp	.+150    	; 0x104e <vfprintf+0x3d4>
     fb8:	8a 81       	ldd	r24, Y+2	; 0x02
     fba:	81 33       	cpi	r24, 0x31	; 49
     fbc:	09 f0       	breq	.+2      	; 0xfc0 <vfprintf+0x346>
     fbe:	0f 7e       	andi	r16, 0xEF	; 239
     fc0:	b6 01       	movw	r22, r12
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	0e 94 11 0b 	call	0x1622	; 0x1622 <fputc>
     fc8:	11 11       	cpse	r17, r1
     fca:	05 c0       	rjmp	.+10     	; 0xfd6 <vfprintf+0x35c>
     fcc:	34 fc       	sbrc	r3, 4
     fce:	18 c0       	rjmp	.+48     	; 0x1000 <vfprintf+0x386>
     fd0:	85 e6       	ldi	r24, 0x65	; 101
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	17 c0       	rjmp	.+46     	; 0x1004 <vfprintf+0x38a>
     fd6:	b6 01       	movw	r22, r12
     fd8:	8e e2       	ldi	r24, 0x2E	; 46
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	0e 94 11 0b 	call	0x1622	; 0x1622 <fputc>
     fe0:	82 e0       	ldi	r24, 0x02	; 2
     fe2:	ee 24       	eor	r14, r14
     fe4:	e3 94       	inc	r14
     fe6:	e8 0e       	add	r14, r24
     fe8:	f3 01       	movw	r30, r6
     fea:	e8 0f       	add	r30, r24
     fec:	f1 1d       	adc	r31, r1
     fee:	80 81       	ld	r24, Z
     ff0:	b6 01       	movw	r22, r12
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	0e 94 11 0b 	call	0x1622	; 0x1622 <fputc>
     ff8:	11 50       	subi	r17, 0x01	; 1
     ffa:	8e 2d       	mov	r24, r14
     ffc:	91 f7       	brne	.-28     	; 0xfe2 <vfprintf+0x368>
     ffe:	e6 cf       	rjmp	.-52     	; 0xfcc <vfprintf+0x352>
    1000:	85 e4       	ldi	r24, 0x45	; 69
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	b6 01       	movw	r22, r12
    1006:	0e 94 11 0b 	call	0x1622	; 0x1622 <fputc>
    100a:	57 fc       	sbrc	r5, 7
    100c:	05 c0       	rjmp	.+10     	; 0x1018 <vfprintf+0x39e>
    100e:	41 14       	cp	r4, r1
    1010:	51 04       	cpc	r5, r1
    1012:	39 f4       	brne	.+14     	; 0x1022 <vfprintf+0x3a8>
    1014:	04 ff       	sbrs	r16, 4
    1016:	05 c0       	rjmp	.+10     	; 0x1022 <vfprintf+0x3a8>
    1018:	51 94       	neg	r5
    101a:	41 94       	neg	r4
    101c:	51 08       	sbc	r5, r1
    101e:	8d e2       	ldi	r24, 0x2D	; 45
    1020:	01 c0       	rjmp	.+2      	; 0x1024 <vfprintf+0x3aa>
    1022:	8b e2       	ldi	r24, 0x2B	; 43
    1024:	b6 01       	movw	r22, r12
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	0e 94 11 0b 	call	0x1622	; 0x1622 <fputc>
    102c:	80 e3       	ldi	r24, 0x30	; 48
    102e:	9a e0       	ldi	r25, 0x0A	; 10
    1030:	49 16       	cp	r4, r25
    1032:	51 04       	cpc	r5, r1
    1034:	2c f0       	brlt	.+10     	; 0x1040 <vfprintf+0x3c6>
    1036:	8f 5f       	subi	r24, 0xFF	; 255
    1038:	5a e0       	ldi	r21, 0x0A	; 10
    103a:	45 1a       	sub	r4, r21
    103c:	51 08       	sbc	r5, r1
    103e:	f7 cf       	rjmp	.-18     	; 0x102e <vfprintf+0x3b4>
    1040:	b6 01       	movw	r22, r12
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	0e 94 11 0b 	call	0x1622	; 0x1622 <fputc>
    1048:	b6 01       	movw	r22, r12
    104a:	c2 01       	movw	r24, r4
    104c:	c0 96       	adiw	r24, 0x30	; 48
    104e:	0e 94 11 0b 	call	0x1622	; 0x1622 <fputc>
    1052:	57 c1       	rjmp	.+686    	; 0x1302 <vfprintf+0x688>
    1054:	83 36       	cpi	r24, 0x63	; 99
    1056:	31 f0       	breq	.+12     	; 0x1064 <vfprintf+0x3ea>
    1058:	83 37       	cpi	r24, 0x73	; 115
    105a:	79 f0       	breq	.+30     	; 0x107a <vfprintf+0x400>
    105c:	83 35       	cpi	r24, 0x53	; 83
    105e:	09 f0       	breq	.+2      	; 0x1062 <vfprintf+0x3e8>
    1060:	58 c0       	rjmp	.+176    	; 0x1112 <vfprintf+0x498>
    1062:	21 c0       	rjmp	.+66     	; 0x10a6 <vfprintf+0x42c>
    1064:	52 01       	movw	r10, r4
    1066:	e2 e0       	ldi	r30, 0x02	; 2
    1068:	ae 0e       	add	r10, r30
    106a:	b1 1c       	adc	r11, r1
    106c:	f2 01       	movw	r30, r4
    106e:	80 81       	ld	r24, Z
    1070:	89 83       	std	Y+1, r24	; 0x01
    1072:	01 e0       	ldi	r16, 0x01	; 1
    1074:	10 e0       	ldi	r17, 0x00	; 0
    1076:	23 01       	movw	r4, r6
    1078:	14 c0       	rjmp	.+40     	; 0x10a2 <vfprintf+0x428>
    107a:	52 01       	movw	r10, r4
    107c:	f2 e0       	ldi	r31, 0x02	; 2
    107e:	af 0e       	add	r10, r31
    1080:	b1 1c       	adc	r11, r1
    1082:	f2 01       	movw	r30, r4
    1084:	40 80       	ld	r4, Z
    1086:	51 80       	ldd	r5, Z+1	; 0x01
    1088:	26 ff       	sbrs	r18, 6
    108a:	03 c0       	rjmp	.+6      	; 0x1092 <vfprintf+0x418>
    108c:	61 2f       	mov	r22, r17
    108e:	70 e0       	ldi	r23, 0x00	; 0
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <vfprintf+0x41c>
    1092:	6f ef       	ldi	r22, 0xFF	; 255
    1094:	7f ef       	ldi	r23, 0xFF	; 255
    1096:	c2 01       	movw	r24, r4
    1098:	2a 8b       	std	Y+18, r18	; 0x12
    109a:	0e 94 06 0b 	call	0x160c	; 0x160c <strnlen>
    109e:	8c 01       	movw	r16, r24
    10a0:	2a 89       	ldd	r18, Y+18	; 0x12
    10a2:	2f 77       	andi	r18, 0x7F	; 127
    10a4:	15 c0       	rjmp	.+42     	; 0x10d0 <vfprintf+0x456>
    10a6:	52 01       	movw	r10, r4
    10a8:	f2 e0       	ldi	r31, 0x02	; 2
    10aa:	af 0e       	add	r10, r31
    10ac:	b1 1c       	adc	r11, r1
    10ae:	f2 01       	movw	r30, r4
    10b0:	40 80       	ld	r4, Z
    10b2:	51 80       	ldd	r5, Z+1	; 0x01
    10b4:	26 ff       	sbrs	r18, 6
    10b6:	03 c0       	rjmp	.+6      	; 0x10be <vfprintf+0x444>
    10b8:	61 2f       	mov	r22, r17
    10ba:	70 e0       	ldi	r23, 0x00	; 0
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <vfprintf+0x448>
    10be:	6f ef       	ldi	r22, 0xFF	; 255
    10c0:	7f ef       	ldi	r23, 0xFF	; 255
    10c2:	c2 01       	movw	r24, r4
    10c4:	2a 8b       	std	Y+18, r18	; 0x12
    10c6:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <strnlen_P>
    10ca:	8c 01       	movw	r16, r24
    10cc:	2a 89       	ldd	r18, Y+18	; 0x12
    10ce:	20 68       	ori	r18, 0x80	; 128
    10d0:	32 2e       	mov	r3, r18
    10d2:	23 fd       	sbrc	r18, 3
    10d4:	1a c0       	rjmp	.+52     	; 0x110a <vfprintf+0x490>
    10d6:	8f 2d       	mov	r24, r15
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	08 17       	cp	r16, r24
    10dc:	19 07       	cpc	r17, r25
    10de:	a8 f4       	brcc	.+42     	; 0x110a <vfprintf+0x490>
    10e0:	b6 01       	movw	r22, r12
    10e2:	80 e2       	ldi	r24, 0x20	; 32
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	0e 94 11 0b 	call	0x1622	; 0x1622 <fputc>
    10ea:	fa 94       	dec	r15
    10ec:	f4 cf       	rjmp	.-24     	; 0x10d6 <vfprintf+0x45c>
    10ee:	f2 01       	movw	r30, r4
    10f0:	37 fc       	sbrc	r3, 7
    10f2:	85 91       	lpm	r24, Z+
    10f4:	37 fe       	sbrs	r3, 7
    10f6:	81 91       	ld	r24, Z+
    10f8:	2f 01       	movw	r4, r30
    10fa:	b6 01       	movw	r22, r12
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	0e 94 11 0b 	call	0x1622	; 0x1622 <fputc>
    1102:	f1 10       	cpse	r15, r1
    1104:	fa 94       	dec	r15
    1106:	01 50       	subi	r16, 0x01	; 1
    1108:	11 09       	sbc	r17, r1
    110a:	01 15       	cp	r16, r1
    110c:	11 05       	cpc	r17, r1
    110e:	79 f7       	brne	.-34     	; 0x10ee <vfprintf+0x474>
    1110:	f8 c0       	rjmp	.+496    	; 0x1302 <vfprintf+0x688>
    1112:	84 36       	cpi	r24, 0x64	; 100
    1114:	11 f0       	breq	.+4      	; 0x111a <vfprintf+0x4a0>
    1116:	89 36       	cpi	r24, 0x69	; 105
    1118:	59 f5       	brne	.+86     	; 0x1170 <vfprintf+0x4f6>
    111a:	52 01       	movw	r10, r4
    111c:	27 ff       	sbrs	r18, 7
    111e:	09 c0       	rjmp	.+18     	; 0x1132 <vfprintf+0x4b8>
    1120:	f4 e0       	ldi	r31, 0x04	; 4
    1122:	af 0e       	add	r10, r31
    1124:	b1 1c       	adc	r11, r1
    1126:	f2 01       	movw	r30, r4
    1128:	60 81       	ld	r22, Z
    112a:	71 81       	ldd	r23, Z+1	; 0x01
    112c:	82 81       	ldd	r24, Z+2	; 0x02
    112e:	93 81       	ldd	r25, Z+3	; 0x03
    1130:	0a c0       	rjmp	.+20     	; 0x1146 <vfprintf+0x4cc>
    1132:	f2 e0       	ldi	r31, 0x02	; 2
    1134:	af 0e       	add	r10, r31
    1136:	b1 1c       	adc	r11, r1
    1138:	f2 01       	movw	r30, r4
    113a:	60 81       	ld	r22, Z
    113c:	71 81       	ldd	r23, Z+1	; 0x01
    113e:	07 2e       	mov	r0, r23
    1140:	00 0c       	add	r0, r0
    1142:	88 0b       	sbc	r24, r24
    1144:	99 0b       	sbc	r25, r25
    1146:	2f 76       	andi	r18, 0x6F	; 111
    1148:	32 2e       	mov	r3, r18
    114a:	97 ff       	sbrs	r25, 7
    114c:	09 c0       	rjmp	.+18     	; 0x1160 <vfprintf+0x4e6>
    114e:	90 95       	com	r25
    1150:	80 95       	com	r24
    1152:	70 95       	com	r23
    1154:	61 95       	neg	r22
    1156:	7f 4f       	sbci	r23, 0xFF	; 255
    1158:	8f 4f       	sbci	r24, 0xFF	; 255
    115a:	9f 4f       	sbci	r25, 0xFF	; 255
    115c:	20 68       	ori	r18, 0x80	; 128
    115e:	32 2e       	mov	r3, r18
    1160:	2a e0       	ldi	r18, 0x0A	; 10
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	a3 01       	movw	r20, r6
    1166:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <__ultoa_invert>
    116a:	e8 2e       	mov	r14, r24
    116c:	e6 18       	sub	r14, r6
    116e:	3f c0       	rjmp	.+126    	; 0x11ee <vfprintf+0x574>
    1170:	02 2f       	mov	r16, r18
    1172:	85 37       	cpi	r24, 0x75	; 117
    1174:	21 f4       	brne	.+8      	; 0x117e <vfprintf+0x504>
    1176:	0f 7e       	andi	r16, 0xEF	; 239
    1178:	2a e0       	ldi	r18, 0x0A	; 10
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	1d c0       	rjmp	.+58     	; 0x11b8 <vfprintf+0x53e>
    117e:	09 7f       	andi	r16, 0xF9	; 249
    1180:	8f 36       	cpi	r24, 0x6F	; 111
    1182:	91 f0       	breq	.+36     	; 0x11a8 <vfprintf+0x52e>
    1184:	18 f4       	brcc	.+6      	; 0x118c <vfprintf+0x512>
    1186:	88 35       	cpi	r24, 0x58	; 88
    1188:	59 f0       	breq	.+22     	; 0x11a0 <vfprintf+0x526>
    118a:	c5 c0       	rjmp	.+394    	; 0x1316 <vfprintf+0x69c>
    118c:	80 37       	cpi	r24, 0x70	; 112
    118e:	19 f0       	breq	.+6      	; 0x1196 <vfprintf+0x51c>
    1190:	88 37       	cpi	r24, 0x78	; 120
    1192:	11 f0       	breq	.+4      	; 0x1198 <vfprintf+0x51e>
    1194:	c0 c0       	rjmp	.+384    	; 0x1316 <vfprintf+0x69c>
    1196:	00 61       	ori	r16, 0x10	; 16
    1198:	04 ff       	sbrs	r16, 4
    119a:	09 c0       	rjmp	.+18     	; 0x11ae <vfprintf+0x534>
    119c:	04 60       	ori	r16, 0x04	; 4
    119e:	07 c0       	rjmp	.+14     	; 0x11ae <vfprintf+0x534>
    11a0:	24 ff       	sbrs	r18, 4
    11a2:	08 c0       	rjmp	.+16     	; 0x11b4 <vfprintf+0x53a>
    11a4:	06 60       	ori	r16, 0x06	; 6
    11a6:	06 c0       	rjmp	.+12     	; 0x11b4 <vfprintf+0x53a>
    11a8:	28 e0       	ldi	r18, 0x08	; 8
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	05 c0       	rjmp	.+10     	; 0x11b8 <vfprintf+0x53e>
    11ae:	20 e1       	ldi	r18, 0x10	; 16
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <vfprintf+0x53e>
    11b4:	20 e1       	ldi	r18, 0x10	; 16
    11b6:	32 e0       	ldi	r19, 0x02	; 2
    11b8:	52 01       	movw	r10, r4
    11ba:	07 ff       	sbrs	r16, 7
    11bc:	09 c0       	rjmp	.+18     	; 0x11d0 <vfprintf+0x556>
    11be:	f4 e0       	ldi	r31, 0x04	; 4
    11c0:	af 0e       	add	r10, r31
    11c2:	b1 1c       	adc	r11, r1
    11c4:	f2 01       	movw	r30, r4
    11c6:	60 81       	ld	r22, Z
    11c8:	71 81       	ldd	r23, Z+1	; 0x01
    11ca:	82 81       	ldd	r24, Z+2	; 0x02
    11cc:	93 81       	ldd	r25, Z+3	; 0x03
    11ce:	08 c0       	rjmp	.+16     	; 0x11e0 <vfprintf+0x566>
    11d0:	f2 e0       	ldi	r31, 0x02	; 2
    11d2:	af 0e       	add	r10, r31
    11d4:	b1 1c       	adc	r11, r1
    11d6:	f2 01       	movw	r30, r4
    11d8:	60 81       	ld	r22, Z
    11da:	71 81       	ldd	r23, Z+1	; 0x01
    11dc:	80 e0       	ldi	r24, 0x00	; 0
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	a3 01       	movw	r20, r6
    11e2:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <__ultoa_invert>
    11e6:	e8 2e       	mov	r14, r24
    11e8:	e6 18       	sub	r14, r6
    11ea:	0f 77       	andi	r16, 0x7F	; 127
    11ec:	30 2e       	mov	r3, r16
    11ee:	36 fe       	sbrs	r3, 6
    11f0:	0b c0       	rjmp	.+22     	; 0x1208 <vfprintf+0x58e>
    11f2:	33 2d       	mov	r19, r3
    11f4:	3e 7f       	andi	r19, 0xFE	; 254
    11f6:	e1 16       	cp	r14, r17
    11f8:	50 f4       	brcc	.+20     	; 0x120e <vfprintf+0x594>
    11fa:	34 fe       	sbrs	r3, 4
    11fc:	0a c0       	rjmp	.+20     	; 0x1212 <vfprintf+0x598>
    11fe:	32 fc       	sbrc	r3, 2
    1200:	08 c0       	rjmp	.+16     	; 0x1212 <vfprintf+0x598>
    1202:	33 2d       	mov	r19, r3
    1204:	3e 7e       	andi	r19, 0xEE	; 238
    1206:	05 c0       	rjmp	.+10     	; 0x1212 <vfprintf+0x598>
    1208:	0e 2d       	mov	r16, r14
    120a:	33 2d       	mov	r19, r3
    120c:	03 c0       	rjmp	.+6      	; 0x1214 <vfprintf+0x59a>
    120e:	0e 2d       	mov	r16, r14
    1210:	01 c0       	rjmp	.+2      	; 0x1214 <vfprintf+0x59a>
    1212:	01 2f       	mov	r16, r17
    1214:	34 ff       	sbrs	r19, 4
    1216:	0c c0       	rjmp	.+24     	; 0x1230 <vfprintf+0x5b6>
    1218:	fe 01       	movw	r30, r28
    121a:	ee 0d       	add	r30, r14
    121c:	f1 1d       	adc	r31, r1
    121e:	80 81       	ld	r24, Z
    1220:	80 33       	cpi	r24, 0x30	; 48
    1222:	11 f4       	brne	.+4      	; 0x1228 <vfprintf+0x5ae>
    1224:	39 7e       	andi	r19, 0xE9	; 233
    1226:	08 c0       	rjmp	.+16     	; 0x1238 <vfprintf+0x5be>
    1228:	32 ff       	sbrs	r19, 2
    122a:	05 c0       	rjmp	.+10     	; 0x1236 <vfprintf+0x5bc>
    122c:	0e 5f       	subi	r16, 0xFE	; 254
    122e:	04 c0       	rjmp	.+8      	; 0x1238 <vfprintf+0x5be>
    1230:	83 2f       	mov	r24, r19
    1232:	86 78       	andi	r24, 0x86	; 134
    1234:	09 f0       	breq	.+2      	; 0x1238 <vfprintf+0x5be>
    1236:	0f 5f       	subi	r16, 0xFF	; 255
    1238:	33 fd       	sbrc	r19, 3
    123a:	13 c0       	rjmp	.+38     	; 0x1262 <vfprintf+0x5e8>
    123c:	30 ff       	sbrs	r19, 0
    123e:	06 c0       	rjmp	.+12     	; 0x124c <vfprintf+0x5d2>
    1240:	1e 2d       	mov	r17, r14
    1242:	0f 15       	cp	r16, r15
    1244:	18 f4       	brcc	.+6      	; 0x124c <vfprintf+0x5d2>
    1246:	1f 0d       	add	r17, r15
    1248:	10 1b       	sub	r17, r16
    124a:	0f 2d       	mov	r16, r15
    124c:	0f 15       	cp	r16, r15
    124e:	68 f4       	brcc	.+26     	; 0x126a <vfprintf+0x5f0>
    1250:	b6 01       	movw	r22, r12
    1252:	80 e2       	ldi	r24, 0x20	; 32
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	3b 8b       	std	Y+19, r19	; 0x13
    1258:	0e 94 11 0b 	call	0x1622	; 0x1622 <fputc>
    125c:	0f 5f       	subi	r16, 0xFF	; 255
    125e:	3b 89       	ldd	r19, Y+19	; 0x13
    1260:	f5 cf       	rjmp	.-22     	; 0x124c <vfprintf+0x5d2>
    1262:	0f 15       	cp	r16, r15
    1264:	10 f4       	brcc	.+4      	; 0x126a <vfprintf+0x5f0>
    1266:	f0 1a       	sub	r15, r16
    1268:	01 c0       	rjmp	.+2      	; 0x126c <vfprintf+0x5f2>
    126a:	f1 2c       	mov	r15, r1
    126c:	34 ff       	sbrs	r19, 4
    126e:	12 c0       	rjmp	.+36     	; 0x1294 <vfprintf+0x61a>
    1270:	b6 01       	movw	r22, r12
    1272:	80 e3       	ldi	r24, 0x30	; 48
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	3b 8b       	std	Y+19, r19	; 0x13
    1278:	0e 94 11 0b 	call	0x1622	; 0x1622 <fputc>
    127c:	3b 89       	ldd	r19, Y+19	; 0x13
    127e:	32 ff       	sbrs	r19, 2
    1280:	17 c0       	rjmp	.+46     	; 0x12b0 <vfprintf+0x636>
    1282:	31 fd       	sbrc	r19, 1
    1284:	03 c0       	rjmp	.+6      	; 0x128c <vfprintf+0x612>
    1286:	88 e7       	ldi	r24, 0x78	; 120
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <vfprintf+0x616>
    128c:	88 e5       	ldi	r24, 0x58	; 88
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	b6 01       	movw	r22, r12
    1292:	0c c0       	rjmp	.+24     	; 0x12ac <vfprintf+0x632>
    1294:	83 2f       	mov	r24, r19
    1296:	86 78       	andi	r24, 0x86	; 134
    1298:	59 f0       	breq	.+22     	; 0x12b0 <vfprintf+0x636>
    129a:	31 ff       	sbrs	r19, 1
    129c:	02 c0       	rjmp	.+4      	; 0x12a2 <vfprintf+0x628>
    129e:	8b e2       	ldi	r24, 0x2B	; 43
    12a0:	01 c0       	rjmp	.+2      	; 0x12a4 <vfprintf+0x62a>
    12a2:	80 e2       	ldi	r24, 0x20	; 32
    12a4:	37 fd       	sbrc	r19, 7
    12a6:	8d e2       	ldi	r24, 0x2D	; 45
    12a8:	b6 01       	movw	r22, r12
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	0e 94 11 0b 	call	0x1622	; 0x1622 <fputc>
    12b0:	e1 16       	cp	r14, r17
    12b2:	38 f4       	brcc	.+14     	; 0x12c2 <vfprintf+0x648>
    12b4:	b6 01       	movw	r22, r12
    12b6:	80 e3       	ldi	r24, 0x30	; 48
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	0e 94 11 0b 	call	0x1622	; 0x1622 <fputc>
    12be:	11 50       	subi	r17, 0x01	; 1
    12c0:	f7 cf       	rjmp	.-18     	; 0x12b0 <vfprintf+0x636>
    12c2:	ea 94       	dec	r14
    12c4:	f3 01       	movw	r30, r6
    12c6:	ee 0d       	add	r30, r14
    12c8:	f1 1d       	adc	r31, r1
    12ca:	80 81       	ld	r24, Z
    12cc:	b6 01       	movw	r22, r12
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	0e 94 11 0b 	call	0x1622	; 0x1622 <fputc>
    12d4:	e1 10       	cpse	r14, r1
    12d6:	f5 cf       	rjmp	.-22     	; 0x12c2 <vfprintf+0x648>
    12d8:	14 c0       	rjmp	.+40     	; 0x1302 <vfprintf+0x688>
    12da:	f4 e0       	ldi	r31, 0x04	; 4
    12dc:	ff 15       	cp	r31, r15
    12de:	58 f5       	brcc	.+86     	; 0x1336 <vfprintf+0x6bc>
    12e0:	84 e0       	ldi	r24, 0x04	; 4
    12e2:	f8 1a       	sub	r15, r24
    12e4:	33 fe       	sbrs	r3, 3
    12e6:	1e c0       	rjmp	.+60     	; 0x1324 <vfprintf+0x6aa>
    12e8:	21 10       	cpse	r2, r1
    12ea:	26 c0       	rjmp	.+76     	; 0x1338 <vfprintf+0x6be>
    12ec:	03 ff       	sbrs	r16, 3
    12ee:	2a c0       	rjmp	.+84     	; 0x1344 <vfprintf+0x6ca>
    12f0:	08 e6       	ldi	r16, 0x68	; 104
    12f2:	10 e0       	ldi	r17, 0x00	; 0
    12f4:	f3 2d       	mov	r31, r3
    12f6:	f0 71       	andi	r31, 0x10	; 16
    12f8:	3f 2e       	mov	r3, r31
    12fa:	f8 01       	movw	r30, r16
    12fc:	84 91       	lpm	r24, Z
    12fe:	81 11       	cpse	r24, r1
    1300:	24 c0       	rjmp	.+72     	; 0x134a <vfprintf+0x6d0>
    1302:	ff 20       	and	r15, r15
    1304:	09 f4       	brne	.+2      	; 0x1308 <vfprintf+0x68e>
    1306:	e5 cc       	rjmp	.-1590   	; 0xcd2 <vfprintf+0x58>
    1308:	b6 01       	movw	r22, r12
    130a:	80 e2       	ldi	r24, 0x20	; 32
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	0e 94 11 0b 	call	0x1622	; 0x1622 <fputc>
    1312:	fa 94       	dec	r15
    1314:	f6 cf       	rjmp	.-20     	; 0x1302 <vfprintf+0x688>
    1316:	f6 01       	movw	r30, r12
    1318:	86 81       	ldd	r24, Z+6	; 0x06
    131a:	97 81       	ldd	r25, Z+7	; 0x07
    131c:	26 c0       	rjmp	.+76     	; 0x136a <vfprintf+0x6f0>
    131e:	8f ef       	ldi	r24, 0xFF	; 255
    1320:	9f ef       	ldi	r25, 0xFF	; 255
    1322:	23 c0       	rjmp	.+70     	; 0x136a <vfprintf+0x6f0>
    1324:	b6 01       	movw	r22, r12
    1326:	80 e2       	ldi	r24, 0x20	; 32
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	0e 94 11 0b 	call	0x1622	; 0x1622 <fputc>
    132e:	fa 94       	dec	r15
    1330:	f1 10       	cpse	r15, r1
    1332:	f8 cf       	rjmp	.-16     	; 0x1324 <vfprintf+0x6aa>
    1334:	d9 cf       	rjmp	.-78     	; 0x12e8 <vfprintf+0x66e>
    1336:	f1 2c       	mov	r15, r1
    1338:	b6 01       	movw	r22, r12
    133a:	82 2d       	mov	r24, r2
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	0e 94 11 0b 	call	0x1622	; 0x1622 <fputc>
    1342:	d4 cf       	rjmp	.-88     	; 0x12ec <vfprintf+0x672>
    1344:	0c e6       	ldi	r16, 0x6C	; 108
    1346:	10 e0       	ldi	r17, 0x00	; 0
    1348:	d5 cf       	rjmp	.-86     	; 0x12f4 <vfprintf+0x67a>
    134a:	31 10       	cpse	r3, r1
    134c:	80 52       	subi	r24, 0x20	; 32
    134e:	b6 01       	movw	r22, r12
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	0e 94 11 0b 	call	0x1622	; 0x1622 <fputc>
    1356:	0f 5f       	subi	r16, 0xFF	; 255
    1358:	1f 4f       	sbci	r17, 0xFF	; 255
    135a:	cf cf       	rjmp	.-98     	; 0x12fa <vfprintf+0x680>
    135c:	23 e0       	ldi	r18, 0x03	; 3
    135e:	2f 15       	cp	r18, r15
    1360:	10 f4       	brcc	.+4      	; 0x1366 <vfprintf+0x6ec>
    1362:	83 e0       	ldi	r24, 0x03	; 3
    1364:	be cf       	rjmp	.-132    	; 0x12e2 <vfprintf+0x668>
    1366:	f1 2c       	mov	r15, r1
    1368:	c1 cf       	rjmp	.-126    	; 0x12ec <vfprintf+0x672>
    136a:	63 96       	adiw	r28, 0x13	; 19
    136c:	e2 e1       	ldi	r30, 0x12	; 18
    136e:	0c 94 f7 09 	jmp	0x13ee	; 0x13ee <__epilogue_restores__>

00001372 <__udivmodsi4>:
    1372:	a1 e2       	ldi	r26, 0x21	; 33
    1374:	1a 2e       	mov	r1, r26
    1376:	aa 1b       	sub	r26, r26
    1378:	bb 1b       	sub	r27, r27
    137a:	fd 01       	movw	r30, r26
    137c:	0d c0       	rjmp	.+26     	; 0x1398 <__udivmodsi4_ep>

0000137e <__udivmodsi4_loop>:
    137e:	aa 1f       	adc	r26, r26
    1380:	bb 1f       	adc	r27, r27
    1382:	ee 1f       	adc	r30, r30
    1384:	ff 1f       	adc	r31, r31
    1386:	a2 17       	cp	r26, r18
    1388:	b3 07       	cpc	r27, r19
    138a:	e4 07       	cpc	r30, r20
    138c:	f5 07       	cpc	r31, r21
    138e:	20 f0       	brcs	.+8      	; 0x1398 <__udivmodsi4_ep>
    1390:	a2 1b       	sub	r26, r18
    1392:	b3 0b       	sbc	r27, r19
    1394:	e4 0b       	sbc	r30, r20
    1396:	f5 0b       	sbc	r31, r21

00001398 <__udivmodsi4_ep>:
    1398:	66 1f       	adc	r22, r22
    139a:	77 1f       	adc	r23, r23
    139c:	88 1f       	adc	r24, r24
    139e:	99 1f       	adc	r25, r25
    13a0:	1a 94       	dec	r1
    13a2:	69 f7       	brne	.-38     	; 0x137e <__udivmodsi4_loop>
    13a4:	60 95       	com	r22
    13a6:	70 95       	com	r23
    13a8:	80 95       	com	r24
    13aa:	90 95       	com	r25
    13ac:	9b 01       	movw	r18, r22
    13ae:	ac 01       	movw	r20, r24
    13b0:	bd 01       	movw	r22, r26
    13b2:	cf 01       	movw	r24, r30
    13b4:	08 95       	ret

000013b6 <__prologue_saves__>:
    13b6:	2f 92       	push	r2
    13b8:	3f 92       	push	r3
    13ba:	4f 92       	push	r4
    13bc:	5f 92       	push	r5
    13be:	6f 92       	push	r6
    13c0:	7f 92       	push	r7
    13c2:	8f 92       	push	r8
    13c4:	9f 92       	push	r9
    13c6:	af 92       	push	r10
    13c8:	bf 92       	push	r11
    13ca:	cf 92       	push	r12
    13cc:	df 92       	push	r13
    13ce:	ef 92       	push	r14
    13d0:	ff 92       	push	r15
    13d2:	0f 93       	push	r16
    13d4:	1f 93       	push	r17
    13d6:	cf 93       	push	r28
    13d8:	df 93       	push	r29
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
    13de:	ca 1b       	sub	r28, r26
    13e0:	db 0b       	sbc	r29, r27
    13e2:	0f b6       	in	r0, 0x3f	; 63
    13e4:	f8 94       	cli
    13e6:	de bf       	out	0x3e, r29	; 62
    13e8:	0f be       	out	0x3f, r0	; 63
    13ea:	cd bf       	out	0x3d, r28	; 61
    13ec:	09 94       	ijmp

000013ee <__epilogue_restores__>:
    13ee:	2a 88       	ldd	r2, Y+18	; 0x12
    13f0:	39 88       	ldd	r3, Y+17	; 0x11
    13f2:	48 88       	ldd	r4, Y+16	; 0x10
    13f4:	5f 84       	ldd	r5, Y+15	; 0x0f
    13f6:	6e 84       	ldd	r6, Y+14	; 0x0e
    13f8:	7d 84       	ldd	r7, Y+13	; 0x0d
    13fa:	8c 84       	ldd	r8, Y+12	; 0x0c
    13fc:	9b 84       	ldd	r9, Y+11	; 0x0b
    13fe:	aa 84       	ldd	r10, Y+10	; 0x0a
    1400:	b9 84       	ldd	r11, Y+9	; 0x09
    1402:	c8 84       	ldd	r12, Y+8	; 0x08
    1404:	df 80       	ldd	r13, Y+7	; 0x07
    1406:	ee 80       	ldd	r14, Y+6	; 0x06
    1408:	fd 80       	ldd	r15, Y+5	; 0x05
    140a:	0c 81       	ldd	r16, Y+4	; 0x04
    140c:	1b 81       	ldd	r17, Y+3	; 0x03
    140e:	aa 81       	ldd	r26, Y+2	; 0x02
    1410:	b9 81       	ldd	r27, Y+1	; 0x01
    1412:	ce 0f       	add	r28, r30
    1414:	d1 1d       	adc	r29, r1
    1416:	0f b6       	in	r0, 0x3f	; 63
    1418:	f8 94       	cli
    141a:	de bf       	out	0x3e, r29	; 62
    141c:	0f be       	out	0x3f, r0	; 63
    141e:	cd bf       	out	0x3d, r28	; 61
    1420:	ed 01       	movw	r28, r26
    1422:	08 95       	ret

00001424 <__tablejump2__>:
    1424:	ee 0f       	add	r30, r30
    1426:	ff 1f       	adc	r31, r31
    1428:	05 90       	lpm	r0, Z+
    142a:	f4 91       	lpm	r31, Z
    142c:	e0 2d       	mov	r30, r0
    142e:	09 94       	ijmp

00001430 <__ftoa_engine>:
    1430:	28 30       	cpi	r18, 0x08	; 8
    1432:	08 f0       	brcs	.+2      	; 0x1436 <__ftoa_engine+0x6>
    1434:	27 e0       	ldi	r18, 0x07	; 7
    1436:	33 27       	eor	r19, r19
    1438:	da 01       	movw	r26, r20
    143a:	99 0f       	add	r25, r25
    143c:	31 1d       	adc	r19, r1
    143e:	87 fd       	sbrc	r24, 7
    1440:	91 60       	ori	r25, 0x01	; 1
    1442:	00 96       	adiw	r24, 0x00	; 0
    1444:	61 05       	cpc	r22, r1
    1446:	71 05       	cpc	r23, r1
    1448:	39 f4       	brne	.+14     	; 0x1458 <__ftoa_engine+0x28>
    144a:	32 60       	ori	r19, 0x02	; 2
    144c:	2e 5f       	subi	r18, 0xFE	; 254
    144e:	3d 93       	st	X+, r19
    1450:	30 e3       	ldi	r19, 0x30	; 48
    1452:	2a 95       	dec	r18
    1454:	e1 f7       	brne	.-8      	; 0x144e <__ftoa_engine+0x1e>
    1456:	08 95       	ret
    1458:	9f 3f       	cpi	r25, 0xFF	; 255
    145a:	30 f0       	brcs	.+12     	; 0x1468 <__ftoa_engine+0x38>
    145c:	80 38       	cpi	r24, 0x80	; 128
    145e:	71 05       	cpc	r23, r1
    1460:	61 05       	cpc	r22, r1
    1462:	09 f0       	breq	.+2      	; 0x1466 <__ftoa_engine+0x36>
    1464:	3c 5f       	subi	r19, 0xFC	; 252
    1466:	3c 5f       	subi	r19, 0xFC	; 252
    1468:	3d 93       	st	X+, r19
    146a:	91 30       	cpi	r25, 0x01	; 1
    146c:	08 f0       	brcs	.+2      	; 0x1470 <__ftoa_engine+0x40>
    146e:	80 68       	ori	r24, 0x80	; 128
    1470:	91 1d       	adc	r25, r1
    1472:	df 93       	push	r29
    1474:	cf 93       	push	r28
    1476:	1f 93       	push	r17
    1478:	0f 93       	push	r16
    147a:	ff 92       	push	r15
    147c:	ef 92       	push	r14
    147e:	19 2f       	mov	r17, r25
    1480:	98 7f       	andi	r25, 0xF8	; 248
    1482:	96 95       	lsr	r25
    1484:	e9 2f       	mov	r30, r25
    1486:	96 95       	lsr	r25
    1488:	96 95       	lsr	r25
    148a:	e9 0f       	add	r30, r25
    148c:	ff 27       	eor	r31, r31
    148e:	e6 53       	subi	r30, 0x36	; 54
    1490:	ff 4f       	sbci	r31, 0xFF	; 255
    1492:	99 27       	eor	r25, r25
    1494:	33 27       	eor	r19, r19
    1496:	ee 24       	eor	r14, r14
    1498:	ff 24       	eor	r15, r15
    149a:	a7 01       	movw	r20, r14
    149c:	e7 01       	movw	r28, r14
    149e:	05 90       	lpm	r0, Z+
    14a0:	08 94       	sec
    14a2:	07 94       	ror	r0
    14a4:	28 f4       	brcc	.+10     	; 0x14b0 <__ftoa_engine+0x80>
    14a6:	36 0f       	add	r19, r22
    14a8:	e7 1e       	adc	r14, r23
    14aa:	f8 1e       	adc	r15, r24
    14ac:	49 1f       	adc	r20, r25
    14ae:	51 1d       	adc	r21, r1
    14b0:	66 0f       	add	r22, r22
    14b2:	77 1f       	adc	r23, r23
    14b4:	88 1f       	adc	r24, r24
    14b6:	99 1f       	adc	r25, r25
    14b8:	06 94       	lsr	r0
    14ba:	a1 f7       	brne	.-24     	; 0x14a4 <__ftoa_engine+0x74>
    14bc:	05 90       	lpm	r0, Z+
    14be:	07 94       	ror	r0
    14c0:	28 f4       	brcc	.+10     	; 0x14cc <__ftoa_engine+0x9c>
    14c2:	e7 0e       	add	r14, r23
    14c4:	f8 1e       	adc	r15, r24
    14c6:	49 1f       	adc	r20, r25
    14c8:	56 1f       	adc	r21, r22
    14ca:	c1 1d       	adc	r28, r1
    14cc:	77 0f       	add	r23, r23
    14ce:	88 1f       	adc	r24, r24
    14d0:	99 1f       	adc	r25, r25
    14d2:	66 1f       	adc	r22, r22
    14d4:	06 94       	lsr	r0
    14d6:	a1 f7       	brne	.-24     	; 0x14c0 <__ftoa_engine+0x90>
    14d8:	05 90       	lpm	r0, Z+
    14da:	07 94       	ror	r0
    14dc:	28 f4       	brcc	.+10     	; 0x14e8 <__ftoa_engine+0xb8>
    14de:	f8 0e       	add	r15, r24
    14e0:	49 1f       	adc	r20, r25
    14e2:	56 1f       	adc	r21, r22
    14e4:	c7 1f       	adc	r28, r23
    14e6:	d1 1d       	adc	r29, r1
    14e8:	88 0f       	add	r24, r24
    14ea:	99 1f       	adc	r25, r25
    14ec:	66 1f       	adc	r22, r22
    14ee:	77 1f       	adc	r23, r23
    14f0:	06 94       	lsr	r0
    14f2:	a1 f7       	brne	.-24     	; 0x14dc <__ftoa_engine+0xac>
    14f4:	05 90       	lpm	r0, Z+
    14f6:	07 94       	ror	r0
    14f8:	20 f4       	brcc	.+8      	; 0x1502 <__ftoa_engine+0xd2>
    14fa:	49 0f       	add	r20, r25
    14fc:	56 1f       	adc	r21, r22
    14fe:	c7 1f       	adc	r28, r23
    1500:	d8 1f       	adc	r29, r24
    1502:	99 0f       	add	r25, r25
    1504:	66 1f       	adc	r22, r22
    1506:	77 1f       	adc	r23, r23
    1508:	88 1f       	adc	r24, r24
    150a:	06 94       	lsr	r0
    150c:	a9 f7       	brne	.-22     	; 0x14f8 <__ftoa_engine+0xc8>
    150e:	84 91       	lpm	r24, Z
    1510:	10 95       	com	r17
    1512:	17 70       	andi	r17, 0x07	; 7
    1514:	41 f0       	breq	.+16     	; 0x1526 <__ftoa_engine+0xf6>
    1516:	d6 95       	lsr	r29
    1518:	c7 95       	ror	r28
    151a:	57 95       	ror	r21
    151c:	47 95       	ror	r20
    151e:	f7 94       	ror	r15
    1520:	e7 94       	ror	r14
    1522:	1a 95       	dec	r17
    1524:	c1 f7       	brne	.-16     	; 0x1516 <__ftoa_engine+0xe6>
    1526:	e0 e7       	ldi	r30, 0x70	; 112
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	68 94       	set
    152c:	15 90       	lpm	r1, Z+
    152e:	15 91       	lpm	r17, Z+
    1530:	35 91       	lpm	r19, Z+
    1532:	65 91       	lpm	r22, Z+
    1534:	95 91       	lpm	r25, Z+
    1536:	05 90       	lpm	r0, Z+
    1538:	7f e2       	ldi	r23, 0x2F	; 47
    153a:	73 95       	inc	r23
    153c:	e1 18       	sub	r14, r1
    153e:	f1 0a       	sbc	r15, r17
    1540:	43 0b       	sbc	r20, r19
    1542:	56 0b       	sbc	r21, r22
    1544:	c9 0b       	sbc	r28, r25
    1546:	d0 09       	sbc	r29, r0
    1548:	c0 f7       	brcc	.-16     	; 0x153a <__ftoa_engine+0x10a>
    154a:	e1 0c       	add	r14, r1
    154c:	f1 1e       	adc	r15, r17
    154e:	43 1f       	adc	r20, r19
    1550:	56 1f       	adc	r21, r22
    1552:	c9 1f       	adc	r28, r25
    1554:	d0 1d       	adc	r29, r0
    1556:	7e f4       	brtc	.+30     	; 0x1576 <__ftoa_engine+0x146>
    1558:	70 33       	cpi	r23, 0x30	; 48
    155a:	11 f4       	brne	.+4      	; 0x1560 <__ftoa_engine+0x130>
    155c:	8a 95       	dec	r24
    155e:	e6 cf       	rjmp	.-52     	; 0x152c <__ftoa_engine+0xfc>
    1560:	e8 94       	clt
    1562:	01 50       	subi	r16, 0x01	; 1
    1564:	30 f0       	brcs	.+12     	; 0x1572 <__ftoa_engine+0x142>
    1566:	08 0f       	add	r16, r24
    1568:	0a f4       	brpl	.+2      	; 0x156c <__ftoa_engine+0x13c>
    156a:	00 27       	eor	r16, r16
    156c:	02 17       	cp	r16, r18
    156e:	08 f4       	brcc	.+2      	; 0x1572 <__ftoa_engine+0x142>
    1570:	20 2f       	mov	r18, r16
    1572:	23 95       	inc	r18
    1574:	02 2f       	mov	r16, r18
    1576:	7a 33       	cpi	r23, 0x3A	; 58
    1578:	28 f0       	brcs	.+10     	; 0x1584 <__ftoa_engine+0x154>
    157a:	79 e3       	ldi	r23, 0x39	; 57
    157c:	7d 93       	st	X+, r23
    157e:	2a 95       	dec	r18
    1580:	e9 f7       	brne	.-6      	; 0x157c <__ftoa_engine+0x14c>
    1582:	10 c0       	rjmp	.+32     	; 0x15a4 <__ftoa_engine+0x174>
    1584:	7d 93       	st	X+, r23
    1586:	2a 95       	dec	r18
    1588:	89 f6       	brne	.-94     	; 0x152c <__ftoa_engine+0xfc>
    158a:	06 94       	lsr	r0
    158c:	97 95       	ror	r25
    158e:	67 95       	ror	r22
    1590:	37 95       	ror	r19
    1592:	17 95       	ror	r17
    1594:	17 94       	ror	r1
    1596:	e1 18       	sub	r14, r1
    1598:	f1 0a       	sbc	r15, r17
    159a:	43 0b       	sbc	r20, r19
    159c:	56 0b       	sbc	r21, r22
    159e:	c9 0b       	sbc	r28, r25
    15a0:	d0 09       	sbc	r29, r0
    15a2:	98 f0       	brcs	.+38     	; 0x15ca <__ftoa_engine+0x19a>
    15a4:	23 95       	inc	r18
    15a6:	7e 91       	ld	r23, -X
    15a8:	73 95       	inc	r23
    15aa:	7a 33       	cpi	r23, 0x3A	; 58
    15ac:	08 f0       	brcs	.+2      	; 0x15b0 <__ftoa_engine+0x180>
    15ae:	70 e3       	ldi	r23, 0x30	; 48
    15b0:	7c 93       	st	X, r23
    15b2:	20 13       	cpse	r18, r16
    15b4:	b8 f7       	brcc	.-18     	; 0x15a4 <__ftoa_engine+0x174>
    15b6:	7e 91       	ld	r23, -X
    15b8:	70 61       	ori	r23, 0x10	; 16
    15ba:	7d 93       	st	X+, r23
    15bc:	30 f0       	brcs	.+12     	; 0x15ca <__ftoa_engine+0x19a>
    15be:	83 95       	inc	r24
    15c0:	71 e3       	ldi	r23, 0x31	; 49
    15c2:	7d 93       	st	X+, r23
    15c4:	70 e3       	ldi	r23, 0x30	; 48
    15c6:	2a 95       	dec	r18
    15c8:	e1 f7       	brne	.-8      	; 0x15c2 <__ftoa_engine+0x192>
    15ca:	11 24       	eor	r1, r1
    15cc:	ef 90       	pop	r14
    15ce:	ff 90       	pop	r15
    15d0:	0f 91       	pop	r16
    15d2:	1f 91       	pop	r17
    15d4:	cf 91       	pop	r28
    15d6:	df 91       	pop	r29
    15d8:	99 27       	eor	r25, r25
    15da:	87 fd       	sbrc	r24, 7
    15dc:	90 95       	com	r25
    15de:	08 95       	ret

000015e0 <strnlen_P>:
    15e0:	fc 01       	movw	r30, r24
    15e2:	05 90       	lpm	r0, Z+
    15e4:	61 50       	subi	r22, 0x01	; 1
    15e6:	70 40       	sbci	r23, 0x00	; 0
    15e8:	01 10       	cpse	r0, r1
    15ea:	d8 f7       	brcc	.-10     	; 0x15e2 <strnlen_P+0x2>
    15ec:	80 95       	com	r24
    15ee:	90 95       	com	r25
    15f0:	8e 0f       	add	r24, r30
    15f2:	9f 1f       	adc	r25, r31
    15f4:	08 95       	ret

000015f6 <strcat>:
    15f6:	fb 01       	movw	r30, r22
    15f8:	dc 01       	movw	r26, r24
    15fa:	0d 90       	ld	r0, X+
    15fc:	00 20       	and	r0, r0
    15fe:	e9 f7       	brne	.-6      	; 0x15fa <strcat+0x4>
    1600:	11 97       	sbiw	r26, 0x01	; 1
    1602:	01 90       	ld	r0, Z+
    1604:	0d 92       	st	X+, r0
    1606:	00 20       	and	r0, r0
    1608:	e1 f7       	brne	.-8      	; 0x1602 <strcat+0xc>
    160a:	08 95       	ret

0000160c <strnlen>:
    160c:	fc 01       	movw	r30, r24
    160e:	61 50       	subi	r22, 0x01	; 1
    1610:	70 40       	sbci	r23, 0x00	; 0
    1612:	01 90       	ld	r0, Z+
    1614:	01 10       	cpse	r0, r1
    1616:	d8 f7       	brcc	.-10     	; 0x160e <strnlen+0x2>
    1618:	80 95       	com	r24
    161a:	90 95       	com	r25
    161c:	8e 0f       	add	r24, r30
    161e:	9f 1f       	adc	r25, r31
    1620:	08 95       	ret

00001622 <fputc>:
    1622:	0f 93       	push	r16
    1624:	1f 93       	push	r17
    1626:	cf 93       	push	r28
    1628:	df 93       	push	r29
    162a:	fb 01       	movw	r30, r22
    162c:	23 81       	ldd	r18, Z+3	; 0x03
    162e:	21 fd       	sbrc	r18, 1
    1630:	03 c0       	rjmp	.+6      	; 0x1638 <fputc+0x16>
    1632:	8f ef       	ldi	r24, 0xFF	; 255
    1634:	9f ef       	ldi	r25, 0xFF	; 255
    1636:	28 c0       	rjmp	.+80     	; 0x1688 <fputc+0x66>
    1638:	22 ff       	sbrs	r18, 2
    163a:	16 c0       	rjmp	.+44     	; 0x1668 <fputc+0x46>
    163c:	46 81       	ldd	r20, Z+6	; 0x06
    163e:	57 81       	ldd	r21, Z+7	; 0x07
    1640:	24 81       	ldd	r18, Z+4	; 0x04
    1642:	35 81       	ldd	r19, Z+5	; 0x05
    1644:	42 17       	cp	r20, r18
    1646:	53 07       	cpc	r21, r19
    1648:	44 f4       	brge	.+16     	; 0x165a <fputc+0x38>
    164a:	a0 81       	ld	r26, Z
    164c:	b1 81       	ldd	r27, Z+1	; 0x01
    164e:	9d 01       	movw	r18, r26
    1650:	2f 5f       	subi	r18, 0xFF	; 255
    1652:	3f 4f       	sbci	r19, 0xFF	; 255
    1654:	31 83       	std	Z+1, r19	; 0x01
    1656:	20 83       	st	Z, r18
    1658:	8c 93       	st	X, r24
    165a:	26 81       	ldd	r18, Z+6	; 0x06
    165c:	37 81       	ldd	r19, Z+7	; 0x07
    165e:	2f 5f       	subi	r18, 0xFF	; 255
    1660:	3f 4f       	sbci	r19, 0xFF	; 255
    1662:	37 83       	std	Z+7, r19	; 0x07
    1664:	26 83       	std	Z+6, r18	; 0x06
    1666:	10 c0       	rjmp	.+32     	; 0x1688 <fputc+0x66>
    1668:	eb 01       	movw	r28, r22
    166a:	09 2f       	mov	r16, r25
    166c:	18 2f       	mov	r17, r24
    166e:	00 84       	ldd	r0, Z+8	; 0x08
    1670:	f1 85       	ldd	r31, Z+9	; 0x09
    1672:	e0 2d       	mov	r30, r0
    1674:	09 95       	icall
    1676:	89 2b       	or	r24, r25
    1678:	e1 f6       	brne	.-72     	; 0x1632 <fputc+0x10>
    167a:	8e 81       	ldd	r24, Y+6	; 0x06
    167c:	9f 81       	ldd	r25, Y+7	; 0x07
    167e:	01 96       	adiw	r24, 0x01	; 1
    1680:	9f 83       	std	Y+7, r25	; 0x07
    1682:	8e 83       	std	Y+6, r24	; 0x06
    1684:	81 2f       	mov	r24, r17
    1686:	90 2f       	mov	r25, r16
    1688:	df 91       	pop	r29
    168a:	cf 91       	pop	r28
    168c:	1f 91       	pop	r17
    168e:	0f 91       	pop	r16
    1690:	08 95       	ret

00001692 <sprintf>:
    1692:	ae e0       	ldi	r26, 0x0E	; 14
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	ef e4       	ldi	r30, 0x4F	; 79
    1698:	fb e0       	ldi	r31, 0x0B	; 11
    169a:	0c 94 e9 09 	jmp	0x13d2	; 0x13d2 <__prologue_saves__+0x1c>
    169e:	0d 89       	ldd	r16, Y+21	; 0x15
    16a0:	1e 89       	ldd	r17, Y+22	; 0x16
    16a2:	86 e0       	ldi	r24, 0x06	; 6
    16a4:	8c 83       	std	Y+4, r24	; 0x04
    16a6:	1a 83       	std	Y+2, r17	; 0x02
    16a8:	09 83       	std	Y+1, r16	; 0x01
    16aa:	8f ef       	ldi	r24, 0xFF	; 255
    16ac:	9f e7       	ldi	r25, 0x7F	; 127
    16ae:	9e 83       	std	Y+6, r25	; 0x06
    16b0:	8d 83       	std	Y+5, r24	; 0x05
    16b2:	ae 01       	movw	r20, r28
    16b4:	47 5e       	subi	r20, 0xE7	; 231
    16b6:	5f 4f       	sbci	r21, 0xFF	; 255
    16b8:	6f 89       	ldd	r22, Y+23	; 0x17
    16ba:	78 8d       	ldd	r23, Y+24	; 0x18
    16bc:	ce 01       	movw	r24, r28
    16be:	01 96       	adiw	r24, 0x01	; 1
    16c0:	0e 94 3d 06 	call	0xc7a	; 0xc7a <vfprintf>
    16c4:	2f 81       	ldd	r18, Y+7	; 0x07
    16c6:	38 85       	ldd	r19, Y+8	; 0x08
    16c8:	f8 01       	movw	r30, r16
    16ca:	e2 0f       	add	r30, r18
    16cc:	f3 1f       	adc	r31, r19
    16ce:	10 82       	st	Z, r1
    16d0:	2e 96       	adiw	r28, 0x0e	; 14
    16d2:	e4 e0       	ldi	r30, 0x04	; 4
    16d4:	0c 94 05 0a 	jmp	0x140a	; 0x140a <__epilogue_restores__+0x1c>

000016d8 <__ultoa_invert>:
    16d8:	fa 01       	movw	r30, r20
    16da:	aa 27       	eor	r26, r26
    16dc:	28 30       	cpi	r18, 0x08	; 8
    16de:	51 f1       	breq	.+84     	; 0x1734 <__ultoa_invert+0x5c>
    16e0:	20 31       	cpi	r18, 0x10	; 16
    16e2:	81 f1       	breq	.+96     	; 0x1744 <__ultoa_invert+0x6c>
    16e4:	e8 94       	clt
    16e6:	6f 93       	push	r22
    16e8:	6e 7f       	andi	r22, 0xFE	; 254
    16ea:	6e 5f       	subi	r22, 0xFE	; 254
    16ec:	7f 4f       	sbci	r23, 0xFF	; 255
    16ee:	8f 4f       	sbci	r24, 0xFF	; 255
    16f0:	9f 4f       	sbci	r25, 0xFF	; 255
    16f2:	af 4f       	sbci	r26, 0xFF	; 255
    16f4:	b1 e0       	ldi	r27, 0x01	; 1
    16f6:	3e d0       	rcall	.+124    	; 0x1774 <__ultoa_invert+0x9c>
    16f8:	b4 e0       	ldi	r27, 0x04	; 4
    16fa:	3c d0       	rcall	.+120    	; 0x1774 <__ultoa_invert+0x9c>
    16fc:	67 0f       	add	r22, r23
    16fe:	78 1f       	adc	r23, r24
    1700:	89 1f       	adc	r24, r25
    1702:	9a 1f       	adc	r25, r26
    1704:	a1 1d       	adc	r26, r1
    1706:	68 0f       	add	r22, r24
    1708:	79 1f       	adc	r23, r25
    170a:	8a 1f       	adc	r24, r26
    170c:	91 1d       	adc	r25, r1
    170e:	a1 1d       	adc	r26, r1
    1710:	6a 0f       	add	r22, r26
    1712:	71 1d       	adc	r23, r1
    1714:	81 1d       	adc	r24, r1
    1716:	91 1d       	adc	r25, r1
    1718:	a1 1d       	adc	r26, r1
    171a:	20 d0       	rcall	.+64     	; 0x175c <__ultoa_invert+0x84>
    171c:	09 f4       	brne	.+2      	; 0x1720 <__ultoa_invert+0x48>
    171e:	68 94       	set
    1720:	3f 91       	pop	r19
    1722:	2a e0       	ldi	r18, 0x0A	; 10
    1724:	26 9f       	mul	r18, r22
    1726:	11 24       	eor	r1, r1
    1728:	30 19       	sub	r19, r0
    172a:	30 5d       	subi	r19, 0xD0	; 208
    172c:	31 93       	st	Z+, r19
    172e:	de f6       	brtc	.-74     	; 0x16e6 <__ultoa_invert+0xe>
    1730:	cf 01       	movw	r24, r30
    1732:	08 95       	ret
    1734:	46 2f       	mov	r20, r22
    1736:	47 70       	andi	r20, 0x07	; 7
    1738:	40 5d       	subi	r20, 0xD0	; 208
    173a:	41 93       	st	Z+, r20
    173c:	b3 e0       	ldi	r27, 0x03	; 3
    173e:	0f d0       	rcall	.+30     	; 0x175e <__ultoa_invert+0x86>
    1740:	c9 f7       	brne	.-14     	; 0x1734 <__ultoa_invert+0x5c>
    1742:	f6 cf       	rjmp	.-20     	; 0x1730 <__ultoa_invert+0x58>
    1744:	46 2f       	mov	r20, r22
    1746:	4f 70       	andi	r20, 0x0F	; 15
    1748:	40 5d       	subi	r20, 0xD0	; 208
    174a:	4a 33       	cpi	r20, 0x3A	; 58
    174c:	18 f0       	brcs	.+6      	; 0x1754 <__ultoa_invert+0x7c>
    174e:	49 5d       	subi	r20, 0xD9	; 217
    1750:	31 fd       	sbrc	r19, 1
    1752:	40 52       	subi	r20, 0x20	; 32
    1754:	41 93       	st	Z+, r20
    1756:	02 d0       	rcall	.+4      	; 0x175c <__ultoa_invert+0x84>
    1758:	a9 f7       	brne	.-22     	; 0x1744 <__ultoa_invert+0x6c>
    175a:	ea cf       	rjmp	.-44     	; 0x1730 <__ultoa_invert+0x58>
    175c:	b4 e0       	ldi	r27, 0x04	; 4
    175e:	a6 95       	lsr	r26
    1760:	97 95       	ror	r25
    1762:	87 95       	ror	r24
    1764:	77 95       	ror	r23
    1766:	67 95       	ror	r22
    1768:	ba 95       	dec	r27
    176a:	c9 f7       	brne	.-14     	; 0x175e <__ultoa_invert+0x86>
    176c:	00 97       	sbiw	r24, 0x00	; 0
    176e:	61 05       	cpc	r22, r1
    1770:	71 05       	cpc	r23, r1
    1772:	08 95       	ret
    1774:	9b 01       	movw	r18, r22
    1776:	ac 01       	movw	r20, r24
    1778:	0a 2e       	mov	r0, r26
    177a:	06 94       	lsr	r0
    177c:	57 95       	ror	r21
    177e:	47 95       	ror	r20
    1780:	37 95       	ror	r19
    1782:	27 95       	ror	r18
    1784:	ba 95       	dec	r27
    1786:	c9 f7       	brne	.-14     	; 0x177a <__ultoa_invert+0xa2>
    1788:	62 0f       	add	r22, r18
    178a:	73 1f       	adc	r23, r19
    178c:	84 1f       	adc	r24, r20
    178e:	95 1f       	adc	r25, r21
    1790:	a0 1d       	adc	r26, r0
    1792:	08 95       	ret

00001794 <_exit>:
    1794:	f8 94       	cli

00001796 <__stop_program>:
    1796:	ff cf       	rjmp	.-2      	; 0x1796 <__stop_program>
