
MLX Multi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00800100  000017a8  0000183c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006c  0080014c  0080014c  00001888  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001888  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000018e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c0  00000000  00000000  00001924  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006990  00000000  00000000  00001be4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001189  00000000  00000000  00008574  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f87  00000000  00000000  000096fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a34  00000000  00000000  0000a684  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001a7c  00000000  00000000  0000b0b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003427  00000000  00000000  0000cb34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000588  00000000  00000000  0000ff5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__ctors_end>
       4:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
       8:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
       c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      10:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      14:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      18:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      1c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      20:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      24:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      28:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      2c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      30:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      34:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__vector_13>
      38:	0c 94 f8 01 	jmp	0x3f0	; 0x3f0 <__vector_14>
      3c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      40:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      44:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      48:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      4c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      50:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      54:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      58:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      5c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      60:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>
      64:	0c 94 df 00 	jmp	0x1be	; 0x1be <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	6e 61       	ori	r22, 0x1E	; 30
      6a:	6e 00       	.word	0x006e	; ????

0000006c <__c.2177>:
      6c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      7c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      8c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      9c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      ac:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      bc:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      cc:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      dc:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      ec:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      fc:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     10c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     11c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     12c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     13c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     14c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     15c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000016a <__ctors_start>:
     16a:	18 03       	fmul	r17, r16
     16c:	05 04       	cpc	r0, r5

0000016e <__ctors_end>:
     16e:	11 24       	eor	r1, r1
     170:	1f be       	out	0x3f, r1	; 63
     172:	cf ef       	ldi	r28, 0xFF	; 255
     174:	d8 e0       	ldi	r29, 0x08	; 8
     176:	de bf       	out	0x3e, r29	; 62
     178:	cd bf       	out	0x3d, r28	; 61

0000017a <__do_copy_data>:
     17a:	11 e0       	ldi	r17, 0x01	; 1
     17c:	a0 e0       	ldi	r26, 0x00	; 0
     17e:	b1 e0       	ldi	r27, 0x01	; 1
     180:	e8 ea       	ldi	r30, 0xA8	; 168
     182:	f7 e1       	ldi	r31, 0x17	; 23
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x10>
     186:	05 90       	lpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	ac 34       	cpi	r26, 0x4C	; 76
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0xc>

00000190 <__do_clear_bss>:
     190:	21 e0       	ldi	r18, 0x01	; 1
     192:	ac e4       	ldi	r26, 0x4C	; 76
     194:	b1 e0       	ldi	r27, 0x01	; 1
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	a8 3b       	cpi	r26, 0xB8	; 184
     19c:	b2 07       	cpc	r27, r18
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>

000001a0 <__do_global_ctors>:
     1a0:	10 e0       	ldi	r17, 0x00	; 0
     1a2:	c7 eb       	ldi	r28, 0xB7	; 183
     1a4:	d0 e0       	ldi	r29, 0x00	; 0
     1a6:	04 c0       	rjmp	.+8      	; 0x1b0 <__do_global_ctors+0x10>
     1a8:	21 97       	sbiw	r28, 0x01	; 1
     1aa:	fe 01       	movw	r30, r28
     1ac:	0e 94 1a 0a 	call	0x1434	; 0x1434 <__tablejump2__>
     1b0:	c5 3b       	cpi	r28, 0xB5	; 181
     1b2:	d1 07       	cpc	r29, r17
     1b4:	c9 f7       	brne	.-14     	; 0x1a8 <__do_global_ctors+0x8>
     1b6:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <main>
     1ba:	0c 94 d2 0b 	jmp	0x17a4	; 0x17a4 <_exit>

000001be <__bad_interrupt>:
     1be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001c2 <_ZN17Adafruit_MLX90614C1Eh>:
template<typename V>
inline V constrain(V x, V a, V b) {
	return((x < a)?a:(b<x)?b:x);
}
/*********************************************************************/
Adafruit_MLX90614::Adafruit_MLX90614(uint8_t i2caddr) {
     1c2:	1f 93       	push	r17
     1c4:	cf 93       	push	r28
     1c6:	df 93       	push	r29
     1c8:	ec 01       	movw	r28, r24
     1ca:	16 2f       	mov	r17, r22
	  }
 class I2c
 {
 public:
    I2c()
    {
     1cc:	18 86       	std	Y+8, r1	; 0x08
     1ce:	19 86       	std	Y+9, r1	; 0x09
	    i2c_init();
     1d0:	0e 94 3b 03 	call	0x676	; 0x676 <i2c_init>
  _addr = i2caddr;
     1d4:	1a 87       	std	Y+10, r17	; 0x0a
}
     1d6:	df 91       	pop	r29
     1d8:	cf 91       	pop	r28
     1da:	1f 91       	pop	r17
     1dc:	08 95       	ret

000001de <_ZN17Adafruit_MLX906146read16EhPj>:
	// calculate the emissivity between 0.1 and 1.0:
	return (((float)ke) / 65535.0);
}

/*********************************************************************/
uint8_t Adafruit_MLX90614::read16(uint8_t a , uint16_t * d) {
     1de:	ef 92       	push	r14
     1e0:	ff 92       	push	r15
     1e2:	0f 93       	push	r16
     1e4:	1f 93       	push	r17
     1e6:	cf 93       	push	r28
     1e8:	8c 01       	movw	r16, r24
     1ea:	c6 2f       	mov	r28, r22
     1ec:	7a 01       	movw	r14, r20
	uint16_t ret;
	Wire.beginTransmission(_addr); // start transmission to device
     1ee:	fc 01       	movw	r30, r24
     1f0:	82 85       	ldd	r24, Z+10	; 0x0a
    }
     void beginTransmission(uint8_t address)
     {
         m_bufferIndex = 0;
     1f2:	10 86       	std	Z+8, r1	; 0x08

         i2c_start((address << 1) | I2C_WRITE);
     1f4:	88 0f       	add	r24, r24
     1f6:	0e 94 44 03 	call	0x688	; 0x688 <i2c_start>
     }

     void write(uint8_t byte)
     {
         if (m_bufferIndex == c_bufferSize)
     1fa:	f8 01       	movw	r30, r16
     1fc:	80 85       	ldd	r24, Z+8	; 0x08
     1fe:	88 30       	cpi	r24, 0x08	; 8
     200:	59 f0       	breq	.+22     	; 0x218 <_ZN17Adafruit_MLX906146read16EhPj+0x3a>
             return;

         m_buffer[m_bufferIndex++] = byte;
     202:	91 e0       	ldi	r25, 0x01	; 1
     204:	98 0f       	add	r25, r24
     206:	90 87       	std	Z+8, r25	; 0x08
     208:	e8 0f       	add	r30, r24
     20a:	f1 1d       	adc	r31, r1
     20c:	c0 83       	st	Z, r28
    }

    uint8_t endTransmission(bool stop = true)
    {
         for (uint8_t index = 0; index < m_bufferIndex; ++index) {
     20e:	f8 01       	movw	r30, r16
     210:	80 85       	ldd	r24, Z+8	; 0x08
     212:	88 23       	and	r24, r24
     214:	09 f4       	brne	.+2      	; 0x218 <_ZN17Adafruit_MLX906146read16EhPj+0x3a>
     216:	4e c0       	rjmp	.+156    	; 0x2b4 <_ZN17Adafruit_MLX906146read16EhPj+0xd6>
	// calculate the emissivity between 0.1 and 1.0:
	return (((float)ke) / 65535.0);
}

/*********************************************************************/
uint8_t Adafruit_MLX90614::read16(uint8_t a , uint16_t * d) {
     218:	c0 e0       	ldi	r28, 0x00	; 0
             if (i2c_write(m_buffer[index]) != 0)
     21a:	f8 01       	movw	r30, r16
     21c:	ec 0f       	add	r30, r28
     21e:	f1 1d       	adc	r31, r1
     220:	80 81       	ld	r24, Z
     222:	0e 94 6f 03 	call	0x6de	; 0x6de <i2c_write>
     226:	81 11       	cpse	r24, r1
     228:	45 c0       	rjmp	.+138    	; 0x2b4 <_ZN17Adafruit_MLX906146read16EhPj+0xd6>
         m_buffer[m_bufferIndex++] = byte;
    }

    uint8_t endTransmission(bool stop = true)
    {
         for (uint8_t index = 0; index < m_bufferIndex; ++index) {
     22a:	cf 5f       	subi	r28, 0xFF	; 255
     22c:	f8 01       	movw	r30, r16
     22e:	80 85       	ldd	r24, Z+8	; 0x08
     230:	c8 17       	cp	r28, r24
     232:	98 f3       	brcs	.-26     	; 0x21a <_ZN17Adafruit_MLX906146read16EhPj+0x3c>
     234:	3f c0       	rjmp	.+126    	; 0x2b4 <_ZN17Adafruit_MLX906146read16EhPj+0xd6>
         return m_bufferIndex;
     }

     uint8_t read()
     {
         if (m_bufferReadIndex == m_bufferIndex)
     236:	f8 01       	movw	r30, r16
     238:	81 85       	ldd	r24, Z+9	; 0x09
     23a:	90 85       	ldd	r25, Z+8	; 0x08
     23c:	89 17       	cp	r24, r25
     23e:	b1 f0       	breq	.+44     	; 0x26c <_ZN17Adafruit_MLX906146read16EhPj+0x8e>
             return 0;
        return m_buffer[m_bufferReadIndex++];
     240:	41 e0       	ldi	r20, 0x01	; 1
     242:	48 0f       	add	r20, r24
     244:	41 87       	std	Z+9, r20	; 0x09
     246:	e8 0f       	add	r30, r24
     248:	f1 1d       	adc	r31, r1
	Wire.beginTransmission(_addr); // start transmission to device
	Wire.write(a); // sends register address to read from
	Wire.endTransmission(false); // end transmission
	
	Wire.requestFrom(_addr, (uint8_t)3);// send data n-bytes read
	ret = Wire.read(); // receive DATA
     24a:	20 81       	ld	r18, Z
     24c:	30 e0       	ldi	r19, 0x00	; 0
         return m_bufferIndex;
     }

     uint8_t read()
     {
         if (m_bufferReadIndex == m_bufferIndex)
     24e:	94 17       	cp	r25, r20
     250:	d1 f1       	breq	.+116    	; 0x2c6 <_ZN17Adafruit_MLX906146read16EhPj+0xe8>
             return 0;
        return m_buffer[m_bufferReadIndex++];
     252:	8e 5f       	subi	r24, 0xFE	; 254
     254:	f8 01       	movw	r30, r16
     256:	81 87       	std	Z+9, r24	; 0x09
     258:	e4 0f       	add	r30, r20
     25a:	f1 1d       	adc	r31, r1
	ret |= Wire.read() << 8; // receive DATA
     25c:	40 81       	ld	r20, Z
     25e:	34 2b       	or	r19, r20
         return m_bufferIndex;
     }

     uint8_t read()
     {
         if (m_bufferReadIndex == m_bufferIndex)
     260:	89 17       	cp	r24, r25
     262:	89 f1       	breq	.+98     	; 0x2c6 <_ZN17Adafruit_MLX906146read16EhPj+0xe8>
             return 0;
        return m_buffer[m_bufferReadIndex++];
     264:	8f 5f       	subi	r24, 0xFF	; 255
     266:	f8 01       	movw	r30, r16
     268:	81 87       	std	Z+9, r24	; 0x09
     26a:	2d c0       	rjmp	.+90     	; 0x2c6 <_ZN17Adafruit_MLX906146read16EhPj+0xe8>
     26c:	20 e0       	ldi	r18, 0x00	; 0
     26e:	30 e0       	ldi	r19, 0x00	; 0
     270:	2a c0       	rjmp	.+84     	; 0x2c6 <_ZN17Adafruit_MLX906146read16EhPj+0xe8>
         if (i2c_start((address << 1) | I2C_READ) != 0)
             return 0;

        m_bufferIndex = 0;
         while (--quantity > 0) {
             m_buffer[m_bufferIndex++] = i2c_readAck();
     272:	81 e0       	ldi	r24, 0x01	; 1
     274:	f8 01       	movw	r30, r16
     276:	80 87       	std	Z+8, r24	; 0x08
     278:	0e 94 81 03 	call	0x702	; 0x702 <i2c_readAck>
     27c:	f8 01       	movw	r30, r16
     27e:	80 83       	st	Z, r24
     280:	c0 85       	ldd	r28, Z+8	; 0x08
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	8c 0f       	add	r24, r28
     286:	80 87       	std	Z+8, r24	; 0x08
     288:	0e 94 81 03 	call	0x702	; 0x702 <i2c_readAck>
     28c:	f8 01       	movw	r30, r16
     28e:	ec 0f       	add	r30, r28
     290:	f1 1d       	adc	r31, r1
     292:	80 83       	st	Z, r24
         }
         m_buffer[m_bufferIndex++] = i2c_readNak();
     294:	f8 01       	movw	r30, r16
     296:	c0 85       	ldd	r28, Z+8	; 0x08
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	8c 0f       	add	r24, r28
     29c:	80 87       	std	Z+8, r24	; 0x08
     29e:	0e 94 8c 03 	call	0x718	; 0x718 <i2c_readNak>
     2a2:	f8 01       	movw	r30, r16
     2a4:	ec 0f       	add	r30, r28
     2a6:	f1 1d       	adc	r31, r1
     2a8:	80 83       	st	Z, r24
         m_bufferReadIndex = 0;
     2aa:	f8 01       	movw	r30, r16
     2ac:	11 86       	std	Z+9, r1	; 0x09

         if (stop)
             i2c_stop();
     2ae:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <i2c_stop>
     2b2:	c1 cf       	rjmp	.-126    	; 0x236 <_ZN17Adafruit_MLX906146read16EhPj+0x58>
     {
        // quantity = Sensors::min(quantity, c_bufferSize);
         if (quantity == 0)
             return 0;

         if (i2c_start((address << 1) | I2C_READ) != 0)
     2b4:	f8 01       	movw	r30, r16
     2b6:	82 85       	ldd	r24, Z+10	; 0x0a
     2b8:	88 0f       	add	r24, r24
     2ba:	81 60       	ori	r24, 0x01	; 1
     2bc:	0e 94 44 03 	call	0x688	; 0x688 <i2c_start>
     2c0:	88 23       	and	r24, r24
     2c2:	b9 f2       	breq	.-82     	; 0x272 <_ZN17Adafruit_MLX906146read16EhPj+0x94>
     2c4:	b8 cf       	rjmp	.-144    	; 0x236 <_ZN17Adafruit_MLX906146read16EhPj+0x58>

	uint8_t pec = Wire.read();
	*d = ret;
     2c6:	f7 01       	movw	r30, r14
     2c8:	31 83       	std	Z+1, r19	; 0x01
     2ca:	20 83       	st	Z, r18
	return 0;
}
     2cc:	80 e0       	ldi	r24, 0x00	; 0
     2ce:	cf 91       	pop	r28
     2d0:	1f 91       	pop	r17
     2d2:	0f 91       	pop	r16
     2d4:	ff 90       	pop	r15
     2d6:	ef 90       	pop	r14
     2d8:	08 95       	ret

000002da <_ZN17Adafruit_MLX906148readTempEh>:

double Adafruit_MLX90614::readAmbientTempC(void) {
  return readTemp(MLX90614_TA);
}

float Adafruit_MLX90614::readTemp(uint8_t reg) {
     2da:	cf 93       	push	r28
     2dc:	df 93       	push	r29
     2de:	00 d0       	rcall	.+0      	; 0x2e0 <_ZN17Adafruit_MLX906148readTempEh+0x6>
     2e0:	cd b7       	in	r28, 0x3d	; 61
     2e2:	de b7       	in	r29, 0x3e	; 62
  float temp;
  uint16_t t;
  temp = read16(reg, &t);
     2e4:	ae 01       	movw	r20, r28
     2e6:	4f 5f       	subi	r20, 0xFF	; 255
     2e8:	5f 4f       	sbci	r21, 0xFF	; 255
     2ea:	0e 94 ef 00 	call	0x1de	; 0x1de <_ZN17Adafruit_MLX906146read16EhPj>
  temp = t * .02;
     2ee:	69 81       	ldd	r22, Y+1	; 0x01
     2f0:	7a 81       	ldd	r23, Y+2	; 0x02
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	0e 94 21 05 	call	0xa42	; 0xa42 <__floatunsisf>
     2fa:	2a e0       	ldi	r18, 0x0A	; 10
     2fc:	37 ed       	ldi	r19, 0xD7	; 215
     2fe:	43 ea       	ldi	r20, 0xA3	; 163
     300:	5c e3       	ldi	r21, 0x3C	; 60
     302:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <__mulsf3>
  temp  -= 273.15;
     306:	23 e3       	ldi	r18, 0x33	; 51
     308:	33 e9       	ldi	r19, 0x93	; 147
     30a:	48 e8       	ldi	r20, 0x88	; 136
     30c:	53 e4       	ldi	r21, 0x43	; 67
     30e:	0e 94 0c 04 	call	0x818	; 0x818 <__subsf3>
  return temp;
}
     312:	0f 90       	pop	r0
     314:	0f 90       	pop	r0
     316:	df 91       	pop	r29
     318:	cf 91       	pop	r28
     31a:	08 95       	ret

0000031c <_ZN17Adafruit_MLX9061415readObjectTempCEv>:
  _addr = i2caddr;
}
/*********************************************************************/

double Adafruit_MLX90614::readObjectTempC(void) {
  return readTemp(MLX90614_TOBJ1);
     31c:	67 e0       	ldi	r22, 0x07	; 7
     31e:	0e 94 6d 01 	call	0x2da	; 0x2da <_ZN17Adafruit_MLX906148readTempEh>
}
     322:	08 95       	ret

00000324 <_ZN17Adafruit_MLX9061416readAmbientTempCEv>:

double Adafruit_MLX90614::readAmbientTempC(void) {
  return readTemp(MLX90614_TA);
     324:	66 e0       	ldi	r22, 0x06	; 6
     326:	0e 94 6d 01 	call	0x2da	; 0x2da <_ZN17Adafruit_MLX906148readTempEh>
}
     32a:	08 95       	ret

0000032c <_ZN7HC_SR044initEv>:
// Anything over 400/500 cm (23200/29410 us pulse) is "out of range"
const unsigned long MAX_DIST = 23200;
  
void HC_SR04::init() {
  // The Trigger pin will tell the sensor to range find
  DDRD = 0x20;
     32c:	80 e2       	ldi	r24, 0x20	; 32
     32e:	8a b9       	out	0x0a, r24	; 10
  PORTD = 0x00;
     330:	1b b8       	out	0x0b, r1	; 11
  clr_pin(PORTD, TRIG_PIN);  
     332:	5d 98       	cbi	0x0b, 5	; 11
     334:	08 95       	ret

00000336 <_ZN7HC_SR044readEv>:
}
uint8_t HC_SR04::read(){
     336:	cf 92       	push	r12
     338:	df 92       	push	r13
     33a:	ef 92       	push	r14
     33c:	ff 92       	push	r15
     33e:	0f 93       	push	r16
     340:	1f 93       	push	r17
     342:	cf 93       	push	r28
     344:	8c 01       	movw	r16, r24
	float t1;
	float t2;
	float pulse_width;
	
	//set_micro(0);
	clr_pin(PORTD, TRIG_PIN);
     346:	5d 98       	cbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     348:	8a e0       	ldi	r24, 0x0A	; 10
     34a:	8a 95       	dec	r24
     34c:	f1 f7       	brne	.-4      	; 0x34a <_ZN7HC_SR044readEv+0x14>
     34e:	00 c0       	rjmp	.+0      	; 0x350 <_ZN7HC_SR044readEv+0x1a>
	_delay_us(2);
	// Hold the trigger pin high for at least 10 us
	set_pin(PORTD, TRIG_PIN);
     350:	5d 9a       	sbi	0x0b, 5	; 11
     352:	ea e6       	ldi	r30, 0x6A	; 106
     354:	ea 95       	dec	r30
     356:	f1 f7       	brne	.-4      	; 0x354 <_ZN7HC_SR044readEv+0x1e>
     358:	00 c0       	rjmp	.+0      	; 0x35a <_ZN7HC_SR044readEv+0x24>
	_delay_us(20);
	clr_pin(PORTD, TRIG_PIN);
     35a:	5d 98       	cbi	0x0b, 5	; 11
	
	// Wait for pulse on echo pin
	while ((PIND & _BV(ECHO_PIN)) == 0 );
     35c:	4e 9b       	sbis	0x09, 6	; 9
     35e:	fe cf       	rjmp	.-4      	; 0x35c <_ZN7HC_SR044readEv+0x26>
	// Measure how long the echo pin was held high (pulse width)
	// Note: the micros() counter will overflow after ~70 min
	TCNT1 = 0;
     360:	e4 e8       	ldi	r30, 0x84	; 132
     362:	f0 e0       	ldi	r31, 0x00	; 0
     364:	11 82       	std	Z+1, r1	; 0x01
     366:	10 82       	st	Z, r1
	t1 = TCNT1 ;
     368:	60 81       	ld	r22, Z
     36a:	71 81       	ldd	r23, Z+1	; 0x01
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	0e 94 21 05 	call	0xa42	; 0xa42 <__floatunsisf>
     374:	6b 01       	movw	r12, r22
     376:	7c 01       	movw	r14, r24
	cli();
     378:	f8 94       	cli

	while ((PIND & _BV(ECHO_PIN)) != 0);
     37a:	99 b1       	in	r25, 0x09	; 9
     37c:	c9 2f       	mov	r28, r25
     37e:	c0 74       	andi	r28, 0x40	; 64
     380:	96 fd       	sbrc	r25, 6
     382:	fb cf       	rjmp	.-10     	; 0x37a <_ZN7HC_SR044readEv+0x44>
	sei();
     384:	78 94       	sei
	t2 = TCNT1 ;
     386:	40 91 84 00 	lds	r20, 0x0084
     38a:	50 91 85 00 	lds	r21, 0x0085
     38e:	ba 01       	movw	r22, r20
     390:	80 e0       	ldi	r24, 0x00	; 0
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	0e 94 21 05 	call	0xa42	; 0xa42 <__floatunsisf>
	
	pulse_width = (t2 - t1)* 0.5;
     398:	a7 01       	movw	r20, r14
     39a:	96 01       	movw	r18, r12
     39c:	0e 94 0c 04 	call	0x818	; 0x818 <__subsf3>
     3a0:	20 e0       	ldi	r18, 0x00	; 0
     3a2:	30 e0       	ldi	r19, 0x00	; 0
     3a4:	40 e0       	ldi	r20, 0x00	; 0
     3a6:	5f e3       	ldi	r21, 0x3F	; 63
     3a8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <__mulsf3>
     3ac:	6b 01       	movw	r12, r22
     3ae:	7c 01       	movw	r14, r24
	
	if ( pulse_width > MAX_DIST ) {
     3b0:	20 e0       	ldi	r18, 0x00	; 0
     3b2:	30 e4       	ldi	r19, 0x40	; 64
     3b4:	45 eb       	ldi	r20, 0xB5	; 181
     3b6:	56 e4       	ldi	r21, 0x46	; 70
     3b8:	0e 94 d3 05 	call	0xba6	; 0xba6 <__gesf2>
     3bc:	18 16       	cp	r1, r24
     3be:	74 f0       	brlt	.+28     	; 0x3dc <_ZN7HC_SR044readEv+0xa6>
			return 1;
	}
	// Calculate distance in centimeters and inches. The constants
	// are found in the data-sheet, and calculated from the assumed speed 
	//of sound in air at sea level (~340 m/s).
	cm = pulse_width/ 58;
     3c0:	20 e0       	ldi	r18, 0x00	; 0
     3c2:	30 e0       	ldi	r19, 0x00	; 0
     3c4:	48 e6       	ldi	r20, 0x68	; 104
     3c6:	52 e4       	ldi	r21, 0x42	; 66
     3c8:	c7 01       	movw	r24, r14
     3ca:	b6 01       	movw	r22, r12
     3cc:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__divsf3>
	Distance = cm;
     3d0:	f8 01       	movw	r30, r16
     3d2:	60 83       	st	Z, r22
     3d4:	71 83       	std	Z+1, r23	; 0x01
     3d6:	82 83       	std	Z+2, r24	; 0x02
     3d8:	93 83       	std	Z+3, r25	; 0x03
	return 0;
     3da:	01 c0       	rjmp	.+2      	; 0x3de <_ZN7HC_SR044readEv+0xa8>
	pulse_width = (t2 - t1)* 0.5;
	
	if ( pulse_width > MAX_DIST ) {
		
			pulse_width =8888;
			return 1;
     3dc:	c1 e0       	ldi	r28, 0x01	; 1
	// are found in the data-sheet, and calculated from the assumed speed 
	//of sound in air at sea level (~340 m/s).
	cm = pulse_width/ 58;
	Distance = cm;
	return 0;
}
     3de:	8c 2f       	mov	r24, r28
     3e0:	cf 91       	pop	r28
     3e2:	1f 91       	pop	r17
     3e4:	0f 91       	pop	r16
     3e6:	ff 90       	pop	r15
     3e8:	ef 90       	pop	r14
     3ea:	df 90       	pop	r13
     3ec:	cf 90       	pop	r12
     3ee:	08 95       	ret

000003f0 <__vector_14>:
Adafruit_MLX90614 MLX[m_sensorsCount] = {0x5A,0x5B};

HC_SR04 Sonic;
VL53L0X TOF;
volatile unsigned long int count = 0; 
ISR(TIMER0_COMPA_vect){
     3f0:	1f 92       	push	r1
     3f2:	0f 92       	push	r0
     3f4:	0f b6       	in	r0, 0x3f	; 63
     3f6:	0f 92       	push	r0
     3f8:	11 24       	eor	r1, r1
     3fa:	8f 93       	push	r24
     3fc:	9f 93       	push	r25
     3fe:	af 93       	push	r26
     400:	bf 93       	push	r27
	count++;
     402:	80 91 4c 01 	lds	r24, 0x014C
     406:	90 91 4d 01 	lds	r25, 0x014D
     40a:	a0 91 4e 01 	lds	r26, 0x014E
     40e:	b0 91 4f 01 	lds	r27, 0x014F
     412:	01 96       	adiw	r24, 0x01	; 1
     414:	a1 1d       	adc	r26, r1
     416:	b1 1d       	adc	r27, r1
     418:	80 93 4c 01 	sts	0x014C, r24
     41c:	90 93 4d 01 	sts	0x014D, r25
     420:	a0 93 4e 01 	sts	0x014E, r26
     424:	b0 93 4f 01 	sts	0x014F, r27
}
     428:	bf 91       	pop	r27
     42a:	af 91       	pop	r26
     42c:	9f 91       	pop	r25
     42e:	8f 91       	pop	r24
     430:	0f 90       	pop	r0
     432:	0f be       	out	0x3f, r0	; 63
     434:	0f 90       	pop	r0
     436:	1f 90       	pop	r1
     438:	18 95       	reti

0000043a <__vector_13>:
ISR(TIMER1_OVF_vect){}
     43a:	1f 92       	push	r1
     43c:	0f 92       	push	r0
     43e:	0f b6       	in	r0, 0x3f	; 63
     440:	0f 92       	push	r0
     442:	11 24       	eor	r1, r1
     444:	0f 90       	pop	r0
     446:	0f be       	out	0x3f, r0	; 63
     448:	0f 90       	pop	r0
     44a:	1f 90       	pop	r1
     44c:	18 95       	reti

0000044e <_Z5setupv>:
	return count;
}
/*********************************************************************/
void setup(void)
{		
	cli();
     44e:	f8 94       	cli
	#endif // _DEBUG
	
	//DDRB |= _BV(PORTB5);
	//PORTB &= ~_BV(PORTB5);
	
	TCNT0 = 0;
     450:	16 bc       	out	0x26, r1	; 38
	TCNT1 = 0;
     452:	10 92 85 00 	sts	0x0085, r1
     456:	10 92 84 00 	sts	0x0084, r1
	TCCR0A |= (1<<WGM01);
     45a:	84 b5       	in	r24, 0x24	; 36
     45c:	82 60       	ori	r24, 0x02	; 2
     45e:	84 bd       	out	0x24, r24	; 36
	OCR0A = 249;
     460:	89 ef       	ldi	r24, 0xF9	; 249
     462:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1 << OCIE0A);
     464:	ee e6       	ldi	r30, 0x6E	; 110
     466:	f0 e0       	ldi	r31, 0x00	; 0
     468:	80 81       	ld	r24, Z
     46a:	82 60       	ori	r24, 0x02	; 2
     46c:	80 83       	st	Z, r24
	TIMSK1 |= _BV(TOIE1);
     46e:	ef e6       	ldi	r30, 0x6F	; 111
     470:	f0 e0       	ldi	r31, 0x00	; 0
     472:	80 81       	ld	r24, Z
     474:	81 60       	ori	r24, 0x01	; 1
     476:	80 83       	st	Z, r24
	TCCR0B |= (1<<CS01) | (1<<CS00);
     478:	85 b5       	in	r24, 0x25	; 37
     47a:	83 60       	ori	r24, 0x03	; 3
     47c:	85 bd       	out	0x25, r24	; 37
	TCCR1B |= (1<<CS11);
     47e:	e1 e8       	ldi	r30, 0x81	; 129
     480:	f0 e0       	ldi	r31, 0x00	; 0
     482:	80 81       	ld	r24, Z
     484:	82 60       	ori	r24, 0x02	; 2
     486:	80 83       	st	Z, r24
	sei();
     488:	78 94       	sei
	Serial.init(9600);
     48a:	60 e8       	ldi	r22, 0x80	; 128
     48c:	75 e2       	ldi	r23, 0x25	; 37
     48e:	86 ea       	ldi	r24, 0xA6	; 166
     490:	91 e0       	ldi	r25, 0x01	; 1
     492:	0e 94 97 03 	call	0x72e	; 0x72e <_ZN5USART4initEi>
	Sonic.init();
     496:	8c e5       	ldi	r24, 0x5C	; 92
     498:	91 e0       	ldi	r25, 0x01	; 1
     49a:	0e 94 96 01 	call	0x32c	; 0x32c <_ZN7HC_SR044initEv>
     49e:	08 95       	ret

000004a0 <_Z13IR_sensorReadv>:
	 	Serial.sendln("> TOF...");
	 	#endif // _DEBUG
}
/*********************************************************************/
void IR_sensorRead(void )
{
     4a0:	2f 92       	push	r2
     4a2:	3f 92       	push	r3
     4a4:	4f 92       	push	r4
     4a6:	5f 92       	push	r5
     4a8:	6f 92       	push	r6
     4aa:	7f 92       	push	r7
     4ac:	8f 92       	push	r8
     4ae:	9f 92       	push	r9
     4b0:	af 92       	push	r10
     4b2:	bf 92       	push	r11
     4b4:	cf 92       	push	r12
     4b6:	df 92       	push	r13
     4b8:	ef 92       	push	r14
     4ba:	ff 92       	push	r15
     4bc:	0f 93       	push	r16
     4be:	1f 93       	push	r17
     4c0:	cf 93       	push	r28
     4c2:	df 93       	push	r29
     4c4:	cd b7       	in	r28, 0x3d	; 61
     4c6:	de b7       	in	r29, 0x3e	; 62
     4c8:	c1 57       	subi	r28, 0x71	; 113
     4ca:	d2 40       	sbci	r29, 0x02	; 2
     4cc:	0f b6       	in	r0, 0x3f	; 63
     4ce:	f8 94       	cli
     4d0:	de bf       	out	0x3e, r29	; 62
     4d2:	0f be       	out	0x3f, r0	; 63
     4d4:	cd bf       	out	0x3d, r28	; 61
	char str[125], str_out[500] = {""};
     4d6:	19 82       	std	Y+1, r1	; 0x01
     4d8:	1a 82       	std	Y+2, r1	; 0x02
     4da:	1b 82       	std	Y+3, r1	; 0x03
     4dc:	1c 82       	std	Y+4, r1	; 0x04
     4de:	fe 01       	movw	r30, r28
     4e0:	35 96       	adiw	r30, 0x05	; 5
     4e2:	80 ef       	ldi	r24, 0xF0	; 240
     4e4:	91 e0       	ldi	r25, 0x01	; 1
     4e6:	df 01       	movw	r26, r30
     4e8:	9c 01       	movw	r18, r24
     4ea:	1d 92       	st	X+, r1
     4ec:	21 50       	subi	r18, 0x01	; 1
     4ee:	30 40       	sbci	r19, 0x00	; 0
     4f0:	e1 f7       	brne	.-8      	; 0x4ea <_Z13IR_sensorReadv+0x4a>
	double obj[m_sensorsCount], amb[m_sensorsCount], mDistance = 0;
	unsigned long int m_read_time = 0;

 	Sonic.read();
     4f2:	8c e5       	ldi	r24, 0x5C	; 92
     4f4:	91 e0       	ldi	r25, 0x01	; 1
     4f6:	0e 94 9b 01 	call	0x336	; 0x336 <_ZN7HC_SR044readEv>
     4fa:	0f 2e       	mov	r0, r31
     4fc:	f4 e6       	ldi	r31, 0x64	; 100
     4fe:	ef 2e       	mov	r14, r31
     500:	f1 e0       	ldi	r31, 0x01	; 1
     502:	ff 2e       	mov	r15, r31
     504:	f0 2d       	mov	r31, r0
 	//mDistance = TOF.readRangeContinuousMillimeters();	

	for(int i=0;i<m_sensorsCount; i++){
     506:	00 e0       	ldi	r16, 0x00	; 0
     508:	10 e0       	ldi	r17, 0x00	; 0
		obj[i] = MLX[i].readObjectTempC();
		amb[i] = MLX[i].readAmbientTempC();
	
 		sprintf(str, "[{\"Sensor\":%d,\"Obj\":%0.1f,\"Amb\":%0.1f,\"Distance\":[%i,%0.1f],\"uTime\":%lu}", i+1, obj[i], amb[i], (int)Sonic.Distance, mDistance, m_read_time);
     50a:	0f 2e       	mov	r0, r31
     50c:	f0 e0       	ldi	r31, 0x00	; 0
     50e:	af 2e       	mov	r10, r31
     510:	f1 e0       	ldi	r31, 0x01	; 1
     512:	bf 2e       	mov	r11, r31
     514:	f0 2d       	mov	r31, r0
     516:	6e 01       	movw	r12, r28
     518:	3b e0       	ldi	r19, 0x0B	; 11
     51a:	c3 1a       	sub	r12, r19
     51c:	3e ef       	ldi	r19, 0xFE	; 254
     51e:	d3 0a       	sbc	r13, r19

 	Sonic.read();
 	//mDistance = TOF.readRangeContinuousMillimeters();	

	for(int i=0;i<m_sensorsCount; i++){
		obj[i] = MLX[i].readObjectTempC();
     520:	c7 01       	movw	r24, r14
     522:	0e 94 8e 01 	call	0x31c	; 0x31c <_ZN17Adafruit_MLX9061415readObjectTempCEv>
     526:	96 2e       	mov	r9, r22
     528:	87 2e       	mov	r8, r23
     52a:	78 2e       	mov	r7, r24
     52c:	69 2e       	mov	r6, r25
		amb[i] = MLX[i].readAmbientTempC();
     52e:	c7 01       	movw	r24, r14
     530:	0e 94 92 01 	call	0x324	; 0x324 <_ZN17Adafruit_MLX9061416readAmbientTempCEv>
     534:	56 2e       	mov	r5, r22
     536:	47 2e       	mov	r4, r23
     538:	38 2e       	mov	r3, r24
     53a:	29 2e       	mov	r2, r25
	
 		sprintf(str, "[{\"Sensor\":%d,\"Obj\":%0.1f,\"Amb\":%0.1f,\"Distance\":[%i,%0.1f],\"uTime\":%lu}", i+1, obj[i], amb[i], (int)Sonic.Distance, mDistance, m_read_time);
     53c:	ac e5       	ldi	r26, 0x5C	; 92
     53e:	b1 e0       	ldi	r27, 0x01	; 1
     540:	6d 91       	ld	r22, X+
     542:	7d 91       	ld	r23, X+
     544:	8d 91       	ld	r24, X+
     546:	9c 91       	ld	r25, X
     548:	0f 5f       	subi	r16, 0xFF	; 255
     54a:	1f 4f       	sbci	r17, 0xFF	; 255
     54c:	1f 92       	push	r1
     54e:	1f 92       	push	r1
     550:	1f 92       	push	r1
     552:	1f 92       	push	r1
     554:	1f 92       	push	r1
     556:	1f 92       	push	r1
     558:	1f 92       	push	r1
     55a:	1f 92       	push	r1
     55c:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__fixsfsi>
     560:	7f 93       	push	r23
     562:	6f 93       	push	r22
     564:	2f 92       	push	r2
     566:	3f 92       	push	r3
     568:	4f 92       	push	r4
     56a:	5f 92       	push	r5
     56c:	6f 92       	push	r6
     56e:	7f 92       	push	r7
     570:	8f 92       	push	r8
     572:	9f 92       	push	r9
     574:	1f 93       	push	r17
     576:	0f 93       	push	r16
     578:	bf 92       	push	r11
     57a:	af 92       	push	r10
     57c:	df 92       	push	r13
     57e:	cf 92       	push	r12
     580:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <sprintf>
   		strcat(str_out,str);
     584:	b6 01       	movw	r22, r12
     586:	ce 01       	movw	r24, r28
     588:	01 96       	adiw	r24, 0x01	; 1
     58a:	0e 94 03 0b 	call	0x1606	; 0x1606 <strcat>
     58e:	bb e0       	ldi	r27, 0x0B	; 11
     590:	eb 0e       	add	r14, r27
     592:	f1 1c       	adc	r15, r1
	unsigned long int m_read_time = 0;

 	Sonic.read();
 	//mDistance = TOF.readRangeContinuousMillimeters();	

	for(int i=0;i<m_sensorsCount; i++){
     594:	0f b6       	in	r0, 0x3f	; 63
     596:	f8 94       	cli
     598:	de bf       	out	0x3e, r29	; 62
     59a:	0f be       	out	0x3f, r0	; 63
     59c:	cd bf       	out	0x3d, r28	; 61
     59e:	02 30       	cpi	r16, 0x02	; 2
     5a0:	11 05       	cpc	r17, r1
     5a2:	09 f0       	breq	.+2      	; 0x5a6 <_Z13IR_sensorReadv+0x106>
     5a4:	bd cf       	rjmp	.-134    	; 0x520 <_Z13IR_sensorReadv+0x80>
		//void send_int(int d);
		void send(double data, int base);
		//void send(uint32_t str);
			
		void sendln(void) {send("\r\n");};
		void sendln(const char* c) {send(c);send("\r\n");};
     5a6:	be 01       	movw	r22, r28
     5a8:	6f 5f       	subi	r22, 0xFF	; 255
     5aa:	7f 4f       	sbci	r23, 0xFF	; 255
     5ac:	86 ea       	ldi	r24, 0xA6	; 166
     5ae:	91 e0       	ldi	r25, 0x01	; 1
     5b0:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <_ZN5USART4sendEPKc>
     5b4:	69 e4       	ldi	r22, 0x49	; 73
     5b6:	71 e0       	ldi	r23, 0x01	; 1
     5b8:	86 ea       	ldi	r24, 0xA6	; 166
     5ba:	91 e0       	ldi	r25, 0x01	; 1
     5bc:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <_ZN5USART4sendEPKc>
	
 		sprintf(str, "[{\"Sensor\":%d,\"Obj\":%0.1f,\"Amb\":%0.1f,\"Distance\":[%i,%0.1f],\"uTime\":%lu}", i+1, obj[i], amb[i], (int)Sonic.Distance, mDistance, m_read_time);
   		strcat(str_out,str);
	}
	Serial.sendln(str_out);
}
     5c0:	cf 58       	subi	r28, 0x8F	; 143
     5c2:	dd 4f       	sbci	r29, 0xFD	; 253
     5c4:	0f b6       	in	r0, 0x3f	; 63
     5c6:	f8 94       	cli
     5c8:	de bf       	out	0x3e, r29	; 62
     5ca:	0f be       	out	0x3f, r0	; 63
     5cc:	cd bf       	out	0x3d, r28	; 61
     5ce:	df 91       	pop	r29
     5d0:	cf 91       	pop	r28
     5d2:	1f 91       	pop	r17
     5d4:	0f 91       	pop	r16
     5d6:	ff 90       	pop	r15
     5d8:	ef 90       	pop	r14
     5da:	df 90       	pop	r13
     5dc:	cf 90       	pop	r12
     5de:	bf 90       	pop	r11
     5e0:	af 90       	pop	r10
     5e2:	9f 90       	pop	r9
     5e4:	8f 90       	pop	r8
     5e6:	7f 90       	pop	r7
     5e8:	6f 90       	pop	r6
     5ea:	5f 90       	pop	r5
     5ec:	4f 90       	pop	r4
     5ee:	3f 90       	pop	r3
     5f0:	2f 90       	pop	r2
     5f2:	08 95       	ret

000005f4 <main>:
/*********************************************************************/
int main(void)
{	
	setup();
     5f4:	0e 94 27 02 	call	0x44e	; 0x44e <_Z5setupv>
	count++;
}
ISR(TIMER1_OVF_vect){}
/*********************************************************************/
unsigned long int millis(void){
	return count;
     5f8:	c0 90 4c 01 	lds	r12, 0x014C
     5fc:	d0 90 4d 01 	lds	r13, 0x014D
     600:	e0 90 4e 01 	lds	r14, 0x014E
     604:	f0 90 4f 01 	lds	r15, 0x014F
		unsigned long int start_time;
	    start_time = millis();	
		#ifdef _DEBUG
			Serial.sendln("> Read Sensors...");
		#endif
		IR_sensorRead();
     608:	0e 94 50 02 	call	0x4a0	; 0x4a0 <_Z13IR_sensorReadv>
	count++;
}
ISR(TIMER1_OVF_vect){}
/*********************************************************************/
unsigned long int millis(void){
	return count;
     60c:	80 91 4c 01 	lds	r24, 0x014C
     610:	90 91 4d 01 	lds	r25, 0x014D
     614:	a0 91 4e 01 	lds	r26, 0x014E
     618:	b0 91 4f 01 	lds	r27, 0x014F
		#ifdef _DEBUG
			Serial.sendln("> Read Sensors...");
		#endif
		IR_sensorRead();
		//_delay_ms(250);
		while((millis()-start_time) <= 250);
     61c:	8c 19       	sub	r24, r12
     61e:	9d 09       	sbc	r25, r13
     620:	ae 09       	sbc	r26, r14
     622:	bf 09       	sbc	r27, r15
     624:	8b 3f       	cpi	r24, 0xFB	; 251
     626:	91 05       	cpc	r25, r1
     628:	a1 05       	cpc	r26, r1
     62a:	b1 05       	cpc	r27, r1
     62c:	78 f3       	brcs	.-34     	; 0x60c <main+0x18>
     62e:	e4 cf       	rjmp	.-56     	; 0x5f8 <main+0x4>

00000630 <_GLOBAL__sub_I_MLX_5a>:
#include "uart.h"
#include "Adafruit_MLX90614.h"
#include "HCSR04.h"
#include "VL53L0X.h"

Adafruit_MLX90614 MLX_5a(0x5A);
     630:	6a e5       	ldi	r22, 0x5A	; 90
     632:	8b e9       	ldi	r24, 0x9B	; 155
     634:	91 e0       	ldi	r25, 0x01	; 1
     636:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_ZN17Adafruit_MLX90614C1Eh>
Adafruit_MLX90614 MLX_5b(0x5E);
     63a:	6e e5       	ldi	r22, 0x5E	; 94
     63c:	80 e9       	ldi	r24, 0x90	; 144
     63e:	91 e0       	ldi	r25, 0x01	; 1
     640:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_ZN17Adafruit_MLX90614C1Eh>
Adafruit_MLX90614 MLX_5c(0x5C);
     644:	6c e5       	ldi	r22, 0x5C	; 92
     646:	85 e8       	ldi	r24, 0x85	; 133
     648:	91 e0       	ldi	r25, 0x01	; 1
     64a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_ZN17Adafruit_MLX90614C1Eh>
Adafruit_MLX90614 MLX_5d(0x5D);
     64e:	6d e5       	ldi	r22, 0x5D	; 93
     650:	8a e7       	ldi	r24, 0x7A	; 122
     652:	91 e0       	ldi	r25, 0x01	; 1
     654:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_ZN17Adafruit_MLX90614C1Eh>

const int m_sensorsCount = 2;
Adafruit_MLX90614 MLX[m_sensorsCount] = {0x5A,0x5B};
     658:	6a e5       	ldi	r22, 0x5A	; 90
     65a:	84 e6       	ldi	r24, 0x64	; 100
     65c:	91 e0       	ldi	r25, 0x01	; 1
     65e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_ZN17Adafruit_MLX90614C1Eh>
     662:	6b e5       	ldi	r22, 0x5B	; 91
     664:	8f e6       	ldi	r24, 0x6F	; 111
     666:	91 e0       	ldi	r25, 0x01	; 1
     668:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_ZN17Adafruit_MLX90614C1Eh>

HC_SR04 Sonic;
VL53L0X TOF;
     66c:	80 e5       	ldi	r24, 0x50	; 80
     66e:	91 e0       	ldi	r25, 0x01	; 1
     670:	0e 94 fe 03 	call	0x7fc	; 0x7fc <_ZN7VL53L0XC1Ev>
     674:	08 95       	ret

00000676 <i2c_init>:
 Initialization of the I2C bus interface. Need to be called only once
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  DDRC = 0;
     676:	17 b8       	out	0x07, r1	; 7
  PORTC = (1 << PORTC4) | (1 << PORTC5);//enable pull up
     678:	80 e3       	ldi	r24, 0x30	; 48
     67a:	88 b9       	out	0x08, r24	; 8
  TWSR = 0;                         /* no prescaler */
     67c:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
     680:	88 e4       	ldi	r24, 0x48	; 72
     682:	80 93 b8 00 	sts	0x00B8, r24
     686:	08 95       	ret

00000688 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     688:	94 ea       	ldi	r25, 0xA4	; 164
     68a:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     68e:	ec eb       	ldi	r30, 0xBC	; 188
     690:	f0 e0       	ldi	r31, 0x00	; 0
     692:	90 81       	ld	r25, Z
     694:	99 23       	and	r25, r25
     696:	ec f7       	brge	.-6      	; 0x692 <i2c_start+0xa>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     698:	90 91 b9 00 	lds	r25, 0x00B9
     69c:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     69e:	98 30       	cpi	r25, 0x08	; 8
     6a0:	11 f0       	breq	.+4      	; 0x6a6 <i2c_start+0x1e>
     6a2:	90 31       	cpi	r25, 0x10	; 16
     6a4:	a1 f4       	brne	.+40     	; 0x6ce <i2c_start+0x46>

	// send device address
	TWDR = address;
     6a6:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     6aa:	84 e8       	ldi	r24, 0x84	; 132
     6ac:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
     6b0:	ec eb       	ldi	r30, 0xBC	; 188
     6b2:	f0 e0       	ldi	r31, 0x00	; 0
     6b4:	80 81       	ld	r24, Z
     6b6:	88 23       	and	r24, r24
     6b8:	ec f7       	brge	.-6      	; 0x6b4 <i2c_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     6ba:	90 91 b9 00 	lds	r25, 0x00B9
     6be:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     6c0:	98 31       	cpi	r25, 0x18	; 24
     6c2:	39 f0       	breq	.+14     	; 0x6d2 <i2c_start+0x4a>
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	90 34       	cpi	r25, 0x40	; 64
     6c8:	29 f4       	brne	.+10     	; 0x6d4 <i2c_start+0x4c>
     6ca:	80 e0       	ldi	r24, 0x00	; 0
     6cc:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
     6d2:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
     6d4:	08 95       	ret

000006d6 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     6d6:	84 e9       	ldi	r24, 0x94	; 148
     6d8:	80 93 bc 00 	sts	0x00BC, r24
     6dc:	08 95       	ret

000006de <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     6de:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     6e2:	84 e8       	ldi	r24, 0x84	; 132
     6e4:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     6e8:	ec eb       	ldi	r30, 0xBC	; 188
     6ea:	f0 e0       	ldi	r31, 0x00	; 0
     6ec:	80 81       	ld	r24, Z
     6ee:	88 23       	and	r24, r24
     6f0:	ec f7       	brge	.-6      	; 0x6ec <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     6f2:	90 91 b9 00 	lds	r25, 0x00B9
     6f6:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
     6f8:	81 e0       	ldi	r24, 0x01	; 1
     6fa:	98 32       	cpi	r25, 0x28	; 40
     6fc:	09 f4       	brne	.+2      	; 0x700 <i2c_write+0x22>
     6fe:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
     700:	08 95       	ret

00000702 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     702:	84 ec       	ldi	r24, 0xC4	; 196
     704:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
     708:	ec eb       	ldi	r30, 0xBC	; 188
     70a:	f0 e0       	ldi	r31, 0x00	; 0
     70c:	80 81       	ld	r24, Z
     70e:	88 23       	and	r24, r24
     710:	ec f7       	brge	.-6      	; 0x70c <i2c_readAck+0xa>
    return TWDR;
     712:	80 91 bb 00 	lds	r24, 0x00BB
}/* i2c_readAck */
     716:	08 95       	ret

00000718 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     718:	84 e8       	ldi	r24, 0x84	; 132
     71a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
     71e:	ec eb       	ldi	r30, 0xBC	; 188
     720:	f0 e0       	ldi	r31, 0x00	; 0
     722:	80 81       	ld	r24, Z
     724:	88 23       	and	r24, r24
     726:	ec f7       	brge	.-6      	; 0x722 <i2c_readNak+0xa>
    return TWDR;
     728:	80 91 bb 00 	lds	r24, 0x00BB
}/* i2c_readNak */
     72c:	08 95       	ret

0000072e <_ZN5USART4initEi>:
USART Serial; //Initialize new instance of the serial class
//Setup Baud rate in header file
//set to 8 bits, no stop bit, no parity

/*********************************************************************/
void USART::init(int BAUDRATE){
     72e:	0f 93       	push	r16
     730:	1f 93       	push	r17
	UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);
     732:	8b 01       	movw	r16, r22
     734:	77 0f       	add	r23, r23
     736:	22 0b       	sbc	r18, r18
     738:	33 0b       	sbc	r19, r19
     73a:	d9 01       	movw	r26, r18
     73c:	c8 01       	movw	r24, r16
     73e:	80 58       	subi	r24, 0x80	; 128
     740:	9b 47       	sbci	r25, 0x7B	; 123
     742:	a1 4e       	sbci	r26, 0xE1	; 225
     744:	bf 4f       	sbci	r27, 0xFF	; 255
     746:	88 0f       	add	r24, r24
     748:	99 1f       	adc	r25, r25
     74a:	aa 1f       	adc	r26, r26
     74c:	bb 1f       	adc	r27, r27
     74e:	88 0f       	add	r24, r24
     750:	99 1f       	adc	r25, r25
     752:	aa 1f       	adc	r26, r26
     754:	bb 1f       	adc	r27, r27
     756:	bc 01       	movw	r22, r24
     758:	cd 01       	movw	r24, r26
     75a:	66 0f       	add	r22, r22
     75c:	77 1f       	adc	r23, r23
     75e:	88 1f       	adc	r24, r24
     760:	99 1f       	adc	r25, r25
     762:	00 0f       	add	r16, r16
     764:	11 1f       	adc	r17, r17
     766:	22 1f       	adc	r18, r18
     768:	33 1f       	adc	r19, r19
     76a:	00 0f       	add	r16, r16
     76c:	11 1f       	adc	r17, r17
     76e:	22 1f       	adc	r18, r18
     770:	33 1f       	adc	r19, r19
     772:	a9 01       	movw	r20, r18
     774:	98 01       	movw	r18, r16
     776:	22 0f       	add	r18, r18
     778:	33 1f       	adc	r19, r19
     77a:	44 1f       	adc	r20, r20
     77c:	55 1f       	adc	r21, r21
     77e:	22 0f       	add	r18, r18
     780:	33 1f       	adc	r19, r19
     782:	44 1f       	adc	r20, r20
     784:	55 1f       	adc	r21, r21
     786:	0e 94 c1 09 	call	0x1382	; 0x1382 <__udivmodsi4>
     78a:	da 01       	movw	r26, r20
     78c:	c9 01       	movw	r24, r18
     78e:	01 97       	sbiw	r24, 0x01	; 1
     790:	a1 09       	sbc	r26, r1
     792:	b1 09       	sbc	r27, r1
     794:	89 2f       	mov	r24, r25
     796:	9a 2f       	mov	r25, r26
     798:	ab 2f       	mov	r26, r27
     79a:	bb 27       	eor	r27, r27
     79c:	80 93 c5 00 	sts	0x00C5, r24
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);
     7a0:	21 50       	subi	r18, 0x01	; 1
     7a2:	20 93 c4 00 	sts	0x00C4, r18
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     7a6:	e1 ec       	ldi	r30, 0xC1	; 193
     7a8:	f0 e0       	ldi	r31, 0x00	; 0
     7aa:	88 e1       	ldi	r24, 0x18	; 24
     7ac:	80 83       	st	Z, r24
	UCSR0C = (1<<UCSZ00)|(1<<UCSZ01);
     7ae:	86 e0       	ldi	r24, 0x06	; 6
     7b0:	80 93 c2 00 	sts	0x00C2, r24

	UCSR0B |= (1 << RXCIE0); // Enable the USART Receive Complete interrupt (USART_RXC)
     7b4:	80 81       	ld	r24, Z
     7b6:	80 68       	ori	r24, 0x80	; 128
     7b8:	80 83       	st	Z, r24
	sei();
     7ba:	78 94       	sei
}
     7bc:	1f 91       	pop	r17
     7be:	0f 91       	pop	r16
     7c0:	08 95       	ret

000007c2 <_ZN5USART4sendEh>:
 return UDR0;// read buffer
}
/*********************************************************************/
void USART::send(uint8_t data){

	while(!(UCSR0A & (1<<UDRE0))); //wait until buffer is empty
     7c2:	e0 ec       	ldi	r30, 0xC0	; 192
     7c4:	f0 e0       	ldi	r31, 0x00	; 0
     7c6:	80 81       	ld	r24, Z
     7c8:	85 ff       	sbrs	r24, 5
     7ca:	fd cf       	rjmp	.-6      	; 0x7c6 <_ZN5USART4sendEh+0x4>
	UDR0 = data; //Load data into buffer
     7cc:	60 93 c6 00 	sts	0x00C6, r22
     7d0:	08 95       	ret

000007d2 <_ZN5USART4sendEPKc>:
}
/*********************************************************************/
//send one char at a time
void USART::send(const char* StringPtr)
{
     7d2:	0f 93       	push	r16
     7d4:	1f 93       	push	r17
     7d6:	cf 93       	push	r28
     7d8:	df 93       	push	r29
     7da:	eb 01       	movw	r28, r22
	//st = millis();
	while(*StringPtr != 0x00)
     7dc:	68 81       	ld	r22, Y
     7de:	66 23       	and	r22, r22
     7e0:	41 f0       	breq	.+16     	; 0x7f2 <_ZN5USART4sendEPKc+0x20>
     7e2:	8c 01       	movw	r16, r24
     7e4:	21 96       	adiw	r28, 0x01	; 1
		void init(int BAUDRATE = 9600); 
		bool available(void);
		unsigned char read(void);
		bool flush(void);
		void send(uint8_t data);
		void send(char data) {send((uint8_t)data); };
     7e6:	c8 01       	movw	r24, r16
     7e8:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <_ZN5USART4sendEh>
     7ec:	69 91       	ld	r22, Y+
     7ee:	61 11       	cpse	r22, r1
     7f0:	fa cf       	rjmp	.-12     	; 0x7e6 <_ZN5USART4sendEPKc+0x14>
	{
		send(*StringPtr++);
	}
	//ft = millis();
}
     7f2:	df 91       	pop	r29
     7f4:	cf 91       	pop	r28
     7f6:	1f 91       	pop	r17
     7f8:	0f 91       	pop	r16
     7fa:	08 95       	ret

000007fc <_ZN7VL53L0XC1Ev>:
// PLL_period_ps = 1655; macro_period_vclks = 2304
#define calcMacroPeriod(vcsel_period_pclks) ((((uint32_t)2304 * (vcsel_period_pclks) * 1655) + 500) / 1000)

// Constructors ////////////////////////////////////////////////////////////////

VL53L0X::VL53L0X(void)
     7fc:	fc 01       	movw	r30, r24
  : address(ADDRESS_DEFAULT)
  , io_timeout(0) // no timeout
  , did_timeout(false)
     7fe:	89 e2       	ldi	r24, 0x29	; 41
     800:	81 83       	std	Z+1, r24	; 0x01
     802:	13 82       	std	Z+3, r1	; 0x03
     804:	12 82       	std	Z+2, r1	; 0x02
     806:	14 82       	std	Z+4, r1	; 0x04
     808:	08 95       	ret

0000080a <_GLOBAL__sub_I_Wire>:
	  }
 class I2c
 {
 public:
    I2c()
    {
     80a:	ee ea       	ldi	r30, 0xAE	; 174
     80c:	f1 e0       	ldi	r31, 0x01	; 1
     80e:	10 86       	std	Z+8, r1	; 0x08
     810:	11 86       	std	Z+9, r1	; 0x09
	    i2c_init();
     812:	0e 94 3b 03 	call	0x676	; 0x676 <i2c_init>
     816:	08 95       	ret

00000818 <__subsf3>:
     818:	50 58       	subi	r21, 0x80	; 128

0000081a <__addsf3>:
     81a:	bb 27       	eor	r27, r27
     81c:	aa 27       	eor	r26, r26
     81e:	0e 94 24 04 	call	0x848	; 0x848 <__addsf3x>
     822:	0c 94 99 05 	jmp	0xb32	; 0xb32 <__fp_round>
     826:	0e 94 8b 05 	call	0xb16	; 0xb16 <__fp_pscA>
     82a:	38 f0       	brcs	.+14     	; 0x83a <__addsf3+0x20>
     82c:	0e 94 92 05 	call	0xb24	; 0xb24 <__fp_pscB>
     830:	20 f0       	brcs	.+8      	; 0x83a <__addsf3+0x20>
     832:	39 f4       	brne	.+14     	; 0x842 <__addsf3+0x28>
     834:	9f 3f       	cpi	r25, 0xFF	; 255
     836:	19 f4       	brne	.+6      	; 0x83e <__addsf3+0x24>
     838:	26 f4       	brtc	.+8      	; 0x842 <__addsf3+0x28>
     83a:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__fp_nan>
     83e:	0e f4       	brtc	.+2      	; 0x842 <__addsf3+0x28>
     840:	e0 95       	com	r30
     842:	e7 fb       	bst	r30, 7
     844:	0c 94 82 05 	jmp	0xb04	; 0xb04 <__fp_inf>

00000848 <__addsf3x>:
     848:	e9 2f       	mov	r30, r25
     84a:	0e 94 aa 05 	call	0xb54	; 0xb54 <__fp_split3>
     84e:	58 f3       	brcs	.-42     	; 0x826 <__addsf3+0xc>
     850:	ba 17       	cp	r27, r26
     852:	62 07       	cpc	r22, r18
     854:	73 07       	cpc	r23, r19
     856:	84 07       	cpc	r24, r20
     858:	95 07       	cpc	r25, r21
     85a:	20 f0       	brcs	.+8      	; 0x864 <__addsf3x+0x1c>
     85c:	79 f4       	brne	.+30     	; 0x87c <__addsf3x+0x34>
     85e:	a6 f5       	brtc	.+104    	; 0x8c8 <__addsf3x+0x80>
     860:	0c 94 cc 05 	jmp	0xb98	; 0xb98 <__fp_zero>
     864:	0e f4       	brtc	.+2      	; 0x868 <__addsf3x+0x20>
     866:	e0 95       	com	r30
     868:	0b 2e       	mov	r0, r27
     86a:	ba 2f       	mov	r27, r26
     86c:	a0 2d       	mov	r26, r0
     86e:	0b 01       	movw	r0, r22
     870:	b9 01       	movw	r22, r18
     872:	90 01       	movw	r18, r0
     874:	0c 01       	movw	r0, r24
     876:	ca 01       	movw	r24, r20
     878:	a0 01       	movw	r20, r0
     87a:	11 24       	eor	r1, r1
     87c:	ff 27       	eor	r31, r31
     87e:	59 1b       	sub	r21, r25
     880:	99 f0       	breq	.+38     	; 0x8a8 <__addsf3x+0x60>
     882:	59 3f       	cpi	r21, 0xF9	; 249
     884:	50 f4       	brcc	.+20     	; 0x89a <__addsf3x+0x52>
     886:	50 3e       	cpi	r21, 0xE0	; 224
     888:	68 f1       	brcs	.+90     	; 0x8e4 <__addsf3x+0x9c>
     88a:	1a 16       	cp	r1, r26
     88c:	f0 40       	sbci	r31, 0x00	; 0
     88e:	a2 2f       	mov	r26, r18
     890:	23 2f       	mov	r18, r19
     892:	34 2f       	mov	r19, r20
     894:	44 27       	eor	r20, r20
     896:	58 5f       	subi	r21, 0xF8	; 248
     898:	f3 cf       	rjmp	.-26     	; 0x880 <__addsf3x+0x38>
     89a:	46 95       	lsr	r20
     89c:	37 95       	ror	r19
     89e:	27 95       	ror	r18
     8a0:	a7 95       	ror	r26
     8a2:	f0 40       	sbci	r31, 0x00	; 0
     8a4:	53 95       	inc	r21
     8a6:	c9 f7       	brne	.-14     	; 0x89a <__addsf3x+0x52>
     8a8:	7e f4       	brtc	.+30     	; 0x8c8 <__addsf3x+0x80>
     8aa:	1f 16       	cp	r1, r31
     8ac:	ba 0b       	sbc	r27, r26
     8ae:	62 0b       	sbc	r22, r18
     8b0:	73 0b       	sbc	r23, r19
     8b2:	84 0b       	sbc	r24, r20
     8b4:	ba f0       	brmi	.+46     	; 0x8e4 <__addsf3x+0x9c>
     8b6:	91 50       	subi	r25, 0x01	; 1
     8b8:	a1 f0       	breq	.+40     	; 0x8e2 <__addsf3x+0x9a>
     8ba:	ff 0f       	add	r31, r31
     8bc:	bb 1f       	adc	r27, r27
     8be:	66 1f       	adc	r22, r22
     8c0:	77 1f       	adc	r23, r23
     8c2:	88 1f       	adc	r24, r24
     8c4:	c2 f7       	brpl	.-16     	; 0x8b6 <__addsf3x+0x6e>
     8c6:	0e c0       	rjmp	.+28     	; 0x8e4 <__addsf3x+0x9c>
     8c8:	ba 0f       	add	r27, r26
     8ca:	62 1f       	adc	r22, r18
     8cc:	73 1f       	adc	r23, r19
     8ce:	84 1f       	adc	r24, r20
     8d0:	48 f4       	brcc	.+18     	; 0x8e4 <__addsf3x+0x9c>
     8d2:	87 95       	ror	r24
     8d4:	77 95       	ror	r23
     8d6:	67 95       	ror	r22
     8d8:	b7 95       	ror	r27
     8da:	f7 95       	ror	r31
     8dc:	9e 3f       	cpi	r25, 0xFE	; 254
     8de:	08 f0       	brcs	.+2      	; 0x8e2 <__addsf3x+0x9a>
     8e0:	b0 cf       	rjmp	.-160    	; 0x842 <__addsf3+0x28>
     8e2:	93 95       	inc	r25
     8e4:	88 0f       	add	r24, r24
     8e6:	08 f0       	brcs	.+2      	; 0x8ea <__addsf3x+0xa2>
     8e8:	99 27       	eor	r25, r25
     8ea:	ee 0f       	add	r30, r30
     8ec:	97 95       	ror	r25
     8ee:	87 95       	ror	r24
     8f0:	08 95       	ret

000008f2 <__divsf3>:
     8f2:	0e 94 8d 04 	call	0x91a	; 0x91a <__divsf3x>
     8f6:	0c 94 99 05 	jmp	0xb32	; 0xb32 <__fp_round>
     8fa:	0e 94 92 05 	call	0xb24	; 0xb24 <__fp_pscB>
     8fe:	58 f0       	brcs	.+22     	; 0x916 <__stack+0x17>
     900:	0e 94 8b 05 	call	0xb16	; 0xb16 <__fp_pscA>
     904:	40 f0       	brcs	.+16     	; 0x916 <__stack+0x17>
     906:	29 f4       	brne	.+10     	; 0x912 <__stack+0x13>
     908:	5f 3f       	cpi	r21, 0xFF	; 255
     90a:	29 f0       	breq	.+10     	; 0x916 <__stack+0x17>
     90c:	0c 94 82 05 	jmp	0xb04	; 0xb04 <__fp_inf>
     910:	51 11       	cpse	r21, r1
     912:	0c 94 cd 05 	jmp	0xb9a	; 0xb9a <__fp_szero>
     916:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__fp_nan>

0000091a <__divsf3x>:
     91a:	0e 94 aa 05 	call	0xb54	; 0xb54 <__fp_split3>
     91e:	68 f3       	brcs	.-38     	; 0x8fa <__divsf3+0x8>

00000920 <__divsf3_pse>:
     920:	99 23       	and	r25, r25
     922:	b1 f3       	breq	.-20     	; 0x910 <__stack+0x11>
     924:	55 23       	and	r21, r21
     926:	91 f3       	breq	.-28     	; 0x90c <__stack+0xd>
     928:	95 1b       	sub	r25, r21
     92a:	55 0b       	sbc	r21, r21
     92c:	bb 27       	eor	r27, r27
     92e:	aa 27       	eor	r26, r26
     930:	62 17       	cp	r22, r18
     932:	73 07       	cpc	r23, r19
     934:	84 07       	cpc	r24, r20
     936:	38 f0       	brcs	.+14     	; 0x946 <__divsf3_pse+0x26>
     938:	9f 5f       	subi	r25, 0xFF	; 255
     93a:	5f 4f       	sbci	r21, 0xFF	; 255
     93c:	22 0f       	add	r18, r18
     93e:	33 1f       	adc	r19, r19
     940:	44 1f       	adc	r20, r20
     942:	aa 1f       	adc	r26, r26
     944:	a9 f3       	breq	.-22     	; 0x930 <__divsf3_pse+0x10>
     946:	35 d0       	rcall	.+106    	; 0x9b2 <__divsf3_pse+0x92>
     948:	0e 2e       	mov	r0, r30
     94a:	3a f0       	brmi	.+14     	; 0x95a <__divsf3_pse+0x3a>
     94c:	e0 e8       	ldi	r30, 0x80	; 128
     94e:	32 d0       	rcall	.+100    	; 0x9b4 <__divsf3_pse+0x94>
     950:	91 50       	subi	r25, 0x01	; 1
     952:	50 40       	sbci	r21, 0x00	; 0
     954:	e6 95       	lsr	r30
     956:	00 1c       	adc	r0, r0
     958:	ca f7       	brpl	.-14     	; 0x94c <__divsf3_pse+0x2c>
     95a:	2b d0       	rcall	.+86     	; 0x9b2 <__divsf3_pse+0x92>
     95c:	fe 2f       	mov	r31, r30
     95e:	29 d0       	rcall	.+82     	; 0x9b2 <__divsf3_pse+0x92>
     960:	66 0f       	add	r22, r22
     962:	77 1f       	adc	r23, r23
     964:	88 1f       	adc	r24, r24
     966:	bb 1f       	adc	r27, r27
     968:	26 17       	cp	r18, r22
     96a:	37 07       	cpc	r19, r23
     96c:	48 07       	cpc	r20, r24
     96e:	ab 07       	cpc	r26, r27
     970:	b0 e8       	ldi	r27, 0x80	; 128
     972:	09 f0       	breq	.+2      	; 0x976 <__divsf3_pse+0x56>
     974:	bb 0b       	sbc	r27, r27
     976:	80 2d       	mov	r24, r0
     978:	bf 01       	movw	r22, r30
     97a:	ff 27       	eor	r31, r31
     97c:	93 58       	subi	r25, 0x83	; 131
     97e:	5f 4f       	sbci	r21, 0xFF	; 255
     980:	3a f0       	brmi	.+14     	; 0x990 <__divsf3_pse+0x70>
     982:	9e 3f       	cpi	r25, 0xFE	; 254
     984:	51 05       	cpc	r21, r1
     986:	78 f0       	brcs	.+30     	; 0x9a6 <__divsf3_pse+0x86>
     988:	0c 94 82 05 	jmp	0xb04	; 0xb04 <__fp_inf>
     98c:	0c 94 cd 05 	jmp	0xb9a	; 0xb9a <__fp_szero>
     990:	5f 3f       	cpi	r21, 0xFF	; 255
     992:	e4 f3       	brlt	.-8      	; 0x98c <__divsf3_pse+0x6c>
     994:	98 3e       	cpi	r25, 0xE8	; 232
     996:	d4 f3       	brlt	.-12     	; 0x98c <__divsf3_pse+0x6c>
     998:	86 95       	lsr	r24
     99a:	77 95       	ror	r23
     99c:	67 95       	ror	r22
     99e:	b7 95       	ror	r27
     9a0:	f7 95       	ror	r31
     9a2:	9f 5f       	subi	r25, 0xFF	; 255
     9a4:	c9 f7       	brne	.-14     	; 0x998 <__divsf3_pse+0x78>
     9a6:	88 0f       	add	r24, r24
     9a8:	91 1d       	adc	r25, r1
     9aa:	96 95       	lsr	r25
     9ac:	87 95       	ror	r24
     9ae:	97 f9       	bld	r25, 7
     9b0:	08 95       	ret
     9b2:	e1 e0       	ldi	r30, 0x01	; 1
     9b4:	66 0f       	add	r22, r22
     9b6:	77 1f       	adc	r23, r23
     9b8:	88 1f       	adc	r24, r24
     9ba:	bb 1f       	adc	r27, r27
     9bc:	62 17       	cp	r22, r18
     9be:	73 07       	cpc	r23, r19
     9c0:	84 07       	cpc	r24, r20
     9c2:	ba 07       	cpc	r27, r26
     9c4:	20 f0       	brcs	.+8      	; 0x9ce <__divsf3_pse+0xae>
     9c6:	62 1b       	sub	r22, r18
     9c8:	73 0b       	sbc	r23, r19
     9ca:	84 0b       	sbc	r24, r20
     9cc:	ba 0b       	sbc	r27, r26
     9ce:	ee 1f       	adc	r30, r30
     9d0:	88 f7       	brcc	.-30     	; 0x9b4 <__divsf3_pse+0x94>
     9d2:	e0 95       	com	r30
     9d4:	08 95       	ret

000009d6 <__fixsfsi>:
     9d6:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__fixunssfsi>
     9da:	68 94       	set
     9dc:	b1 11       	cpse	r27, r1
     9de:	0c 94 cd 05 	jmp	0xb9a	; 0xb9a <__fp_szero>
     9e2:	08 95       	ret

000009e4 <__fixunssfsi>:
     9e4:	0e 94 b2 05 	call	0xb64	; 0xb64 <__fp_splitA>
     9e8:	88 f0       	brcs	.+34     	; 0xa0c <__fixunssfsi+0x28>
     9ea:	9f 57       	subi	r25, 0x7F	; 127
     9ec:	98 f0       	brcs	.+38     	; 0xa14 <__fixunssfsi+0x30>
     9ee:	b9 2f       	mov	r27, r25
     9f0:	99 27       	eor	r25, r25
     9f2:	b7 51       	subi	r27, 0x17	; 23
     9f4:	b0 f0       	brcs	.+44     	; 0xa22 <__fixunssfsi+0x3e>
     9f6:	e1 f0       	breq	.+56     	; 0xa30 <__fixunssfsi+0x4c>
     9f8:	66 0f       	add	r22, r22
     9fa:	77 1f       	adc	r23, r23
     9fc:	88 1f       	adc	r24, r24
     9fe:	99 1f       	adc	r25, r25
     a00:	1a f0       	brmi	.+6      	; 0xa08 <__fixunssfsi+0x24>
     a02:	ba 95       	dec	r27
     a04:	c9 f7       	brne	.-14     	; 0x9f8 <__fixunssfsi+0x14>
     a06:	14 c0       	rjmp	.+40     	; 0xa30 <__fixunssfsi+0x4c>
     a08:	b1 30       	cpi	r27, 0x01	; 1
     a0a:	91 f0       	breq	.+36     	; 0xa30 <__fixunssfsi+0x4c>
     a0c:	0e 94 cc 05 	call	0xb98	; 0xb98 <__fp_zero>
     a10:	b1 e0       	ldi	r27, 0x01	; 1
     a12:	08 95       	ret
     a14:	0c 94 cc 05 	jmp	0xb98	; 0xb98 <__fp_zero>
     a18:	67 2f       	mov	r22, r23
     a1a:	78 2f       	mov	r23, r24
     a1c:	88 27       	eor	r24, r24
     a1e:	b8 5f       	subi	r27, 0xF8	; 248
     a20:	39 f0       	breq	.+14     	; 0xa30 <__fixunssfsi+0x4c>
     a22:	b9 3f       	cpi	r27, 0xF9	; 249
     a24:	cc f3       	brlt	.-14     	; 0xa18 <__fixunssfsi+0x34>
     a26:	86 95       	lsr	r24
     a28:	77 95       	ror	r23
     a2a:	67 95       	ror	r22
     a2c:	b3 95       	inc	r27
     a2e:	d9 f7       	brne	.-10     	; 0xa26 <__fixunssfsi+0x42>
     a30:	3e f4       	brtc	.+14     	; 0xa40 <__fixunssfsi+0x5c>
     a32:	90 95       	com	r25
     a34:	80 95       	com	r24
     a36:	70 95       	com	r23
     a38:	61 95       	neg	r22
     a3a:	7f 4f       	sbci	r23, 0xFF	; 255
     a3c:	8f 4f       	sbci	r24, 0xFF	; 255
     a3e:	9f 4f       	sbci	r25, 0xFF	; 255
     a40:	08 95       	ret

00000a42 <__floatunsisf>:
     a42:	e8 94       	clt
     a44:	09 c0       	rjmp	.+18     	; 0xa58 <__floatsisf+0x12>

00000a46 <__floatsisf>:
     a46:	97 fb       	bst	r25, 7
     a48:	3e f4       	brtc	.+14     	; 0xa58 <__floatsisf+0x12>
     a4a:	90 95       	com	r25
     a4c:	80 95       	com	r24
     a4e:	70 95       	com	r23
     a50:	61 95       	neg	r22
     a52:	7f 4f       	sbci	r23, 0xFF	; 255
     a54:	8f 4f       	sbci	r24, 0xFF	; 255
     a56:	9f 4f       	sbci	r25, 0xFF	; 255
     a58:	99 23       	and	r25, r25
     a5a:	a9 f0       	breq	.+42     	; 0xa86 <__floatsisf+0x40>
     a5c:	f9 2f       	mov	r31, r25
     a5e:	96 e9       	ldi	r25, 0x96	; 150
     a60:	bb 27       	eor	r27, r27
     a62:	93 95       	inc	r25
     a64:	f6 95       	lsr	r31
     a66:	87 95       	ror	r24
     a68:	77 95       	ror	r23
     a6a:	67 95       	ror	r22
     a6c:	b7 95       	ror	r27
     a6e:	f1 11       	cpse	r31, r1
     a70:	f8 cf       	rjmp	.-16     	; 0xa62 <__floatsisf+0x1c>
     a72:	fa f4       	brpl	.+62     	; 0xab2 <__floatsisf+0x6c>
     a74:	bb 0f       	add	r27, r27
     a76:	11 f4       	brne	.+4      	; 0xa7c <__floatsisf+0x36>
     a78:	60 ff       	sbrs	r22, 0
     a7a:	1b c0       	rjmp	.+54     	; 0xab2 <__floatsisf+0x6c>
     a7c:	6f 5f       	subi	r22, 0xFF	; 255
     a7e:	7f 4f       	sbci	r23, 0xFF	; 255
     a80:	8f 4f       	sbci	r24, 0xFF	; 255
     a82:	9f 4f       	sbci	r25, 0xFF	; 255
     a84:	16 c0       	rjmp	.+44     	; 0xab2 <__floatsisf+0x6c>
     a86:	88 23       	and	r24, r24
     a88:	11 f0       	breq	.+4      	; 0xa8e <__floatsisf+0x48>
     a8a:	96 e9       	ldi	r25, 0x96	; 150
     a8c:	11 c0       	rjmp	.+34     	; 0xab0 <__floatsisf+0x6a>
     a8e:	77 23       	and	r23, r23
     a90:	21 f0       	breq	.+8      	; 0xa9a <__floatsisf+0x54>
     a92:	9e e8       	ldi	r25, 0x8E	; 142
     a94:	87 2f       	mov	r24, r23
     a96:	76 2f       	mov	r23, r22
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__floatsisf+0x5e>
     a9a:	66 23       	and	r22, r22
     a9c:	71 f0       	breq	.+28     	; 0xaba <__floatsisf+0x74>
     a9e:	96 e8       	ldi	r25, 0x86	; 134
     aa0:	86 2f       	mov	r24, r22
     aa2:	70 e0       	ldi	r23, 0x00	; 0
     aa4:	60 e0       	ldi	r22, 0x00	; 0
     aa6:	2a f0       	brmi	.+10     	; 0xab2 <__floatsisf+0x6c>
     aa8:	9a 95       	dec	r25
     aaa:	66 0f       	add	r22, r22
     aac:	77 1f       	adc	r23, r23
     aae:	88 1f       	adc	r24, r24
     ab0:	da f7       	brpl	.-10     	; 0xaa8 <__floatsisf+0x62>
     ab2:	88 0f       	add	r24, r24
     ab4:	96 95       	lsr	r25
     ab6:	87 95       	ror	r24
     ab8:	97 f9       	bld	r25, 7
     aba:	08 95       	ret

00000abc <__fp_cmp>:
     abc:	99 0f       	add	r25, r25
     abe:	00 08       	sbc	r0, r0
     ac0:	55 0f       	add	r21, r21
     ac2:	aa 0b       	sbc	r26, r26
     ac4:	e0 e8       	ldi	r30, 0x80	; 128
     ac6:	fe ef       	ldi	r31, 0xFE	; 254
     ac8:	16 16       	cp	r1, r22
     aca:	17 06       	cpc	r1, r23
     acc:	e8 07       	cpc	r30, r24
     ace:	f9 07       	cpc	r31, r25
     ad0:	c0 f0       	brcs	.+48     	; 0xb02 <__fp_cmp+0x46>
     ad2:	12 16       	cp	r1, r18
     ad4:	13 06       	cpc	r1, r19
     ad6:	e4 07       	cpc	r30, r20
     ad8:	f5 07       	cpc	r31, r21
     ada:	98 f0       	brcs	.+38     	; 0xb02 <__fp_cmp+0x46>
     adc:	62 1b       	sub	r22, r18
     ade:	73 0b       	sbc	r23, r19
     ae0:	84 0b       	sbc	r24, r20
     ae2:	95 0b       	sbc	r25, r21
     ae4:	39 f4       	brne	.+14     	; 0xaf4 <__fp_cmp+0x38>
     ae6:	0a 26       	eor	r0, r26
     ae8:	61 f0       	breq	.+24     	; 0xb02 <__fp_cmp+0x46>
     aea:	23 2b       	or	r18, r19
     aec:	24 2b       	or	r18, r20
     aee:	25 2b       	or	r18, r21
     af0:	21 f4       	brne	.+8      	; 0xafa <__fp_cmp+0x3e>
     af2:	08 95       	ret
     af4:	0a 26       	eor	r0, r26
     af6:	09 f4       	brne	.+2      	; 0xafa <__fp_cmp+0x3e>
     af8:	a1 40       	sbci	r26, 0x01	; 1
     afa:	a6 95       	lsr	r26
     afc:	8f ef       	ldi	r24, 0xFF	; 255
     afe:	81 1d       	adc	r24, r1
     b00:	81 1d       	adc	r24, r1
     b02:	08 95       	ret

00000b04 <__fp_inf>:
     b04:	97 f9       	bld	r25, 7
     b06:	9f 67       	ori	r25, 0x7F	; 127
     b08:	80 e8       	ldi	r24, 0x80	; 128
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	60 e0       	ldi	r22, 0x00	; 0
     b0e:	08 95       	ret

00000b10 <__fp_nan>:
     b10:	9f ef       	ldi	r25, 0xFF	; 255
     b12:	80 ec       	ldi	r24, 0xC0	; 192
     b14:	08 95       	ret

00000b16 <__fp_pscA>:
     b16:	00 24       	eor	r0, r0
     b18:	0a 94       	dec	r0
     b1a:	16 16       	cp	r1, r22
     b1c:	17 06       	cpc	r1, r23
     b1e:	18 06       	cpc	r1, r24
     b20:	09 06       	cpc	r0, r25
     b22:	08 95       	ret

00000b24 <__fp_pscB>:
     b24:	00 24       	eor	r0, r0
     b26:	0a 94       	dec	r0
     b28:	12 16       	cp	r1, r18
     b2a:	13 06       	cpc	r1, r19
     b2c:	14 06       	cpc	r1, r20
     b2e:	05 06       	cpc	r0, r21
     b30:	08 95       	ret

00000b32 <__fp_round>:
     b32:	09 2e       	mov	r0, r25
     b34:	03 94       	inc	r0
     b36:	00 0c       	add	r0, r0
     b38:	11 f4       	brne	.+4      	; 0xb3e <__fp_round+0xc>
     b3a:	88 23       	and	r24, r24
     b3c:	52 f0       	brmi	.+20     	; 0xb52 <__fp_round+0x20>
     b3e:	bb 0f       	add	r27, r27
     b40:	40 f4       	brcc	.+16     	; 0xb52 <__fp_round+0x20>
     b42:	bf 2b       	or	r27, r31
     b44:	11 f4       	brne	.+4      	; 0xb4a <__fp_round+0x18>
     b46:	60 ff       	sbrs	r22, 0
     b48:	04 c0       	rjmp	.+8      	; 0xb52 <__fp_round+0x20>
     b4a:	6f 5f       	subi	r22, 0xFF	; 255
     b4c:	7f 4f       	sbci	r23, 0xFF	; 255
     b4e:	8f 4f       	sbci	r24, 0xFF	; 255
     b50:	9f 4f       	sbci	r25, 0xFF	; 255
     b52:	08 95       	ret

00000b54 <__fp_split3>:
     b54:	57 fd       	sbrc	r21, 7
     b56:	90 58       	subi	r25, 0x80	; 128
     b58:	44 0f       	add	r20, r20
     b5a:	55 1f       	adc	r21, r21
     b5c:	59 f0       	breq	.+22     	; 0xb74 <__fp_splitA+0x10>
     b5e:	5f 3f       	cpi	r21, 0xFF	; 255
     b60:	71 f0       	breq	.+28     	; 0xb7e <__fp_splitA+0x1a>
     b62:	47 95       	ror	r20

00000b64 <__fp_splitA>:
     b64:	88 0f       	add	r24, r24
     b66:	97 fb       	bst	r25, 7
     b68:	99 1f       	adc	r25, r25
     b6a:	61 f0       	breq	.+24     	; 0xb84 <__fp_splitA+0x20>
     b6c:	9f 3f       	cpi	r25, 0xFF	; 255
     b6e:	79 f0       	breq	.+30     	; 0xb8e <__fp_splitA+0x2a>
     b70:	87 95       	ror	r24
     b72:	08 95       	ret
     b74:	12 16       	cp	r1, r18
     b76:	13 06       	cpc	r1, r19
     b78:	14 06       	cpc	r1, r20
     b7a:	55 1f       	adc	r21, r21
     b7c:	f2 cf       	rjmp	.-28     	; 0xb62 <__fp_split3+0xe>
     b7e:	46 95       	lsr	r20
     b80:	f1 df       	rcall	.-30     	; 0xb64 <__fp_splitA>
     b82:	08 c0       	rjmp	.+16     	; 0xb94 <__fp_splitA+0x30>
     b84:	16 16       	cp	r1, r22
     b86:	17 06       	cpc	r1, r23
     b88:	18 06       	cpc	r1, r24
     b8a:	99 1f       	adc	r25, r25
     b8c:	f1 cf       	rjmp	.-30     	; 0xb70 <__fp_splitA+0xc>
     b8e:	86 95       	lsr	r24
     b90:	71 05       	cpc	r23, r1
     b92:	61 05       	cpc	r22, r1
     b94:	08 94       	sec
     b96:	08 95       	ret

00000b98 <__fp_zero>:
     b98:	e8 94       	clt

00000b9a <__fp_szero>:
     b9a:	bb 27       	eor	r27, r27
     b9c:	66 27       	eor	r22, r22
     b9e:	77 27       	eor	r23, r23
     ba0:	cb 01       	movw	r24, r22
     ba2:	97 f9       	bld	r25, 7
     ba4:	08 95       	ret

00000ba6 <__gesf2>:
     ba6:	0e 94 5e 05 	call	0xabc	; 0xabc <__fp_cmp>
     baa:	08 f4       	brcc	.+2      	; 0xbae <__gesf2+0x8>
     bac:	8f ef       	ldi	r24, 0xFF	; 255
     bae:	08 95       	ret

00000bb0 <__mulsf3>:
     bb0:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <__mulsf3x>
     bb4:	0c 94 99 05 	jmp	0xb32	; 0xb32 <__fp_round>
     bb8:	0e 94 8b 05 	call	0xb16	; 0xb16 <__fp_pscA>
     bbc:	38 f0       	brcs	.+14     	; 0xbcc <__mulsf3+0x1c>
     bbe:	0e 94 92 05 	call	0xb24	; 0xb24 <__fp_pscB>
     bc2:	20 f0       	brcs	.+8      	; 0xbcc <__mulsf3+0x1c>
     bc4:	95 23       	and	r25, r21
     bc6:	11 f0       	breq	.+4      	; 0xbcc <__mulsf3+0x1c>
     bc8:	0c 94 82 05 	jmp	0xb04	; 0xb04 <__fp_inf>
     bcc:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__fp_nan>
     bd0:	11 24       	eor	r1, r1
     bd2:	0c 94 cd 05 	jmp	0xb9a	; 0xb9a <__fp_szero>

00000bd6 <__mulsf3x>:
     bd6:	0e 94 aa 05 	call	0xb54	; 0xb54 <__fp_split3>
     bda:	70 f3       	brcs	.-36     	; 0xbb8 <__mulsf3+0x8>

00000bdc <__mulsf3_pse>:
     bdc:	95 9f       	mul	r25, r21
     bde:	c1 f3       	breq	.-16     	; 0xbd0 <__mulsf3+0x20>
     be0:	95 0f       	add	r25, r21
     be2:	50 e0       	ldi	r21, 0x00	; 0
     be4:	55 1f       	adc	r21, r21
     be6:	62 9f       	mul	r22, r18
     be8:	f0 01       	movw	r30, r0
     bea:	72 9f       	mul	r23, r18
     bec:	bb 27       	eor	r27, r27
     bee:	f0 0d       	add	r31, r0
     bf0:	b1 1d       	adc	r27, r1
     bf2:	63 9f       	mul	r22, r19
     bf4:	aa 27       	eor	r26, r26
     bf6:	f0 0d       	add	r31, r0
     bf8:	b1 1d       	adc	r27, r1
     bfa:	aa 1f       	adc	r26, r26
     bfc:	64 9f       	mul	r22, r20
     bfe:	66 27       	eor	r22, r22
     c00:	b0 0d       	add	r27, r0
     c02:	a1 1d       	adc	r26, r1
     c04:	66 1f       	adc	r22, r22
     c06:	82 9f       	mul	r24, r18
     c08:	22 27       	eor	r18, r18
     c0a:	b0 0d       	add	r27, r0
     c0c:	a1 1d       	adc	r26, r1
     c0e:	62 1f       	adc	r22, r18
     c10:	73 9f       	mul	r23, r19
     c12:	b0 0d       	add	r27, r0
     c14:	a1 1d       	adc	r26, r1
     c16:	62 1f       	adc	r22, r18
     c18:	83 9f       	mul	r24, r19
     c1a:	a0 0d       	add	r26, r0
     c1c:	61 1d       	adc	r22, r1
     c1e:	22 1f       	adc	r18, r18
     c20:	74 9f       	mul	r23, r20
     c22:	33 27       	eor	r19, r19
     c24:	a0 0d       	add	r26, r0
     c26:	61 1d       	adc	r22, r1
     c28:	23 1f       	adc	r18, r19
     c2a:	84 9f       	mul	r24, r20
     c2c:	60 0d       	add	r22, r0
     c2e:	21 1d       	adc	r18, r1
     c30:	82 2f       	mov	r24, r18
     c32:	76 2f       	mov	r23, r22
     c34:	6a 2f       	mov	r22, r26
     c36:	11 24       	eor	r1, r1
     c38:	9f 57       	subi	r25, 0x7F	; 127
     c3a:	50 40       	sbci	r21, 0x00	; 0
     c3c:	9a f0       	brmi	.+38     	; 0xc64 <__mulsf3_pse+0x88>
     c3e:	f1 f0       	breq	.+60     	; 0xc7c <__mulsf3_pse+0xa0>
     c40:	88 23       	and	r24, r24
     c42:	4a f0       	brmi	.+18     	; 0xc56 <__mulsf3_pse+0x7a>
     c44:	ee 0f       	add	r30, r30
     c46:	ff 1f       	adc	r31, r31
     c48:	bb 1f       	adc	r27, r27
     c4a:	66 1f       	adc	r22, r22
     c4c:	77 1f       	adc	r23, r23
     c4e:	88 1f       	adc	r24, r24
     c50:	91 50       	subi	r25, 0x01	; 1
     c52:	50 40       	sbci	r21, 0x00	; 0
     c54:	a9 f7       	brne	.-22     	; 0xc40 <__mulsf3_pse+0x64>
     c56:	9e 3f       	cpi	r25, 0xFE	; 254
     c58:	51 05       	cpc	r21, r1
     c5a:	80 f0       	brcs	.+32     	; 0xc7c <__mulsf3_pse+0xa0>
     c5c:	0c 94 82 05 	jmp	0xb04	; 0xb04 <__fp_inf>
     c60:	0c 94 cd 05 	jmp	0xb9a	; 0xb9a <__fp_szero>
     c64:	5f 3f       	cpi	r21, 0xFF	; 255
     c66:	e4 f3       	brlt	.-8      	; 0xc60 <__mulsf3_pse+0x84>
     c68:	98 3e       	cpi	r25, 0xE8	; 232
     c6a:	d4 f3       	brlt	.-12     	; 0xc60 <__mulsf3_pse+0x84>
     c6c:	86 95       	lsr	r24
     c6e:	77 95       	ror	r23
     c70:	67 95       	ror	r22
     c72:	b7 95       	ror	r27
     c74:	f7 95       	ror	r31
     c76:	e7 95       	ror	r30
     c78:	9f 5f       	subi	r25, 0xFF	; 255
     c7a:	c1 f7       	brne	.-16     	; 0xc6c <__mulsf3_pse+0x90>
     c7c:	fe 2b       	or	r31, r30
     c7e:	88 0f       	add	r24, r24
     c80:	91 1d       	adc	r25, r1
     c82:	96 95       	lsr	r25
     c84:	87 95       	ror	r24
     c86:	97 f9       	bld	r25, 7
     c88:	08 95       	ret

00000c8a <vfprintf>:
     c8a:	a3 e1       	ldi	r26, 0x13	; 19
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	eb e4       	ldi	r30, 0x4B	; 75
     c90:	f6 e0       	ldi	r31, 0x06	; 6
     c92:	0c 94 e3 09 	jmp	0x13c6	; 0x13c6 <__prologue_saves__>
     c96:	6c 01       	movw	r12, r24
     c98:	4b 01       	movw	r8, r22
     c9a:	2a 01       	movw	r4, r20
     c9c:	fc 01       	movw	r30, r24
     c9e:	17 82       	std	Z+7, r1	; 0x07
     ca0:	16 82       	std	Z+6, r1	; 0x06
     ca2:	83 81       	ldd	r24, Z+3	; 0x03
     ca4:	81 ff       	sbrs	r24, 1
     ca6:	43 c3       	rjmp	.+1670   	; 0x132e <vfprintf+0x6a4>
     ca8:	ae 01       	movw	r20, r28
     caa:	4f 5f       	subi	r20, 0xFF	; 255
     cac:	5f 4f       	sbci	r21, 0xFF	; 255
     cae:	3a 01       	movw	r6, r20
     cb0:	f6 01       	movw	r30, r12
     cb2:	93 81       	ldd	r25, Z+3	; 0x03
     cb4:	f4 01       	movw	r30, r8
     cb6:	93 fd       	sbrc	r25, 3
     cb8:	85 91       	lpm	r24, Z+
     cba:	93 ff       	sbrs	r25, 3
     cbc:	81 91       	ld	r24, Z+
     cbe:	4f 01       	movw	r8, r30
     cc0:	88 23       	and	r24, r24
     cc2:	09 f4       	brne	.+2      	; 0xcc6 <vfprintf+0x3c>
     cc4:	30 c3       	rjmp	.+1632   	; 0x1326 <vfprintf+0x69c>
     cc6:	85 32       	cpi	r24, 0x25	; 37
     cc8:	39 f4       	brne	.+14     	; 0xcd8 <vfprintf+0x4e>
     cca:	93 fd       	sbrc	r25, 3
     ccc:	85 91       	lpm	r24, Z+
     cce:	93 ff       	sbrs	r25, 3
     cd0:	81 91       	ld	r24, Z+
     cd2:	4f 01       	movw	r8, r30
     cd4:	85 32       	cpi	r24, 0x25	; 37
     cd6:	39 f4       	brne	.+14     	; 0xce6 <vfprintf+0x5c>
     cd8:	b6 01       	movw	r22, r12
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	0e 94 19 0b 	call	0x1632	; 0x1632 <fputc>
     ce0:	52 01       	movw	r10, r4
     ce2:	25 01       	movw	r4, r10
     ce4:	e5 cf       	rjmp	.-54     	; 0xcb0 <vfprintf+0x26>
     ce6:	10 e0       	ldi	r17, 0x00	; 0
     ce8:	f1 2c       	mov	r15, r1
     cea:	20 e0       	ldi	r18, 0x00	; 0
     cec:	20 32       	cpi	r18, 0x20	; 32
     cee:	a0 f4       	brcc	.+40     	; 0xd18 <vfprintf+0x8e>
     cf0:	8b 32       	cpi	r24, 0x2B	; 43
     cf2:	69 f0       	breq	.+26     	; 0xd0e <vfprintf+0x84>
     cf4:	30 f4       	brcc	.+12     	; 0xd02 <vfprintf+0x78>
     cf6:	80 32       	cpi	r24, 0x20	; 32
     cf8:	59 f0       	breq	.+22     	; 0xd10 <vfprintf+0x86>
     cfa:	83 32       	cpi	r24, 0x23	; 35
     cfc:	69 f4       	brne	.+26     	; 0xd18 <vfprintf+0x8e>
     cfe:	20 61       	ori	r18, 0x10	; 16
     d00:	2c c0       	rjmp	.+88     	; 0xd5a <vfprintf+0xd0>
     d02:	8d 32       	cpi	r24, 0x2D	; 45
     d04:	39 f0       	breq	.+14     	; 0xd14 <vfprintf+0x8a>
     d06:	80 33       	cpi	r24, 0x30	; 48
     d08:	39 f4       	brne	.+14     	; 0xd18 <vfprintf+0x8e>
     d0a:	21 60       	ori	r18, 0x01	; 1
     d0c:	26 c0       	rjmp	.+76     	; 0xd5a <vfprintf+0xd0>
     d0e:	22 60       	ori	r18, 0x02	; 2
     d10:	24 60       	ori	r18, 0x04	; 4
     d12:	23 c0       	rjmp	.+70     	; 0xd5a <vfprintf+0xd0>
     d14:	28 60       	ori	r18, 0x08	; 8
     d16:	21 c0       	rjmp	.+66     	; 0xd5a <vfprintf+0xd0>
     d18:	27 fd       	sbrc	r18, 7
     d1a:	27 c0       	rjmp	.+78     	; 0xd6a <vfprintf+0xe0>
     d1c:	30 ed       	ldi	r19, 0xD0	; 208
     d1e:	38 0f       	add	r19, r24
     d20:	3a 30       	cpi	r19, 0x0A	; 10
     d22:	78 f4       	brcc	.+30     	; 0xd42 <vfprintf+0xb8>
     d24:	26 ff       	sbrs	r18, 6
     d26:	06 c0       	rjmp	.+12     	; 0xd34 <vfprintf+0xaa>
     d28:	fa e0       	ldi	r31, 0x0A	; 10
     d2a:	1f 9f       	mul	r17, r31
     d2c:	30 0d       	add	r19, r0
     d2e:	11 24       	eor	r1, r1
     d30:	13 2f       	mov	r17, r19
     d32:	13 c0       	rjmp	.+38     	; 0xd5a <vfprintf+0xd0>
     d34:	4a e0       	ldi	r20, 0x0A	; 10
     d36:	f4 9e       	mul	r15, r20
     d38:	30 0d       	add	r19, r0
     d3a:	11 24       	eor	r1, r1
     d3c:	f3 2e       	mov	r15, r19
     d3e:	20 62       	ori	r18, 0x20	; 32
     d40:	0c c0       	rjmp	.+24     	; 0xd5a <vfprintf+0xd0>
     d42:	8e 32       	cpi	r24, 0x2E	; 46
     d44:	21 f4       	brne	.+8      	; 0xd4e <vfprintf+0xc4>
     d46:	26 fd       	sbrc	r18, 6
     d48:	ee c2       	rjmp	.+1500   	; 0x1326 <vfprintf+0x69c>
     d4a:	20 64       	ori	r18, 0x40	; 64
     d4c:	06 c0       	rjmp	.+12     	; 0xd5a <vfprintf+0xd0>
     d4e:	8c 36       	cpi	r24, 0x6C	; 108
     d50:	11 f4       	brne	.+4      	; 0xd56 <vfprintf+0xcc>
     d52:	20 68       	ori	r18, 0x80	; 128
     d54:	02 c0       	rjmp	.+4      	; 0xd5a <vfprintf+0xd0>
     d56:	88 36       	cpi	r24, 0x68	; 104
     d58:	41 f4       	brne	.+16     	; 0xd6a <vfprintf+0xe0>
     d5a:	f4 01       	movw	r30, r8
     d5c:	93 fd       	sbrc	r25, 3
     d5e:	85 91       	lpm	r24, Z+
     d60:	93 ff       	sbrs	r25, 3
     d62:	81 91       	ld	r24, Z+
     d64:	4f 01       	movw	r8, r30
     d66:	81 11       	cpse	r24, r1
     d68:	c1 cf       	rjmp	.-126    	; 0xcec <vfprintf+0x62>
     d6a:	9b eb       	ldi	r25, 0xBB	; 187
     d6c:	98 0f       	add	r25, r24
     d6e:	93 30       	cpi	r25, 0x03	; 3
     d70:	18 f4       	brcc	.+6      	; 0xd78 <vfprintf+0xee>
     d72:	20 61       	ori	r18, 0x10	; 16
     d74:	80 5e       	subi	r24, 0xE0	; 224
     d76:	06 c0       	rjmp	.+12     	; 0xd84 <vfprintf+0xfa>
     d78:	9b e9       	ldi	r25, 0x9B	; 155
     d7a:	98 0f       	add	r25, r24
     d7c:	93 30       	cpi	r25, 0x03	; 3
     d7e:	08 f0       	brcs	.+2      	; 0xd82 <vfprintf+0xf8>
     d80:	71 c1       	rjmp	.+738    	; 0x1064 <vfprintf+0x3da>
     d82:	2f 7e       	andi	r18, 0xEF	; 239
     d84:	26 ff       	sbrs	r18, 6
     d86:	16 e0       	ldi	r17, 0x06	; 6
     d88:	2f 73       	andi	r18, 0x3F	; 63
     d8a:	32 2e       	mov	r3, r18
     d8c:	85 36       	cpi	r24, 0x65	; 101
     d8e:	19 f4       	brne	.+6      	; 0xd96 <vfprintf+0x10c>
     d90:	20 64       	ori	r18, 0x40	; 64
     d92:	32 2e       	mov	r3, r18
     d94:	08 c0       	rjmp	.+16     	; 0xda6 <vfprintf+0x11c>
     d96:	86 36       	cpi	r24, 0x66	; 102
     d98:	21 f4       	brne	.+8      	; 0xda2 <vfprintf+0x118>
     d9a:	f2 2f       	mov	r31, r18
     d9c:	f0 68       	ori	r31, 0x80	; 128
     d9e:	3f 2e       	mov	r3, r31
     da0:	02 c0       	rjmp	.+4      	; 0xda6 <vfprintf+0x11c>
     da2:	11 11       	cpse	r17, r1
     da4:	11 50       	subi	r17, 0x01	; 1
     da6:	37 fe       	sbrs	r3, 7
     da8:	07 c0       	rjmp	.+14     	; 0xdb8 <vfprintf+0x12e>
     daa:	1c 33       	cpi	r17, 0x3C	; 60
     dac:	50 f4       	brcc	.+20     	; 0xdc2 <vfprintf+0x138>
     dae:	ee 24       	eor	r14, r14
     db0:	e3 94       	inc	r14
     db2:	e1 0e       	add	r14, r17
     db4:	27 e0       	ldi	r18, 0x07	; 7
     db6:	0b c0       	rjmp	.+22     	; 0xdce <vfprintf+0x144>
     db8:	18 30       	cpi	r17, 0x08	; 8
     dba:	38 f0       	brcs	.+14     	; 0xdca <vfprintf+0x140>
     dbc:	27 e0       	ldi	r18, 0x07	; 7
     dbe:	17 e0       	ldi	r17, 0x07	; 7
     dc0:	05 c0       	rjmp	.+10     	; 0xdcc <vfprintf+0x142>
     dc2:	27 e0       	ldi	r18, 0x07	; 7
     dc4:	4c e3       	ldi	r20, 0x3C	; 60
     dc6:	e4 2e       	mov	r14, r20
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <vfprintf+0x144>
     dca:	21 2f       	mov	r18, r17
     dcc:	e1 2c       	mov	r14, r1
     dce:	52 01       	movw	r10, r4
     dd0:	44 e0       	ldi	r20, 0x04	; 4
     dd2:	a4 0e       	add	r10, r20
     dd4:	b1 1c       	adc	r11, r1
     dd6:	f2 01       	movw	r30, r4
     dd8:	60 81       	ld	r22, Z
     dda:	71 81       	ldd	r23, Z+1	; 0x01
     ddc:	82 81       	ldd	r24, Z+2	; 0x02
     dde:	93 81       	ldd	r25, Z+3	; 0x03
     de0:	0e 2d       	mov	r16, r14
     de2:	a3 01       	movw	r20, r6
     de4:	0e 94 20 0a 	call	0x1440	; 0x1440 <__ftoa_engine>
     de8:	2c 01       	movw	r4, r24
     dea:	09 81       	ldd	r16, Y+1	; 0x01
     dec:	00 ff       	sbrs	r16, 0
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <vfprintf+0x16a>
     df0:	03 ff       	sbrs	r16, 3
     df2:	07 c0       	rjmp	.+14     	; 0xe02 <vfprintf+0x178>
     df4:	31 fc       	sbrc	r3, 1
     df6:	08 c0       	rjmp	.+16     	; 0xe08 <vfprintf+0x17e>
     df8:	32 fe       	sbrs	r3, 2
     dfa:	09 c0       	rjmp	.+18     	; 0xe0e <vfprintf+0x184>
     dfc:	30 e2       	ldi	r19, 0x20	; 32
     dfe:	23 2e       	mov	r2, r19
     e00:	07 c0       	rjmp	.+14     	; 0xe10 <vfprintf+0x186>
     e02:	2d e2       	ldi	r18, 0x2D	; 45
     e04:	22 2e       	mov	r2, r18
     e06:	04 c0       	rjmp	.+8      	; 0xe10 <vfprintf+0x186>
     e08:	9b e2       	ldi	r25, 0x2B	; 43
     e0a:	29 2e       	mov	r2, r25
     e0c:	01 c0       	rjmp	.+2      	; 0xe10 <vfprintf+0x186>
     e0e:	21 2c       	mov	r2, r1
     e10:	80 2f       	mov	r24, r16
     e12:	8c 70       	andi	r24, 0x0C	; 12
     e14:	19 f0       	breq	.+6      	; 0xe1c <vfprintf+0x192>
     e16:	21 10       	cpse	r2, r1
     e18:	68 c2       	rjmp	.+1232   	; 0x12ea <vfprintf+0x660>
     e1a:	a8 c2       	rjmp	.+1360   	; 0x136c <vfprintf+0x6e2>
     e1c:	37 fe       	sbrs	r3, 7
     e1e:	0f c0       	rjmp	.+30     	; 0xe3e <vfprintf+0x1b4>
     e20:	e4 0c       	add	r14, r4
     e22:	04 ff       	sbrs	r16, 4
     e24:	04 c0       	rjmp	.+8      	; 0xe2e <vfprintf+0x1a4>
     e26:	8a 81       	ldd	r24, Y+2	; 0x02
     e28:	81 33       	cpi	r24, 0x31	; 49
     e2a:	09 f4       	brne	.+2      	; 0xe2e <vfprintf+0x1a4>
     e2c:	ea 94       	dec	r14
     e2e:	1e 14       	cp	r1, r14
     e30:	74 f5       	brge	.+92     	; 0xe8e <vfprintf+0x204>
     e32:	f8 e0       	ldi	r31, 0x08	; 8
     e34:	fe 15       	cp	r31, r14
     e36:	78 f5       	brcc	.+94     	; 0xe96 <vfprintf+0x20c>
     e38:	88 e0       	ldi	r24, 0x08	; 8
     e3a:	e8 2e       	mov	r14, r24
     e3c:	2c c0       	rjmp	.+88     	; 0xe96 <vfprintf+0x20c>
     e3e:	36 fc       	sbrc	r3, 6
     e40:	2a c0       	rjmp	.+84     	; 0xe96 <vfprintf+0x20c>
     e42:	81 2f       	mov	r24, r17
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	84 15       	cp	r24, r4
     e48:	95 05       	cpc	r25, r5
     e4a:	9c f0       	brlt	.+38     	; 0xe72 <vfprintf+0x1e8>
     e4c:	2c ef       	ldi	r18, 0xFC	; 252
     e4e:	42 16       	cp	r4, r18
     e50:	2f ef       	ldi	r18, 0xFF	; 255
     e52:	52 06       	cpc	r5, r18
     e54:	74 f0       	brlt	.+28     	; 0xe72 <vfprintf+0x1e8>
     e56:	43 2d       	mov	r20, r3
     e58:	40 68       	ori	r20, 0x80	; 128
     e5a:	34 2e       	mov	r3, r20
     e5c:	0a c0       	rjmp	.+20     	; 0xe72 <vfprintf+0x1e8>
     e5e:	e2 e0       	ldi	r30, 0x02	; 2
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	ec 0f       	add	r30, r28
     e64:	fd 1f       	adc	r31, r29
     e66:	e1 0f       	add	r30, r17
     e68:	f1 1d       	adc	r31, r1
     e6a:	80 81       	ld	r24, Z
     e6c:	80 33       	cpi	r24, 0x30	; 48
     e6e:	19 f4       	brne	.+6      	; 0xe76 <vfprintf+0x1ec>
     e70:	11 50       	subi	r17, 0x01	; 1
     e72:	11 11       	cpse	r17, r1
     e74:	f4 cf       	rjmp	.-24     	; 0xe5e <vfprintf+0x1d4>
     e76:	37 fe       	sbrs	r3, 7
     e78:	0e c0       	rjmp	.+28     	; 0xe96 <vfprintf+0x20c>
     e7a:	ee 24       	eor	r14, r14
     e7c:	e3 94       	inc	r14
     e7e:	e1 0e       	add	r14, r17
     e80:	81 2f       	mov	r24, r17
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	48 16       	cp	r4, r24
     e86:	59 06       	cpc	r5, r25
     e88:	2c f4       	brge	.+10     	; 0xe94 <vfprintf+0x20a>
     e8a:	14 19       	sub	r17, r4
     e8c:	04 c0       	rjmp	.+8      	; 0xe96 <vfprintf+0x20c>
     e8e:	ee 24       	eor	r14, r14
     e90:	e3 94       	inc	r14
     e92:	01 c0       	rjmp	.+2      	; 0xe96 <vfprintf+0x20c>
     e94:	10 e0       	ldi	r17, 0x00	; 0
     e96:	37 fe       	sbrs	r3, 7
     e98:	06 c0       	rjmp	.+12     	; 0xea6 <vfprintf+0x21c>
     e9a:	14 14       	cp	r1, r4
     e9c:	15 04       	cpc	r1, r5
     e9e:	34 f4       	brge	.+12     	; 0xeac <vfprintf+0x222>
     ea0:	c2 01       	movw	r24, r4
     ea2:	01 96       	adiw	r24, 0x01	; 1
     ea4:	05 c0       	rjmp	.+10     	; 0xeb0 <vfprintf+0x226>
     ea6:	85 e0       	ldi	r24, 0x05	; 5
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <vfprintf+0x226>
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	21 10       	cpse	r2, r1
     eb2:	01 96       	adiw	r24, 0x01	; 1
     eb4:	11 23       	and	r17, r17
     eb6:	31 f0       	breq	.+12     	; 0xec4 <vfprintf+0x23a>
     eb8:	21 2f       	mov	r18, r17
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	2f 5f       	subi	r18, 0xFF	; 255
     ebe:	3f 4f       	sbci	r19, 0xFF	; 255
     ec0:	82 0f       	add	r24, r18
     ec2:	93 1f       	adc	r25, r19
     ec4:	2f 2d       	mov	r18, r15
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	82 17       	cp	r24, r18
     eca:	93 07       	cpc	r25, r19
     ecc:	14 f4       	brge	.+4      	; 0xed2 <vfprintf+0x248>
     ece:	f8 1a       	sub	r15, r24
     ed0:	01 c0       	rjmp	.+2      	; 0xed4 <vfprintf+0x24a>
     ed2:	f1 2c       	mov	r15, r1
     ed4:	83 2d       	mov	r24, r3
     ed6:	89 70       	andi	r24, 0x09	; 9
     ed8:	49 f4       	brne	.+18     	; 0xeec <vfprintf+0x262>
     eda:	ff 20       	and	r15, r15
     edc:	39 f0       	breq	.+14     	; 0xeec <vfprintf+0x262>
     ede:	b6 01       	movw	r22, r12
     ee0:	80 e2       	ldi	r24, 0x20	; 32
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	0e 94 19 0b 	call	0x1632	; 0x1632 <fputc>
     ee8:	fa 94       	dec	r15
     eea:	f7 cf       	rjmp	.-18     	; 0xeda <vfprintf+0x250>
     eec:	22 20       	and	r2, r2
     eee:	29 f0       	breq	.+10     	; 0xefa <vfprintf+0x270>
     ef0:	b6 01       	movw	r22, r12
     ef2:	82 2d       	mov	r24, r2
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	0e 94 19 0b 	call	0x1632	; 0x1632 <fputc>
     efa:	33 fc       	sbrc	r3, 3
     efc:	09 c0       	rjmp	.+18     	; 0xf10 <vfprintf+0x286>
     efe:	ff 20       	and	r15, r15
     f00:	39 f0       	breq	.+14     	; 0xf10 <vfprintf+0x286>
     f02:	b6 01       	movw	r22, r12
     f04:	80 e3       	ldi	r24, 0x30	; 48
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	0e 94 19 0b 	call	0x1632	; 0x1632 <fputc>
     f0c:	fa 94       	dec	r15
     f0e:	f7 cf       	rjmp	.-18     	; 0xefe <vfprintf+0x274>
     f10:	37 fe       	sbrs	r3, 7
     f12:	5a c0       	rjmp	.+180    	; 0xfc8 <vfprintf+0x33e>
     f14:	94 2d       	mov	r25, r4
     f16:	85 2d       	mov	r24, r5
     f18:	57 fe       	sbrs	r5, 7
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <vfprintf+0x296>
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	29 2e       	mov	r2, r25
     f22:	38 2e       	mov	r3, r24
     f24:	20 e0       	ldi	r18, 0x00	; 0
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	a2 01       	movw	r20, r4
     f2a:	4e 19       	sub	r20, r14
     f2c:	51 09       	sbc	r21, r1
     f2e:	5d 87       	std	Y+13, r21	; 0x0d
     f30:	4c 87       	std	Y+12, r20	; 0x0c
     f32:	a2 01       	movw	r20, r4
     f34:	42 19       	sub	r20, r2
     f36:	53 09       	sbc	r21, r3
     f38:	5f 87       	std	Y+15, r21	; 0x0f
     f3a:	4e 87       	std	Y+14, r20	; 0x0e
     f3c:	61 2f       	mov	r22, r17
     f3e:	70 e0       	ldi	r23, 0x00	; 0
     f40:	44 27       	eor	r20, r20
     f42:	55 27       	eor	r21, r21
     f44:	46 1b       	sub	r20, r22
     f46:	57 0b       	sbc	r21, r23
     f48:	59 8b       	std	Y+17, r21	; 0x11
     f4a:	48 8b       	std	Y+16, r20	; 0x10
     f4c:	5f ef       	ldi	r21, 0xFF	; 255
     f4e:	25 16       	cp	r2, r21
     f50:	35 06       	cpc	r3, r21
     f52:	49 f4       	brne	.+18     	; 0xf66 <vfprintf+0x2dc>
     f54:	b6 01       	movw	r22, r12
     f56:	8e e2       	ldi	r24, 0x2E	; 46
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	2a 8b       	std	Y+18, r18	; 0x12
     f5c:	3b 8b       	std	Y+19, r19	; 0x13
     f5e:	0e 94 19 0b 	call	0x1632	; 0x1632 <fputc>
     f62:	3b 89       	ldd	r19, Y+19	; 0x13
     f64:	2a 89       	ldd	r18, Y+18	; 0x12
     f66:	42 14       	cp	r4, r2
     f68:	53 04       	cpc	r5, r3
     f6a:	6c f0       	brlt	.+26     	; 0xf86 <vfprintf+0x2fc>
     f6c:	4c 85       	ldd	r20, Y+12	; 0x0c
     f6e:	5d 85       	ldd	r21, Y+13	; 0x0d
     f70:	42 15       	cp	r20, r2
     f72:	53 05       	cpc	r21, r3
     f74:	44 f4       	brge	.+16     	; 0xf86 <vfprintf+0x2fc>
     f76:	ee 85       	ldd	r30, Y+14	; 0x0e
     f78:	ff 85       	ldd	r31, Y+15	; 0x0f
     f7a:	e2 0f       	add	r30, r18
     f7c:	f3 1f       	adc	r31, r19
     f7e:	e6 0d       	add	r30, r6
     f80:	f7 1d       	adc	r31, r7
     f82:	81 81       	ldd	r24, Z+1	; 0x01
     f84:	01 c0       	rjmp	.+2      	; 0xf88 <vfprintf+0x2fe>
     f86:	80 e3       	ldi	r24, 0x30	; 48
     f88:	51 e0       	ldi	r21, 0x01	; 1
     f8a:	25 1a       	sub	r2, r21
     f8c:	31 08       	sbc	r3, r1
     f8e:	2f 5f       	subi	r18, 0xFF	; 255
     f90:	3f 4f       	sbci	r19, 0xFF	; 255
     f92:	48 89       	ldd	r20, Y+16	; 0x10
     f94:	59 89       	ldd	r21, Y+17	; 0x11
     f96:	24 16       	cp	r2, r20
     f98:	35 06       	cpc	r3, r21
     f9a:	4c f0       	brlt	.+18     	; 0xfae <vfprintf+0x324>
     f9c:	b6 01       	movw	r22, r12
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	2a 8b       	std	Y+18, r18	; 0x12
     fa2:	3b 8b       	std	Y+19, r19	; 0x13
     fa4:	0e 94 19 0b 	call	0x1632	; 0x1632 <fputc>
     fa8:	2a 89       	ldd	r18, Y+18	; 0x12
     faa:	3b 89       	ldd	r19, Y+19	; 0x13
     fac:	cf cf       	rjmp	.-98     	; 0xf4c <vfprintf+0x2c2>
     fae:	24 14       	cp	r2, r4
     fb0:	35 04       	cpc	r3, r5
     fb2:	39 f4       	brne	.+14     	; 0xfc2 <vfprintf+0x338>
     fb4:	9a 81       	ldd	r25, Y+2	; 0x02
     fb6:	96 33       	cpi	r25, 0x36	; 54
     fb8:	18 f4       	brcc	.+6      	; 0xfc0 <vfprintf+0x336>
     fba:	95 33       	cpi	r25, 0x35	; 53
     fbc:	11 f4       	brne	.+4      	; 0xfc2 <vfprintf+0x338>
     fbe:	04 ff       	sbrs	r16, 4
     fc0:	81 e3       	ldi	r24, 0x31	; 49
     fc2:	b6 01       	movw	r22, r12
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	4b c0       	rjmp	.+150    	; 0x105e <vfprintf+0x3d4>
     fc8:	8a 81       	ldd	r24, Y+2	; 0x02
     fca:	81 33       	cpi	r24, 0x31	; 49
     fcc:	09 f0       	breq	.+2      	; 0xfd0 <vfprintf+0x346>
     fce:	0f 7e       	andi	r16, 0xEF	; 239
     fd0:	b6 01       	movw	r22, r12
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	0e 94 19 0b 	call	0x1632	; 0x1632 <fputc>
     fd8:	11 11       	cpse	r17, r1
     fda:	05 c0       	rjmp	.+10     	; 0xfe6 <vfprintf+0x35c>
     fdc:	34 fc       	sbrc	r3, 4
     fde:	18 c0       	rjmp	.+48     	; 0x1010 <vfprintf+0x386>
     fe0:	85 e6       	ldi	r24, 0x65	; 101
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	17 c0       	rjmp	.+46     	; 0x1014 <vfprintf+0x38a>
     fe6:	b6 01       	movw	r22, r12
     fe8:	8e e2       	ldi	r24, 0x2E	; 46
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	0e 94 19 0b 	call	0x1632	; 0x1632 <fputc>
     ff0:	82 e0       	ldi	r24, 0x02	; 2
     ff2:	ee 24       	eor	r14, r14
     ff4:	e3 94       	inc	r14
     ff6:	e8 0e       	add	r14, r24
     ff8:	f3 01       	movw	r30, r6
     ffa:	e8 0f       	add	r30, r24
     ffc:	f1 1d       	adc	r31, r1
     ffe:	80 81       	ld	r24, Z
    1000:	b6 01       	movw	r22, r12
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	0e 94 19 0b 	call	0x1632	; 0x1632 <fputc>
    1008:	11 50       	subi	r17, 0x01	; 1
    100a:	8e 2d       	mov	r24, r14
    100c:	91 f7       	brne	.-28     	; 0xff2 <vfprintf+0x368>
    100e:	e6 cf       	rjmp	.-52     	; 0xfdc <vfprintf+0x352>
    1010:	85 e4       	ldi	r24, 0x45	; 69
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	b6 01       	movw	r22, r12
    1016:	0e 94 19 0b 	call	0x1632	; 0x1632 <fputc>
    101a:	57 fc       	sbrc	r5, 7
    101c:	05 c0       	rjmp	.+10     	; 0x1028 <vfprintf+0x39e>
    101e:	41 14       	cp	r4, r1
    1020:	51 04       	cpc	r5, r1
    1022:	39 f4       	brne	.+14     	; 0x1032 <vfprintf+0x3a8>
    1024:	04 ff       	sbrs	r16, 4
    1026:	05 c0       	rjmp	.+10     	; 0x1032 <vfprintf+0x3a8>
    1028:	51 94       	neg	r5
    102a:	41 94       	neg	r4
    102c:	51 08       	sbc	r5, r1
    102e:	8d e2       	ldi	r24, 0x2D	; 45
    1030:	01 c0       	rjmp	.+2      	; 0x1034 <vfprintf+0x3aa>
    1032:	8b e2       	ldi	r24, 0x2B	; 43
    1034:	b6 01       	movw	r22, r12
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	0e 94 19 0b 	call	0x1632	; 0x1632 <fputc>
    103c:	80 e3       	ldi	r24, 0x30	; 48
    103e:	9a e0       	ldi	r25, 0x0A	; 10
    1040:	49 16       	cp	r4, r25
    1042:	51 04       	cpc	r5, r1
    1044:	2c f0       	brlt	.+10     	; 0x1050 <vfprintf+0x3c6>
    1046:	8f 5f       	subi	r24, 0xFF	; 255
    1048:	5a e0       	ldi	r21, 0x0A	; 10
    104a:	45 1a       	sub	r4, r21
    104c:	51 08       	sbc	r5, r1
    104e:	f7 cf       	rjmp	.-18     	; 0x103e <vfprintf+0x3b4>
    1050:	b6 01       	movw	r22, r12
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	0e 94 19 0b 	call	0x1632	; 0x1632 <fputc>
    1058:	b6 01       	movw	r22, r12
    105a:	c2 01       	movw	r24, r4
    105c:	c0 96       	adiw	r24, 0x30	; 48
    105e:	0e 94 19 0b 	call	0x1632	; 0x1632 <fputc>
    1062:	57 c1       	rjmp	.+686    	; 0x1312 <vfprintf+0x688>
    1064:	83 36       	cpi	r24, 0x63	; 99
    1066:	31 f0       	breq	.+12     	; 0x1074 <vfprintf+0x3ea>
    1068:	83 37       	cpi	r24, 0x73	; 115
    106a:	79 f0       	breq	.+30     	; 0x108a <vfprintf+0x400>
    106c:	83 35       	cpi	r24, 0x53	; 83
    106e:	09 f0       	breq	.+2      	; 0x1072 <vfprintf+0x3e8>
    1070:	58 c0       	rjmp	.+176    	; 0x1122 <vfprintf+0x498>
    1072:	21 c0       	rjmp	.+66     	; 0x10b6 <vfprintf+0x42c>
    1074:	52 01       	movw	r10, r4
    1076:	e2 e0       	ldi	r30, 0x02	; 2
    1078:	ae 0e       	add	r10, r30
    107a:	b1 1c       	adc	r11, r1
    107c:	f2 01       	movw	r30, r4
    107e:	80 81       	ld	r24, Z
    1080:	89 83       	std	Y+1, r24	; 0x01
    1082:	01 e0       	ldi	r16, 0x01	; 1
    1084:	10 e0       	ldi	r17, 0x00	; 0
    1086:	23 01       	movw	r4, r6
    1088:	14 c0       	rjmp	.+40     	; 0x10b2 <vfprintf+0x428>
    108a:	52 01       	movw	r10, r4
    108c:	f2 e0       	ldi	r31, 0x02	; 2
    108e:	af 0e       	add	r10, r31
    1090:	b1 1c       	adc	r11, r1
    1092:	f2 01       	movw	r30, r4
    1094:	40 80       	ld	r4, Z
    1096:	51 80       	ldd	r5, Z+1	; 0x01
    1098:	26 ff       	sbrs	r18, 6
    109a:	03 c0       	rjmp	.+6      	; 0x10a2 <vfprintf+0x418>
    109c:	61 2f       	mov	r22, r17
    109e:	70 e0       	ldi	r23, 0x00	; 0
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <vfprintf+0x41c>
    10a2:	6f ef       	ldi	r22, 0xFF	; 255
    10a4:	7f ef       	ldi	r23, 0xFF	; 255
    10a6:	c2 01       	movw	r24, r4
    10a8:	2a 8b       	std	Y+18, r18	; 0x12
    10aa:	0e 94 0e 0b 	call	0x161c	; 0x161c <strnlen>
    10ae:	8c 01       	movw	r16, r24
    10b0:	2a 89       	ldd	r18, Y+18	; 0x12
    10b2:	2f 77       	andi	r18, 0x7F	; 127
    10b4:	15 c0       	rjmp	.+42     	; 0x10e0 <vfprintf+0x456>
    10b6:	52 01       	movw	r10, r4
    10b8:	f2 e0       	ldi	r31, 0x02	; 2
    10ba:	af 0e       	add	r10, r31
    10bc:	b1 1c       	adc	r11, r1
    10be:	f2 01       	movw	r30, r4
    10c0:	40 80       	ld	r4, Z
    10c2:	51 80       	ldd	r5, Z+1	; 0x01
    10c4:	26 ff       	sbrs	r18, 6
    10c6:	03 c0       	rjmp	.+6      	; 0x10ce <vfprintf+0x444>
    10c8:	61 2f       	mov	r22, r17
    10ca:	70 e0       	ldi	r23, 0x00	; 0
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <vfprintf+0x448>
    10ce:	6f ef       	ldi	r22, 0xFF	; 255
    10d0:	7f ef       	ldi	r23, 0xFF	; 255
    10d2:	c2 01       	movw	r24, r4
    10d4:	2a 8b       	std	Y+18, r18	; 0x12
    10d6:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <strnlen_P>
    10da:	8c 01       	movw	r16, r24
    10dc:	2a 89       	ldd	r18, Y+18	; 0x12
    10de:	20 68       	ori	r18, 0x80	; 128
    10e0:	32 2e       	mov	r3, r18
    10e2:	23 fd       	sbrc	r18, 3
    10e4:	1a c0       	rjmp	.+52     	; 0x111a <vfprintf+0x490>
    10e6:	8f 2d       	mov	r24, r15
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	08 17       	cp	r16, r24
    10ec:	19 07       	cpc	r17, r25
    10ee:	a8 f4       	brcc	.+42     	; 0x111a <vfprintf+0x490>
    10f0:	b6 01       	movw	r22, r12
    10f2:	80 e2       	ldi	r24, 0x20	; 32
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	0e 94 19 0b 	call	0x1632	; 0x1632 <fputc>
    10fa:	fa 94       	dec	r15
    10fc:	f4 cf       	rjmp	.-24     	; 0x10e6 <vfprintf+0x45c>
    10fe:	f2 01       	movw	r30, r4
    1100:	37 fc       	sbrc	r3, 7
    1102:	85 91       	lpm	r24, Z+
    1104:	37 fe       	sbrs	r3, 7
    1106:	81 91       	ld	r24, Z+
    1108:	2f 01       	movw	r4, r30
    110a:	b6 01       	movw	r22, r12
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	0e 94 19 0b 	call	0x1632	; 0x1632 <fputc>
    1112:	f1 10       	cpse	r15, r1
    1114:	fa 94       	dec	r15
    1116:	01 50       	subi	r16, 0x01	; 1
    1118:	11 09       	sbc	r17, r1
    111a:	01 15       	cp	r16, r1
    111c:	11 05       	cpc	r17, r1
    111e:	79 f7       	brne	.-34     	; 0x10fe <vfprintf+0x474>
    1120:	f8 c0       	rjmp	.+496    	; 0x1312 <vfprintf+0x688>
    1122:	84 36       	cpi	r24, 0x64	; 100
    1124:	11 f0       	breq	.+4      	; 0x112a <vfprintf+0x4a0>
    1126:	89 36       	cpi	r24, 0x69	; 105
    1128:	59 f5       	brne	.+86     	; 0x1180 <vfprintf+0x4f6>
    112a:	52 01       	movw	r10, r4
    112c:	27 ff       	sbrs	r18, 7
    112e:	09 c0       	rjmp	.+18     	; 0x1142 <vfprintf+0x4b8>
    1130:	f4 e0       	ldi	r31, 0x04	; 4
    1132:	af 0e       	add	r10, r31
    1134:	b1 1c       	adc	r11, r1
    1136:	f2 01       	movw	r30, r4
    1138:	60 81       	ld	r22, Z
    113a:	71 81       	ldd	r23, Z+1	; 0x01
    113c:	82 81       	ldd	r24, Z+2	; 0x02
    113e:	93 81       	ldd	r25, Z+3	; 0x03
    1140:	0a c0       	rjmp	.+20     	; 0x1156 <vfprintf+0x4cc>
    1142:	f2 e0       	ldi	r31, 0x02	; 2
    1144:	af 0e       	add	r10, r31
    1146:	b1 1c       	adc	r11, r1
    1148:	f2 01       	movw	r30, r4
    114a:	60 81       	ld	r22, Z
    114c:	71 81       	ldd	r23, Z+1	; 0x01
    114e:	07 2e       	mov	r0, r23
    1150:	00 0c       	add	r0, r0
    1152:	88 0b       	sbc	r24, r24
    1154:	99 0b       	sbc	r25, r25
    1156:	2f 76       	andi	r18, 0x6F	; 111
    1158:	32 2e       	mov	r3, r18
    115a:	97 ff       	sbrs	r25, 7
    115c:	09 c0       	rjmp	.+18     	; 0x1170 <vfprintf+0x4e6>
    115e:	90 95       	com	r25
    1160:	80 95       	com	r24
    1162:	70 95       	com	r23
    1164:	61 95       	neg	r22
    1166:	7f 4f       	sbci	r23, 0xFF	; 255
    1168:	8f 4f       	sbci	r24, 0xFF	; 255
    116a:	9f 4f       	sbci	r25, 0xFF	; 255
    116c:	20 68       	ori	r18, 0x80	; 128
    116e:	32 2e       	mov	r3, r18
    1170:	2a e0       	ldi	r18, 0x0A	; 10
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	a3 01       	movw	r20, r6
    1176:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <__ultoa_invert>
    117a:	e8 2e       	mov	r14, r24
    117c:	e6 18       	sub	r14, r6
    117e:	3f c0       	rjmp	.+126    	; 0x11fe <vfprintf+0x574>
    1180:	02 2f       	mov	r16, r18
    1182:	85 37       	cpi	r24, 0x75	; 117
    1184:	21 f4       	brne	.+8      	; 0x118e <vfprintf+0x504>
    1186:	0f 7e       	andi	r16, 0xEF	; 239
    1188:	2a e0       	ldi	r18, 0x0A	; 10
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	1d c0       	rjmp	.+58     	; 0x11c8 <vfprintf+0x53e>
    118e:	09 7f       	andi	r16, 0xF9	; 249
    1190:	8f 36       	cpi	r24, 0x6F	; 111
    1192:	91 f0       	breq	.+36     	; 0x11b8 <vfprintf+0x52e>
    1194:	18 f4       	brcc	.+6      	; 0x119c <vfprintf+0x512>
    1196:	88 35       	cpi	r24, 0x58	; 88
    1198:	59 f0       	breq	.+22     	; 0x11b0 <vfprintf+0x526>
    119a:	c5 c0       	rjmp	.+394    	; 0x1326 <vfprintf+0x69c>
    119c:	80 37       	cpi	r24, 0x70	; 112
    119e:	19 f0       	breq	.+6      	; 0x11a6 <vfprintf+0x51c>
    11a0:	88 37       	cpi	r24, 0x78	; 120
    11a2:	11 f0       	breq	.+4      	; 0x11a8 <vfprintf+0x51e>
    11a4:	c0 c0       	rjmp	.+384    	; 0x1326 <vfprintf+0x69c>
    11a6:	00 61       	ori	r16, 0x10	; 16
    11a8:	04 ff       	sbrs	r16, 4
    11aa:	09 c0       	rjmp	.+18     	; 0x11be <vfprintf+0x534>
    11ac:	04 60       	ori	r16, 0x04	; 4
    11ae:	07 c0       	rjmp	.+14     	; 0x11be <vfprintf+0x534>
    11b0:	24 ff       	sbrs	r18, 4
    11b2:	08 c0       	rjmp	.+16     	; 0x11c4 <vfprintf+0x53a>
    11b4:	06 60       	ori	r16, 0x06	; 6
    11b6:	06 c0       	rjmp	.+12     	; 0x11c4 <vfprintf+0x53a>
    11b8:	28 e0       	ldi	r18, 0x08	; 8
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	05 c0       	rjmp	.+10     	; 0x11c8 <vfprintf+0x53e>
    11be:	20 e1       	ldi	r18, 0x10	; 16
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <vfprintf+0x53e>
    11c4:	20 e1       	ldi	r18, 0x10	; 16
    11c6:	32 e0       	ldi	r19, 0x02	; 2
    11c8:	52 01       	movw	r10, r4
    11ca:	07 ff       	sbrs	r16, 7
    11cc:	09 c0       	rjmp	.+18     	; 0x11e0 <vfprintf+0x556>
    11ce:	f4 e0       	ldi	r31, 0x04	; 4
    11d0:	af 0e       	add	r10, r31
    11d2:	b1 1c       	adc	r11, r1
    11d4:	f2 01       	movw	r30, r4
    11d6:	60 81       	ld	r22, Z
    11d8:	71 81       	ldd	r23, Z+1	; 0x01
    11da:	82 81       	ldd	r24, Z+2	; 0x02
    11dc:	93 81       	ldd	r25, Z+3	; 0x03
    11de:	08 c0       	rjmp	.+16     	; 0x11f0 <vfprintf+0x566>
    11e0:	f2 e0       	ldi	r31, 0x02	; 2
    11e2:	af 0e       	add	r10, r31
    11e4:	b1 1c       	adc	r11, r1
    11e6:	f2 01       	movw	r30, r4
    11e8:	60 81       	ld	r22, Z
    11ea:	71 81       	ldd	r23, Z+1	; 0x01
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	a3 01       	movw	r20, r6
    11f2:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <__ultoa_invert>
    11f6:	e8 2e       	mov	r14, r24
    11f8:	e6 18       	sub	r14, r6
    11fa:	0f 77       	andi	r16, 0x7F	; 127
    11fc:	30 2e       	mov	r3, r16
    11fe:	36 fe       	sbrs	r3, 6
    1200:	0b c0       	rjmp	.+22     	; 0x1218 <vfprintf+0x58e>
    1202:	33 2d       	mov	r19, r3
    1204:	3e 7f       	andi	r19, 0xFE	; 254
    1206:	e1 16       	cp	r14, r17
    1208:	50 f4       	brcc	.+20     	; 0x121e <vfprintf+0x594>
    120a:	34 fe       	sbrs	r3, 4
    120c:	0a c0       	rjmp	.+20     	; 0x1222 <vfprintf+0x598>
    120e:	32 fc       	sbrc	r3, 2
    1210:	08 c0       	rjmp	.+16     	; 0x1222 <vfprintf+0x598>
    1212:	33 2d       	mov	r19, r3
    1214:	3e 7e       	andi	r19, 0xEE	; 238
    1216:	05 c0       	rjmp	.+10     	; 0x1222 <vfprintf+0x598>
    1218:	0e 2d       	mov	r16, r14
    121a:	33 2d       	mov	r19, r3
    121c:	03 c0       	rjmp	.+6      	; 0x1224 <vfprintf+0x59a>
    121e:	0e 2d       	mov	r16, r14
    1220:	01 c0       	rjmp	.+2      	; 0x1224 <vfprintf+0x59a>
    1222:	01 2f       	mov	r16, r17
    1224:	34 ff       	sbrs	r19, 4
    1226:	0c c0       	rjmp	.+24     	; 0x1240 <vfprintf+0x5b6>
    1228:	fe 01       	movw	r30, r28
    122a:	ee 0d       	add	r30, r14
    122c:	f1 1d       	adc	r31, r1
    122e:	80 81       	ld	r24, Z
    1230:	80 33       	cpi	r24, 0x30	; 48
    1232:	11 f4       	brne	.+4      	; 0x1238 <vfprintf+0x5ae>
    1234:	39 7e       	andi	r19, 0xE9	; 233
    1236:	08 c0       	rjmp	.+16     	; 0x1248 <vfprintf+0x5be>
    1238:	32 ff       	sbrs	r19, 2
    123a:	05 c0       	rjmp	.+10     	; 0x1246 <vfprintf+0x5bc>
    123c:	0e 5f       	subi	r16, 0xFE	; 254
    123e:	04 c0       	rjmp	.+8      	; 0x1248 <vfprintf+0x5be>
    1240:	83 2f       	mov	r24, r19
    1242:	86 78       	andi	r24, 0x86	; 134
    1244:	09 f0       	breq	.+2      	; 0x1248 <vfprintf+0x5be>
    1246:	0f 5f       	subi	r16, 0xFF	; 255
    1248:	33 fd       	sbrc	r19, 3
    124a:	13 c0       	rjmp	.+38     	; 0x1272 <vfprintf+0x5e8>
    124c:	30 ff       	sbrs	r19, 0
    124e:	06 c0       	rjmp	.+12     	; 0x125c <vfprintf+0x5d2>
    1250:	1e 2d       	mov	r17, r14
    1252:	0f 15       	cp	r16, r15
    1254:	18 f4       	brcc	.+6      	; 0x125c <vfprintf+0x5d2>
    1256:	1f 0d       	add	r17, r15
    1258:	10 1b       	sub	r17, r16
    125a:	0f 2d       	mov	r16, r15
    125c:	0f 15       	cp	r16, r15
    125e:	68 f4       	brcc	.+26     	; 0x127a <vfprintf+0x5f0>
    1260:	b6 01       	movw	r22, r12
    1262:	80 e2       	ldi	r24, 0x20	; 32
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	3b 8b       	std	Y+19, r19	; 0x13
    1268:	0e 94 19 0b 	call	0x1632	; 0x1632 <fputc>
    126c:	0f 5f       	subi	r16, 0xFF	; 255
    126e:	3b 89       	ldd	r19, Y+19	; 0x13
    1270:	f5 cf       	rjmp	.-22     	; 0x125c <vfprintf+0x5d2>
    1272:	0f 15       	cp	r16, r15
    1274:	10 f4       	brcc	.+4      	; 0x127a <vfprintf+0x5f0>
    1276:	f0 1a       	sub	r15, r16
    1278:	01 c0       	rjmp	.+2      	; 0x127c <vfprintf+0x5f2>
    127a:	f1 2c       	mov	r15, r1
    127c:	34 ff       	sbrs	r19, 4
    127e:	12 c0       	rjmp	.+36     	; 0x12a4 <vfprintf+0x61a>
    1280:	b6 01       	movw	r22, r12
    1282:	80 e3       	ldi	r24, 0x30	; 48
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	3b 8b       	std	Y+19, r19	; 0x13
    1288:	0e 94 19 0b 	call	0x1632	; 0x1632 <fputc>
    128c:	3b 89       	ldd	r19, Y+19	; 0x13
    128e:	32 ff       	sbrs	r19, 2
    1290:	17 c0       	rjmp	.+46     	; 0x12c0 <vfprintf+0x636>
    1292:	31 fd       	sbrc	r19, 1
    1294:	03 c0       	rjmp	.+6      	; 0x129c <vfprintf+0x612>
    1296:	88 e7       	ldi	r24, 0x78	; 120
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	02 c0       	rjmp	.+4      	; 0x12a0 <vfprintf+0x616>
    129c:	88 e5       	ldi	r24, 0x58	; 88
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	b6 01       	movw	r22, r12
    12a2:	0c c0       	rjmp	.+24     	; 0x12bc <vfprintf+0x632>
    12a4:	83 2f       	mov	r24, r19
    12a6:	86 78       	andi	r24, 0x86	; 134
    12a8:	59 f0       	breq	.+22     	; 0x12c0 <vfprintf+0x636>
    12aa:	31 ff       	sbrs	r19, 1
    12ac:	02 c0       	rjmp	.+4      	; 0x12b2 <vfprintf+0x628>
    12ae:	8b e2       	ldi	r24, 0x2B	; 43
    12b0:	01 c0       	rjmp	.+2      	; 0x12b4 <vfprintf+0x62a>
    12b2:	80 e2       	ldi	r24, 0x20	; 32
    12b4:	37 fd       	sbrc	r19, 7
    12b6:	8d e2       	ldi	r24, 0x2D	; 45
    12b8:	b6 01       	movw	r22, r12
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	0e 94 19 0b 	call	0x1632	; 0x1632 <fputc>
    12c0:	e1 16       	cp	r14, r17
    12c2:	38 f4       	brcc	.+14     	; 0x12d2 <vfprintf+0x648>
    12c4:	b6 01       	movw	r22, r12
    12c6:	80 e3       	ldi	r24, 0x30	; 48
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	0e 94 19 0b 	call	0x1632	; 0x1632 <fputc>
    12ce:	11 50       	subi	r17, 0x01	; 1
    12d0:	f7 cf       	rjmp	.-18     	; 0x12c0 <vfprintf+0x636>
    12d2:	ea 94       	dec	r14
    12d4:	f3 01       	movw	r30, r6
    12d6:	ee 0d       	add	r30, r14
    12d8:	f1 1d       	adc	r31, r1
    12da:	80 81       	ld	r24, Z
    12dc:	b6 01       	movw	r22, r12
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	0e 94 19 0b 	call	0x1632	; 0x1632 <fputc>
    12e4:	e1 10       	cpse	r14, r1
    12e6:	f5 cf       	rjmp	.-22     	; 0x12d2 <vfprintf+0x648>
    12e8:	14 c0       	rjmp	.+40     	; 0x1312 <vfprintf+0x688>
    12ea:	f4 e0       	ldi	r31, 0x04	; 4
    12ec:	ff 15       	cp	r31, r15
    12ee:	58 f5       	brcc	.+86     	; 0x1346 <vfprintf+0x6bc>
    12f0:	84 e0       	ldi	r24, 0x04	; 4
    12f2:	f8 1a       	sub	r15, r24
    12f4:	33 fe       	sbrs	r3, 3
    12f6:	1e c0       	rjmp	.+60     	; 0x1334 <vfprintf+0x6aa>
    12f8:	21 10       	cpse	r2, r1
    12fa:	26 c0       	rjmp	.+76     	; 0x1348 <vfprintf+0x6be>
    12fc:	03 ff       	sbrs	r16, 3
    12fe:	2a c0       	rjmp	.+84     	; 0x1354 <vfprintf+0x6ca>
    1300:	08 e6       	ldi	r16, 0x68	; 104
    1302:	10 e0       	ldi	r17, 0x00	; 0
    1304:	f3 2d       	mov	r31, r3
    1306:	f0 71       	andi	r31, 0x10	; 16
    1308:	3f 2e       	mov	r3, r31
    130a:	f8 01       	movw	r30, r16
    130c:	84 91       	lpm	r24, Z
    130e:	81 11       	cpse	r24, r1
    1310:	24 c0       	rjmp	.+72     	; 0x135a <vfprintf+0x6d0>
    1312:	ff 20       	and	r15, r15
    1314:	09 f4       	brne	.+2      	; 0x1318 <vfprintf+0x68e>
    1316:	e5 cc       	rjmp	.-1590   	; 0xce2 <vfprintf+0x58>
    1318:	b6 01       	movw	r22, r12
    131a:	80 e2       	ldi	r24, 0x20	; 32
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	0e 94 19 0b 	call	0x1632	; 0x1632 <fputc>
    1322:	fa 94       	dec	r15
    1324:	f6 cf       	rjmp	.-20     	; 0x1312 <vfprintf+0x688>
    1326:	f6 01       	movw	r30, r12
    1328:	86 81       	ldd	r24, Z+6	; 0x06
    132a:	97 81       	ldd	r25, Z+7	; 0x07
    132c:	26 c0       	rjmp	.+76     	; 0x137a <vfprintf+0x6f0>
    132e:	8f ef       	ldi	r24, 0xFF	; 255
    1330:	9f ef       	ldi	r25, 0xFF	; 255
    1332:	23 c0       	rjmp	.+70     	; 0x137a <vfprintf+0x6f0>
    1334:	b6 01       	movw	r22, r12
    1336:	80 e2       	ldi	r24, 0x20	; 32
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	0e 94 19 0b 	call	0x1632	; 0x1632 <fputc>
    133e:	fa 94       	dec	r15
    1340:	f1 10       	cpse	r15, r1
    1342:	f8 cf       	rjmp	.-16     	; 0x1334 <vfprintf+0x6aa>
    1344:	d9 cf       	rjmp	.-78     	; 0x12f8 <vfprintf+0x66e>
    1346:	f1 2c       	mov	r15, r1
    1348:	b6 01       	movw	r22, r12
    134a:	82 2d       	mov	r24, r2
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	0e 94 19 0b 	call	0x1632	; 0x1632 <fputc>
    1352:	d4 cf       	rjmp	.-88     	; 0x12fc <vfprintf+0x672>
    1354:	0c e6       	ldi	r16, 0x6C	; 108
    1356:	10 e0       	ldi	r17, 0x00	; 0
    1358:	d5 cf       	rjmp	.-86     	; 0x1304 <vfprintf+0x67a>
    135a:	31 10       	cpse	r3, r1
    135c:	80 52       	subi	r24, 0x20	; 32
    135e:	b6 01       	movw	r22, r12
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	0e 94 19 0b 	call	0x1632	; 0x1632 <fputc>
    1366:	0f 5f       	subi	r16, 0xFF	; 255
    1368:	1f 4f       	sbci	r17, 0xFF	; 255
    136a:	cf cf       	rjmp	.-98     	; 0x130a <vfprintf+0x680>
    136c:	23 e0       	ldi	r18, 0x03	; 3
    136e:	2f 15       	cp	r18, r15
    1370:	10 f4       	brcc	.+4      	; 0x1376 <vfprintf+0x6ec>
    1372:	83 e0       	ldi	r24, 0x03	; 3
    1374:	be cf       	rjmp	.-132    	; 0x12f2 <vfprintf+0x668>
    1376:	f1 2c       	mov	r15, r1
    1378:	c1 cf       	rjmp	.-126    	; 0x12fc <vfprintf+0x672>
    137a:	63 96       	adiw	r28, 0x13	; 19
    137c:	e2 e1       	ldi	r30, 0x12	; 18
    137e:	0c 94 ff 09 	jmp	0x13fe	; 0x13fe <__epilogue_restores__>

00001382 <__udivmodsi4>:
    1382:	a1 e2       	ldi	r26, 0x21	; 33
    1384:	1a 2e       	mov	r1, r26
    1386:	aa 1b       	sub	r26, r26
    1388:	bb 1b       	sub	r27, r27
    138a:	fd 01       	movw	r30, r26
    138c:	0d c0       	rjmp	.+26     	; 0x13a8 <__udivmodsi4_ep>

0000138e <__udivmodsi4_loop>:
    138e:	aa 1f       	adc	r26, r26
    1390:	bb 1f       	adc	r27, r27
    1392:	ee 1f       	adc	r30, r30
    1394:	ff 1f       	adc	r31, r31
    1396:	a2 17       	cp	r26, r18
    1398:	b3 07       	cpc	r27, r19
    139a:	e4 07       	cpc	r30, r20
    139c:	f5 07       	cpc	r31, r21
    139e:	20 f0       	brcs	.+8      	; 0x13a8 <__udivmodsi4_ep>
    13a0:	a2 1b       	sub	r26, r18
    13a2:	b3 0b       	sbc	r27, r19
    13a4:	e4 0b       	sbc	r30, r20
    13a6:	f5 0b       	sbc	r31, r21

000013a8 <__udivmodsi4_ep>:
    13a8:	66 1f       	adc	r22, r22
    13aa:	77 1f       	adc	r23, r23
    13ac:	88 1f       	adc	r24, r24
    13ae:	99 1f       	adc	r25, r25
    13b0:	1a 94       	dec	r1
    13b2:	69 f7       	brne	.-38     	; 0x138e <__udivmodsi4_loop>
    13b4:	60 95       	com	r22
    13b6:	70 95       	com	r23
    13b8:	80 95       	com	r24
    13ba:	90 95       	com	r25
    13bc:	9b 01       	movw	r18, r22
    13be:	ac 01       	movw	r20, r24
    13c0:	bd 01       	movw	r22, r26
    13c2:	cf 01       	movw	r24, r30
    13c4:	08 95       	ret

000013c6 <__prologue_saves__>:
    13c6:	2f 92       	push	r2
    13c8:	3f 92       	push	r3
    13ca:	4f 92       	push	r4
    13cc:	5f 92       	push	r5
    13ce:	6f 92       	push	r6
    13d0:	7f 92       	push	r7
    13d2:	8f 92       	push	r8
    13d4:	9f 92       	push	r9
    13d6:	af 92       	push	r10
    13d8:	bf 92       	push	r11
    13da:	cf 92       	push	r12
    13dc:	df 92       	push	r13
    13de:	ef 92       	push	r14
    13e0:	ff 92       	push	r15
    13e2:	0f 93       	push	r16
    13e4:	1f 93       	push	r17
    13e6:	cf 93       	push	r28
    13e8:	df 93       	push	r29
    13ea:	cd b7       	in	r28, 0x3d	; 61
    13ec:	de b7       	in	r29, 0x3e	; 62
    13ee:	ca 1b       	sub	r28, r26
    13f0:	db 0b       	sbc	r29, r27
    13f2:	0f b6       	in	r0, 0x3f	; 63
    13f4:	f8 94       	cli
    13f6:	de bf       	out	0x3e, r29	; 62
    13f8:	0f be       	out	0x3f, r0	; 63
    13fa:	cd bf       	out	0x3d, r28	; 61
    13fc:	09 94       	ijmp

000013fe <__epilogue_restores__>:
    13fe:	2a 88       	ldd	r2, Y+18	; 0x12
    1400:	39 88       	ldd	r3, Y+17	; 0x11
    1402:	48 88       	ldd	r4, Y+16	; 0x10
    1404:	5f 84       	ldd	r5, Y+15	; 0x0f
    1406:	6e 84       	ldd	r6, Y+14	; 0x0e
    1408:	7d 84       	ldd	r7, Y+13	; 0x0d
    140a:	8c 84       	ldd	r8, Y+12	; 0x0c
    140c:	9b 84       	ldd	r9, Y+11	; 0x0b
    140e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1410:	b9 84       	ldd	r11, Y+9	; 0x09
    1412:	c8 84       	ldd	r12, Y+8	; 0x08
    1414:	df 80       	ldd	r13, Y+7	; 0x07
    1416:	ee 80       	ldd	r14, Y+6	; 0x06
    1418:	fd 80       	ldd	r15, Y+5	; 0x05
    141a:	0c 81       	ldd	r16, Y+4	; 0x04
    141c:	1b 81       	ldd	r17, Y+3	; 0x03
    141e:	aa 81       	ldd	r26, Y+2	; 0x02
    1420:	b9 81       	ldd	r27, Y+1	; 0x01
    1422:	ce 0f       	add	r28, r30
    1424:	d1 1d       	adc	r29, r1
    1426:	0f b6       	in	r0, 0x3f	; 63
    1428:	f8 94       	cli
    142a:	de bf       	out	0x3e, r29	; 62
    142c:	0f be       	out	0x3f, r0	; 63
    142e:	cd bf       	out	0x3d, r28	; 61
    1430:	ed 01       	movw	r28, r26
    1432:	08 95       	ret

00001434 <__tablejump2__>:
    1434:	ee 0f       	add	r30, r30
    1436:	ff 1f       	adc	r31, r31
    1438:	05 90       	lpm	r0, Z+
    143a:	f4 91       	lpm	r31, Z
    143c:	e0 2d       	mov	r30, r0
    143e:	09 94       	ijmp

00001440 <__ftoa_engine>:
    1440:	28 30       	cpi	r18, 0x08	; 8
    1442:	08 f0       	brcs	.+2      	; 0x1446 <__ftoa_engine+0x6>
    1444:	27 e0       	ldi	r18, 0x07	; 7
    1446:	33 27       	eor	r19, r19
    1448:	da 01       	movw	r26, r20
    144a:	99 0f       	add	r25, r25
    144c:	31 1d       	adc	r19, r1
    144e:	87 fd       	sbrc	r24, 7
    1450:	91 60       	ori	r25, 0x01	; 1
    1452:	00 96       	adiw	r24, 0x00	; 0
    1454:	61 05       	cpc	r22, r1
    1456:	71 05       	cpc	r23, r1
    1458:	39 f4       	brne	.+14     	; 0x1468 <__ftoa_engine+0x28>
    145a:	32 60       	ori	r19, 0x02	; 2
    145c:	2e 5f       	subi	r18, 0xFE	; 254
    145e:	3d 93       	st	X+, r19
    1460:	30 e3       	ldi	r19, 0x30	; 48
    1462:	2a 95       	dec	r18
    1464:	e1 f7       	brne	.-8      	; 0x145e <__ftoa_engine+0x1e>
    1466:	08 95       	ret
    1468:	9f 3f       	cpi	r25, 0xFF	; 255
    146a:	30 f0       	brcs	.+12     	; 0x1478 <__ftoa_engine+0x38>
    146c:	80 38       	cpi	r24, 0x80	; 128
    146e:	71 05       	cpc	r23, r1
    1470:	61 05       	cpc	r22, r1
    1472:	09 f0       	breq	.+2      	; 0x1476 <__ftoa_engine+0x36>
    1474:	3c 5f       	subi	r19, 0xFC	; 252
    1476:	3c 5f       	subi	r19, 0xFC	; 252
    1478:	3d 93       	st	X+, r19
    147a:	91 30       	cpi	r25, 0x01	; 1
    147c:	08 f0       	brcs	.+2      	; 0x1480 <__ftoa_engine+0x40>
    147e:	80 68       	ori	r24, 0x80	; 128
    1480:	91 1d       	adc	r25, r1
    1482:	df 93       	push	r29
    1484:	cf 93       	push	r28
    1486:	1f 93       	push	r17
    1488:	0f 93       	push	r16
    148a:	ff 92       	push	r15
    148c:	ef 92       	push	r14
    148e:	19 2f       	mov	r17, r25
    1490:	98 7f       	andi	r25, 0xF8	; 248
    1492:	96 95       	lsr	r25
    1494:	e9 2f       	mov	r30, r25
    1496:	96 95       	lsr	r25
    1498:	96 95       	lsr	r25
    149a:	e9 0f       	add	r30, r25
    149c:	ff 27       	eor	r31, r31
    149e:	e6 53       	subi	r30, 0x36	; 54
    14a0:	ff 4f       	sbci	r31, 0xFF	; 255
    14a2:	99 27       	eor	r25, r25
    14a4:	33 27       	eor	r19, r19
    14a6:	ee 24       	eor	r14, r14
    14a8:	ff 24       	eor	r15, r15
    14aa:	a7 01       	movw	r20, r14
    14ac:	e7 01       	movw	r28, r14
    14ae:	05 90       	lpm	r0, Z+
    14b0:	08 94       	sec
    14b2:	07 94       	ror	r0
    14b4:	28 f4       	brcc	.+10     	; 0x14c0 <__ftoa_engine+0x80>
    14b6:	36 0f       	add	r19, r22
    14b8:	e7 1e       	adc	r14, r23
    14ba:	f8 1e       	adc	r15, r24
    14bc:	49 1f       	adc	r20, r25
    14be:	51 1d       	adc	r21, r1
    14c0:	66 0f       	add	r22, r22
    14c2:	77 1f       	adc	r23, r23
    14c4:	88 1f       	adc	r24, r24
    14c6:	99 1f       	adc	r25, r25
    14c8:	06 94       	lsr	r0
    14ca:	a1 f7       	brne	.-24     	; 0x14b4 <__ftoa_engine+0x74>
    14cc:	05 90       	lpm	r0, Z+
    14ce:	07 94       	ror	r0
    14d0:	28 f4       	brcc	.+10     	; 0x14dc <__ftoa_engine+0x9c>
    14d2:	e7 0e       	add	r14, r23
    14d4:	f8 1e       	adc	r15, r24
    14d6:	49 1f       	adc	r20, r25
    14d8:	56 1f       	adc	r21, r22
    14da:	c1 1d       	adc	r28, r1
    14dc:	77 0f       	add	r23, r23
    14de:	88 1f       	adc	r24, r24
    14e0:	99 1f       	adc	r25, r25
    14e2:	66 1f       	adc	r22, r22
    14e4:	06 94       	lsr	r0
    14e6:	a1 f7       	brne	.-24     	; 0x14d0 <__ftoa_engine+0x90>
    14e8:	05 90       	lpm	r0, Z+
    14ea:	07 94       	ror	r0
    14ec:	28 f4       	brcc	.+10     	; 0x14f8 <__ftoa_engine+0xb8>
    14ee:	f8 0e       	add	r15, r24
    14f0:	49 1f       	adc	r20, r25
    14f2:	56 1f       	adc	r21, r22
    14f4:	c7 1f       	adc	r28, r23
    14f6:	d1 1d       	adc	r29, r1
    14f8:	88 0f       	add	r24, r24
    14fa:	99 1f       	adc	r25, r25
    14fc:	66 1f       	adc	r22, r22
    14fe:	77 1f       	adc	r23, r23
    1500:	06 94       	lsr	r0
    1502:	a1 f7       	brne	.-24     	; 0x14ec <__ftoa_engine+0xac>
    1504:	05 90       	lpm	r0, Z+
    1506:	07 94       	ror	r0
    1508:	20 f4       	brcc	.+8      	; 0x1512 <__ftoa_engine+0xd2>
    150a:	49 0f       	add	r20, r25
    150c:	56 1f       	adc	r21, r22
    150e:	c7 1f       	adc	r28, r23
    1510:	d8 1f       	adc	r29, r24
    1512:	99 0f       	add	r25, r25
    1514:	66 1f       	adc	r22, r22
    1516:	77 1f       	adc	r23, r23
    1518:	88 1f       	adc	r24, r24
    151a:	06 94       	lsr	r0
    151c:	a9 f7       	brne	.-22     	; 0x1508 <__ftoa_engine+0xc8>
    151e:	84 91       	lpm	r24, Z
    1520:	10 95       	com	r17
    1522:	17 70       	andi	r17, 0x07	; 7
    1524:	41 f0       	breq	.+16     	; 0x1536 <__ftoa_engine+0xf6>
    1526:	d6 95       	lsr	r29
    1528:	c7 95       	ror	r28
    152a:	57 95       	ror	r21
    152c:	47 95       	ror	r20
    152e:	f7 94       	ror	r15
    1530:	e7 94       	ror	r14
    1532:	1a 95       	dec	r17
    1534:	c1 f7       	brne	.-16     	; 0x1526 <__ftoa_engine+0xe6>
    1536:	e0 e7       	ldi	r30, 0x70	; 112
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	68 94       	set
    153c:	15 90       	lpm	r1, Z+
    153e:	15 91       	lpm	r17, Z+
    1540:	35 91       	lpm	r19, Z+
    1542:	65 91       	lpm	r22, Z+
    1544:	95 91       	lpm	r25, Z+
    1546:	05 90       	lpm	r0, Z+
    1548:	7f e2       	ldi	r23, 0x2F	; 47
    154a:	73 95       	inc	r23
    154c:	e1 18       	sub	r14, r1
    154e:	f1 0a       	sbc	r15, r17
    1550:	43 0b       	sbc	r20, r19
    1552:	56 0b       	sbc	r21, r22
    1554:	c9 0b       	sbc	r28, r25
    1556:	d0 09       	sbc	r29, r0
    1558:	c0 f7       	brcc	.-16     	; 0x154a <__ftoa_engine+0x10a>
    155a:	e1 0c       	add	r14, r1
    155c:	f1 1e       	adc	r15, r17
    155e:	43 1f       	adc	r20, r19
    1560:	56 1f       	adc	r21, r22
    1562:	c9 1f       	adc	r28, r25
    1564:	d0 1d       	adc	r29, r0
    1566:	7e f4       	brtc	.+30     	; 0x1586 <__ftoa_engine+0x146>
    1568:	70 33       	cpi	r23, 0x30	; 48
    156a:	11 f4       	brne	.+4      	; 0x1570 <__ftoa_engine+0x130>
    156c:	8a 95       	dec	r24
    156e:	e6 cf       	rjmp	.-52     	; 0x153c <__ftoa_engine+0xfc>
    1570:	e8 94       	clt
    1572:	01 50       	subi	r16, 0x01	; 1
    1574:	30 f0       	brcs	.+12     	; 0x1582 <__ftoa_engine+0x142>
    1576:	08 0f       	add	r16, r24
    1578:	0a f4       	brpl	.+2      	; 0x157c <__ftoa_engine+0x13c>
    157a:	00 27       	eor	r16, r16
    157c:	02 17       	cp	r16, r18
    157e:	08 f4       	brcc	.+2      	; 0x1582 <__ftoa_engine+0x142>
    1580:	20 2f       	mov	r18, r16
    1582:	23 95       	inc	r18
    1584:	02 2f       	mov	r16, r18
    1586:	7a 33       	cpi	r23, 0x3A	; 58
    1588:	28 f0       	brcs	.+10     	; 0x1594 <__ftoa_engine+0x154>
    158a:	79 e3       	ldi	r23, 0x39	; 57
    158c:	7d 93       	st	X+, r23
    158e:	2a 95       	dec	r18
    1590:	e9 f7       	brne	.-6      	; 0x158c <__ftoa_engine+0x14c>
    1592:	10 c0       	rjmp	.+32     	; 0x15b4 <__ftoa_engine+0x174>
    1594:	7d 93       	st	X+, r23
    1596:	2a 95       	dec	r18
    1598:	89 f6       	brne	.-94     	; 0x153c <__ftoa_engine+0xfc>
    159a:	06 94       	lsr	r0
    159c:	97 95       	ror	r25
    159e:	67 95       	ror	r22
    15a0:	37 95       	ror	r19
    15a2:	17 95       	ror	r17
    15a4:	17 94       	ror	r1
    15a6:	e1 18       	sub	r14, r1
    15a8:	f1 0a       	sbc	r15, r17
    15aa:	43 0b       	sbc	r20, r19
    15ac:	56 0b       	sbc	r21, r22
    15ae:	c9 0b       	sbc	r28, r25
    15b0:	d0 09       	sbc	r29, r0
    15b2:	98 f0       	brcs	.+38     	; 0x15da <__ftoa_engine+0x19a>
    15b4:	23 95       	inc	r18
    15b6:	7e 91       	ld	r23, -X
    15b8:	73 95       	inc	r23
    15ba:	7a 33       	cpi	r23, 0x3A	; 58
    15bc:	08 f0       	brcs	.+2      	; 0x15c0 <__ftoa_engine+0x180>
    15be:	70 e3       	ldi	r23, 0x30	; 48
    15c0:	7c 93       	st	X, r23
    15c2:	20 13       	cpse	r18, r16
    15c4:	b8 f7       	brcc	.-18     	; 0x15b4 <__ftoa_engine+0x174>
    15c6:	7e 91       	ld	r23, -X
    15c8:	70 61       	ori	r23, 0x10	; 16
    15ca:	7d 93       	st	X+, r23
    15cc:	30 f0       	brcs	.+12     	; 0x15da <__ftoa_engine+0x19a>
    15ce:	83 95       	inc	r24
    15d0:	71 e3       	ldi	r23, 0x31	; 49
    15d2:	7d 93       	st	X+, r23
    15d4:	70 e3       	ldi	r23, 0x30	; 48
    15d6:	2a 95       	dec	r18
    15d8:	e1 f7       	brne	.-8      	; 0x15d2 <__ftoa_engine+0x192>
    15da:	11 24       	eor	r1, r1
    15dc:	ef 90       	pop	r14
    15de:	ff 90       	pop	r15
    15e0:	0f 91       	pop	r16
    15e2:	1f 91       	pop	r17
    15e4:	cf 91       	pop	r28
    15e6:	df 91       	pop	r29
    15e8:	99 27       	eor	r25, r25
    15ea:	87 fd       	sbrc	r24, 7
    15ec:	90 95       	com	r25
    15ee:	08 95       	ret

000015f0 <strnlen_P>:
    15f0:	fc 01       	movw	r30, r24
    15f2:	05 90       	lpm	r0, Z+
    15f4:	61 50       	subi	r22, 0x01	; 1
    15f6:	70 40       	sbci	r23, 0x00	; 0
    15f8:	01 10       	cpse	r0, r1
    15fa:	d8 f7       	brcc	.-10     	; 0x15f2 <strnlen_P+0x2>
    15fc:	80 95       	com	r24
    15fe:	90 95       	com	r25
    1600:	8e 0f       	add	r24, r30
    1602:	9f 1f       	adc	r25, r31
    1604:	08 95       	ret

00001606 <strcat>:
    1606:	fb 01       	movw	r30, r22
    1608:	dc 01       	movw	r26, r24
    160a:	0d 90       	ld	r0, X+
    160c:	00 20       	and	r0, r0
    160e:	e9 f7       	brne	.-6      	; 0x160a <strcat+0x4>
    1610:	11 97       	sbiw	r26, 0x01	; 1
    1612:	01 90       	ld	r0, Z+
    1614:	0d 92       	st	X+, r0
    1616:	00 20       	and	r0, r0
    1618:	e1 f7       	brne	.-8      	; 0x1612 <strcat+0xc>
    161a:	08 95       	ret

0000161c <strnlen>:
    161c:	fc 01       	movw	r30, r24
    161e:	61 50       	subi	r22, 0x01	; 1
    1620:	70 40       	sbci	r23, 0x00	; 0
    1622:	01 90       	ld	r0, Z+
    1624:	01 10       	cpse	r0, r1
    1626:	d8 f7       	brcc	.-10     	; 0x161e <strnlen+0x2>
    1628:	80 95       	com	r24
    162a:	90 95       	com	r25
    162c:	8e 0f       	add	r24, r30
    162e:	9f 1f       	adc	r25, r31
    1630:	08 95       	ret

00001632 <fputc>:
    1632:	0f 93       	push	r16
    1634:	1f 93       	push	r17
    1636:	cf 93       	push	r28
    1638:	df 93       	push	r29
    163a:	fb 01       	movw	r30, r22
    163c:	23 81       	ldd	r18, Z+3	; 0x03
    163e:	21 fd       	sbrc	r18, 1
    1640:	03 c0       	rjmp	.+6      	; 0x1648 <fputc+0x16>
    1642:	8f ef       	ldi	r24, 0xFF	; 255
    1644:	9f ef       	ldi	r25, 0xFF	; 255
    1646:	28 c0       	rjmp	.+80     	; 0x1698 <fputc+0x66>
    1648:	22 ff       	sbrs	r18, 2
    164a:	16 c0       	rjmp	.+44     	; 0x1678 <fputc+0x46>
    164c:	46 81       	ldd	r20, Z+6	; 0x06
    164e:	57 81       	ldd	r21, Z+7	; 0x07
    1650:	24 81       	ldd	r18, Z+4	; 0x04
    1652:	35 81       	ldd	r19, Z+5	; 0x05
    1654:	42 17       	cp	r20, r18
    1656:	53 07       	cpc	r21, r19
    1658:	44 f4       	brge	.+16     	; 0x166a <fputc+0x38>
    165a:	a0 81       	ld	r26, Z
    165c:	b1 81       	ldd	r27, Z+1	; 0x01
    165e:	9d 01       	movw	r18, r26
    1660:	2f 5f       	subi	r18, 0xFF	; 255
    1662:	3f 4f       	sbci	r19, 0xFF	; 255
    1664:	31 83       	std	Z+1, r19	; 0x01
    1666:	20 83       	st	Z, r18
    1668:	8c 93       	st	X, r24
    166a:	26 81       	ldd	r18, Z+6	; 0x06
    166c:	37 81       	ldd	r19, Z+7	; 0x07
    166e:	2f 5f       	subi	r18, 0xFF	; 255
    1670:	3f 4f       	sbci	r19, 0xFF	; 255
    1672:	37 83       	std	Z+7, r19	; 0x07
    1674:	26 83       	std	Z+6, r18	; 0x06
    1676:	10 c0       	rjmp	.+32     	; 0x1698 <fputc+0x66>
    1678:	eb 01       	movw	r28, r22
    167a:	09 2f       	mov	r16, r25
    167c:	18 2f       	mov	r17, r24
    167e:	00 84       	ldd	r0, Z+8	; 0x08
    1680:	f1 85       	ldd	r31, Z+9	; 0x09
    1682:	e0 2d       	mov	r30, r0
    1684:	09 95       	icall
    1686:	89 2b       	or	r24, r25
    1688:	e1 f6       	brne	.-72     	; 0x1642 <fputc+0x10>
    168a:	8e 81       	ldd	r24, Y+6	; 0x06
    168c:	9f 81       	ldd	r25, Y+7	; 0x07
    168e:	01 96       	adiw	r24, 0x01	; 1
    1690:	9f 83       	std	Y+7, r25	; 0x07
    1692:	8e 83       	std	Y+6, r24	; 0x06
    1694:	81 2f       	mov	r24, r17
    1696:	90 2f       	mov	r25, r16
    1698:	df 91       	pop	r29
    169a:	cf 91       	pop	r28
    169c:	1f 91       	pop	r17
    169e:	0f 91       	pop	r16
    16a0:	08 95       	ret

000016a2 <sprintf>:
    16a2:	ae e0       	ldi	r26, 0x0E	; 14
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	e7 e5       	ldi	r30, 0x57	; 87
    16a8:	fb e0       	ldi	r31, 0x0B	; 11
    16aa:	0c 94 f1 09 	jmp	0x13e2	; 0x13e2 <__prologue_saves__+0x1c>
    16ae:	0d 89       	ldd	r16, Y+21	; 0x15
    16b0:	1e 89       	ldd	r17, Y+22	; 0x16
    16b2:	86 e0       	ldi	r24, 0x06	; 6
    16b4:	8c 83       	std	Y+4, r24	; 0x04
    16b6:	1a 83       	std	Y+2, r17	; 0x02
    16b8:	09 83       	std	Y+1, r16	; 0x01
    16ba:	8f ef       	ldi	r24, 0xFF	; 255
    16bc:	9f e7       	ldi	r25, 0x7F	; 127
    16be:	9e 83       	std	Y+6, r25	; 0x06
    16c0:	8d 83       	std	Y+5, r24	; 0x05
    16c2:	ae 01       	movw	r20, r28
    16c4:	47 5e       	subi	r20, 0xE7	; 231
    16c6:	5f 4f       	sbci	r21, 0xFF	; 255
    16c8:	6f 89       	ldd	r22, Y+23	; 0x17
    16ca:	78 8d       	ldd	r23, Y+24	; 0x18
    16cc:	ce 01       	movw	r24, r28
    16ce:	01 96       	adiw	r24, 0x01	; 1
    16d0:	0e 94 45 06 	call	0xc8a	; 0xc8a <vfprintf>
    16d4:	2f 81       	ldd	r18, Y+7	; 0x07
    16d6:	38 85       	ldd	r19, Y+8	; 0x08
    16d8:	f8 01       	movw	r30, r16
    16da:	e2 0f       	add	r30, r18
    16dc:	f3 1f       	adc	r31, r19
    16de:	10 82       	st	Z, r1
    16e0:	2e 96       	adiw	r28, 0x0e	; 14
    16e2:	e4 e0       	ldi	r30, 0x04	; 4
    16e4:	0c 94 0d 0a 	jmp	0x141a	; 0x141a <__epilogue_restores__+0x1c>

000016e8 <__ultoa_invert>:
    16e8:	fa 01       	movw	r30, r20
    16ea:	aa 27       	eor	r26, r26
    16ec:	28 30       	cpi	r18, 0x08	; 8
    16ee:	51 f1       	breq	.+84     	; 0x1744 <__ultoa_invert+0x5c>
    16f0:	20 31       	cpi	r18, 0x10	; 16
    16f2:	81 f1       	breq	.+96     	; 0x1754 <__ultoa_invert+0x6c>
    16f4:	e8 94       	clt
    16f6:	6f 93       	push	r22
    16f8:	6e 7f       	andi	r22, 0xFE	; 254
    16fa:	6e 5f       	subi	r22, 0xFE	; 254
    16fc:	7f 4f       	sbci	r23, 0xFF	; 255
    16fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1700:	9f 4f       	sbci	r25, 0xFF	; 255
    1702:	af 4f       	sbci	r26, 0xFF	; 255
    1704:	b1 e0       	ldi	r27, 0x01	; 1
    1706:	3e d0       	rcall	.+124    	; 0x1784 <__ultoa_invert+0x9c>
    1708:	b4 e0       	ldi	r27, 0x04	; 4
    170a:	3c d0       	rcall	.+120    	; 0x1784 <__ultoa_invert+0x9c>
    170c:	67 0f       	add	r22, r23
    170e:	78 1f       	adc	r23, r24
    1710:	89 1f       	adc	r24, r25
    1712:	9a 1f       	adc	r25, r26
    1714:	a1 1d       	adc	r26, r1
    1716:	68 0f       	add	r22, r24
    1718:	79 1f       	adc	r23, r25
    171a:	8a 1f       	adc	r24, r26
    171c:	91 1d       	adc	r25, r1
    171e:	a1 1d       	adc	r26, r1
    1720:	6a 0f       	add	r22, r26
    1722:	71 1d       	adc	r23, r1
    1724:	81 1d       	adc	r24, r1
    1726:	91 1d       	adc	r25, r1
    1728:	a1 1d       	adc	r26, r1
    172a:	20 d0       	rcall	.+64     	; 0x176c <__ultoa_invert+0x84>
    172c:	09 f4       	brne	.+2      	; 0x1730 <__ultoa_invert+0x48>
    172e:	68 94       	set
    1730:	3f 91       	pop	r19
    1732:	2a e0       	ldi	r18, 0x0A	; 10
    1734:	26 9f       	mul	r18, r22
    1736:	11 24       	eor	r1, r1
    1738:	30 19       	sub	r19, r0
    173a:	30 5d       	subi	r19, 0xD0	; 208
    173c:	31 93       	st	Z+, r19
    173e:	de f6       	brtc	.-74     	; 0x16f6 <__ultoa_invert+0xe>
    1740:	cf 01       	movw	r24, r30
    1742:	08 95       	ret
    1744:	46 2f       	mov	r20, r22
    1746:	47 70       	andi	r20, 0x07	; 7
    1748:	40 5d       	subi	r20, 0xD0	; 208
    174a:	41 93       	st	Z+, r20
    174c:	b3 e0       	ldi	r27, 0x03	; 3
    174e:	0f d0       	rcall	.+30     	; 0x176e <__ultoa_invert+0x86>
    1750:	c9 f7       	brne	.-14     	; 0x1744 <__ultoa_invert+0x5c>
    1752:	f6 cf       	rjmp	.-20     	; 0x1740 <__ultoa_invert+0x58>
    1754:	46 2f       	mov	r20, r22
    1756:	4f 70       	andi	r20, 0x0F	; 15
    1758:	40 5d       	subi	r20, 0xD0	; 208
    175a:	4a 33       	cpi	r20, 0x3A	; 58
    175c:	18 f0       	brcs	.+6      	; 0x1764 <__ultoa_invert+0x7c>
    175e:	49 5d       	subi	r20, 0xD9	; 217
    1760:	31 fd       	sbrc	r19, 1
    1762:	40 52       	subi	r20, 0x20	; 32
    1764:	41 93       	st	Z+, r20
    1766:	02 d0       	rcall	.+4      	; 0x176c <__ultoa_invert+0x84>
    1768:	a9 f7       	brne	.-22     	; 0x1754 <__ultoa_invert+0x6c>
    176a:	ea cf       	rjmp	.-44     	; 0x1740 <__ultoa_invert+0x58>
    176c:	b4 e0       	ldi	r27, 0x04	; 4
    176e:	a6 95       	lsr	r26
    1770:	97 95       	ror	r25
    1772:	87 95       	ror	r24
    1774:	77 95       	ror	r23
    1776:	67 95       	ror	r22
    1778:	ba 95       	dec	r27
    177a:	c9 f7       	brne	.-14     	; 0x176e <__ultoa_invert+0x86>
    177c:	00 97       	sbiw	r24, 0x00	; 0
    177e:	61 05       	cpc	r22, r1
    1780:	71 05       	cpc	r23, r1
    1782:	08 95       	ret
    1784:	9b 01       	movw	r18, r22
    1786:	ac 01       	movw	r20, r24
    1788:	0a 2e       	mov	r0, r26
    178a:	06 94       	lsr	r0
    178c:	57 95       	ror	r21
    178e:	47 95       	ror	r20
    1790:	37 95       	ror	r19
    1792:	27 95       	ror	r18
    1794:	ba 95       	dec	r27
    1796:	c9 f7       	brne	.-14     	; 0x178a <__ultoa_invert+0xa2>
    1798:	62 0f       	add	r22, r18
    179a:	73 1f       	adc	r23, r19
    179c:	84 1f       	adc	r24, r20
    179e:	95 1f       	adc	r25, r21
    17a0:	a0 1d       	adc	r26, r0
    17a2:	08 95       	ret

000017a4 <_exit>:
    17a4:	f8 94       	cli

000017a6 <__stop_program>:
    17a6:	ff cf       	rjmp	.-2      	; 0x17a6 <__stop_program>
